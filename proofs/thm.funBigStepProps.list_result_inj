Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.funBigStepProps
% (100834)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 108
% Passive clauses: 3660
% Generated clauses: 14405
% Final active clauses: 102
% Final passive clauses: 3316
% Input formulas: 28
% Initial clauses: 58
% 
% Duplicate literals: 841
% Trivial inequalities: 180
% Fw subsumption resolutions: 1925
% Fw demodulations: 555
% Bw demodulations: 3
% 
% Simple tautologies: 297
% Equational tautologies: 87
% Forward subsumptions: 5075
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 115
% Factoring: 2
% Forward superposition: 5694
% Backward superposition: 4424
% Self superposition: 257
% Equality factoring: 194
% Equality resolution: 34
% 
% Split clauses: 438
% Split components: 911
% SAT solver clauses: 1215
% SAT solver unit clauses: 7
% SAT solver binary clauses: 189
% 
% Sat splits: 437
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1208
% TWLsolver calls for satisfiability: 181
% 
% Memory used [KB]: 7803
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.funBigStepProps
% (100858)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 43
% Passive clauses: 200
% Generated clauses: 5183
% Final active clauses: 40
% Final passive clauses: 155
% Input formulas: 28
% Initial clauses: 58
% 
% Duplicate literals: 643
% Trivial inequalities: 36
% Fw subsumption resolutions: 287
% Fw demodulations: 12
% Bw demodulations: 1
% Condensations: 1122
% Global subsumptions: 9
% 
% Simple tautologies: 122
% Equational tautologies: 77
% Forward subsumptions: 1904
% 
% Binary resolution: 54
% Factoring: 2
% Forward superposition: 1052
% Backward superposition: 1377
% Self superposition: 201
% Equality factoring: 166
% Equality resolution: 11
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 589
% SAT solver unit clauses: 74
% SAT solver binary clauses: 92
% SAT solver learnt clauses: 18
% 
% Sat splits: 9
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 553
% TWLsolver calls for satisfiability: 182
% 
% Memory used [KB]: 4221
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 137 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.funBigStepProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.funBigStepProps
% SZS output start Proof for thm.funBigStepProps
fof(f45813,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f176,f179,f197,f201,f199,f203,f1207,f1208,f1209,f1319,f2361,f2326,f2371,f1320,f2399,f2429,f2417,f2430,f2416,f2433,f1321,f2431,f2701,f2704,f2709,f2711,f2715,f2717,f2719,f2723,f2728,f2730,f2734,f2736,f2738,f3026,f3027,f3028,f3029,f3030,f3031,f3032,f3033,f3034,f3035,f3146,f3149,f3152,f3154,f3156,f3159,f3162,f3164,f3197,f3200,f3298,f3299,f4101,f4229,f4248,f4235,f4239,f4241,f4249,f4303,f4312,f4304,f4305,f4306,f4316,f4309,f4307,f4313,f4834,f4837,f4848,f7615,f7660,f7659,f9609,f9610,f9612,f9613,f9751,f9681,f9753,f9754,f9684,f9686,f9687,f9688,f9689,f9690,f9691,f5613,f4850,f9768,f10155,f12450,f12506,f12451,f12816,f12854,f12815,f12855,f12814,f12856,f18488,f18511,f18572,f18574,f18575,f18576,f18457,f18577,f18580,f18581,f18582,f18586,f18589,f18591,f18592,f18594,f18595,f18597,f18598,f18601,f18573,f18610,f18611,f18425,f18612,f18613,f18615,f18616,f18618,f18621,f18623,f18590,f18646,f18649,f18647,f18655,f18656,f18696,f18700,f17800,f18705,f18708,f18713,f17630,f18701,f18717,f18720,f18722,f17413,f17391,f18726,f4310,f17305,f17277,f18723,f13036,f18733,f18735,f10157,f12936,f12935,f18724,f12933,f18742,f18744,f4315,f18749,f19145,f19146,f19147,f19159,f24676,f24677,f24690,f24693,f26465,f26463,f26488,f26804,f26828,f26801,f26829,f26850,f26854,f26851,f26865,f26866,f27535,f27536,f27538,f27539,f28474,f28476,f28494,f28495,f28475,f30136,f30152,f30153,f30158,f30159,f30170,f30137,f30268,f30271,f30273,f30274,f30275,f30276,f30277,f30278,f30279,f30280,f30281,f30282,f30283,f30284,f30285,f30286,f30287,f30288,f30289,f30290,f30291,f30292,f30293,f30294,f30295,f30296,f30297,f30298,f30299,f30300,f30301,f30302,f30303,f30304,f30305,f30306,f30307,f30308,f30309,f30310,f30311,f30312,f30313,f30314,f30315,f30316,f30317,f30318,f30319,f30320,f30321,f30322,f30323,f30324,f30325,f30326,f30327,f30328,f30329,f30330,f30331,f30332,f30333,f30334,f30335,f30336,f30337,f30338,f30339,f30340,f30341,f30342,f30343,f30344,f30345,f30346,f30347,f30348,f30349,f30350,f30351,f30352,f30355,f30358,f30359,f30360,f30361,f30362,f30363,f30364,f30365,f30366,f30367,f30368,f30369,f30370,f30371,f30372,f30373,f30374,f30375,f30376,f30377,f30378,f30379,f30380,f30381,f30382,f30383,f30384,f30385,f30386,f30387,f30388,f30389,f30390,f30391,f30392,f30393,f30394,f30395,f30396,f30397,f30398,f30399,f30400,f30401,f30402,f30403,f30404,f30405,f30406,f30407,f30408,f30409,f30410,f30411,f30412,f30413,f30414,f30415,f30416,f30417,f30418,f30419,f30420,f30421,f30422,f30423,f30424,f30426,f30428,f30430,f30435,f30441,f30443,f30444,f30445,f30446,f30447,f30448,f30449,f30450,f30451,f30452,f30453,f30454,f30455,f30456,f30457,f30458,f30459,f30460,f30461,f30462,f30463,f30464,f30465,f30466,f30467,f30468,f30469,f30470,f30471,f30472,f30473,f30474,f30475,f30476,f30477,f30478,f30479,f30480,f30481,f30482,f30483,f30484,f30485,f30486,f30487,f30488,f30489,f30490,f30491,f30492,f30493,f30494,f30495,f30496,f30497,f30498,f30499,f30500,f30501,f30502,f30503,f30504,f30505,f30506,f30507,f30512,f30517,f30518,f30519,f30520,f30521,f30522,f30523,f30529,f30882,f30883,f32048,f32069,f31917,f32078,f32079,f32083,f32098,f32050,f33443,f8217,f33533,f8216,f33535,f33537,f33538,f4232,f33539,f33547,f33548,f4104,f33549,f33657,f4230,f33719,f34442,f33658,f4102,f34470,f33579,f33578,f34474,f34476,f33626,f34478,f34472,f34494,f34495,f34809,f35234,f35236,f35238,f38472,f38473,f39429,f39437,f39440,f39442,f39479,f39430,f39481,f39482,f41354,f41355,f41356,f41374,f41391,f41376,f41392,f41394,f41395,f41390,f41411,f41416,f41420,f41424,f41426,f41467,f41684,f9752,f41471,f9760,f41472,f9756,f41473,f9757,f41474,f9755,f41475,f9761,f41476,f9758,f41477,f9759,f41685,f2428,f41686,f30171,f198,f41687,f41951,f41952,f41953,f41965,f41995,f41996,f24691,f42001,f44464,f177,f44465,f45811])).
fof(f45811,plain,(
  $false | ($spl26 | $spl28 | $spl172)),
  inference(subsumption_resolution,[],[f45810,f108])).
fof(f108,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) & s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),sK3)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f68])).
fof(f68,plain,(
  ? [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) & s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ~! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) => s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),X3))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) => s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),X3))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X8))) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X9))) => s('type.semanticPrimitives.result'(X6,X7),X8) = s('type.semanticPrimitives.result'(X6,X7),X9))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X8))) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X9))) => s('type.semanticPrimitives.result'(X6,X7),X8) = s('type.semanticPrimitives.result'(X6,X7),X9))),
  file('thm.funBigStepProps.list_result_inj','thm.funBigStepProps.list_result_inj')).
fof(f45810,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),sK3) | ($spl26 | $spl28 | $spl172)),
  inference(forward_demodulation,[],[f45791,f35299])).
fof(f35299,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | $spl28),
  inference(unit_resulting_resolution,[],[f34483,f733])).
fof(f733,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),X10))) = s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8)))) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))))) )),
  inference(superposition,[],[f155,f157])).
fof(f157,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : ! [X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6,X7] : ! [X21] : (? [X19] : s('type.semanticPrimitives.result'(X6,X7),X21) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X19))) | ? [X14] : s('type.semanticPrimitives.result'(X6,X7),X21) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X14))))),
  file('thm.funBigStepProps.list_result_inj','thm.semanticPrimitives.result_nchotomy')).
fof(f155,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : ! [X2] : s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6,X7] : ! [X14] : s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X14)))))),
  file('thm.funBigStepProps.list_result_inj','thm.funBigStep.list_result_def|split|1')).
fof(f34483,plain,(
  ( ! [X32] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X32))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) | $spl28),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4230,f4243,f4242,f4247,f4240,f4303,f4304,f4305,f4306,f4307,f4696,f4834,f4837,f5021,f5024,f5025,f5027,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5059,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6150,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6178,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6247,f6249,f6250,f6251,f6252,f6254,f6299,f6366,f6367,f6368,f6369,f6372,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6360,f6394,f6396,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6497,f6498,f6501,f6517,f6525,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6736,f6741,f6752,f6776,f6775,f6779,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f6932,f6933,f6941,f6939,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7014,f7015,f7017,f7019,f7024,f7026,f7033,f7036,f7038,f7052,f7147,f7148,f7149,f7150,f7152,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7285,f7286,f7251,f7255,f7258,f7291,f7302,f7378,f7337,f7338,f7350,f7355,f7383,f7483,f7388,f7496,f7417,f7422,f7424,f7431,f7434,f7436,f7438,f7442,f7447,f7448,f7449,f7452,f7499,f7462,f7467,f7469,f7476,f7479,f7481,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7537,f7539,f7540,f7541,f7542,f7544,f7545,f7596,f7547,f7548,f7550,f7553,f7615,f7618,f7622,f7626,f7631,f7643,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8967,f8941,f9002,f9001,f9000,f8999,f8992,f9006,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9409,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11179,f11253,f11252,f11251,f11281,f11277,f11278,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17953,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f13366,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f15429,f14915,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32331,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f107,f33538,f33541,f33548,f33657,f34333,f34348,f34325,f33738,f34466,f33658,f34482])).
fof(f34482,plain,(
  ( ! [X32] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X32))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) )),
  inference(forward_demodulation,[],[f33671,f107])).
fof(f33671,plain,(
  ( ! [X32] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X32))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f751,f107])).
fof(f34466,plain,(
  ( ! [X31] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X31))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X31) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) )),
  inference(forward_demodulation,[],[f33670,f107])).
fof(f33670,plain,(
  ( ! [X31] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X31))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X31) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f749,f107])).
fof(f33738,plain,(
  ( ! [X47] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),X47))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) )),
  inference(forward_demodulation,[],[f33678,f107])).
fof(f33678,plain,(
  ( ! [X47] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),X47))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f6172,f107])).
fof(f34325,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6204,f748])).
fof(f34348,plain,(
  ( ! [X70,X68,X72,X71,X69] : (s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),X70))) = s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69)),X69,X68)))) | s('type.semanticPrimitives.result'(X68,X69),X70) != s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72)))) )),
  inference(forward_demodulation,[],[f34320,f765])).
fof(f34320,plain,(
  ( ! [X70,X68,X72,X71,X69] : (s('type.semanticPrimitives.result'(X68,X69),X70) != s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))) | s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69))))) = s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69)),X69,X68))))) )),
  inference(superposition,[],[f6204,f765])).
fof(f34333,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f34332,f155])).
fof(f34332,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f34298,f765])).
fof(f34298,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f765,f6204])).
fof(f33541,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))))) )),
  inference(forward_demodulation,[],[f7324,f107])).
fof(f7324,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f743,f107])).
fof(f107,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))),
  inference(cnf_transformation,[],[f78])).
fof(f33291,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.semanticPrimitives.result'(X71,X72),X73) = s('type.semanticPrimitives.result'(X71,X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X71,X72),X73)),X74,'type.semanticPrimitives.result'(X71,X72)),X72,X71)))) | s('type.semanticPrimitives.result'('type.list.list'(X71),X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),X75))) != s('type.semanticPrimitives.result'('type.list.list'(X71),X72),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X71,X72),X73)))) )),
  inference(forward_demodulation,[],[f33276,f765])).
fof(f33276,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.semanticPrimitives.result'('type.list.list'(X71),X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),X75))) != s('type.semanticPrimitives.result'('type.list.list'(X71),X72),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X71,X72),X73))) | s('type.semanticPrimitives.result'(X71,X72),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X71,X72),X73)),X74,'type.semanticPrimitives.result'(X71,X72))) = s('type.semanticPrimitives.result'(X71,X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X71,X72),X73)),X74,'type.semanticPrimitives.result'(X71,X72)),X72,X71))))) )),
  inference(superposition,[],[f747,f765])).
fof(f33253,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6) != s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X7))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X7,X5,X4)))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),sK4(X6,X5,'type.list.list'(X4))),s('type.list.list'('type.list.list'(X4)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f747,f748])).
fof(f33067,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.semanticPrimitives.result'(X70,X71),X72) = s('type.semanticPrimitives.result'(X70,X71),'const.semanticPrimitives.Rval_1'(s(X70,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X70,X71),X72)),X73,'type.semanticPrimitives.result'(X70,X71)),X71,X70)))) | s('type.semanticPrimitives.result'('type.list.list'(X70),X71),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X70),X74))) != s('type.semanticPrimitives.result'('type.list.list'(X70),X71),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X70,X71),X72)))) )),
  inference(forward_demodulation,[],[f33048,f765])).
fof(f33048,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.semanticPrimitives.result'('type.list.list'(X70),X71),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X70),X74))) != s('type.semanticPrimitives.result'('type.list.list'(X70),X71),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X70,X71),X72))) | s('type.semanticPrimitives.result'(X70,X71),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X70,X71),X72)),X73,'type.semanticPrimitives.result'(X70,X71))) = s('type.semanticPrimitives.result'(X70,X71),'const.semanticPrimitives.Rval_1'(s(X70,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X70,X71),X72)),X73,'type.semanticPrimitives.result'(X70,X71)),X71,X70))))) )),
  inference(superposition,[],[f6172,f765])).
fof(f33063,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X55)),X58))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X55),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X55,X56),X57))))) | s('type.semanticPrimitives.result'(X55,X56),X57) = s('type.semanticPrimitives.result'(X55,X56),'const.semanticPrimitives.Rval_1'(s(X55,sK4(X57,X56,X55))))) )),
  inference(subsumption_resolution,[],[f33044,f164])).
fof(f33044,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X55)),X58))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X55),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X55,X56),X57))))) | s('type.semanticPrimitives.result'('type.list.list'(X55),X56),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X56),sK5(X57,X56,X55)))) = s('type.semanticPrimitives.result'('type.list.list'(X55),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X55),sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X56),sK5(X57,X56,X55))),X56,'type.list.list'(X55))))) | s('type.semanticPrimitives.result'(X55,X56),X57) = s('type.semanticPrimitives.result'(X55,X56),'const.semanticPrimitives.Rval_1'(s(X55,sK4(X57,X56,X55))))) )),
  inference(superposition,[],[f6172,f733])).
fof(f33057,plain,(
  ( ! [X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X18))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),X17))) | s('type.semanticPrimitives.result'(bool,X16),X17) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X17,X16,bool))) )),
  inference(subsumption_resolution,[],[f33032,f164])).
fof(f33032,plain,(
  ( ! [X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X18))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),X17))) | s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,bool)))) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,bool))),X16,bool)))) | s('type.semanticPrimitives.result'(bool,X16),X17) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X17,X16,bool))) )),
  inference(superposition,[],[f6172,f730])).
fof(f33056,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f33028,f164])).
fof(f33028,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))),X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6172,f748])).
fof(f33026,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'('type.list.list'(X12),X13),X14) != s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X15))) | s('type.semanticPrimitives.result'(X12,X13),X15) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X15,X13,X12)))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,'type.list.list'(X12)))))) )),
  inference(superposition,[],[f6172,f733])).
fof(f33024,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))) != s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X7))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK4(X7,X5,X4)))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f6172,f748])).
fof(f33011,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))) )),
  inference(unit_resulting_resolution,[],[f164,f6172])).
fof(f32332,plain,(
  ( ! [X516,X512,X514,X513,X515] : (s(bool,'T_0') != s(bool,X515) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X515),s('type.list.list'(bool),X516))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X512,sK6(X513,X514,bool,X512)))),s('type.list.list'(bool),X516))) | s(fun(X512,bool),X513) = s(fun(X512,bool),X514) | s(bool,'T_0') = s(bool,f(s(X512,sK6(X513,X514,bool,X512))))) )),
  inference(superposition,[],[f918,f4847])).
fof(f32331,plain,(
  ( ! [X509,X511,X507,X508,X510] : (s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,X511))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X511)),X510,bool)) = s(bool,g(s(X507,sK6(X508,X509,bool,X507)))) | s(fun(X507,bool),X508) = s(fun(X507,bool),X509) | s(bool,'T_0') = s(bool,f(s(X507,sK6(X508,X509,bool,X507))))) )),
  inference(superposition,[],[f789,f4847])).
fof(f32330,plain,(
  ( ! [X505,X502,X504,X506,X503] : (s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,X506))) | s(bool,X506) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(X502,sK6(X503,X504,bool,X502))))),X505,bool)) | s(fun(X502,bool),X503) = s(fun(X502,bool),X504) | s(bool,'T_0') = s(bool,f(s(X502,sK6(X503,X504,bool,X502))))) )),
  inference(superposition,[],[f789,f4847])).
fof(f32328,plain,(
  ( ! [X494,X496,X493,X495,X497] : (s('type.semanticPrimitives.result'(bool,X496),X497) != s('type.semanticPrimitives.result'(bool,X496),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK4(X497,X496,bool)) = s(bool,g(s(X493,sK6(X494,X495,bool,X493)))) | s('type.semanticPrimitives.result'(bool,X496),X497) = s('type.semanticPrimitives.result'(bool,X496),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X496),sK5(X497,X496,bool)))) | s(fun(X493,bool),X494) = s(fun(X493,bool),X495) | s(bool,'T_0') = s(bool,f(s(X493,sK6(X494,X495,bool,X493))))) )),
  inference(superposition,[],[f749,f4847])).
fof(f32325,plain,(
  ( ! [X478,X480,X482,X477,X479,X481] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X480),X481) != s('type.semanticPrimitives.result'('type.list.list'(bool),X480),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X480),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X480),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X480),X481))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X480),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X480),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X477,sK6(X478,X479,bool,X477)))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(fun(X477,bool),X478) = s(fun(X477,bool),X479) | s(bool,'T_0') = s(bool,f(s(X477,sK6(X478,X479,bool,X477))))) )),
  inference(superposition,[],[f667,f4847])).
fof(f32324,plain,(
  ( ! [X476,X472,X474,X471,X475,X473] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X474),X475),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X474),X476))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X474),X475),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X474),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X474),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X474),X476) = s('type.semanticPrimitives.result'('type.list.list'(bool),X474),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X471,sK6(X472,X473,bool,X471)))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(fun(X471,bool),X472) = s(fun(X471,bool),X473) | s(bool,'T_0') = s(bool,f(s(X471,sK6(X472,X473,bool,X471))))) )),
  inference(superposition,[],[f665,f4847])).
fof(f32323,plain,(
  ( ! [X466,X469,X465,X467,X468,X470,X464] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X467)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X467),X468),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X467)),X469))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X467)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X467),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X467),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X467)),X470))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X467),X468) = s('type.semanticPrimitives.result'('type.list.list'(bool),X467),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X464,sK6(X465,X466,bool,X464)))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(fun(X464,bool),X465) = s(fun(X464,bool),X466) | s(bool,'T_0') = s(bool,f(s(X464,sK6(X465,X466,bool,X464))))) )),
  inference(superposition,[],[f661,f4847])).
fof(f32321,plain,(
  ( ! [X455,X457,X454,X456,X458] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X457),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X458))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X457),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X457),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X458) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X454,sK6(X455,X456,bool,X454)))),s('type.list.list'(bool),'const.list.NIL_0'))) | s(fun(X454,bool),X455) = s(fun(X454,bool),X456) | s(bool,'T_0') = s(bool,f(s(X454,sK6(X455,X456,bool,X454))))) )),
  inference(superposition,[],[f657,f4847])).
fof(f32320,plain,(
  ( ! [X453,X449,X451,X452,X448,X450] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X451),X452) != s('type.semanticPrimitives.result'('type.list.list'(bool),X451),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X451),X453),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X451),X452))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X451),X453),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X451),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X451),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X448,sK6(X449,X450,bool,X448)))))))))) | s(fun(X448,bool),X449) = s(fun(X448,bool),X450) | s(bool,'T_0') = s(bool,f(s(X448,sK6(X449,X450,bool,X448))))) )),
  inference(superposition,[],[f654,f4847])).
fof(f32319,plain,(
  ( ! [X445,X447,X443,X444,X446,X442] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X445),X446),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X445),X447))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X445),X446),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X445),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X445),X447) = s('type.semanticPrimitives.result'('type.list.list'(bool),X445),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X445),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X442,sK6(X443,X444,bool,X442)))))))) | s(fun(X442,bool),X443) = s(fun(X442,bool),X444) | s(bool,'T_0') = s(bool,f(s(X442,sK6(X443,X444,bool,X442))))) )),
  inference(superposition,[],[f652,f4847])).
fof(f32318,plain,(
  ( ! [X441,X436,X438,X440,X437,X439,X435] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X438)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X438),X439),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X438)),X440))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X438)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X438),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X438)),X441))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X438),X439) = s('type.semanticPrimitives.result'('type.list.list'(bool),X438),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X438),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X435,sK6(X436,X437,bool,X435)))))))) | s(fun(X435,bool),X436) = s(fun(X435,bool),X437) | s(bool,'T_0') = s(bool,f(s(X435,sK6(X436,X437,bool,X435))))) )),
  inference(superposition,[],[f648,f4847])).
fof(f32311,plain,(
  ( ! [X399,X401,X398,X400,X402] : (s(bool,'T_0') != s(bool,X401) | s('type.semanticPrimitives.result'(bool,X402),'const.semanticPrimitives.Rval_1'(s(bool,X401))) = s('type.semanticPrimitives.result'(bool,X402),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X398,sK6(X399,X400,bool,X398)))))) | s(fun(X398,bool),X399) = s(fun(X398,bool),X400) | s(bool,'T_0') = s(bool,f(s(X398,sK6(X399,X400,bool,X398))))) )),
  inference(superposition,[],[f161,f4847])).
fof(f32309,plain,(
  ( ! [X389,X391,X388,X390,X392] : (s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,X392))) | s(bool,X392) = s(bool,g(s(X388,sK6(X389,X390,bool,X388)))) | s(fun(X388,bool),X389) = s(fun(X388,bool),X390) | s(bool,'T_0') = s(bool,f(s(X388,sK6(X389,X390,bool,X388))))) )),
  inference(superposition,[],[f160,f4847])).
fof(f32304,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X363))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X364),s('type.list.list'(bool),X365))) | s(bool,X364) = s(bool,g(s(X360,sK6(X361,X362,bool,X360)))) | s(fun(X360,bool),X361) = s(fun(X360,bool),X362) | s(bool,'T_0') = s(bool,f(s(X360,sK6(X361,X362,bool,X360))))) )),
  inference(superposition,[],[f148,f4847])).
fof(f32394,plain,(
  ( ! [X229,X227,X230,X228] : (s(bool,X230) = s(bool,g(s(X227,sK6(X228,X229,bool,X227)))) | s(bool,'F_0') = s(bool,X230) | s(fun(X227,bool),X228) = s(fun(X227,bool),X229) | s(bool,'T_0') = s(bool,f(s(X227,sK6(X228,X229,bool,X227))))) )),
  inference(subsumption_resolution,[],[f32269,f109])).
fof(f32269,plain,(
  ( ! [X229,X227,X230,X228] : (~p(s(bool,'T_0')) | s(bool,X230) = s(bool,g(s(X227,sK6(X228,X229,bool,X227)))) | s(bool,'F_0') = s(bool,X230) | s(fun(X227,bool),X228) = s(fun(X227,bool),X229) | s(bool,'T_0') = s(bool,f(s(X227,sK6(X228,X229,bool,X227))))) )),
  inference(superposition,[],[f985,f4847])).
fof(f32390,plain,(
  ( ! [X198,X202,X200,X199,X201] : (s('type.semanticPrimitives.result'(bool,X201),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X201),'const.semanticPrimitives.Rval_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(X198,sK6(X199,X200,bool,X198))))),X201,bool)) | s(fun(X198,bool),X199) = s(fun(X198,bool),X200) | s(bool,'T_0') = s(bool,f(s(X198,sK6(X199,X200,bool,X198))))) )),
  inference(subsumption_resolution,[],[f32263,f161])).
fof(f32263,plain,(
  ( ! [X198,X202,X200,X199,X201] : (s('type.semanticPrimitives.result'(bool,X201),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X201),'const.semanticPrimitives.Rval_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(X198,sK6(X199,X200,bool,X198))))),X201,bool)) | s(bool,'T_0') = s(bool,X202) | s(fun(X198,bool),X199) = s(fun(X198,bool),X200) | s(bool,'T_0') = s(bool,f(s(X198,sK6(X199,X200,bool,X198))))) )),
  inference(superposition,[],[f784,f4847])).
fof(f32339,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,X157))) = s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X153,sK6(X154,X155,bool,X153)))))) | s(bool,X157) = s(bool,X158) | s(bool,'T_0') = s(bool,X158) | s(fun(X153,bool),X154) = s(fun(X153,bool),X155) | s(bool,'T_0') = s(bool,f(s(X153,sK6(X154,X155,bool,X153))))) )),
  inference(trivial_inequality_removal,[],[f32255])).
fof(f32255,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,X157))) = s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X153,sK6(X154,X155,bool,X153)))))) | s(bool,X157) = s(bool,X158) | s(bool,'T_0') = s(bool,X158) | s(fun(X153,bool),X154) = s(fun(X153,bool),X155) | s(bool,'T_0') = s(bool,f(s(X153,sK6(X154,X155,bool,X153))))) )),
  inference(superposition,[],[f359,f4847])).
fof(f32388,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X0,sK6(X1,X2,bool,X0)))))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) )),
  inference(condensation,[],[f32387])).
fof(f32387,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X2,sK6(X3,X4,bool,X2)))))) | s(fun(X2,bool),X3) = s(fun(X2,bool),X4) | s(bool,'T_0') = s(bool,f(s(X2,sK6(X3,X4,bool,X2))))) )),
  inference(condensation,[],[f32386])).
fof(f32386,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'(bool,X151),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X151),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X147,sK6(X148,X149,bool,X147)))))) | s(bool,X150) = s(bool,X152) | s(bool,'T_0') = s(bool,X152) | s(fun(X147,bool),X148) = s(fun(X147,bool),X149) | s(bool,'T_0') = s(bool,f(s(X147,sK6(X148,X149,bool,X147))))) )),
  inference(subsumption_resolution,[],[f32254,f171])).
fof(f32254,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s(bool,'T_0') != s(bool,X150) | s('type.semanticPrimitives.result'(bool,X151),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X151),'const.semanticPrimitives.Rval_1'(s(bool,g(s(X147,sK6(X148,X149,bool,X147)))))) | s(bool,X150) = s(bool,X152) | s(bool,'T_0') = s(bool,X152) | s(fun(X147,bool),X148) = s(fun(X147,bool),X149) | s(bool,'T_0') = s(bool,f(s(X147,sK6(X148,X149,bool,X147))))) )),
  inference(superposition,[],[f343,f4847])).
fof(f32383,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,X20)) | s(bool,X20) = s(bool,g(s(X17,sK6(X18,X19,bool,X17)))) | s(fun(X17,bool),X18) = s(fun(X17,bool),X19) | s(bool,'T_0') = s(bool,f(s(X17,sK6(X18,X19,bool,X17))))) )),
  inference(subsumption_resolution,[],[f32231,f109])).
fof(f32231,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X20)) | s(bool,X20) = s(bool,g(s(X17,sK6(X18,X19,bool,X17)))) | s(fun(X17,bool),X18) = s(fun(X17,bool),X19) | s(bool,'T_0') = s(bool,f(s(X17,sK6(X18,X19,bool,X17))))) )),
  inference(superposition,[],[f154,f4847])).
fof(f32367,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f32366])).
fof(f32366,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (s(bool,'T_0') = s(bool,X45) | s(fun(X42,bool),X43) = s(fun(X42,bool),X44) | s(bool,'T_0') = s(bool,f(s(X42,sK6(X43,X44,bool,X42)))) | s(bool,X46) = s(bool,g(s(X42,sK6(X43,X44,bool,X42)))) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) )),
  inference(duplicate_literal_removal,[],[f32212])).
fof(f32212,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (s(bool,'T_0') = s(bool,X45) | s(fun(X42,bool),X43) = s(fun(X42,bool),X44) | s(bool,'T_0') = s(bool,f(s(X42,sK6(X43,X44,bool,X42)))) | s(bool,X46) = s(bool,g(s(X42,sK6(X43,X44,bool,X42)))) | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f4847,f282])).
fof(f31447,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),X9) != s('type.semanticPrimitives.result'(bool,X8),X10) | s('type.semanticPrimitives.result'(bool,X8),X10) = s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X10,X8,bool)) | s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),X9))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,bool))))) )),
  inference(superposition,[],[f5878,f733])).
fof(f31486,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.semanticPrimitives.result'(bool,X23),X24) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'(bool,X23),X24) != s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X23),X24)),X25,'type.semanticPrimitives.result'(bool,X23)),X23,bool))) )),
  inference(forward_demodulation,[],[f31396,f765])).
fof(f31396,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.semanticPrimitives.result'(bool,X23),X24) != s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X23),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X23),X24)),X25,'type.semanticPrimitives.result'(bool,X23))) | s(bool,'T_0') = s(bool,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X23),X24)),X25,'type.semanticPrimitives.result'(bool,X23)),X23,bool))) )),
  inference(superposition,[],[f5878,f765])).
fof(f30788,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(bool,X10),X11) != s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X12) = s(bool,sK4(X11,X10,bool)) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13) | s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X10),X11))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK5(X11,X10,bool))))) )),
  inference(superposition,[],[f361,f733])).
fof(f30785,plain,(
  ( ! [X239,X237,X235,X238,X236] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,X235))) | s(bool,X238) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X235)),X236,bool)) | s(bool,X238) = s(bool,X239) | s(bool,'T_0') = s(bool,X239)) )),
  inference(superposition,[],[f361,f765])).
fof(f30720,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f361,f282])).
fof(f14915,plain,(
  ( ! [X736,X738,X737,X739,X740] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X736) = s(fun(bool,bool),X737) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X736,X737,bool,bool)))) | s(bool,X738) = s(bool,X739) | s(bool,X739) = s(bool,sK6(X736,X737,bool,bool)) | s(bool,X738) = s(bool,X740) | s(bool,'T_0') = s(bool,X740)) )),
  inference(superposition,[],[f694,f282])).
fof(f15429,plain,(
  ( ! [X736,X738,X737,X739,X740] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X736) = s(fun(bool,bool),X737) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X736,X737,bool,bool)))) | s(bool,X738) = s(bool,X739) | s(bool,X739) = s(bool,X740) | s(bool,'T_0') = s(bool,X740) | s(bool,X738) = s(bool,sK6(X736,X737,bool,bool))) )),
  inference(superposition,[],[f694,f282])).
fof(f23960,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X24) = s(fun(bool,bool),X25) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X24,X25,bool,bool)))) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,sK6(X24,X25,bool,bool)) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f694,f282])).
fof(f23961,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X29,X30,bool,bool)))) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,X31) = s(bool,sK6(X29,X30,bool,bool))) )),
  inference(superposition,[],[f694,f282])).
fof(f29595,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X223))) = s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X226))) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227) | s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X223))) = s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X228))) | s(bool,'T_0') = s(bool,X228)) )),
  inference(forward_demodulation,[],[f29520,f765])).
fof(f29520,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X226))) = s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X223)),X224,bool)))) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227) | s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X223))) = s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X228))) | s(bool,'T_0') = s(bool,X228)) )),
  inference(trivial_inequality_removal,[],[f29509])).
fof(f29509,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X226))) = s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X223)),X224,bool)))) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227) | s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X223))) = s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X228))) | s(bool,'T_0') = s(bool,X228)) )),
  inference(superposition,[],[f359,f784])).
fof(f29545,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X38))) = s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X40))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(trivial_inequality_removal,[],[f29471])).
fof(f29471,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X38))) = s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X40))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f359,f282])).
fof(f29547,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X6))) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(trivial_inequality_removal,[],[f29465])).
fof(f29465,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X6))) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f359,f171])).
fof(f29446,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f359,f282])).
fof(f28738,plain,(
  ( ! [X263,X265,X262,X264,X266] : (s(bool,X262) != s(bool,X264) | s('type.semanticPrimitives.result'(bool,X265),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X265),'const.semanticPrimitives.Rval_1'(s(bool,X264))) | s(bool,X266) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X262)),X263,bool)) | s(bool,'T_0') = s(bool,X266)) )),
  inference(superposition,[],[f343,f765])).
fof(f27661,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(bool,X10),X11) != s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,X13) = s(bool,sK4(X11,X10,bool)) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13) | s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X10),X11))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK5(X11,X10,bool))))) )),
  inference(superposition,[],[f316,f733])).
fof(f27658,plain,(
  ( ! [X253,X251,X254,X252,X250] : (s('type.semanticPrimitives.result'(bool,X252),'const.semanticPrimitives.Rval_1'(s(bool,X250))) != s('type.semanticPrimitives.result'(bool,X252),'const.semanticPrimitives.Rval_1'(s(bool,X253))) | s(bool,X254) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X250)),X251,bool)) | s(bool,'T_0') = s(bool,X253) | s(bool,'T_0') = s(bool,X254)) )),
  inference(superposition,[],[f316,f765])).
fof(f27607,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(bool,X10),X11) != s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,sK4(X11,X10,bool)) | s(bool,'T_0') = s(bool,X13) | s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X10),X11))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK5(X11,X10,bool))))) )),
  inference(superposition,[],[f316,f733])).
fof(f27604,plain,(
  ( ! [X243,X246,X244,X242,X245] : (s('type.semanticPrimitives.result'(bool,X244),'const.semanticPrimitives.Rval_1'(s(bool,X242))) != s('type.semanticPrimitives.result'(bool,X244),'const.semanticPrimitives.Rval_1'(s(bool,X245))) | s(bool,X245) = s(bool,X246) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X242)),X243,bool)) | s(bool,'T_0') = s(bool,X246)) )),
  inference(superposition,[],[f316,f765])).
fof(f27009,plain,(
  ( ! [X241,X239,X237,X240,X238] : (s(bool,X237) != s(bool,X239) | s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,X239))) = s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,X241))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X237)),X238,bool)) | s(bool,'T_0') = s(bool,X241)) )),
  inference(superposition,[],[f314,f765])).
fof(f26845,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f26844])).
fof(f26844,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f26843])).
fof(f26843,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X46))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X43),s('type.list.list'(bool),X46))) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,X47) | s(bool,'T_0') = s(bool,X44) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f26759,f171])).
fof(f26759,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) != s(bool,X45) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X46))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X43),s('type.list.list'(bool),X46))) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,X47) | s(bool,'T_0') = s(bool,X44) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1164,f282])).
fof(f26803,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X2,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3)))) )),
  inference(condensation,[],[f26802])).
fof(f26802,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,X75) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X76))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X75),s('type.list.list'(bool),X76))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X73)) )),
  inference(duplicate_literal_removal,[],[f26715])).
fof(f26715,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,X75) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X76))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X75),s('type.list.list'(bool),X76))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f1164,f833])).
fof(f26812,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f26811])).
fof(f26811,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X50) != s(bool,X51) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X52))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X51),s('type.list.list'(bool),X52))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(duplicate_literal_removal,[],[f26711])).
fof(f26711,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X50) != s(bool,X51) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X52))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X51),s('type.list.list'(bool),X52))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X49) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f1164,f282])).
fof(f26496,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f26495,f765])).
fof(f26495,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f26494])).
fof(f26494,plain,(
  ( ! [X167,X165,X163,X166,X164] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X166),s('type.list.list'(bool),X167))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X163)),X164,bool)),s('type.list.list'(bool),X167))) | s(bool,'T_0') = s(bool,X166) | s('type.semanticPrimitives.result'(bool,X164),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X164),'const.semanticPrimitives.Rval_1'(s(bool,X163))) | s(bool,'T_0') = s(bool,X165)) )),
  inference(subsumption_resolution,[],[f26452,f112])).
fof(f26452,plain,(
  ( ! [X167,X165,X163,X166,X164] : (s(bool,'F_0') != s(bool,X165) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X166),s('type.list.list'(bool),X167))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X163)),X164,bool)),s('type.list.list'(bool),X167))) | s(bool,'T_0') = s(bool,X166) | s('type.semanticPrimitives.result'(bool,X164),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X164),'const.semanticPrimitives.Rval_1'(s(bool,X163))) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f1161,f782])).
fof(f26461,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1)))) )),
  inference(condensation,[],[f26460])).
fof(f26460,plain,(
  ( ! [X123,X121,X122] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X123))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X122),s('type.list.list'(bool),X123))) | s(bool,'T_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X121)) )),
  inference(trivial_inequality_removal,[],[f26438])).
fof(f26438,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) != s(bool,X121) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X123))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X122),s('type.list.list'(bool),X123))) | s(bool,'T_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f1161,f112])).
fof(f26481,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))) | s(bool,X1) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f26480])).
fof(f26480,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X43),s('type.list.list'(bool),X46))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X45),s('type.list.list'(bool),X46))) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,X47) | s(bool,'T_0') = s(bool,X44) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f26421,f112])).
fof(f26421,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,'F_0') != s(bool,X44) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X43),s('type.list.list'(bool),X46))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X45),s('type.list.list'(bool),X46))) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,X47) | s(bool,'T_0') = s(bool,X44) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1161,f282])).
fof(f26468,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f26412])).
fof(f26412,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1161,f112])).
fof(f25623,plain,(
  ( ! [X453,X455,X451,X452,X454] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X451),s('type.list.list'(bool),X454))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X453),s('type.list.list'(bool),X454))) | s(bool,'T_0') != s(bool,X453) | s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X451))) = s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X455))) | s(bool,'T_0') = s(bool,X455)) )),
  inference(forward_demodulation,[],[f25308,f765])).
fof(f25308,plain,(
  ( ! [X453,X455,X451,X452,X454] : (s(bool,'T_0') != s(bool,X453) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X453),s('type.list.list'(bool),X454))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X451)),X452,bool)),s('type.list.list'(bool),X454))) | s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X451))) = s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X455))) | s(bool,'T_0') = s(bool,X455)) )),
  inference(superposition,[],[f918,f784])).
fof(f25307,plain,(
  ( ! [X447,X449,X446,X448,X450] : (s('type.semanticPrimitives.result'(bool,X448),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X448),'const.semanticPrimitives.Rval_1'(s(bool,X449))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X446)),X447,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X449)),X448,bool)) | s('type.semanticPrimitives.result'(bool,X447),'const.semanticPrimitives.Rval_1'(s(bool,X446))) = s('type.semanticPrimitives.result'(bool,X447),'const.semanticPrimitives.Rval_1'(s(bool,X450))) | s(bool,'T_0') = s(bool,X450)) )),
  inference(superposition,[],[f789,f784])).
fof(f25622,plain,(
  ( ! [X445,X441,X443,X444,X442] : (s(bool,X444) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X441)),X443,bool)) | s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,X444))) | s('type.semanticPrimitives.result'(bool,X442),'const.semanticPrimitives.Rval_1'(s(bool,X441))) = s('type.semanticPrimitives.result'(bool,X442),'const.semanticPrimitives.Rval_1'(s(bool,X445))) | s(bool,'T_0') = s(bool,X445)) )),
  inference(forward_demodulation,[],[f25306,f765])).
fof(f25306,plain,(
  ( ! [X445,X441,X443,X444,X442] : (s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,X444))) | s(bool,X444) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X441)),X442,bool))),X443,bool)) | s('type.semanticPrimitives.result'(bool,X442),'const.semanticPrimitives.Rval_1'(s(bool,X441))) = s('type.semanticPrimitives.result'(bool,X442),'const.semanticPrimitives.Rval_1'(s(bool,X445))) | s(bool,'T_0') = s(bool,X445)) )),
  inference(superposition,[],[f789,f784])).
fof(f25304,plain,(
  ( ! [X436,X432,X434,X433,X435] : (s('type.semanticPrimitives.result'(bool,X434),X435) != s('type.semanticPrimitives.result'(bool,X434),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK4(X435,X434,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X432)),X433,bool)) | s('type.semanticPrimitives.result'(bool,X434),X435) = s('type.semanticPrimitives.result'(bool,X434),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X434),sK5(X435,X434,bool)))) | s('type.semanticPrimitives.result'(bool,X433),'const.semanticPrimitives.Rval_1'(s(bool,X432))) = s('type.semanticPrimitives.result'(bool,X433),'const.semanticPrimitives.Rval_1'(s(bool,X436))) | s(bool,'T_0') = s(bool,X436)) )),
  inference(superposition,[],[f749,f784])).
fof(f25621,plain,(
  ( ! [X420,X416,X418,X421,X417,X419] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X418),X420),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X418),X419))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X418),X420),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X418),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X416),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X418),X419) != s('type.semanticPrimitives.result'('type.list.list'(bool),X418),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'(bool,X417),'const.semanticPrimitives.Rval_1'(s(bool,X416))) = s('type.semanticPrimitives.result'(bool,X417),'const.semanticPrimitives.Rval_1'(s(bool,X421))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(forward_demodulation,[],[f25301,f765])).
fof(f25301,plain,(
  ( ! [X420,X416,X418,X421,X417,X419] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X418),X419) != s('type.semanticPrimitives.result'('type.list.list'(bool),X418),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X418),X420),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X418),X419))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X418),X420),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X418),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X416)),X417,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X417),'const.semanticPrimitives.Rval_1'(s(bool,X416))) = s('type.semanticPrimitives.result'(bool,X417),'const.semanticPrimitives.Rval_1'(s(bool,X421))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(superposition,[],[f667,f784])).
fof(f25620,plain,(
  ( ! [X412,X414,X410,X413,X415,X411] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X412),X414) = s('type.semanticPrimitives.result'('type.list.list'(bool),X412),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X410),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X412),X413),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X412),X414))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X412),X413),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X412),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'(bool,X411),'const.semanticPrimitives.Rval_1'(s(bool,X410))) = s('type.semanticPrimitives.result'(bool,X411),'const.semanticPrimitives.Rval_1'(s(bool,X415))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(forward_demodulation,[],[f25300,f765])).
fof(f25300,plain,(
  ( ! [X412,X414,X410,X413,X415,X411] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X412),X413),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X412),X414))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X412),X413),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X412),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X412),X414) = s('type.semanticPrimitives.result'('type.list.list'(bool),X412),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X410)),X411,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X411),'const.semanticPrimitives.Rval_1'(s(bool,X410))) = s('type.semanticPrimitives.result'(bool,X411),'const.semanticPrimitives.Rval_1'(s(bool,X415))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(superposition,[],[f665,f784])).
fof(f25619,plain,(
  ( ! [X408,X405,X407,X403,X409,X404,X406] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X405),X406) = s('type.semanticPrimitives.result'('type.list.list'(bool),X405),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X403),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X405),X406),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),X407))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X405),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),X408))) | s('type.semanticPrimitives.result'(bool,X404),'const.semanticPrimitives.Rval_1'(s(bool,X403))) = s('type.semanticPrimitives.result'(bool,X404),'const.semanticPrimitives.Rval_1'(s(bool,X409))) | s(bool,'T_0') = s(bool,X409)) )),
  inference(forward_demodulation,[],[f25299,f765])).
fof(f25299,plain,(
  ( ! [X408,X405,X407,X403,X409,X404,X406] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X405),X406),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),X407))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X405),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X405)),X408))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X405),X406) = s('type.semanticPrimitives.result'('type.list.list'(bool),X405),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X403)),X404,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X404),'const.semanticPrimitives.Rval_1'(s(bool,X403))) = s('type.semanticPrimitives.result'(bool,X404),'const.semanticPrimitives.Rval_1'(s(bool,X409))) | s(bool,'T_0') = s(bool,X409)) )),
  inference(superposition,[],[f661,f784])).
fof(f25618,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s('type.list.list'(bool),X396) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X393),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X395),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X396))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X395),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'(bool,X394),'const.semanticPrimitives.Rval_1'(s(bool,X393))) = s('type.semanticPrimitives.result'(bool,X394),'const.semanticPrimitives.Rval_1'(s(bool,X397))) | s(bool,'T_0') = s(bool,X397)) )),
  inference(forward_demodulation,[],[f25297,f765])).
fof(f25297,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X395),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X396))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X395),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X396) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X393)),X394,bool)),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(bool,X394),'const.semanticPrimitives.Rval_1'(s(bool,X393))) = s('type.semanticPrimitives.result'(bool,X394),'const.semanticPrimitives.Rval_1'(s(bool,X397))) | s(bool,'T_0') = s(bool,X397)) )),
  inference(superposition,[],[f657,f784])).
fof(f25617,plain,(
  ( ! [X389,X391,X387,X388,X390,X392] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X389),X390))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X389),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,X387))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X389),X390) != s('type.semanticPrimitives.result'('type.list.list'(bool),X389),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X388),'const.semanticPrimitives.Rval_1'(s(bool,X387))) = s('type.semanticPrimitives.result'(bool,X388),'const.semanticPrimitives.Rval_1'(s(bool,X392))) | s(bool,'T_0') = s(bool,X392)) )),
  inference(forward_demodulation,[],[f25296,f765])).
fof(f25296,plain,(
  ( ! [X389,X391,X387,X388,X390,X392] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X389),X390) != s('type.semanticPrimitives.result'('type.list.list'(bool),X389),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X389),X390))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X389),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X387)),X388,bool)))))))) | s('type.semanticPrimitives.result'(bool,X388),'const.semanticPrimitives.Rval_1'(s(bool,X387))) = s('type.semanticPrimitives.result'(bool,X388),'const.semanticPrimitives.Rval_1'(s(bool,X392))) | s(bool,'T_0') = s(bool,X392)) )),
  inference(superposition,[],[f654,f784])).
fof(f25616,plain,(
  ( ! [X383,X385,X382,X384,X386,X381] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X383),X385) = s('type.semanticPrimitives.result'('type.list.list'(bool),X383),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,X381))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X383),X384),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X383),X385))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X383),X384),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X383),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X382),'const.semanticPrimitives.Rval_1'(s(bool,X381))) = s('type.semanticPrimitives.result'(bool,X382),'const.semanticPrimitives.Rval_1'(s(bool,X386))) | s(bool,'T_0') = s(bool,X386)) )),
  inference(forward_demodulation,[],[f25295,f765])).
fof(f25295,plain,(
  ( ! [X383,X385,X382,X384,X386,X381] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X383),X384),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X383),X385))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X383),X384),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X383),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X383),X385) = s('type.semanticPrimitives.result'('type.list.list'(bool),X383),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X381)),X382,bool)))))) | s('type.semanticPrimitives.result'(bool,X382),'const.semanticPrimitives.Rval_1'(s(bool,X381))) = s('type.semanticPrimitives.result'(bool,X382),'const.semanticPrimitives.Rval_1'(s(bool,X386))) | s(bool,'T_0') = s(bool,X386)) )),
  inference(superposition,[],[f652,f784])).
fof(f25615,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X375] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X376),X377) = s('type.semanticPrimitives.result'('type.list.list'(bool),X376),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,X374))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X376),X377),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),X378))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X376),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),X379))) | s('type.semanticPrimitives.result'(bool,X375),'const.semanticPrimitives.Rval_1'(s(bool,X374))) = s('type.semanticPrimitives.result'(bool,X375),'const.semanticPrimitives.Rval_1'(s(bool,X380))) | s(bool,'T_0') = s(bool,X380)) )),
  inference(forward_demodulation,[],[f25294,f765])).
fof(f25294,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X375] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X376),X377),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),X378))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X376),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X376)),X379))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X376),X377) = s('type.semanticPrimitives.result'('type.list.list'(bool),X376),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X374)),X375,bool)))))) | s('type.semanticPrimitives.result'(bool,X375),'const.semanticPrimitives.Rval_1'(s(bool,X374))) = s('type.semanticPrimitives.result'(bool,X375),'const.semanticPrimitives.Rval_1'(s(bool,X380))) | s(bool,'T_0') = s(bool,X380)) )),
  inference(superposition,[],[f648,f784])).
fof(f25613,plain,(
  ( ! [X341,X337,X339,X340,X338] : (s('type.semanticPrimitives.result'(bool,X340),'const.semanticPrimitives.Rval_1'(s(bool,X337))) = s('type.semanticPrimitives.result'(bool,X340),'const.semanticPrimitives.Rval_1'(s(bool,X339))) | s(bool,'T_0') != s(bool,X339) | s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X337))) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X341))) | s(bool,'T_0') = s(bool,X341)) )),
  inference(forward_demodulation,[],[f25287,f765])).
fof(f25287,plain,(
  ( ! [X341,X337,X339,X340,X338] : (s(bool,'T_0') != s(bool,X339) | s('type.semanticPrimitives.result'(bool,X340),'const.semanticPrimitives.Rval_1'(s(bool,X339))) = s('type.semanticPrimitives.result'(bool,X340),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X337)),X338,bool)))) | s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X337))) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X341))) | s(bool,'T_0') = s(bool,X341)) )),
  inference(superposition,[],[f161,f784])).
fof(f25285,plain,(
  ( ! [X327,X329,X331,X328,X330] : (s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X330))) | s(bool,X330) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X327)),X328,bool)) | s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X327))) = s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X331))) | s(bool,'T_0') = s(bool,X331)) )),
  inference(superposition,[],[f160,f784])).
fof(f25280,plain,(
  ( ! [X300,X302,X304,X301,X303,X299] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X301))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X302),s('type.list.list'(bool),X303))) | s(bool,X302) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X299)),X300,bool)) | s('type.semanticPrimitives.result'(bool,X300),'const.semanticPrimitives.Rval_1'(s(bool,X299))) = s('type.semanticPrimitives.result'(bool,X300),'const.semanticPrimitives.Rval_1'(s(bool,X304))) | s(bool,'T_0') = s(bool,X304)) )),
  inference(superposition,[],[f148,f784])).
fof(f25612,plain,(
  ( ! [X292,X290,X291] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X291),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X291),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))) = s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X292))) | s(bool,'T_0') = s(bool,X292)) )),
  inference(subsumption_resolution,[],[f25277,f164])).
fof(f25277,plain,(
  ( ! [X292,X290,X291] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X291),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X291),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))) = s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X291),sK5('const.semanticPrimitives.Rval_1'(s(bool,X290)),X291,bool)))) | s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))) = s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X292))) | s(bool,'T_0') = s(bool,X292)) )),
  inference(superposition,[],[f748,f784])).
fof(f25602,plain,(
  ( ! [X180,X178,X181,X179] : (s(bool,X180) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X179,bool)) | s(bool,'F_0') = s(bool,X180) | s('type.semanticPrimitives.result'(bool,X179),'const.semanticPrimitives.Rval_1'(s(bool,X178))) = s('type.semanticPrimitives.result'(bool,X179),'const.semanticPrimitives.Rval_1'(s(bool,X181))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(subsumption_resolution,[],[f25247,f109])).
fof(f25247,plain,(
  ( ! [X180,X178,X181,X179] : (~p(s(bool,'T_0')) | s(bool,X180) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X179,bool)) | s(bool,'F_0') = s(bool,X180) | s('type.semanticPrimitives.result'(bool,X179),'const.semanticPrimitives.Rval_1'(s(bool,X178))) = s('type.semanticPrimitives.result'(bool,X179),'const.semanticPrimitives.Rval_1'(s(bool,X181))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(superposition,[],[f985,f784])).
fof(f25596,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X35) = s(bool,X37) | ~p(s(bool,X37)) | s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X35))) = s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(forward_demodulation,[],[f25595,f765])).
fof(f25595,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | s(bool,X37) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X36,bool)) | s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X35))) = s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f25220,f109])).
fof(f25220,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | s(bool,X37) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X36,bool)) | s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X35))) = s('type.semanticPrimitives.result'(bool,X36),'const.semanticPrimitives.Rval_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f154,f784])).
fof(f25207,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s('type.semanticPrimitives.result'(bool,X338),X341) != s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X340))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),X341),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X339))),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X340)),X338,bool)) | s(bool,'T_0') = s(bool,X339)) )),
  inference(superposition,[],[f918,f784])).
fof(f25594,plain,(
  ( ! [X333,X335,X337,X334,X336] : (s(bool,'T_0') = s(bool,X335) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X335))))) | s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X334))) = s('type.semanticPrimitives.result'(bool,X333),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337)),X336,'type.semanticPrimitives.result'(bool,X333))) | s(bool,'T_0') = s(bool,X334)) )),
  inference(forward_demodulation,[],[f25206,f765])).
fof(f25206,plain,(
  ( ! [X333,X335,X337,X334,X336] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X335))))) | s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X334))) = s('type.semanticPrimitives.result'(bool,X333),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337)),X336,'type.semanticPrimitives.result'(bool,X333))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X335)),X333,bool)) | s(bool,'T_0') = s(bool,X334)) )),
  inference(superposition,[],[f789,f784])).
fof(f25592,plain,(
  ( ! [X321,X323,X320,X322,X319] : (s(bool,'T_0') = s(bool,X321) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X321))))) | s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X320))) = s('type.semanticPrimitives.result'(bool,X319),sK4(X323,X322,'type.semanticPrimitives.result'(bool,X319))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X322),sK5(X323,X322,'type.semanticPrimitives.result'(bool,X319))))) | s(bool,'T_0') = s(bool,X320)) )),
  inference(forward_demodulation,[],[f25203,f765])).
fof(f25203,plain,(
  ( ! [X321,X323,X320,X322,X319] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X321))))) | s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X320))) = s('type.semanticPrimitives.result'(bool,X319),sK4(X323,X322,'type.semanticPrimitives.result'(bool,X319))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X322),sK5(X323,X322,'type.semanticPrimitives.result'(bool,X319))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X321)),X319,bool)) | s(bool,'T_0') = s(bool,X320)) )),
  inference(superposition,[],[f749,f784])).
fof(f25178,plain,(
  ( ! [X185,X182,X184,X183,X181] : (s('type.semanticPrimitives.result'(bool,X181),X184) != s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X183))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X182))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X184,X181,bool)))))) | s('type.semanticPrimitives.result'(bool,X181),X184) = s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X181),sK5(X184,X181,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X181,bool)) | s(bool,'T_0') = s(bool,X182)) )),
  inference(superposition,[],[f759,f784])).
fof(f25580,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X177))))) | s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X176,bool)) | s(bool,'T_0') = s(bool,X177)) )),
  inference(forward_demodulation,[],[f25579,f765])).
fof(f25579,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X176,bool)) | s(bool,'T_0') = s(bool,X177)) )),
  inference(subsumption_resolution,[],[f25177,f164])).
fof(f25177,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))))) | s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X177))) = s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X176),sK5('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X176,bool)) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f759,f784])).
fof(f25578,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s(bool,'T_0') = s(bool,X173) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),X175))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X173))))) | s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X175,X171,bool)))) | s('type.semanticPrimitives.result'(bool,X171),X175) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X171),sK5(X175,X171,bool)))) | s(bool,'T_0') = s(bool,X172)) )),
  inference(forward_demodulation,[],[f25176,f765])).
fof(f25176,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),X175))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X173))))) | s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X175,X171,bool)))) | s('type.semanticPrimitives.result'(bool,X171),X175) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X171),sK5(X175,X171,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X173)),X171,bool)) | s(bool,'T_0') = s(bool,X172)) )),
  inference(superposition,[],[f757,f784])).
fof(f25577,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s(bool,'T_0') = s(bool,X168) | s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X167))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s(bool,'T_0') = s(bool,X167)) )),
  inference(forward_demodulation,[],[f25576,f765])).
fof(f25576,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X167))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X168)),X166,bool)) | s(bool,'T_0') = s(bool,X167)) )),
  inference(forward_demodulation,[],[f25575,f765])).
fof(f25575,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X168)),X166,bool)) | s(bool,'T_0') = s(bool,X167)) )),
  inference(subsumption_resolution,[],[f25175,f164])).
fof(f25175,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X167))) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),sK5('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X168)),X166,bool)) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f757,f784])).
fof(f25574,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (s(bool,'T_0') = s(bool,X162) | s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),X163),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X164))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X162))),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X165))) | s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X161))) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X163,X160,bool)))) | s('type.semanticPrimitives.result'(bool,X160),X163) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),sK5(X163,X160,bool)))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(forward_demodulation,[],[f25174,f765])).
fof(f25174,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),X163),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X164))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X162))),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X165))) | s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X161))) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X163,X160,bool)))) | s('type.semanticPrimitives.result'(bool,X160),X163) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),sK5(X163,X160,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X162)),X160,bool)) | s(bool,'T_0') = s(bool,X161)) )),
  inference(superposition,[],[f752,f784])).
fof(f25573,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s(bool,'T_0') = s(bool,X156) | s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s(bool,'T_0') = s(bool,X155)) )),
  inference(forward_demodulation,[],[f25572,f765])).
fof(f25572,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X156)),X154,bool)) | s(bool,'T_0') = s(bool,X155)) )),
  inference(forward_demodulation,[],[f25571,f765])).
fof(f25571,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X156)),X154,bool)) | s(bool,'T_0') = s(bool,X155)) )),
  inference(subsumption_resolution,[],[f25173,f164])).
fof(f25173,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X154),sK5('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X156)),X154,bool)) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f752,f784])).
fof(f25570,plain,(
  ( ! [X99,X97,X98] : (s(bool,'T_0') = s(bool,X99) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),'const.list.NIL_0'))) = s('type.list.list'(bool),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,X99)))),X97,'type.list.list'(bool))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(forward_demodulation,[],[f25160,f765])).
fof(f25160,plain,(
  ( ! [X99,X97,X98] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),'const.list.NIL_0'))) = s('type.list.list'(bool),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,X99)))),X97,'type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X97,bool)) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f6299,f784])).
fof(f25159,plain,(
  ( ! [X94,X95,X93,X96] : (s('type.semanticPrimitives.result'(bool,X93),'const.semanticPrimitives.Rval_1'(s(bool,X95))) != s('type.semanticPrimitives.result'(bool,X93),'const.semanticPrimitives.Rval_1'(s(bool,X96))) | s(bool,X94) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X96)),X93,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X95)),X93,bool)) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f789,f784])).
fof(f25158,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,X91))) != s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,X92))) | s(bool,X92) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X90)),X89,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X91)),X89,bool)) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f789,f784])).
fof(f25157,plain,(
  ( ! [X88,X87,X85,X86] : (s('type.semanticPrimitives.result'(bool,X85),X88) != s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,X86) = s(bool,sK4(X88,X85,bool)) | s('type.semanticPrimitives.result'(bool,X85),X88) = s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),sK5(X88,X85,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X87)),X85,bool)) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f749,f784])).
fof(f25561,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s(bool,'T_0') = s(bool,X339) | s('type.semanticPrimitives.result'(bool,X338),X341) != s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X340))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),X341),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X339))),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) | s(bool,'T_0') = s(bool,X340)) )),
  inference(forward_demodulation,[],[f25134,f765])).
fof(f25134,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s('type.semanticPrimitives.result'(bool,X338),X341) != s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X340))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),X341),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X339))),s('type.list.list'('type.semanticPrimitives.result'(bool,X338)),X342))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X339)),X338,bool)) | s(bool,'T_0') = s(bool,X340)) )),
  inference(superposition,[],[f918,f784])).
fof(f25133,plain,(
  ( ! [X333,X335,X337,X334,X336] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X333),X336),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X335))))) | s('type.semanticPrimitives.result'(bool,X333),'const.semanticPrimitives.Rval_1'(s(bool,X334))) = s('type.semanticPrimitives.result'(bool,X333),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X333),X337)),X336,'type.semanticPrimitives.result'(bool,X333))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X334)),X333,bool)) | s(bool,'T_0') = s(bool,X335)) )),
  inference(superposition,[],[f789,f784])).
fof(f25560,plain,(
  ( ! [X329,X331,X332,X328,X330] : (s(bool,'T_0') = s(bool,X329) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X328),X331),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),X332))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X328),X331),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X330))))) | s('type.semanticPrimitives.result'(bool,X328),X332) = s('type.semanticPrimitives.result'(bool,X328),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X329)))),X331,'type.semanticPrimitives.result'(bool,X328))) | s(bool,'T_0') = s(bool,X330)) )),
  inference(forward_demodulation,[],[f25132,f765])).
fof(f25132,plain,(
  ( ! [X329,X331,X332,X328,X330] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X328),X331),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),X332))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X328),X331),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X330))))) | s('type.semanticPrimitives.result'(bool,X328),X332) = s('type.semanticPrimitives.result'(bool,X328),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X328),'const.semanticPrimitives.Rval_1'(s(bool,X329)))),X331,'type.semanticPrimitives.result'(bool,X328))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X329)),X328,bool)) | s(bool,'T_0') = s(bool,X330)) )),
  inference(superposition,[],[f789,f784])).
fof(f25130,plain,(
  ( ! [X321,X323,X320,X322,X319] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X321))))) | s('type.semanticPrimitives.result'(bool,X319),'const.semanticPrimitives.Rval_1'(s(bool,X320))) = s('type.semanticPrimitives.result'(bool,X319),sK4(X323,X322,'type.semanticPrimitives.result'(bool,X319))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),X323) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X319),X322),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X322),sK5(X323,X322,'type.semanticPrimitives.result'(bool,X319))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X320)),X319,bool)) | s(bool,'T_0') = s(bool,X321)) )),
  inference(superposition,[],[f749,f784])).
fof(f25559,plain,(
  ( ! [X308,X304,X306,X303,X305,X307] : (s(bool,'T_0') = s(bool,X304) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X307) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X303),X306),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X305))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X307))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X303)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X304))),s('type.list.list'('type.semanticPrimitives.result'(bool,X303)),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X305)) )),
  inference(forward_demodulation,[],[f25127,f765])).
fof(f25127,plain,(
  ( ! [X308,X304,X306,X303,X305,X307] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X307) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X303),X306),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X305))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X307))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X303)),X306),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X303)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X304))),s('type.list.list'('type.semanticPrimitives.result'(bool,X303)),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X304)),X303,bool)) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f667,f784])).
fof(f25558,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (s(bool,'T_0') = s(bool,X298) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X301),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X302))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X301),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X297),X300),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X297),'const.semanticPrimitives.Rval_1'(s(bool,X299))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X302) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X297)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X297),'const.semanticPrimitives.Rval_1'(s(bool,X298))),s('type.list.list'('type.semanticPrimitives.result'(bool,X297)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X299)) )),
  inference(forward_demodulation,[],[f25126,f765])).
fof(f25126,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X301),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X302))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X301),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X297),X300),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X297),'const.semanticPrimitives.Rval_1'(s(bool,X299))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),X302) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X297)),X300),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X297)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X297),'const.semanticPrimitives.Rval_1'(s(bool,X298))),s('type.list.list'('type.semanticPrimitives.result'(bool,X297)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X298)),X297,bool)) | s(bool,'T_0') = s(bool,X299)) )),
  inference(superposition,[],[f665,f784])).
fof(f25557,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291] : (s(bool,'T_0') = s(bool,X291) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),X294),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),X295))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X290),X293),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X292))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),X296))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),X294) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X290)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X291))),s('type.list.list'('type.semanticPrimitives.result'(bool,X290)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X292)) )),
  inference(forward_demodulation,[],[f25125,f765])).
fof(f25125,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),X294),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),X295))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X290),X293),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X292))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293)),X296))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),X294) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X290)),X293),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X290)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X291))),s('type.list.list'('type.semanticPrimitives.result'(bool,X290)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X291)),X290,bool)) | s(bool,'T_0') = s(bool,X292)) )),
  inference(superposition,[],[f661,f784])).
fof(f25556,plain,(
  ( ! [X280,X282,X281,X283,X284] : (s(bool,'T_0') = s(bool,X281) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X283),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X284))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X283),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X280),X283),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X280),'const.semanticPrimitives.Rval_1'(s(bool,X282))))))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X284) = s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X280),'const.semanticPrimitives.Rval_1'(s(bool,X281))),s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X282)) )),
  inference(forward_demodulation,[],[f25123,f765])).
fof(f25123,plain,(
  ( ! [X280,X282,X281,X283,X284] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X283),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X284))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X283),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X280),X283),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X280),'const.semanticPrimitives.Rval_1'(s(bool,X282))))))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),X284) = s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X280),'const.semanticPrimitives.Rval_1'(s(bool,X281))),s('type.list.list'('type.semanticPrimitives.result'(bool,X280)),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X281)),X280,bool)) | s(bool,'T_0') = s(bool,X282)) )),
  inference(superposition,[],[f657,f784])).
fof(f25555,plain,(
  ( ! [X277,X279,X275,X276,X278,X274] : (s(bool,'T_0') = s(bool,X275) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X278) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X274)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X274),'const.semanticPrimitives.Rval_1'(s(bool,X276))),s('type.list.list'('type.semanticPrimitives.result'(bool,X274)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X278))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X274),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X274),'const.semanticPrimitives.Rval_1'(s(bool,X275))))))))) | s(bool,'T_0') = s(bool,X276)) )),
  inference(forward_demodulation,[],[f25122,f765])).
fof(f25122,plain,(
  ( ! [X277,X279,X275,X276,X278,X274] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X278) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X274)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X274),'const.semanticPrimitives.Rval_1'(s(bool,X276))),s('type.list.list'('type.semanticPrimitives.result'(bool,X274)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X278))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X274)),X277),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X274),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X274),'const.semanticPrimitives.Rval_1'(s(bool,X275))))))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X275)),X274,bool)) | s(bool,'T_0') = s(bool,X276)) )),
  inference(superposition,[],[f654,f784])).
fof(f25554,plain,(
  ( ! [X269,X271,X273,X268,X270,X272] : (s(bool,'T_0') = s(bool,X269) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X273))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X268)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X268),'const.semanticPrimitives.Rval_1'(s(bool,X270))),s('type.list.list'('type.semanticPrimitives.result'(bool,X268)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X273) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X268),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X268),'const.semanticPrimitives.Rval_1'(s(bool,X269))))))) | s(bool,'T_0') = s(bool,X270)) )),
  inference(forward_demodulation,[],[f25121,f765])).
fof(f25121,plain,(
  ( ! [X269,X271,X273,X268,X270,X272] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X273))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X268)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X268),'const.semanticPrimitives.Rval_1'(s(bool,X270))),s('type.list.list'('type.semanticPrimitives.result'(bool,X268)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),X273) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X268)),X271),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X268),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X268),'const.semanticPrimitives.Rval_1'(s(bool,X269))))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X269)),X268,bool)) | s(bool,'T_0') = s(bool,X270)) )),
  inference(superposition,[],[f652,f784])).
fof(f25553,plain,(
  ( ! [X261,X263,X265,X267,X262,X264,X266] : (s(bool,'T_0') = s(bool,X262) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),X265),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),X266))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X261)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,X263))),s('type.list.list'('type.semanticPrimitives.result'(bool,X261)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),X267))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),X265) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X261),X264),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,X262))))))) | s(bool,'T_0') = s(bool,X263)) )),
  inference(forward_demodulation,[],[f25120,f765])).
fof(f25120,plain,(
  ( ! [X261,X263,X265,X267,X262,X264,X266] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),X265),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),X266))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X261)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,X263))),s('type.list.list'('type.semanticPrimitives.result'(bool,X261)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264)),X267))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),X265) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X261)),X264),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X261),X264),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,X262))))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X262)),X261,bool)) | s(bool,'T_0') = s(bool,X263)) )),
  inference(superposition,[],[f648,f784])).
fof(f25550,plain,(
  ( ! [X185,X182,X184,X183,X181] : (s(bool,'T_0') = s(bool,X182) | s('type.semanticPrimitives.result'(bool,X181),X184) != s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X183))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X182))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X184,X181,bool)))))) | s('type.semanticPrimitives.result'(bool,X181),X184) = s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X181),sK5(X184,X181,bool)))) | s(bool,'T_0') = s(bool,X183)) )),
  inference(forward_demodulation,[],[f25105,f765])).
fof(f25105,plain,(
  ( ! [X185,X182,X184,X183,X181] : (s('type.semanticPrimitives.result'(bool,X181),X184) != s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X183))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,X182))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X181),X185),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X184,X181,bool)))))) | s('type.semanticPrimitives.result'(bool,X181),X184) = s('type.semanticPrimitives.result'(bool,X181),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X181),sK5(X184,X181,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X182)),X181,bool)) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f759,f784])).
fof(f25549,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s(bool,'T_0') = s(bool,X177) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X177))))) | s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s(bool,'T_0') = s(bool,X178)) )),
  inference(forward_demodulation,[],[f25548,f765])).
fof(f25548,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X177))))) | s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)) | s(bool,'T_0') = s(bool,X178)) )),
  inference(forward_demodulation,[],[f25547,f765])).
fof(f25547,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)) | s(bool,'T_0') = s(bool,X178)) )),
  inference(subsumption_resolution,[],[f25104,f164])).
fof(f25104,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'(bool,X176),X179) != s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X176),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))))) | s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X177))) = s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X176),sK5('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X176,bool)) | s(bool,'T_0') = s(bool,X178)) )),
  inference(superposition,[],[f759,f784])).
fof(f25103,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),X175))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X171),X174),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X173))))) | s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X175,X171,bool)))) | s('type.semanticPrimitives.result'(bool,X171),X175) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X171),sK5(X175,X171,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X172)),X171,bool)) | s(bool,'T_0') = s(bool,X173)) )),
  inference(superposition,[],[f757,f784])).
fof(f25546,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X167))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)) | s(bool,'T_0') = s(bool,X168)) )),
  inference(forward_demodulation,[],[f25545,f765])).
fof(f25545,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)) | s(bool,'T_0') = s(bool,X168)) )),
  inference(subsumption_resolution,[],[f25102,f164])).
fof(f25102,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),X170))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X166),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X168))))) | s('type.semanticPrimitives.result'(bool,X166),X170) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,X167))) = s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),sK5('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X167)),X166,bool)) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f757,f784])).
fof(f25101,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),X163),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X164))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X162))),s('type.list.list'('type.semanticPrimitives.result'(bool,X160)),X165))) | s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,X161))) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X163,X160,bool)))) | s('type.semanticPrimitives.result'(bool,X160),X163) = s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),sK5(X163,X160,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X161)),X160,bool)) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f752,f784])).
fof(f25544,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)) | s(bool,'T_0') = s(bool,X156)) )),
  inference(forward_demodulation,[],[f25543,f765])).
fof(f25543,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)) | s(bool,'T_0') = s(bool,X156)) )),
  inference(subsumption_resolution,[],[f25100,f164])).
fof(f25100,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),X158),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X159))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X156))),s('type.list.list'('type.semanticPrimitives.result'(bool,X154)),X157))) | s('type.semanticPrimitives.result'(bool,X154),X158) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) = s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X154),sK5('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X155)),X154,bool)) | s(bool,'T_0') = s(bool,X156)) )),
  inference(superposition,[],[f752,f784])).
fof(f25087,plain,(
  ( ! [X99,X97,X98] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),'const.list.NIL_0'))) = s('type.list.list'(bool),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,X99)))),X97,'type.list.list'(bool))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X98)),X97,bool)) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f6299,f784])).
fof(f25086,plain,(
  ( ! [X94,X95,X93,X96] : (s('type.semanticPrimitives.result'(bool,X93),'const.semanticPrimitives.Rval_1'(s(bool,X95))) != s('type.semanticPrimitives.result'(bool,X93),'const.semanticPrimitives.Rval_1'(s(bool,X96))) | s(bool,X94) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X96)),X93,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X94)),X93,bool)) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f789,f784])).
fof(f25084,plain,(
  ( ! [X88,X87,X85,X86] : (s('type.semanticPrimitives.result'(bool,X85),X88) != s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,X86) = s(bool,sK4(X88,X85,bool)) | s('type.semanticPrimitives.result'(bool,X85),X88) = s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),sK5(X88,X85,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X86)),X85,bool)) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f749,f784])).
fof(f25077,plain,(
  ( ! [X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X56))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X53),'const.semanticPrimitives.Rval_1'(s(bool,X55))))) | s('type.list.list'(bool),X56) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X54),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X54)),X53,bool)) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f657,f784])).
fof(f25537,plain,(
  ( ! [X52,X50,X51] : (s(bool,'T_0') = s(bool,X51) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(bool)),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X52))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(bool)),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X51),s('type.list.list'(bool),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(forward_demodulation,[],[f25076,f765])).
fof(f25076,plain,(
  ( ! [X52,X50,X51] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(bool)),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X52))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(bool)),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X51),s('type.list.list'(bool),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(bool)),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X51)),X50,bool)) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f635,f784])).
fof(f25536,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'T_0') = s(bool,X47) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X46),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X46),'const.semanticPrimitives.Rval_1'(s(bool,X48))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X46),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X46),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X47),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f25075,f765])).
fof(f25075,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X46),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X46),'const.semanticPrimitives.Rval_1'(s(bool,X48))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X46),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X46),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X47),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X47)),X46,bool)) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f634,f784])).
fof(f25070,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X25))) != s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X24)),X23,bool)) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f160,f784])).
fof(f25371,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X3) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X1,bool)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f25370])).
fof(f25370,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,'T_0') = s(bool,X51) | s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))) = s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X49)),X50,bool)) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(duplicate_literal_removal,[],[f25049])).
fof(f25049,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,'T_0') = s(bool,X51) | s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))) = s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X49)),X50,bool)) | s(bool,'T_0') = s(bool,X51) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f784,f282])).
fof(f24993,plain,(
  ( ! [X12,X13,X11] : (s('type.semanticPrimitives.result'(bool,X11),X12) = s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X13))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X13)),X11,bool)) | s(bool,'T_0') = s(bool,sK4(X12,X11,bool)) | s('type.semanticPrimitives.result'(bool,X11),X12) = s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,bool))))) )),
  inference(superposition,[],[f784,f157])).
fof(f24992,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),X9) = s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X10))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X10)),X8,bool)) | s(bool,'T_0') = s(bool,sK4(X9,X8,bool)) | s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),X9))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,bool))))) )),
  inference(superposition,[],[f784,f733])).
fof(f24989,plain,(
  ( ! [X182,X184,X183,X181] : (s('type.semanticPrimitives.result'(bool,X183),'const.semanticPrimitives.Rval_1'(s(bool,X181))) = s('type.semanticPrimitives.result'(bool,X183),'const.semanticPrimitives.Rval_1'(s(bool,X184))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X184)),X183,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X181)),X182,bool))) )),
  inference(superposition,[],[f784,f765])).
fof(f25465,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f25391,f765])).
fof(f25391,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f25390])).
fof(f25390,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X71))) = s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X71)),X70,bool)) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68)))) )),
  inference(duplicate_literal_removal,[],[f24957])).
fof(f24957,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X71))) = s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X71)),X70,bool)) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f784,f782])).
fof(f25399,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f25398])).
fof(f25398,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,X50))) = s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X52)),X51,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(duplicate_literal_removal,[],[f24954])).
fof(f24954,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,X50))) = s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X52)),X51,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X49) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f784,f282])).
fof(f111,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.funBigStepProps.list_result_inj',aHL_FALSITY)).
fof(f234,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f160,f112])).
fof(f235,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f160,f112])).
fof(f255,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f161,f112])).
fof(f256,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,X6) | s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X5))) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f161,f112])).
fof(f549,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),X10))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X11),s('type.list.list'(bool),X12))) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f148,f112])).
fof(f554,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X34))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X35),s('type.list.list'(bool),X36))) | s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f148,f112])).
fof(f689,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK6(X16,X17,X18,bool))) )),
  inference(superposition,[],[f159,f112])).
fof(f694,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK6(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK6(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f159,f112])).
fof(f730,plain,(
  ( ! [X12,X13] : (s('type.semanticPrimitives.result'(bool,X13),X12) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X12,X13,bool)))) | s('type.semanticPrimitives.result'(bool,X13),X12) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X12,X13,bool))) )),
  inference(superposition,[],[f157,f112])).
fof(f837,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool)) | s(bool,'F_0') = s(bool,X12)) )),
  inference(superposition,[],[f765,f112])).
fof(f947,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X25)),X27,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X25)),X26,bool))) )),
  inference(superposition,[],[f837,f765])).
fof(f964,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X38))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X36)),X37,bool)) | s(bool,'F_0') = s(bool,X36)) )),
  inference(superposition,[],[f148,f837])).
fof(f969,plain,(
  ( ! [X61,X59,X62,X60] : (s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,X62) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X59)),X60,bool)) | s(bool,'F_0') = s(bool,X59)) )),
  inference(superposition,[],[f160,f837])).
fof(f985,plain,(
  ( ! [X10,X8] : (~p(s(bool,X10)) | s(bool,X8) = s(bool,X10) | s(bool,'F_0') = s(bool,X8)) )),
  inference(forward_demodulation,[],[f984,f765])).
fof(f984,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'F_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f955,f109])).
fof(f955,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f154,f837])).
fof(f986,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X30) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X28)),X29,bool)) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'F_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f961,f109])).
fof(f961,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,'T_0')) | s(bool,X30) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X28)),X29,bool)) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'F_0') = s(bool,X28)) )),
  inference(superposition,[],[f494,f837])).
fof(f987,plain,(
  ( ! [X35,X34] : (s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,X34))) | s(bool,'F_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f963,f164])).
fof(f963,plain,(
  ( ! [X35,X34] : (s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,X34))) | s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,X34))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),sK5('const.semanticPrimitives.Rval_1'(s(bool,X34)),X35,bool)))) | s(bool,'F_0') = s(bool,X34)) )),
  inference(superposition,[],[f157,f837])).
fof(f988,plain,(
  ( ! [X70,X69,X67] : (s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X67))) = s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X69))) | s(bool,'T_0') != s(bool,X69) | s(bool,'F_0') = s(bool,X67)) )),
  inference(forward_demodulation,[],[f971,f765])).
fof(f971,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') != s(bool,X69) | s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X69))) = s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X67)),X68,bool)))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(superposition,[],[f161,f837])).
fof(f1011,plain,(
  ( ! [X24,X23,X22] : (s(bool,X24) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X22)),X23,bool)) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1001,f109])).
fof(f1001,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X22)),X23,bool)) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f985,f837])).
fof(f1089,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f987,f171])).
fof(f1095,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,X1))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f987,f987])).
fof(f1101,plain,(
  ( ! [X23,X21,X22] : (s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X21)),X22,bool))) )),
  inference(superposition,[],[f987,f765])).
fof(f1102,plain,(
  ( ! [X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK4(X5,X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,bool))))) )),
  inference(superposition,[],[f987,f157])).
fof(f1104,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f156,f987])).
fof(f1107,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X16)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X16),X19),s('type.list.list'('type.semanticPrimitives.result'(bool,X16)),X20))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X16)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,X17))),s('type.list.list'('type.semanticPrimitives.result'(bool,X16)),X18))) | s('type.semanticPrimitives.result'(bool,X16),X19) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f148,f987])).
fof(f1112,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X39),X41),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X39),X42))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X39),X41),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X40))))) | s('type.semanticPrimitives.result'(bool,X39),X42) = s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X40)) )),
  inference(superposition,[],[f160,f987])).
fof(f1114,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.semanticPrimitives.result'(bool,X47),X49) != s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X48))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),X49))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X48)) )),
  inference(superposition,[],[f161,f987])).
fof(f1120,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X4),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f156,f987])).
fof(f1121,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s(bool,X6) = s(bool,X7) | s(bool,'F_0') = s(bool,X6)) )),
  inference(superposition,[],[f160,f987])).
fof(f1126,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X18)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X18),X21),s('type.list.list'('type.semanticPrimitives.result'(bool,X18)),X22))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X18)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X18)),X20))) | s('type.semanticPrimitives.result'(bool,X18),X21) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rval_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f148,f987])).
fof(f1131,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X41),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X41),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X41),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X41),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'(bool,X41),X44) = s('type.semanticPrimitives.result'(bool,X41),'const.semanticPrimitives.Rval_1'(s(bool,X42))) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f160,f987])).
fof(f1133,plain,(
  ( ! [X52,X50,X51,X49] : (s('type.semanticPrimitives.result'(bool,X49),X51) != s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X49),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X49),X51))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X49),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,X50))))) | s(bool,'F_0') = s(bool,X50)) )),
  inference(superposition,[],[f161,f987])).
fof(f1161,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X22) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X21),s('type.list.list'(bool),X23))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X22),s('type.list.list'(bool),X23))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f918,f112])).
fof(f1164,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) != s(bool,X33) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X34))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X33),s('type.list.list'(bool),X34))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f918,f112])).
fof(f1172,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.semanticPrimitives.result'(bool,X66),X68) != s('type.semanticPrimitives.result'(bool,X66),'const.semanticPrimitives.Rval_1'(s(bool,X67))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X66)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X66),X68),s('type.list.list'('type.semanticPrimitives.result'(bool,X66)),X69))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X66)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X66),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X66)),X69))) | s(bool,'F_0') = s(bool,X67)) )),
  inference(superposition,[],[f918,f987])).
fof(f1173,plain,(
  ( ! [X70,X72,X71,X73] : (s('type.semanticPrimitives.result'(bool,X70),X72) != s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X70),X72),s('type.list.list'('type.semanticPrimitives.result'(bool,X70)),X73))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,X71))),s('type.list.list'('type.semanticPrimitives.result'(bool,X70)),X73))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f918,f987])).
fof(f1196,plain,(
  ( ! [X37,X35,X38] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X35),s('type.list.list'(bool),X38))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X37),s('type.list.list'(bool),X38))) | s(bool,'T_0') != s(bool,X37) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f1165,f765])).
fof(f1165,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'T_0') != s(bool,X37) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X37),s('type.list.list'(bool),X38))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X36,bool)),s('type.list.list'(bool),X38))) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f918,f837])).
fof(f1221,plain,(
  ( ! [X23,X25] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X23)),X25,bool)) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f947,f765])).
fof(f1255,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X63))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X64),s('type.list.list'(bool),X65))) | s(bool,X64) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X61)),X62,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X61)),X66,bool))) )),
  inference(superposition,[],[f148,f947])).
fof(f1260,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,X92))) | s(bool,X92) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X89)),X90,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X89)),X93,bool))) )),
  inference(superposition,[],[f160,f947])).
fof(f1286,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X68))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X69),s('type.list.list'(bool),X70))) | s(bool,X69) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X66)),X67,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X66)),X71,bool))) )),
  inference(superposition,[],[f148,f947])).
fof(f1291,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.semanticPrimitives.result'(bool,X96),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X96),'const.semanticPrimitives.Rval_1'(s(bool,X97))) | s(bool,X97) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X94)),X95,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X94)),X98,bool))) )),
  inference(superposition,[],[f160,f947])).
fof(f1335,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,X41) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X40,bool)) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X43,bool))) )),
  inference(subsumption_resolution,[],[f1250,f109])).
fof(f1250,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,'T_0')) | s(bool,X41) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X40,bool)) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X43,bool))) )),
  inference(superposition,[],[f494,f947])).
fof(f1336,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X50) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X49,bool)) | s(bool,'F_0') = s(bool,X50) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X51,bool))) )),
  inference(subsumption_resolution,[],[f1252,f109])).
fof(f1252,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s(bool,X50) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X49,bool)) | s(bool,'F_0') = s(bool,X50) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X51,bool))) )),
  inference(superposition,[],[f985,f947])).
fof(f1337,plain,(
  ( ! [X103,X101,X99,X102] : (s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X99))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X101))) | s(bool,'T_0') != s(bool,X101) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X103,bool))) )),
  inference(forward_demodulation,[],[f1262,f765])).
fof(f1262,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s(bool,'T_0') != s(bool,X101) | s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X101))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X100,bool)))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X103,bool))) )),
  inference(superposition,[],[f161,f947])).
fof(f1339,plain,(
  ( ! [X127,X125,X123,X126] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X123),s('type.list.list'(bool),X126))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X125),s('type.list.list'(bool),X126))) | s(bool,'T_0') != s(bool,X125) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X123)),X127,bool))) )),
  inference(forward_demodulation,[],[f1267,f765])).
fof(f1267,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(bool,'T_0') != s(bool,X125) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X125),s('type.list.list'(bool),X126))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X123)),X124,bool)),s('type.list.list'(bool),X126))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X123)),X127,bool))) )),
  inference(superposition,[],[f918,f947])).
fof(f1347,plain,(
  ( ! [X64,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X63)),X65,bool))) )),
  inference(subsumption_resolution,[],[f1285,f164])).
fof(f1285,plain,(
  ( ! [X64,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))) | s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5('const.semanticPrimitives.Rval_1'(s(bool,X63)),X64,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X63)),X65,bool))) )),
  inference(superposition,[],[f157,f947])).
fof(f1348,plain,(
  ( ! [X107,X108,X106,X104] : (s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,X104))) = s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,X106))) | s(bool,'F_0') != s(bool,X106) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X104)),X108,bool))) )),
  inference(forward_demodulation,[],[f1293,f765])).
fof(f1293,plain,(
  ( ! [X107,X105,X108,X106,X104] : (s(bool,'F_0') != s(bool,X106) | s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,X106))) = s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X104)),X105,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X104)),X108,bool))) )),
  inference(superposition,[],[f161,f947])).
fof(f1350,plain,(
  ( ! [X132,X130,X128,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X128),s('type.list.list'(bool),X131))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X130),s('type.list.list'(bool),X131))) | s(bool,'F_0') != s(bool,X130) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X128)),X132,bool))) )),
  inference(forward_demodulation,[],[f1298,f765])).
fof(f1298,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(bool,'F_0') != s(bool,X130) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X130),s('type.list.list'(bool),X131))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X128)),X129,bool)),s('type.list.list'(bool),X131))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X128)),X132,bool))) )),
  inference(superposition,[],[f918,f947])).
fof(f1393,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X64))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X65),s('type.list.list'(bool),X66))) | s(bool,X65) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X62)),X63,bool)) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f148,f1221])).
fof(f1398,plain,(
  ( ! [X88,X87,X85,X86] : (s('type.semanticPrimitives.result'(bool,X87),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X87),'const.semanticPrimitives.Rval_1'(s(bool,X88))) | s(bool,X88) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X85)),X86,bool)) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f160,f1221])).
fof(f1418,plain,(
  ( ! [X61,X60] : (s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,X60))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f1392,f164])).
fof(f1392,plain,(
  ( ! [X61,X60] : (s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,X60))) | s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rval_1'(s(bool,X60))) = s('type.semanticPrimitives.result'(bool,X61),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X61),sK5('const.semanticPrimitives.Rval_1'(s(bool,X60)),X61,bool)))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f157,f1221])).
fof(f1436,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,X46))) != s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,X49))) | s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X46)),X47,bool))) )),
  inference(superposition,[],[f234,f765])).
fof(f1439,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'(bool,X6),X7) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X8))) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,sK4(X7,X6,bool)) | s('type.semanticPrimitives.result'(bool,X6),X7) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,bool))))) )),
  inference(superposition,[],[f234,f157])).
fof(f1452,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X48))) != s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X49,bool)) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f234,f765])).
fof(f1455,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'(bool,X6),X7) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X8))) | s(bool,'F_0') = s(bool,sK4(X7,X6,bool)) | s(bool,'T_0') = s(bool,X8) | s('type.semanticPrimitives.result'(bool,X6),X7) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,bool))))) )),
  inference(superposition,[],[f234,f157])).
fof(f1496,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f156,f1418])).
fof(f1503,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X27),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X28))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X25))),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X26))) | s('type.semanticPrimitives.result'(bool,X24),X27) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f148,f1418])).
fof(f1508,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),X50))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X48))))) | s('type.semanticPrimitives.result'(bool,X47),X50) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f160,f1418])).
fof(f1510,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.semanticPrimitives.result'(bool,X55),X57) != s('type.semanticPrimitives.result'(bool,X55),'const.semanticPrimitives.Rval_1'(s(bool,X56))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X55),X58),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X55),X57))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X55),X58),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X55),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f161,f1418])).
fof(f1515,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'(bool,X74),X76) != s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,X75))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X74),X76),s('type.list.list'('type.semanticPrimitives.result'(bool,X74)),X77))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X74)),X77))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f918,f1418])).
fof(f1518,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X4),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f156,f1418])).
fof(f1527,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X27)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X27),X30),s('type.list.list'('type.semanticPrimitives.result'(bool,X27)),X31))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X27)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X27)),X29))) | s('type.semanticPrimitives.result'(bool,X27),X30) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f148,f1418])).
fof(f1532,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X50),X53))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'(bool,X50),X53) = s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f160,f1418])).
fof(f1534,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.semanticPrimitives.result'(bool,X58),X60) != s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X58),X60))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X59))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f161,f1418])).
fof(f1539,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.semanticPrimitives.result'(bool,X77),X79) != s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X77),X79),s('type.list.list'('type.semanticPrimitives.result'(bool,X77)),X80))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,X78))),s('type.list.list'('type.semanticPrimitives.result'(bool,X77)),X80))) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f918,f1418])).
fof(f1729,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f1728])).
fof(f1728,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X23,bool)) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X22)) )),
  inference(duplicate_literal_removal,[],[f1566])).
fof(f1566,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X23,bool)) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f833,f112])).
fof(f1797,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X54))) | s(bool,X57) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X54)),X55,bool)) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f235,f765])).
fof(f1801,plain,(
  ( ! [X12,X13,X11] : (s('type.semanticPrimitives.result'(bool,X11),X12) != s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X13) = s(bool,sK4(X12,X11,bool)) | s(bool,'T_0') = s(bool,X13) | s('type.semanticPrimitives.result'(bool,X11),X12) = s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,bool))))) )),
  inference(superposition,[],[f235,f157])).
fof(f1832,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X50,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X48)),X49,bool))) )),
  inference(superposition,[],[f1729,f765])).
fof(f1889,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X142) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X141,bool)) | s('type.semanticPrimitives.result'(bool,X143),'const.semanticPrimitives.Rval_1'(s(bool,X140))) = s('type.semanticPrimitives.result'(bool,X143),'const.semanticPrimitives.Rval_1'(s(bool,X142))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f161,f1729])).
fof(f1894,plain,(
  ( ! [X161,X159,X162,X160] : (s(bool,X161) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X160,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X159),s('type.list.list'(bool),X162))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X161),s('type.list.list'(bool),X162))) | s(bool,'T_0') = s(bool,X159)) )),
  inference(superposition,[],[f918,f1729])).
fof(f1931,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X95),s('type.list.list'(bool),X96))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X97),s('type.list.list'(bool),X98))) | s(bool,X97) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X94,bool)) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f148,f1729])).
fof(f1936,plain,(
  ( ! [X118,X120,X119,X117] : (s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,X118))) != s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,X120))) | s(bool,X120) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X117,bool)) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f160,f1729])).
fof(f2124,plain,(
  ( ! [X189,X187,X185,X188,X186] : (s(bool,X187) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X186,bool)) | s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X185))) = s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X187))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X185)),X189,bool))) )),
  inference(superposition,[],[f161,f1832])).
fof(f2129,plain,(
  ( ! [X212,X210,X213,X211,X209] : (s(bool,X211) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X210,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X209),s('type.list.list'(bool),X212))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X211),s('type.list.list'(bool),X212))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X209)),X213,bool))) )),
  inference(superposition,[],[f918,f1832])).
fof(f2168,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X135),s('type.list.list'(bool),X136))) | s(bool,X135) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X132,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X133)),X137,bool))) )),
  inference(superposition,[],[f148,f1832])).
fof(f2173,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s('type.semanticPrimitives.result'(bool,X162),'const.semanticPrimitives.Rval_1'(s(bool,X161))) != s('type.semanticPrimitives.result'(bool,X162),'const.semanticPrimitives.Rval_1'(s(bool,X163))) | s(bool,X163) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X160,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X161)),X164,bool))) )),
  inference(superposition,[],[f160,f1832])).
fof(f2210,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X126))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X127),s('type.list.list'(bool),X128))) | s(bool,X127) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X124)),X125,bool)) | s(bool,X124) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X129,bool))) )),
  inference(superposition,[],[f148,f1832])).
fof(f2215,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X154),'const.semanticPrimitives.Rval_1'(s(bool,X155))) | s(bool,X155) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X152)),X153,bool)) | s(bool,X152) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X156,bool))) )),
  inference(superposition,[],[f160,f1832])).
fof(f2276,plain,(
  ( ! [X152,X151,X149,X147,X150] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X149))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X150),s('type.list.list'(bool),X151))) | s(bool,X147) = s(bool,X150) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X147)),X152,bool))) )),
  inference(forward_demodulation,[],[f2117,f765])).
fof(f2117,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X150),s('type.list.list'(bool),X151))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X148,bool)),s('type.list.list'(bool),X149))) | s(bool,X147) = s(bool,X150) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X147)),X152,bool))) )),
  inference(superposition,[],[f148,f1832])).
fof(f2278,plain,(
  ( ! [X177,X175,X178,X179] : (s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,X178))) | s(bool,X175) = s(bool,X178) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X179,bool))) )),
  inference(forward_demodulation,[],[f2122,f765])).
fof(f2122,plain,(
  ( ! [X177,X175,X178,X176,X179] : (s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,X178))) != s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X176,bool)))) | s(bool,X175) = s(bool,X178) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X179,bool))) )),
  inference(superposition,[],[f160,f1832])).
fof(f2280,plain,(
  ( ! [X227,X225,X223,X224] : (s(bool,'F_0') != s(bool,f(s(X223,sK6(X224,X225,bool,X223)))) | s(fun(X223,bool),X224) = s(fun(X223,bool),X225) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(X223,sK6(X224,X225,bool,X223))))),X227,bool))) )),
  inference(forward_demodulation,[],[f2131,f765])).
fof(f2131,plain,(
  ( ! [X227,X225,X223,X226,X224] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X226,bool)) != s(bool,f(s(X223,sK6(X224,X225,bool,X223)))) | s(fun(X223,bool),X224) = s(fun(X223,bool),X225) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(X223,sK6(X224,X225,bool,X223))))),X227,bool))) )),
  inference(superposition,[],[f159,f1832])).
fof(f2281,plain,(
  ( ! [X231,X229,X228] : (s('type.semanticPrimitives.result'(bool,X229),X228) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'(bool,X229),X228) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X229),sK5(X228,X229,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4(X228,X229,bool))),X231,bool))) )),
  inference(forward_demodulation,[],[f2132,f765])).
fof(f2132,plain,(
  ( ! [X231,X229,X230,X228] : (s('type.semanticPrimitives.result'(bool,X229),X228) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X230,bool)))) | s('type.semanticPrimitives.result'(bool,X229),X228) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X229),sK5(X228,X229,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4(X228,X229,bool))),X231,bool))) )),
  inference(superposition,[],[f157,f1832])).
fof(f2283,plain,(
  ( ! [X237,X240,X238,X236] : (s(X238,f(s(bool,'F_0'))) != s(X238,g(s(bool,'F_0'))) | s(fun(bool,X238),X236) = s(fun(bool,X238),X237) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK6(X236,X237,X238,bool))),X240,bool))) )),
  inference(forward_demodulation,[],[f2134,f765])).
fof(f2134,plain,(
  ( ! [X239,X237,X240,X238,X236] : (s(X238,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X239,bool)))) != s(X238,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X239,bool)))) | s(fun(bool,X238),X236) = s(fun(bool,X238),X237) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK6(X236,X237,X238,bool))),X240,bool))) )),
  inference(superposition,[],[f159,f1832])).
fof(f2298,plain,(
  ( ! [X173,X171,X174,X172] : (s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rval_1'(s(bool,X172))) | s(bool,X171) != s(bool,X172) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X171)),X174,bool))) )),
  inference(forward_demodulation,[],[f2175,f765])).
fof(f2175,plain,(
  ( ! [X173,X171,X174,X172,X170] : (s(bool,X171) != s(bool,X172) | s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X170,bool)))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X171)),X174,bool))) )),
  inference(superposition,[],[f161,f1832])).
fof(f2300,plain,(
  ( ! [X198,X196,X197,X195] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X197))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X196),s('type.list.list'(bool),X197))) | s(bool,X195) != s(bool,X196) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X195)),X198,bool))) )),
  inference(forward_demodulation,[],[f2180,f765])).
fof(f2180,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s(bool,X195) != s(bool,X196) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X196),s('type.list.list'(bool),X197))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X194,bool)),s('type.list.list'(bool),X197))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X195)),X198,bool))) )),
  inference(superposition,[],[f918,f1832])).
fof(f2306,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(bool,X72) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,X70) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X74,bool))) )),
  inference(subsumption_resolution,[],[f2198,f109])).
fof(f2198,plain,(
  ( ! [X70,X74,X72,X71,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,X70) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X74,bool))) )),
  inference(superposition,[],[f494,f1832])).
fof(f2310,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,X101) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X100,bool)) | s(bool,'F_0') = s(bool,X101) | s(bool,X99) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X102,bool))) )),
  inference(subsumption_resolution,[],[f2204,f109])).
fof(f2204,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | s(bool,X101) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X99)),X100,bool)) | s(bool,'F_0') = s(bool,X101) | s(bool,X99) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X102,bool))) )),
  inference(superposition,[],[f985,f1832])).
fof(f2311,plain,(
  ( ! [X123,X121,X122] : (s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rval_1'(s(bool,X121))) | s(bool,X121) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X123,bool))) )),
  inference(subsumption_resolution,[],[f2209,f164])).
fof(f2209,plain,(
  ( ! [X123,X121,X122] : (s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rval_1'(s(bool,X121))) | s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rval_1'(s(bool,X121))) = s('type.semanticPrimitives.result'(bool,X122),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X122),sK5('const.semanticPrimitives.Rval_1'(s(bool,X121)),X122,bool)))) | s(bool,X121) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X123,bool))) )),
  inference(superposition,[],[f157,f1832])).
fof(f2312,plain,(
  ( ! [X165,X166,X164,X162] : (s('type.semanticPrimitives.result'(bool,X165),'const.semanticPrimitives.Rval_1'(s(bool,X162))) = s('type.semanticPrimitives.result'(bool,X165),'const.semanticPrimitives.Rval_1'(s(bool,X164))) | s(bool,'T_0') != s(bool,X164) | s(bool,X162) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X166,bool))) )),
  inference(forward_demodulation,[],[f2217,f765])).
fof(f2217,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(bool,'T_0') != s(bool,X164) | s('type.semanticPrimitives.result'(bool,X165),'const.semanticPrimitives.Rval_1'(s(bool,X164))) = s('type.semanticPrimitives.result'(bool,X165),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X162)),X163,bool)))) | s(bool,X162) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X166,bool))) )),
  inference(superposition,[],[f161,f1832])).
fof(f2314,plain,(
  ( ! [X189,X190,X188,X186] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X186),s('type.list.list'(bool),X189))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X188),s('type.list.list'(bool),X189))) | s(bool,'T_0') != s(bool,X188) | s(bool,X186) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X190,bool))) )),
  inference(forward_demodulation,[],[f2222,f765])).
fof(f2222,plain,(
  ( ! [X189,X187,X190,X188,X186] : (s(bool,'T_0') != s(bool,X188) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X188),s('type.list.list'(bool),X189))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X186)),X187,bool)),s('type.list.list'(bool),X189))) | s(bool,X186) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X190,bool))) )),
  inference(superposition,[],[f918,f1832])).
fof(f2363,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X2,bool)) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(condensation,[],[f2362])).
fof(f2362,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X21,bool)) | s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X20)) )),
  inference(duplicate_literal_removal,[],[f2324])).
fof(f2324,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X21,bool)) | s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f255,f833])).
fof(f4521,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X71),s('type.list.list'(bool),X73))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),X75))) | s(bool,'F_0') = s(bool,X74) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X71)),X72,bool))) )),
  inference(superposition,[],[f549,f765])).
fof(f4538,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X73),s('type.list.list'(bool),X77))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X75),s('type.list.list'(bool),X76))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f549,f765])).
fof(f4674,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X78))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X76),s('type.list.list'(bool),X79))) | s(bool,X80) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X76)),X77,bool)) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f554,f765])).
fof(f5030,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X7))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'(bool),X7) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f657,f112])).
fof(f5039,plain,(
  ( ! [X43,X41,X42] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X43))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X41))))) | s('type.list.list'(bool),X43) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f657,f112])).
fof(f5069,plain,(
  ( ! [X59,X57,X60] : (s('type.list.list'(bool),X60) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X57),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X59),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X60))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(forward_demodulation,[],[f5045,f765])).
fof(f5045,plain,(
  ( ! [X59,X57,X60,X58] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X59),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X60))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X60) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X57)),X58,bool)),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(superposition,[],[f657,f837])).
fof(f5875,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X2),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X2),X3))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),sK5(X3,X2,bool)))) | s('type.semanticPrimitives.result'(bool,X2),X3) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X3,X2,bool))) )),
  inference(superposition,[],[f155,f730])).
fof(f5876,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) != s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))) | s('type.semanticPrimitives.error_result'(X4),X6) = s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X5,X4,bool))) )),
  inference(superposition,[],[f162,f730])).
fof(f5878,plain,(
  ( ! [X12,X10,X11] : (s('type.semanticPrimitives.result'(bool,X10),X11) != s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s('type.semanticPrimitives.result'(bool,X10),X11) = s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X11,X10,bool))) )),
  inference(superposition,[],[f164,f730])).
fof(f5879,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X13),X15),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X13),X14))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X13),X15),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,X16))))) | s('type.semanticPrimitives.result'(bool,X13),X14) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X14,X13,bool))) )),
  inference(superposition,[],[f231,f730])).
fof(f5880,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X17),X18),s('type.list.list'('type.semanticPrimitives.result'(bool,X17)),X21))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X19))),s('type.list.list'('type.semanticPrimitives.result'(bool,X17)),X20))) | s('type.semanticPrimitives.result'(bool,X17),X18) = s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X18,X17,bool))) )),
  inference(superposition,[],[f542,f730])).
fof(f5881,plain,(
  ( ! [X24,X23,X22] : (s('type.semanticPrimitives.result'(bool,X22),X23) != s('type.semanticPrimitives.result'(bool,X22),X24) | s('type.semanticPrimitives.result'(bool,X22),X24) = s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X22),sK5(X24,X22,bool)))) | s('type.semanticPrimitives.result'(bool,X22),X23) = s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X23,X22,bool))) )),
  inference(superposition,[],[f751,f730])).
fof(f5884,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X31)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X31),X32),s('type.list.list'('type.semanticPrimitives.result'(bool,X31)),X33))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X31)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X31),X34),s('type.list.list'('type.semanticPrimitives.result'(bool,X31)),X35))) | s('type.semanticPrimitives.result'(bool,X31),X34) = s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X31),sK5(X32,X31,bool)))) | s('type.semanticPrimitives.result'(bool,X31),X32) = s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X32,X31,bool))) )),
  inference(superposition,[],[f148,f730])).
fof(f5889,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X54),X55))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X54),X57))) | s('type.semanticPrimitives.result'(bool,X54),X57) = s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X54),sK5(X55,X54,bool)))) | s('type.semanticPrimitives.result'(bool,X54),X55) = s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X55,X54,bool))) )),
  inference(superposition,[],[f160,f730])).
fof(f5891,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.semanticPrimitives.result'(bool,X62),X63) != s('type.semanticPrimitives.result'(bool,X62),X64) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X62),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X62),X64))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X62),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X62),sK5(X63,X62,bool)))))) | s('type.semanticPrimitives.result'(bool,X62),X63) = s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X63,X62,bool))) )),
  inference(superposition,[],[f161,f730])).
fof(f5896,plain,(
  ( ! [X88,X87,X85,X86] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X85)),X87),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X85)),X88))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X85)),X87),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X85),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X85),X86))))) | s('type.list.list'('type.semanticPrimitives.result'(bool,X85)),X88) = s('type.list.list'('type.semanticPrimitives.result'(bool,X85)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),sK5(X86,X85,bool)))),s('type.list.list'('type.semanticPrimitives.result'(bool,X85)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(bool,X85),X86) = s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X86,X85,bool))) )),
  inference(superposition,[],[f657,f730])).
fof(f5900,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.semanticPrimitives.result'(bool,X100),X101) != s('type.semanticPrimitives.result'(bool,X100),X102) | s('type.list.list'('type.semanticPrimitives.result'(bool,X100)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X100),X102),s('type.list.list'('type.semanticPrimitives.result'(bool,X100)),X103))) = s('type.list.list'('type.semanticPrimitives.result'(bool,X100)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X100),sK5(X101,X100,bool)))),s('type.list.list'('type.semanticPrimitives.result'(bool,X100)),X103))) | s('type.semanticPrimitives.result'(bool,X100),X101) = s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X101,X100,bool))) )),
  inference(superposition,[],[f918,f730])).
fof(f6198,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),X1) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X2) = s(bool,sK4(X1,X0,bool)) | s(bool,'T_0') = s(bool,X2) | s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X0),X1))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK5(X1,X0,bool))))) )),
  inference(superposition,[],[f235,f733])).
fof(f6199,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.result'(bool,X3),X4) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X5))) | s(bool,'F_0') = s(bool,sK4(X4,X3,bool)) | s(bool,'T_0') = s(bool,X5) | s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X3),X4))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),sK5(X4,X3,bool))))) )),
  inference(superposition,[],[f234,f733])).
fof(f6200,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'(bool,X6),X7) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X8))) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,sK4(X7,X6,bool)) | s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X6),X7))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,bool))))) )),
  inference(superposition,[],[f234,f733])).
fof(f6338,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.semanticPrimitives.result'(bool,X79),X80) != s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK4(X80,X79,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X77)),X78,bool)) | s('type.semanticPrimitives.result'(bool,X79),X80) = s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X79),sK5(X80,X79,bool)))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f749,f1221])).
fof(f6339,plain,(
  ( ! [X83,X81,X84,X82] : (s('type.semanticPrimitives.result'(bool,X83),X84) != s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK4(X84,X83,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X81)),X82,bool)) | s('type.semanticPrimitives.result'(bool,X83),X84) = s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),sK5(X84,X83,bool)))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f749,f837])).
fof(f6345,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X109),X111),X112) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X109),X111),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X109),X110))) | s('type.semanticPrimitives.result'(bool,X109),sK4(X112,X111,'type.semanticPrimitives.result'(bool,X109))) = s('type.semanticPrimitives.result'(bool,X109),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X109),sK5(X110,X109,bool)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X109),X111),X112) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X109),X111),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X111),sK5(X112,X111,'type.semanticPrimitives.result'(bool,X109))))) | s('type.semanticPrimitives.result'(bool,X109),X110) = s('type.semanticPrimitives.result'(bool,X109),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X110,X109,bool))) )),
  inference(superposition,[],[f749,f730])).
fof(f6478,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) != s('type.semanticPrimitives.result'(bool,X4),X6) | s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,bool)) = s('type.semanticPrimitives.error_result'(X4),sK5(X6,X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),X6) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X6,X4,bool)))) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X5,X4,bool))) )),
  inference(superposition,[],[f731,f730])).
fof(f6482,plain,(
  ( ! [X14,X12,X13] : (s('type.semanticPrimitives.result'(bool,X12),X13) != s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X14))) | s('type.semanticPrimitives.error_result'(X12),X14) = s('type.semanticPrimitives.error_result'(X12),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,bool))),X12,bool)) | s('type.semanticPrimitives.result'(bool,X12),X13) = s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X13,X12,bool))) )),
  inference(subsumption_resolution,[],[f6466,f164])).
fof(f6466,plain,(
  ( ! [X14,X12,X13] : (s('type.semanticPrimitives.result'(bool,X12),X13) != s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X14))) | s('type.semanticPrimitives.error_result'(X12),X14) = s('type.semanticPrimitives.error_result'(X12),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,bool))),X12,bool)) | s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,bool)))) = s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,bool))),X12,bool)))) | s('type.semanticPrimitives.result'(bool,X12),X13) = s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X13,X12,bool))) )),
  inference(superposition,[],[f731,f730])).
fof(f6948,plain,(
  ( ! [X12,X13] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X13),X12))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X13),X12) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X12,X13,bool)))) | s(bool,'T_0') = s(bool,sK4(X12,X13,bool))) )),
  inference(superposition,[],[f748,f112])).
fof(f7242,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X21))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X23))) | s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X21,X20,bool)))) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X23,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X23) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X23,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X21) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X21,X20,bool))) )),
  inference(superposition,[],[f741,f730])).
fof(f7341,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'(bool,X20),X21) != s('type.semanticPrimitives.result'(bool,X20),X22) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X21,X20,bool)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X22,X20,bool)))))) | s('type.semanticPrimitives.result'(bool,X20),X22) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X22,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X21) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X21,X20,bool))) )),
  inference(superposition,[],[f743,f730])).
fof(f7593,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X21))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X23))) | s('type.semanticPrimitives.result'(bool,X20),X23) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X23,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X21) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X21,X20,bool))) )),
  inference(subsumption_resolution,[],[f7535,f164])).
fof(f7535,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X21))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X20),X23))) | s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X23,X20,bool)))) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X21,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X23) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X23,X20,bool)))) | s('type.semanticPrimitives.result'(bool,X20),X21) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X21,X20,bool))) )),
  inference(superposition,[],[f757,f730])).
fof(f8295,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9) = s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f652,f112])).
fof(f8307,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X63),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66) = s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f652,f112])).
fof(f8329,plain,(
  ( ! [X158,X161,X159,X162,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X158),X159),s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X158),X160),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X158),sK5(X159,X158,bool)))))))) | s('type.semanticPrimitives.result'(bool,X158),X159) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X159,X158,bool))) )),
  inference(superposition,[],[f652,f730])).
fof(f8413,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8) != s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f654,f112])).
fof(f8425,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65) != s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X63),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f654,f112])).
fof(f8447,plain,(
  ( ! [X158,X161,X159,X162,X160] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X158),X159),s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X158),X160),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X158),sK5(X159,X158,bool)))))))))) | s('type.semanticPrimitives.result'(bool,X158),X159) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X159,X158,bool))) )),
  inference(superposition,[],[f654,f730])).
fof(f8624,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9) = s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X6),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f665,f112])).
fof(f8636,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66) = s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f665,f112])).
fof(f8658,plain,(
  ( ! [X158,X161,X159,X162,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X158),X160),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X158),X159))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X158),sK5(X159,X158,bool)))),s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X158),X159) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X159,X158,bool))) )),
  inference(superposition,[],[f665,f730])).
fof(f8773,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8) != s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),X8))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X7),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X6),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f667,f112])).
fof(f8785,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65) != s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),X65))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X64),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f667,f112])).
fof(f8807,plain,(
  ( ! [X158,X161,X159,X162,X160] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X158),X160),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X158),X159))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X161))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),X162),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X158)),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X158),sK5(X159,X158,bool)))),s('type.list.list'('type.semanticPrimitives.result'(bool,X158)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X158),X159) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X159,X158,bool))) )),
  inference(superposition,[],[f667,f730])).
fof(f8927,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X25),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X28))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X26),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X27))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X25,X24,bool)))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X26,X24,bool)))) | s('type.semanticPrimitives.result'(bool,X24),X26) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X26,X24,bool)))) | s('type.semanticPrimitives.result'(bool,X24),X25) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X25,X24,bool))) )),
  inference(superposition,[],[f736,f730])).
fof(f9080,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X25),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X28))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X26),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X27))) | s('type.semanticPrimitives.result'(bool,X24),X26) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X26,X24,bool)))) | s('type.semanticPrimitives.result'(bool,X24),X25) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X25,X24,bool))) )),
  inference(subsumption_resolution,[],[f9036,f164])).
fof(f9036,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X25),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X28))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X24),X26),s('type.list.list'('type.semanticPrimitives.result'(bool,X24)),X27))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,sK4(X26,X24,bool)))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X25,X24,bool)))) | s('type.semanticPrimitives.result'(bool,X24),X26) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X26,X24,bool)))) | s('type.semanticPrimitives.result'(bool,X24),X25) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X25,X24,bool))) )),
  inference(superposition,[],[f752,f730])).
fof(f9150,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),X9),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),X10))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),X11))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X8),X9) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X7))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f648,f112])).
fof(f9162,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X77),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),X79))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X77),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X76),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),X80))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X77),X78) = s('type.semanticPrimitives.result'('type.list.list'(bool),X77),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f648,f112])).
fof(f9184,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),X196),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),X197))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X193)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X193),X194),s('type.list.list'('type.semanticPrimitives.result'(bool,X193)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),X198))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),X196) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X193),X195),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X193),sK5(X194,X193,bool)))))))) | s('type.semanticPrimitives.result'(bool,X193),X194) = s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X194,X193,bool))) )),
  inference(superposition,[],[f648,f730])).
fof(f9304,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),X9),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),X10))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X8)),X11))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X8),X9) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f661,f112])).
fof(f9316,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X77),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),X79))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X77),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,X76))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X77)),X80))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X77),X78) = s('type.semanticPrimitives.result'('type.list.list'(bool),X77),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f661,f112])).
fof(f9338,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),X196),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),X197))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X193),X195),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X193),X194))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195)),X198))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),X196) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(bool,X193)),X195),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(bool,X193)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X193),sK5(X194,X193,bool)))),s('type.list.list'('type.semanticPrimitives.result'(bool,X193)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X193),X194) = s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X194,X193,bool))) )),
  inference(superposition,[],[f661,f730])).
fof(f12591,plain,(
  ( ! [X154,X152,X155,X153] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),X153))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),X155))) | s('type.semanticPrimitives.result'(bool,X152),X155) = s('type.semanticPrimitives.result'(bool,X152),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X152),sK5(X153,X152,bool))))),X154,'type.semanticPrimitives.result'(bool,X152))) | s('type.semanticPrimitives.result'(bool,X152),X153) = s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X153,X152,bool))) )),
  inference(superposition,[],[f789,f730])).
fof(f12644,plain,(
  ( ! [X103,X101,X102,X104] : (s('type.semanticPrimitives.result'(bool,X103),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X103),'const.semanticPrimitives.Rval_1'(s(bool,X104))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X101)),X102,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X104)),X103,bool)) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f789,f1221])).
fof(f12645,plain,(
  ( ! [X107,X105,X108,X106] : (s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X107),'const.semanticPrimitives.Rval_1'(s(bool,X108))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X105)),X106,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X108)),X107,bool)) | s(bool,'F_0') = s(bool,X105)) )),
  inference(superposition,[],[f789,f837])).
fof(f12657,plain,(
  ( ! [X154,X152,X155,X153] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),X153))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),X155))) | s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X152),sK5(X153,X152,bool)))) = s('type.semanticPrimitives.result'(bool,X152),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X152),X155)),X154,'type.semanticPrimitives.result'(bool,X152))) | s('type.semanticPrimitives.result'(bool,X152),X153) = s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X153,X152,bool))) )),
  inference(superposition,[],[f789,f730])).
fof(f13366,plain,(
  ( ! [X6,X7] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,bool)))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X6),X7)),X6,'type.list.list'(bool))))) | s('type.semanticPrimitives.result'(bool,X6),X7) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X7,X6,bool))) )),
  inference(superposition,[],[f4228,f730])).
fof(f15724,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f15723])).
fof(f15723,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X138)),X139,bool)) | s(bool,'T_0') = s(bool,X137) | s(bool,X138) = s(bool,X140) | s(bool,X140) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) )),
  inference(duplicate_literal_removal,[],[f15089])).
fof(f15089,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X138)),X139,bool)) | s(bool,'T_0') = s(bool,X137) | s(bool,X138) = s(bool,X140) | s(bool,X140) = s(bool,X141) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f1221,f282])).
fof(f16080,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4))) | s(bool,'F_0') = s(bool,X3) | s(bool,X1) = s(bool,X5) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f16079])).
fof(f16079,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X102),s('type.list.list'(bool),X103))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X104),s('type.list.list'(bool),X105))) | s(bool,'F_0') = s(bool,X104) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,X106) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(duplicate_literal_removal,[],[f14569])).
fof(f14569,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X102),s('type.list.list'(bool),X103))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X104),s('type.list.list'(bool),X105))) | s(bool,'F_0') = s(bool,X104) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,X106) | s(bool,'T_0') = s(bool,X101) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f549,f282])).
fof(f16086,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f16085])).
fof(f16085,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,X72) | s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,X72))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,X74) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f14564])).
fof(f14564,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,X72) | s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,X72))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X70) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f255,f282])).
fof(f16088,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f16087])).
fof(f16087,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X53))) != s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X55))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,X56) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(duplicate_literal_removal,[],[f14561])).
fof(f14561,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X53))) != s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X55))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X52) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f234,f282])).
fof(f16751,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X2,bool)) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f16750])).
fof(f16750,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X88) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X87,bool)) | s(bool,X88) = s(bool,X89) | s(bool,'T_0') = s(bool,X86) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(duplicate_literal_removal,[],[f13891])).
fof(f13891,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X88) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X87,bool)) | s(bool,X88) = s(bool,X89) | s(bool,'T_0') = s(bool,X86) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f282,f1729])).
fof(f17444,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f17443])).
fof(f17443,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f17442])).
fof(f17442,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,X76))) | s(bool,'T_0') = s(bool,X78) | s(bool,X76) = s(bool,X80) | s(bool,'T_0') = s(bool,X77) | s(bool,X80) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f14417,f171])).
fof(f14417,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X77) != s(bool,X78) | s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,X76))) | s(bool,'T_0') = s(bool,X78) | s(bool,X76) = s(bool,X80) | s(bool,'T_0') = s(bool,X77) | s(bool,X80) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f255,f282])).
fof(f17965,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),X9) != s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X10))) | s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,bool)) = s('type.semanticPrimitives.error_result'(X8),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X10)),X8,bool)) | s('type.semanticPrimitives.result'(bool,X8),X9) = s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X9,X8,bool))) )),
  inference(superposition,[],[f1022,f730])).
fof(f17989,plain,(
  ( ! [X6,X7] : (s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,bool)) = s('type.semanticPrimitives.error_result'(X6),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X6),X7)),X6,'type.list.list'(bool))) | s('type.semanticPrimitives.result'(bool,X6),X7) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X7,X6,bool))) )),
  inference(superposition,[],[f13351,f730])).
fof(f690,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f159,f171])).
fof(f692,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK6(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK6(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f159,f171])).
fof(f1627,plain,(
  ( ! [X210,X208,X211,X209,X207] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X210)),X211,bool)) != s(bool,f(s(X207,sK6(X208,X209,bool,X207)))) | s(fun(X207,bool),X208) = s(fun(X207,bool),X209) | s(bool,'T_0') = s(bool,X210) | s(bool,'T_0') = s(bool,g(s(X207,sK6(X208,X209,bool,X207))))) )),
  inference(superposition,[],[f159,f833])).
fof(f4847,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(trivial_inequality_removal,[],[f4840])).
fof(f4840,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f694,f112])).
fof(f14246,plain,(
  ( ! [X728,X730,X726,X729,X725,X727] : (s(bool,X728) != s(bool,f(s(X725,sK6(X726,X727,bool,X725)))) | s(fun(X725,bool),X726) = s(fun(X725,bool),X727) | s(bool,X728) = s(bool,X729) | s(bool,'T_0') = s(bool,X729) | s(bool,X730) = s(bool,g(s(X725,sK6(X726,X727,bool,X725)))) | s(bool,'T_0') = s(bool,X730)) )),
  inference(superposition,[],[f159,f282])).
fof(f14542,plain,(
  ( ! [X728,X730,X726,X729,X725,X727] : (s(bool,X728) != s(bool,f(s(X725,sK6(X726,X727,bool,X725)))) | s(fun(X725,bool),X726) = s(fun(X725,bool),X727) | s(bool,X729) = s(bool,g(s(X725,sK6(X726,X727,bool,X725)))) | s(bool,'T_0') = s(bool,X728) | s(bool,X729) = s(bool,X730) | s(bool,'T_0') = s(bool,X730)) )),
  inference(superposition,[],[f159,f282])).
fof(f14690,plain,(
  ( ! [X720,X716,X718,X721,X717,X719] : (s(bool,X719) != s(bool,f(s(X716,sK6(X717,X718,bool,X716)))) | s(fun(X716,bool),X717) = s(fun(X716,bool),X718) | s(bool,X719) = s(bool,X720) | s(bool,'T_0') = s(bool,g(s(X716,sK6(X717,X718,bool,X716)))) | s(bool,X720) = s(bool,X721) | s(bool,'T_0') = s(bool,X721)) )),
  inference(superposition,[],[f159,f282])).
fof(f14908,plain,(
  ( ! [X699,X700,X702,X704,X701,X703] : (s(bool,'T_0') != s(bool,f(s(X699,sK6(X700,X701,bool,X699)))) | s(fun(X699,bool),X700) = s(fun(X699,bool),X701) | s(bool,X702) = s(bool,X703) | s(bool,X703) = s(bool,g(s(X699,sK6(X700,X701,bool,X699)))) | s(bool,X702) = s(bool,X704) | s(bool,'T_0') = s(bool,X704)) )),
  inference(superposition,[],[f159,f282])).
fof(f17523,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f17522])).
fof(f17522,plain,(
  ( ! [X466,X463,X465,X467,X468,X464] : (s(fun(X463,bool),X464) = s(fun(X463,bool),X465) | s(bool,'T_0') = s(bool,g(s(X463,sK6(X464,X465,bool,X463)))) | s(bool,X467) = s(bool,f(s(X463,sK6(X464,X465,bool,X463)))) | s(bool,'T_0') = s(bool,X466) | s(bool,X467) = s(bool,X468) | s(bool,'T_0') = s(bool,X468)) )),
  inference(subsumption_resolution,[],[f14498,f112])).
fof(f14498,plain,(
  ( ! [X466,X463,X465,X467,X468,X464] : (s(bool,'F_0') != s(bool,X466) | s(fun(X463,bool),X464) = s(fun(X463,bool),X465) | s(bool,'T_0') = s(bool,g(s(X463,sK6(X464,X465,bool,X463)))) | s(bool,X467) = s(bool,f(s(X463,sK6(X464,X465,bool,X463)))) | s(bool,'T_0') = s(bool,X466) | s(bool,X467) = s(bool,X468) | s(bool,'T_0') = s(bool,X468)) )),
  inference(superposition,[],[f694,f282])).
fof(f18292,plain,(
  ( ! [X596,X598,X594,X597,X595] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X597)),X598,bool)) != s(bool,f(s(X594,sK6(X595,X596,bool,X594)))) | s(fun(X594,bool),X595) = s(fun(X594,bool),X596) | s('type.semanticPrimitives.result'(bool,X598),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X598),'const.semanticPrimitives.Rval_1'(s(bool,X597))) | s(bool,'T_0') = s(bool,g(s(X594,sK6(X595,X596,bool,X594))))) )),
  inference(superposition,[],[f159,f782])).
fof(f1744,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X3,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f1743])).
fof(f1743,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X3)),X4,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f1549])).
fof(f1549,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X3)),X4,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f833,f833])).
fof(f6340,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s('type.semanticPrimitives.result'(bool,X88),X89) != s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,sK4(X89,X88,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X85)),X86,bool)) | s('type.semanticPrimitives.result'(bool,X88),X89) = s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X88),sK5(X89,X88,bool)))) | s(bool,'T_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f749,f833])).
fof(f12646,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s('type.semanticPrimitives.result'(bool,X112),'const.semanticPrimitives.Rval_1'(s(bool,X111))) != s('type.semanticPrimitives.result'(bool,X112),'const.semanticPrimitives.Rval_1'(s(bool,X113))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X109)),X110,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X113)),X112,bool)) | s(bool,'T_0') = s(bool,X109) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f789,f833])).
fof(f18396,plain,(
  ( ! [X436,X434,X437,X433,X435] : (s('type.semanticPrimitives.result'(bool,X436),X437) != s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rval_1'(s(bool,X435))) | s(bool,sK4(X437,X436,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X433)),X434,bool)) | s('type.semanticPrimitives.result'(bool,X436),X437) = s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X436),sK5(X437,X436,bool)))) | s('type.semanticPrimitives.result'(bool,X434),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X434),'const.semanticPrimitives.Rval_1'(s(bool,X433))) | s(bool,'T_0') = s(bool,X435)) )),
  inference(superposition,[],[f749,f782])).
fof(f18399,plain,(
  ( ! [X447,X449,X451,X448,X450] : (s('type.semanticPrimitives.result'(bool,X450),'const.semanticPrimitives.Rval_1'(s(bool,X449))) != s('type.semanticPrimitives.result'(bool,X450),'const.semanticPrimitives.Rval_1'(s(bool,X451))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X447)),X448,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X451)),X450,bool)) | s('type.semanticPrimitives.result'(bool,X448),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X448),'const.semanticPrimitives.Rval_1'(s(bool,X447))) | s(bool,'T_0') = s(bool,X449)) )),
  inference(superposition,[],[f789,f782])).
fof(f18487,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f18486])).
fof(f18486,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X75)),X76,bool)) | s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,X75))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X73)) )),
  inference(duplicate_literal_removal,[],[f18094])).
fof(f18094,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X75)),X76,bool)) | s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,X75))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f782,f833])).
fof(f726,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),X0) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X1),X0) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X0,X1,bool)))) | s(bool,X2) = s(bool,sK4(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f157,f171])).
fof(f728,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'(bool,X7),X6) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X8))) | s('type.semanticPrimitives.result'(bool,X7),X6) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X6,X7,bool)))) | s(bool,'T_0') = s(bool,sK4(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f157,f171])).
fof(f6158,plain,(
  ( ! [X14,X15,X16] : (s('type.semanticPrimitives.result'(bool,X15),X14) = s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X15),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X15),X14))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X15),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X15),sK5(X14,X15,bool)))) | s(bool,X16) = s(bool,sK4(X14,X15,bool)) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f733,f171])).
fof(f6159,plain,(
  ( ! [X19,X17,X18] : (s('type.semanticPrimitives.result'(bool,X18),X17) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rval_1'(s(bool,X19))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X18),X17))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK5(X17,X18,bool)))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,sK4(X17,X18,bool))) )),
  inference(superposition,[],[f733,f171])).
fof(f6317,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(bool,X9),X10) != s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X8) = s(bool,sK4(X10,X9,bool)) | s('type.semanticPrimitives.result'(bool,X9),X10) = s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,bool)))) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f749,f171])).
fof(f6318,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'(bool,X14),X15) != s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rval_1'(s(bool,X13))) | s(bool,X12) = s(bool,sK4(X15,X14,bool)) | s('type.semanticPrimitives.result'(bool,X14),X15) = s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),sK5(X15,X14,bool)))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f749,f171])).
fof(f6326,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.semanticPrimitives.result'(bool,X43),X44) != s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,sK4(X44,X43,bool)) | s('type.semanticPrimitives.result'(bool,X43),X44) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),sK5(X44,X43,bool)))) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f749,f171])).
fof(f6949,plain,(
  ( ! [X14,X15,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X15),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X15),X14))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X15),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X15),X14) = s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X15),sK5(X14,X15,bool)))) | s(bool,X16) = s(bool,sK4(X14,X15,bool)) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f748,f171])).
fof(f6950,plain,(
  ( ! [X19,X17,X18] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X18),X17))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X18),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X19),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X18),X17) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK5(X17,X18,bool)))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,sK4(X17,X18,bool))) )),
  inference(superposition,[],[f748,f171])).
fof(f14239,plain,(
  ( ! [X685,X681,X683,X684,X680,X682] : (s('type.semanticPrimitives.result'(bool,X682),X683) != s('type.semanticPrimitives.result'(bool,X682),'const.semanticPrimitives.Rval_1'(s(bool,X681))) | s(bool,X680) = s(bool,sK4(X683,X682,bool)) | s('type.semanticPrimitives.result'(bool,X682),X683) = s('type.semanticPrimitives.result'(bool,X682),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X682),sK5(X683,X682,bool)))) | s(bool,X681) = s(bool,X684) | s(bool,'T_0') = s(bool,X684) | s(bool,X680) = s(bool,X685) | s(bool,'T_0') = s(bool,X685)) )),
  inference(superposition,[],[f749,f282])).
fof(f14248,plain,(
  ( ! [X736,X738,X737,X739,X740] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X737),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X737),X736))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X737),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X738),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X737),X736) = s('type.semanticPrimitives.result'(bool,X737),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X737),sK5(X736,X737,bool)))) | s(bool,X738) = s(bool,X739) | s(bool,'T_0') = s(bool,X739) | s(bool,X740) = s(bool,sK4(X736,X737,bool)) | s(bool,'T_0') = s(bool,X740)) )),
  inference(superposition,[],[f748,f282])).
fof(f14249,plain,(
  ( ! [X745,X741,X743,X744,X742] : (s('type.semanticPrimitives.result'(bool,X742),X741) = s('type.semanticPrimitives.result'(bool,X742),'const.semanticPrimitives.Rval_1'(s(bool,X743))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X742),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X742),X741))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X742),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X742),sK5(X741,X742,bool)))) | s(bool,X743) = s(bool,X744) | s(bool,'T_0') = s(bool,X744) | s(bool,X745) = s(bool,sK4(X741,X742,bool)) | s(bool,'T_0') = s(bool,X745)) )),
  inference(superposition,[],[f733,f282])).
fof(f14250,plain,(
  ( ! [X749,X747,X748,X750,X746] : (s('type.semanticPrimitives.result'(bool,X747),X746) = s('type.semanticPrimitives.result'(bool,X747),'const.semanticPrimitives.Rval_1'(s(bool,X748))) | s('type.semanticPrimitives.result'(bool,X747),X746) = s('type.semanticPrimitives.result'(bool,X747),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X747),sK5(X746,X747,bool)))) | s(bool,X748) = s(bool,X749) | s(bool,'T_0') = s(bool,X749) | s(bool,X750) = s(bool,sK4(X746,X747,bool)) | s(bool,'T_0') = s(bool,X750)) )),
  inference(superposition,[],[f157,f282])).
fof(f14535,plain,(
  ( ! [X685,X681,X683,X684,X680,X682] : (s('type.semanticPrimitives.result'(bool,X682),X683) != s('type.semanticPrimitives.result'(bool,X682),'const.semanticPrimitives.Rval_1'(s(bool,X681))) | s(bool,X680) = s(bool,sK4(X683,X682,bool)) | s('type.semanticPrimitives.result'(bool,X682),X683) = s('type.semanticPrimitives.result'(bool,X682),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X682),sK5(X683,X682,bool)))) | s(bool,X680) = s(bool,X684) | s(bool,'T_0') = s(bool,X681) | s(bool,X684) = s(bool,X685) | s(bool,'T_0') = s(bool,X685)) )),
  inference(superposition,[],[f749,f282])).
fof(f14544,plain,(
  ( ! [X736,X738,X737,X739,X740] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X737),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X737),X736))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X737),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X738),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X737),X736) = s('type.semanticPrimitives.result'(bool,X737),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X737),sK5(X736,X737,bool)))) | s(bool,X739) = s(bool,sK4(X736,X737,bool)) | s(bool,'T_0') = s(bool,X738) | s(bool,X739) = s(bool,X740) | s(bool,'T_0') = s(bool,X740)) )),
  inference(superposition,[],[f748,f282])).
fof(f14545,plain,(
  ( ! [X745,X741,X743,X744,X742] : (s('type.semanticPrimitives.result'(bool,X742),X741) = s('type.semanticPrimitives.result'(bool,X742),'const.semanticPrimitives.Rval_1'(s(bool,X743))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X742),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X742),X741))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X742),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X742),sK5(X741,X742,bool)))) | s(bool,X744) = s(bool,sK4(X741,X742,bool)) | s(bool,'T_0') = s(bool,X743) | s(bool,X744) = s(bool,X745) | s(bool,'T_0') = s(bool,X745)) )),
  inference(superposition,[],[f733,f282])).
fof(f14546,plain,(
  ( ! [X749,X747,X748,X750,X746] : (s('type.semanticPrimitives.result'(bool,X747),X746) = s('type.semanticPrimitives.result'(bool,X747),'const.semanticPrimitives.Rval_1'(s(bool,X748))) | s('type.semanticPrimitives.result'(bool,X747),X746) = s('type.semanticPrimitives.result'(bool,X747),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X747),sK5(X746,X747,bool)))) | s(bool,X749) = s(bool,sK4(X746,X747,bool)) | s(bool,'T_0') = s(bool,X748) | s(bool,X749) = s(bool,X750) | s(bool,'T_0') = s(bool,X750)) )),
  inference(superposition,[],[f157,f282])).
fof(f14683,plain,(
  ( ! [X673,X675,X671,X676,X672,X674] : (s('type.semanticPrimitives.result'(bool,X673),X674) != s('type.semanticPrimitives.result'(bool,X673),'const.semanticPrimitives.Rval_1'(s(bool,X672))) | s(bool,X671) = s(bool,sK4(X674,X673,bool)) | s('type.semanticPrimitives.result'(bool,X673),X674) = s('type.semanticPrimitives.result'(bool,X673),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X673),sK5(X674,X673,bool)))) | s(bool,X672) = s(bool,X675) | s(bool,'T_0') = s(bool,X671) | s(bool,X675) = s(bool,X676) | s(bool,'T_0') = s(bool,X676)) )),
  inference(superposition,[],[f749,f282])).
fof(f14692,plain,(
  ( ! [X728,X730,X729,X731,X727] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X728),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X728),X727))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X728),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X729),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X728),X727) = s('type.semanticPrimitives.result'(bool,X728),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X728),sK5(X727,X728,bool)))) | s(bool,X729) = s(bool,X730) | s(bool,'T_0') = s(bool,sK4(X727,X728,bool)) | s(bool,X730) = s(bool,X731) | s(bool,'T_0') = s(bool,X731)) )),
  inference(superposition,[],[f748,f282])).
fof(f14693,plain,(
  ( ! [X736,X732,X734,X733,X735] : (s('type.semanticPrimitives.result'(bool,X733),X732) = s('type.semanticPrimitives.result'(bool,X733),'const.semanticPrimitives.Rval_1'(s(bool,X734))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X733),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X733),X732))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X733),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X733),sK5(X732,X733,bool)))) | s(bool,X734) = s(bool,X735) | s(bool,'T_0') = s(bool,sK4(X732,X733,bool)) | s(bool,X735) = s(bool,X736) | s(bool,'T_0') = s(bool,X736)) )),
  inference(superposition,[],[f733,f282])).
fof(f14694,plain,(
  ( ! [X738,X741,X737,X739,X740] : (s('type.semanticPrimitives.result'(bool,X738),X737) = s('type.semanticPrimitives.result'(bool,X738),'const.semanticPrimitives.Rval_1'(s(bool,X739))) | s('type.semanticPrimitives.result'(bool,X738),X737) = s('type.semanticPrimitives.result'(bool,X738),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X738),sK5(X737,X738,bool)))) | s(bool,X739) = s(bool,X740) | s(bool,'T_0') = s(bool,sK4(X737,X738,bool)) | s(bool,X740) = s(bool,X741) | s(bool,'T_0') = s(bool,X741)) )),
  inference(superposition,[],[f157,f282])).
fof(f14766,plain,(
  ( ! [X372,X368,X370,X367,X369,X371] : (s('type.semanticPrimitives.result'(bool,X368),X369) != s('type.semanticPrimitives.result'(bool,X368),'const.semanticPrimitives.Rval_1'(s(bool,X367))) | s(bool,'T_0') = s(bool,sK4(X369,X368,bool)) | s('type.semanticPrimitives.result'(bool,X368),X369) = s('type.semanticPrimitives.result'(bool,X368),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X368),sK5(X369,X368,bool)))) | s(bool,X370) = s(bool,X371) | s(bool,X367) = s(bool,X371) | s(bool,X370) = s(bool,X372) | s(bool,'T_0') = s(bool,X372)) )),
  inference(superposition,[],[f749,f282])).
fof(f14901,plain,(
  ( ! [X660,X656,X658,X661,X657,X659] : (s('type.semanticPrimitives.result'(bool,X657),X658) != s('type.semanticPrimitives.result'(bool,X657),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X656) = s(bool,sK4(X658,X657,bool)) | s('type.semanticPrimitives.result'(bool,X657),X658) = s('type.semanticPrimitives.result'(bool,X657),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X657),sK5(X658,X657,bool)))) | s(bool,X659) = s(bool,X660) | s(bool,X656) = s(bool,X660) | s(bool,X659) = s(bool,X661) | s(bool,'T_0') = s(bool,X661)) )),
  inference(superposition,[],[f749,f282])).
fof(f14910,plain,(
  ( ! [X712,X714,X710,X713,X711] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X711),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X711),X710))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X711),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X711),X710) = s('type.semanticPrimitives.result'(bool,X711),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X711),sK5(X710,X711,bool)))) | s(bool,X712) = s(bool,X713) | s(bool,X713) = s(bool,sK4(X710,X711,bool)) | s(bool,X712) = s(bool,X714) | s(bool,'T_0') = s(bool,X714)) )),
  inference(superposition,[],[f748,f282])).
fof(f14911,plain,(
  ( ! [X716,X718,X717,X719,X715] : (s('type.semanticPrimitives.result'(bool,X716),X715) = s('type.semanticPrimitives.result'(bool,X716),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X716),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X716),X715))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X716),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X716),sK5(X715,X716,bool)))) | s(bool,X717) = s(bool,X718) | s(bool,X718) = s(bool,sK4(X715,X716,bool)) | s(bool,X717) = s(bool,X719) | s(bool,'T_0') = s(bool,X719)) )),
  inference(superposition,[],[f733,f282])).
fof(f14912,plain,(
  ( ! [X724,X720,X722,X721,X723] : (s('type.semanticPrimitives.result'(bool,X721),X720) = s('type.semanticPrimitives.result'(bool,X721),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X721),X720) = s('type.semanticPrimitives.result'(bool,X721),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X721),sK5(X720,X721,bool)))) | s(bool,X722) = s(bool,X723) | s(bool,X723) = s(bool,sK4(X720,X721,bool)) | s(bool,X722) = s(bool,X724) | s(bool,'T_0') = s(bool,X724)) )),
  inference(superposition,[],[f157,f282])).
fof(f18638,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s('type.semanticPrimitives.result'(bool,X557),X558) != s('type.semanticPrimitives.result'(bool,X557),'const.semanticPrimitives.Rval_1'(s(bool,X555))) | s(bool,X554) = s(bool,sK4(X558,X557,bool)) | s('type.semanticPrimitives.result'(bool,X557),X558) = s('type.semanticPrimitives.result'(bool,X557),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X557),sK5(X558,X557,bool)))) | s('type.semanticPrimitives.result'(bool,X556),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X556),'const.semanticPrimitives.Rval_1'(s(bool,X555))) | s(bool,'T_0') = s(bool,X554)) )),
  inference(forward_demodulation,[],[f18285,f765])).
fof(f18285,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s('type.semanticPrimitives.result'(bool,X557),X558) != s('type.semanticPrimitives.result'(bool,X557),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X555)),X556,bool)))) | s(bool,X554) = s(bool,sK4(X558,X557,bool)) | s('type.semanticPrimitives.result'(bool,X557),X558) = s('type.semanticPrimitives.result'(bool,X557),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X557),sK5(X558,X557,bool)))) | s('type.semanticPrimitives.result'(bool,X556),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X556),'const.semanticPrimitives.Rval_1'(s(bool,X555))) | s(bool,'T_0') = s(bool,X554)) )),
  inference(superposition,[],[f749,f782])).
fof(f18641,plain,(
  ( ! [X602,X601,X603,X604] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X602),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X602),X601))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X602),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X603),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X602),X601) = s('type.semanticPrimitives.result'(bool,X602),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X602),sK5(X601,X602,bool)))) | s('type.semanticPrimitives.result'(bool,X604),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X604),'const.semanticPrimitives.Rval_1'(s(bool,X603))) | s(bool,'T_0') = s(bool,sK4(X601,X602,bool))) )),
  inference(forward_demodulation,[],[f18293,f765])).
fof(f18293,plain,(
  ( ! [X602,X601,X603,X604] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X602),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X602),X601))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X602),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X603)),X604,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X602),X601) = s('type.semanticPrimitives.result'(bool,X602),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X602),sK5(X601,X602,bool)))) | s('type.semanticPrimitives.result'(bool,X604),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X604),'const.semanticPrimitives.Rval_1'(s(bool,X603))) | s(bool,'T_0') = s(bool,sK4(X601,X602,bool))) )),
  inference(superposition,[],[f748,f782])).
fof(f18642,plain,(
  ( ! [X606,X605,X607,X608] : (s('type.semanticPrimitives.result'(bool,X606),X605) = s('type.semanticPrimitives.result'(bool,X606),'const.semanticPrimitives.Rval_1'(s(bool,X607))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X606),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X606),X605))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X606),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X606),sK5(X605,X606,bool)))) | s('type.semanticPrimitives.result'(bool,X608),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X608),'const.semanticPrimitives.Rval_1'(s(bool,X607))) | s(bool,'T_0') = s(bool,sK4(X605,X606,bool))) )),
  inference(forward_demodulation,[],[f18294,f765])).
fof(f18294,plain,(
  ( ! [X606,X605,X607,X608] : (s('type.semanticPrimitives.result'(bool,X606),X605) = s('type.semanticPrimitives.result'(bool,X606),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X607)),X608,bool)))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X606),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X606),X605))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X606),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X606),sK5(X605,X606,bool)))) | s('type.semanticPrimitives.result'(bool,X608),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X608),'const.semanticPrimitives.Rval_1'(s(bool,X607))) | s(bool,'T_0') = s(bool,sK4(X605,X606,bool))) )),
  inference(superposition,[],[f733,f782])).
fof(f18643,plain,(
  ( ! [X609,X611,X612,X610] : (s('type.semanticPrimitives.result'(bool,X610),X609) = s('type.semanticPrimitives.result'(bool,X610),'const.semanticPrimitives.Rval_1'(s(bool,X611))) | s('type.semanticPrimitives.result'(bool,X610),X609) = s('type.semanticPrimitives.result'(bool,X610),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X610),sK5(X609,X610,bool)))) | s('type.semanticPrimitives.result'(bool,X612),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X612),'const.semanticPrimitives.Rval_1'(s(bool,X611))) | s(bool,'T_0') = s(bool,sK4(X609,X610,bool))) )),
  inference(forward_demodulation,[],[f18295,f765])).
fof(f18295,plain,(
  ( ! [X609,X611,X612,X610] : (s('type.semanticPrimitives.result'(bool,X610),X609) = s('type.semanticPrimitives.result'(bool,X610),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X611)),X612,bool)))) | s('type.semanticPrimitives.result'(bool,X610),X609) = s('type.semanticPrimitives.result'(bool,X610),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X610),sK5(X609,X610,bool)))) | s('type.semanticPrimitives.result'(bool,X612),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X612),'const.semanticPrimitives.Rval_1'(s(bool,X611))) | s(bool,'T_0') = s(bool,sK4(X609,X610,bool))) )),
  inference(superposition,[],[f157,f782])).
fof(f18693,plain,(
  ( ! [X453,X455,X452,X454,X456] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X452),s('type.list.list'(bool),X456))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X455),s('type.list.list'(bool),X456))) | s(bool,X454) != s(bool,X455) | s('type.semanticPrimitives.result'(bool,X453),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X453),'const.semanticPrimitives.Rval_1'(s(bool,X452))) | s(bool,'T_0') = s(bool,X454)) )),
  inference(forward_demodulation,[],[f18400,f765])).
fof(f18400,plain,(
  ( ! [X453,X455,X452,X454,X456] : (s(bool,X454) != s(bool,X455) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X455),s('type.list.list'(bool),X456))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X452)),X453,bool)),s('type.list.list'(bool),X456))) | s('type.semanticPrimitives.result'(bool,X453),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X453),'const.semanticPrimitives.Rval_1'(s(bool,X452))) | s(bool,'T_0') = s(bool,X454)) )),
  inference(superposition,[],[f918,f782])).
fof(f18692,plain,(
  ( ! [X445,X443,X444,X446,X442] : (s(bool,X446) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X442)),X445,bool)) | s('type.semanticPrimitives.result'(bool,X445),'const.semanticPrimitives.Rval_1'(s(bool,X444))) != s('type.semanticPrimitives.result'(bool,X445),'const.semanticPrimitives.Rval_1'(s(bool,X446))) | s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,X444)) )),
  inference(forward_demodulation,[],[f18398,f765])).
fof(f18398,plain,(
  ( ! [X445,X443,X444,X446,X442] : (s('type.semanticPrimitives.result'(bool,X445),'const.semanticPrimitives.Rval_1'(s(bool,X444))) != s('type.semanticPrimitives.result'(bool,X445),'const.semanticPrimitives.Rval_1'(s(bool,X446))) | s(bool,X446) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X442)),X443,bool))),X445,bool)) | s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X443),'const.semanticPrimitives.Rval_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,X444)) )),
  inference(superposition,[],[f789,f782])).
fof(f18691,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X420),X422),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X420),X421))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X420),X422),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X420),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X417),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X420),X421) != s('type.semanticPrimitives.result'('type.list.list'(bool),X420),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X420),'const.semanticPrimitives.Rval_1'(s(bool,X419))))) | s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,X417))) | s(bool,'T_0') = s(bool,X419)) )),
  inference(forward_demodulation,[],[f18393,f765])).
fof(f18393,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X420),X421) != s('type.semanticPrimitives.result'('type.list.list'(bool),X420),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X420),'const.semanticPrimitives.Rval_1'(s(bool,X419))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X420),X422),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X420),X421))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X420),X422),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X420),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X417)),X418,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,X417))) | s(bool,'T_0') = s(bool,X419)) )),
  inference(superposition,[],[f667,f782])).
fof(f18690,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X414),X416) = s('type.semanticPrimitives.result'('type.list.list'(bool),X414),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X411),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X414),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X414),X416))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X414),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X414),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X414),'const.semanticPrimitives.Rval_1'(s(bool,X413))))))) | s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,X411))) | s(bool,'T_0') = s(bool,X413)) )),
  inference(forward_demodulation,[],[f18392,f765])).
fof(f18392,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X414),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X414),X416))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X414),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X414),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X414),'const.semanticPrimitives.Rval_1'(s(bool,X413))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X414),X416) = s('type.semanticPrimitives.result'('type.list.list'(bool),X414),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X411)),X412,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X412),'const.semanticPrimitives.Rval_1'(s(bool,X411))) | s(bool,'T_0') = s(bool,X413)) )),
  inference(superposition,[],[f665,f782])).
fof(f18689,plain,(
  ( ! [X408,X410,X405,X407,X409,X404,X406] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X407),X408) = s('type.semanticPrimitives.result'('type.list.list'(bool),X407),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X404),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X407),X408),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),X409))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X407),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X407),'const.semanticPrimitives.Rval_1'(s(bool,X406))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),X410))) | s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,X404))) | s(bool,'T_0') = s(bool,X406)) )),
  inference(forward_demodulation,[],[f18391,f765])).
fof(f18391,plain,(
  ( ! [X408,X410,X405,X407,X409,X404,X406] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X407),X408),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),X409))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X407),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X407),'const.semanticPrimitives.Rval_1'(s(bool,X406))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X407)),X410))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X407),X408) = s('type.semanticPrimitives.result'('type.list.list'(bool),X407),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X404)),X405,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X405),'const.semanticPrimitives.Rval_1'(s(bool,X404))) | s(bool,'T_0') = s(bool,X406)) )),
  inference(superposition,[],[f661,f782])).
fof(f18688,plain,(
  ( ! [X397,X395,X396,X398,X394] : (s('type.list.list'(bool),X398) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X394),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X397),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X398))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X397),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X397),'const.semanticPrimitives.Rval_1'(s(bool,X396))))) | s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,X394))) | s(bool,'T_0') = s(bool,X396)) )),
  inference(forward_demodulation,[],[f18389,f765])).
fof(f18389,plain,(
  ( ! [X397,X395,X396,X398,X394] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X397),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X398))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X397),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X397),'const.semanticPrimitives.Rval_1'(s(bool,X396))))) | s('type.list.list'(bool),X398) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X394)),X395,bool)),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X395),'const.semanticPrimitives.Rval_1'(s(bool,X394))) | s(bool,'T_0') = s(bool,X396)) )),
  inference(superposition,[],[f657,f782])).
fof(f18687,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X391),X393),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X391),X392))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X391),X393),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X391),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,X388))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X391),X392) != s('type.semanticPrimitives.result'('type.list.list'(bool),X391),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X390),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,X388))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(forward_demodulation,[],[f18388,f765])).
fof(f18388,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X391),X392) != s('type.semanticPrimitives.result'('type.list.list'(bool),X391),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X390),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X391),X393),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X391),X392))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X391),X393),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X391),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X388)),X389,bool)))))))) | s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X389),'const.semanticPrimitives.Rval_1'(s(bool,X388))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(superposition,[],[f654,f782])).
fof(f18686,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X385),X387) = s('type.semanticPrimitives.result'('type.list.list'(bool),X385),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X385),'const.semanticPrimitives.Rval_1'(s(bool,X382))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X385),X386),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X385),X387))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X385),X386),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X385),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X384),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,X382))) | s(bool,'T_0') = s(bool,X384)) )),
  inference(forward_demodulation,[],[f18387,f765])).
fof(f18387,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X385),X386),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X385),X387))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X385),X386),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X385),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X384),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X385),X387) = s('type.semanticPrimitives.result'('type.list.list'(bool),X385),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X385),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X382)),X383,bool)))))) | s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X383),'const.semanticPrimitives.Rval_1'(s(bool,X382))) | s(bool,'T_0') = s(bool,X384)) )),
  inference(superposition,[],[f652,f782])).
fof(f18685,plain,(
  ( ! [X377,X379,X380,X376,X378,X375,X381] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X378),X379) = s('type.semanticPrimitives.result'('type.list.list'(bool),X378),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X378),'const.semanticPrimitives.Rval_1'(s(bool,X375))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X378),X379),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),X380))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X378),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X377),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),X381))) | s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,X375))) | s(bool,'T_0') = s(bool,X377)) )),
  inference(forward_demodulation,[],[f18386,f765])).
fof(f18386,plain,(
  ( ! [X377,X379,X380,X376,X378,X375,X381] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X378),X379),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),X380))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X378),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X377),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X378)),X381))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X378),X379) = s('type.semanticPrimitives.result'('type.list.list'(bool),X378),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X378),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X375)),X376,bool)))))) | s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X376),'const.semanticPrimitives.Rval_1'(s(bool,X375))) | s(bool,'T_0') = s(bool,X377)) )),
  inference(superposition,[],[f648,f782])).
fof(f18683,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,X338))) = s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,X341))) | s(bool,X340) != s(bool,X341) | s('type.semanticPrimitives.result'(bool,X339),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X339),'const.semanticPrimitives.Rval_1'(s(bool,X338))) | s(bool,'T_0') = s(bool,X340)) )),
  inference(forward_demodulation,[],[f18379,f765])).
fof(f18379,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s(bool,X340) != s(bool,X341) | s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,X341))) = s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X338)),X339,bool)))) | s('type.semanticPrimitives.result'(bool,X339),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X339),'const.semanticPrimitives.Rval_1'(s(bool,X338))) | s(bool,'T_0') = s(bool,X340)) )),
  inference(superposition,[],[f161,f782])).
fof(f18377,plain,(
  ( ! [X329,X331,X332,X328,X330] : (s('type.semanticPrimitives.result'(bool,X331),'const.semanticPrimitives.Rval_1'(s(bool,X330))) != s('type.semanticPrimitives.result'(bool,X331),'const.semanticPrimitives.Rval_1'(s(bool,X332))) | s(bool,X332) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X328)),X329,bool)) | s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X328))) | s(bool,'T_0') = s(bool,X330)) )),
  inference(superposition,[],[f160,f782])).
fof(f18372,plain,(
  ( ! [X300,X302,X304,X301,X303,X305] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X302),s('type.list.list'(bool),X303))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X304),s('type.list.list'(bool),X305))) | s(bool,X304) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X300)),X301,bool)) | s('type.semanticPrimitives.result'(bool,X301),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X301),'const.semanticPrimitives.Rval_1'(s(bool,X300))) | s(bool,'T_0') = s(bool,X302)) )),
  inference(superposition,[],[f148,f782])).
fof(f18682,plain,(
  ( ! [X292,X293,X291] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X292),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,X291))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X292),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X293),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,X291))) | s(bool,'T_0') = s(bool,X293)) )),
  inference(subsumption_resolution,[],[f18369,f164])).
fof(f18369,plain,(
  ( ! [X292,X293,X291] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X292),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,X291))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X292),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X293),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,X291))) = s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X292),sK5('const.semanticPrimitives.Rval_1'(s(bool,X291)),X292,bool)))) | s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X292),'const.semanticPrimitives.Rval_1'(s(bool,X291))) | s(bool,'T_0') = s(bool,X293)) )),
  inference(superposition,[],[f748,f782])).
fof(f18659,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f18658,f765])).
fof(f18658,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f18657])).
fof(f18657,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X91))) = s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X87)),X88,bool)))) | s(bool,'T_0') = s(bool,X91) | s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f18322,f112])).
fof(f18322,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,'F_0') != s(bool,X89) | s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X91))) = s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X87)),X88,bool)))) | s(bool,'T_0') = s(bool,X91) | s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f256,f782])).
fof(f18644,plain,(
  ( ! [X621,X617,X619,X620,X618] : (s(X619,f(s(bool,X620))) != s(X619,g(s(bool,X620))) | s(fun(bool,X619),X617) = s(fun(bool,X619),X618) | s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,X620))) | s(bool,'T_0') = s(bool,sK6(X617,X618,X619,bool))) )),
  inference(forward_demodulation,[],[f18297,f765])).
fof(f18297,plain,(
  ( ! [X621,X617,X619,X620,X618] : (s(X619,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X620)),X621,bool)))) != s(X619,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X620)),X621,bool)))) | s(fun(bool,X619),X617) = s(fun(bool,X619),X618) | s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,X620))) | s(bool,'T_0') = s(bool,sK6(X617,X618,X619,bool))) )),
  inference(superposition,[],[f159,f782])).
fof(f18289,plain,(
  ( ! [X573,X575,X576,X574,X577] : (s(bool,X576) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X574)),X575,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X573),s('type.list.list'(bool),X577))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X576),s('type.list.list'(bool),X577))) | s('type.semanticPrimitives.result'(bool,X575),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X575),'const.semanticPrimitives.Rval_1'(s(bool,X574))) | s(bool,'T_0') = s(bool,X573)) )),
  inference(superposition,[],[f918,f782])).
fof(f18640,plain,(
  ( ! [X569,X571,X572,X568,X570] : (s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X569))) != s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X572))) | s(bool,X568) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X572)),X571,bool)) | s('type.semanticPrimitives.result'(bool,X570),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X570),'const.semanticPrimitives.Rval_1'(s(bool,X569))) | s(bool,'T_0') = s(bool,X568)) )),
  inference(forward_demodulation,[],[f18288,f765])).
fof(f18288,plain,(
  ( ! [X569,X571,X572,X568,X570] : (s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X572))) != s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X569)),X570,bool)))) | s(bool,X568) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X572)),X571,bool)) | s('type.semanticPrimitives.result'(bool,X570),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X570),'const.semanticPrimitives.Rval_1'(s(bool,X569))) | s(bool,'T_0') = s(bool,X568)) )),
  inference(superposition,[],[f789,f782])).
fof(f18639,plain,(
  ( ! [X565,X567,X563,X564,X566] : (s('type.semanticPrimitives.result'(bool,X566),'const.semanticPrimitives.Rval_1'(s(bool,X564))) != s('type.semanticPrimitives.result'(bool,X566),'const.semanticPrimitives.Rval_1'(s(bool,X567))) | s(bool,X567) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X563)),X566,bool)) | s('type.semanticPrimitives.result'(bool,X565),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X565),'const.semanticPrimitives.Rval_1'(s(bool,X564))) | s(bool,'T_0') = s(bool,X563)) )),
  inference(forward_demodulation,[],[f18287,f765])).
fof(f18287,plain,(
  ( ! [X565,X567,X563,X564,X566] : (s('type.semanticPrimitives.result'(bool,X566),'const.semanticPrimitives.Rval_1'(s(bool,X567))) != s('type.semanticPrimitives.result'(bool,X566),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X564)),X565,bool)))) | s(bool,X567) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X563)),X566,bool)) | s('type.semanticPrimitives.result'(bool,X565),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X565),'const.semanticPrimitives.Rval_1'(s(bool,X564))) | s(bool,'T_0') = s(bool,X563)) )),
  inference(superposition,[],[f789,f782])).
fof(f18637,plain,(
  ( ! [X540,X542,X538,X541,X543,X539] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X541),X542) != s('type.semanticPrimitives.result'('type.list.list'(bool),X541),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X541),'const.semanticPrimitives.Rval_1'(s(bool,X539))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X541),X543),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X541),X542))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X541),X543),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X541),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X538),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X540),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X540),'const.semanticPrimitives.Rval_1'(s(bool,X539))) | s(bool,'T_0') = s(bool,X538)) )),
  inference(forward_demodulation,[],[f18282,f765])).
fof(f18282,plain,(
  ( ! [X540,X542,X538,X541,X543,X539] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X541),X542) != s('type.semanticPrimitives.result'('type.list.list'(bool),X541),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X541),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X539)),X540,bool)))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X541),X543),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X541),X542))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X541),X543),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X541),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X538),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(bool,X540),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X540),'const.semanticPrimitives.Rval_1'(s(bool,X539))) | s(bool,'T_0') = s(bool,X538)) )),
  inference(superposition,[],[f667,f782])).
fof(f18636,plain,(
  ( ! [X536,X532,X534,X537,X533,X535] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X535),X536),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X535),X537))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X535),X536),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X535),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X535),'const.semanticPrimitives.Rval_1'(s(bool,X533))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X535),X537) = s('type.semanticPrimitives.result'('type.list.list'(bool),X535),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X532),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X534),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X534),'const.semanticPrimitives.Rval_1'(s(bool,X533))) | s(bool,'T_0') = s(bool,X532)) )),
  inference(forward_demodulation,[],[f18281,f765])).
fof(f18281,plain,(
  ( ! [X536,X532,X534,X537,X533,X535] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X535),X536),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X535),X537))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X535),X536),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X535),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X535),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X533)),X534,bool)))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X535),X537) = s('type.semanticPrimitives.result'('type.list.list'(bool),X535),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X532),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X534),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X534),'const.semanticPrimitives.Rval_1'(s(bool,X533))) | s(bool,'T_0') = s(bool,X532)) )),
  inference(superposition,[],[f665,f782])).
fof(f18635,plain,(
  ( ! [X528,X530,X526,X529,X531,X525,X527] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X528),X529),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),X530))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X528),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X528),'const.semanticPrimitives.Rval_1'(s(bool,X526))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),X531))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X528),X529) = s('type.semanticPrimitives.result'('type.list.list'(bool),X528),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X525),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X527),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X527),'const.semanticPrimitives.Rval_1'(s(bool,X526))) | s(bool,'T_0') = s(bool,X525)) )),
  inference(forward_demodulation,[],[f18280,f765])).
fof(f18280,plain,(
  ( ! [X528,X530,X526,X529,X531,X525,X527] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X528),X529),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),X530))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X528),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X528),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X526)),X527,bool)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X528)),X531))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X528),X529) = s('type.semanticPrimitives.result'('type.list.list'(bool),X528),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X525),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X527),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X527),'const.semanticPrimitives.Rval_1'(s(bool,X526))) | s(bool,'T_0') = s(bool,X525)) )),
  inference(superposition,[],[f661,f782])).
fof(f18634,plain,(
  ( ! [X516,X518,X517,X519,X515] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X518),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X519))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X518),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X518),'const.semanticPrimitives.Rval_1'(s(bool,X516))))) | s('type.list.list'(bool),X519) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X515),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(bool,X517),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X517),'const.semanticPrimitives.Rval_1'(s(bool,X516))) | s(bool,'T_0') = s(bool,X515)) )),
  inference(forward_demodulation,[],[f18278,f765])).
fof(f18278,plain,(
  ( ! [X516,X518,X517,X519,X515] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X518),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X519))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X518),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X518),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X516)),X517,bool)))))) | s('type.list.list'(bool),X519) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X515),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(bool,X517),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X517),'const.semanticPrimitives.Rval_1'(s(bool,X516))) | s(bool,'T_0') = s(bool,X515)) )),
  inference(superposition,[],[f657,f782])).
fof(f18633,plain,(
  ( ! [X509,X511,X512,X514,X510,X513] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X512),X513) != s('type.semanticPrimitives.result'('type.list.list'(bool),X512),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X510),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X512),X514),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X512),X513))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X512),X514),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X512),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X512),'const.semanticPrimitives.Rval_1'(s(bool,X509))))))) | s('type.semanticPrimitives.result'(bool,X511),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X511),'const.semanticPrimitives.Rval_1'(s(bool,X510))) | s(bool,'T_0') = s(bool,X509)) )),
  inference(forward_demodulation,[],[f18277,f765])).
fof(f18277,plain,(
  ( ! [X509,X511,X512,X514,X510,X513] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X512),X513) != s('type.semanticPrimitives.result'('type.list.list'(bool),X512),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X510)),X511,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X512),X514),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X512),X513))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X512),X514),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X512),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X512),'const.semanticPrimitives.Rval_1'(s(bool,X509))))))) | s('type.semanticPrimitives.result'(bool,X511),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X511),'const.semanticPrimitives.Rval_1'(s(bool,X510))) | s(bool,'T_0') = s(bool,X509)) )),
  inference(superposition,[],[f654,f782])).
fof(f18632,plain,(
  ( ! [X505,X507,X508,X504,X506,X503] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X506),X507),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X506),X508))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X506),X507),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X506),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X504),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X506),X508) = s('type.semanticPrimitives.result'('type.list.list'(bool),X506),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X506),'const.semanticPrimitives.Rval_1'(s(bool,X503))))) | s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,X504))) | s(bool,'T_0') = s(bool,X503)) )),
  inference(forward_demodulation,[],[f18276,f765])).
fof(f18276,plain,(
  ( ! [X505,X507,X508,X504,X506,X503] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X506),X507),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X506),X508))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X506),X507),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X506),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X504)),X505,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X506),X508) = s('type.semanticPrimitives.result'('type.list.list'(bool),X506),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X506),'const.semanticPrimitives.Rval_1'(s(bool,X503))))) | s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X505),'const.semanticPrimitives.Rval_1'(s(bool,X504))) | s(bool,'T_0') = s(bool,X503)) )),
  inference(superposition,[],[f652,f782])).
fof(f18631,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X497] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X499),X500),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),X501))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X499),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X497),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),X502))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X499),X500) = s('type.semanticPrimitives.result'('type.list.list'(bool),X499),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X499),'const.semanticPrimitives.Rval_1'(s(bool,X496))))) | s('type.semanticPrimitives.result'(bool,X498),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X498),'const.semanticPrimitives.Rval_1'(s(bool,X497))) | s(bool,'T_0') = s(bool,X496)) )),
  inference(forward_demodulation,[],[f18275,f765])).
fof(f18275,plain,(
  ( ! [X499,X500,X502,X496,X498,X501,X497] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X499),X500),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),X501))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X499),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X497)),X498,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X499)),X502))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X499),X500) = s('type.semanticPrimitives.result'('type.list.list'(bool),X499),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X499),'const.semanticPrimitives.Rval_1'(s(bool,X496))))) | s('type.semanticPrimitives.result'(bool,X498),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X498),'const.semanticPrimitives.Rval_1'(s(bool,X497))) | s(bool,'T_0') = s(bool,X496)) )),
  inference(superposition,[],[f648,f782])).
fof(f18268,plain,(
  ( ! [X461,X463,X459,X460,X462] : (s(bool,X462) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X460)),X461,bool)) | s('type.semanticPrimitives.result'(bool,X463),'const.semanticPrimitives.Rval_1'(s(bool,X459))) = s('type.semanticPrimitives.result'(bool,X463),'const.semanticPrimitives.Rval_1'(s(bool,X462))) | s('type.semanticPrimitives.result'(bool,X461),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X461),'const.semanticPrimitives.Rval_1'(s(bool,X460))) | s(bool,'T_0') = s(bool,X459)) )),
  inference(superposition,[],[f161,f782])).
fof(f18629,plain,(
  ( ! [X453,X449,X451,X452,X450] : (s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X450))) != s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X453))) | s(bool,X449) = s(bool,X453) | s('type.semanticPrimitives.result'(bool,X451),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X451),'const.semanticPrimitives.Rval_1'(s(bool,X450))) | s(bool,'T_0') = s(bool,X449)) )),
  inference(forward_demodulation,[],[f18266,f765])).
fof(f18266,plain,(
  ( ! [X453,X449,X451,X452,X450] : (s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,X453))) != s('type.semanticPrimitives.result'(bool,X452),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X450)),X451,bool)))) | s(bool,X449) = s(bool,X453) | s('type.semanticPrimitives.result'(bool,X451),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X451),'const.semanticPrimitives.Rval_1'(s(bool,X450))) | s(bool,'T_0') = s(bool,X449)) )),
  inference(superposition,[],[f160,f782])).
fof(f18627,plain,(
  ( ! [X422,X424,X426,X421,X423,X425] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X422),s('type.list.list'(bool),X424))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X425),s('type.list.list'(bool),X426))) | s(bool,X421) = s(bool,X425) | s('type.semanticPrimitives.result'(bool,X423),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X423),'const.semanticPrimitives.Rval_1'(s(bool,X422))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(forward_demodulation,[],[f18261,f765])).
fof(f18261,plain,(
  ( ! [X422,X424,X426,X421,X423,X425] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X425),s('type.list.list'(bool),X426))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X422)),X423,bool)),s('type.list.list'(bool),X424))) | s(bool,X421) = s(bool,X425) | s('type.semanticPrimitives.result'(bool,X423),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X423),'const.semanticPrimitives.Rval_1'(s(bool,X422))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(superposition,[],[f148,f782])).
fof(f18583,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X3,bool)) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(forward_demodulation,[],[f18440,f765])).
fof(f18440,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool))),X3,bool)) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(condensation,[],[f18439])).
fof(f18439,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(bool,X145) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X143)),X144,bool))),X146,bool)) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,X145) | s('type.semanticPrimitives.result'(bool,X144),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X144),'const.semanticPrimitives.Rval_1'(s(bool,X143)))) )),
  inference(duplicate_literal_removal,[],[f18215])).
fof(f18215,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(bool,X145) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X143)),X144,bool))),X146,bool)) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,X145) | s('type.semanticPrimitives.result'(bool,X144),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X144),'const.semanticPrimitives.Rval_1'(s(bool,X143))) | s(bool,'T_0') = s(bool,X142)) )),
  inference(superposition,[],[f833,f782])).
fof(f18561,plain,(
  ( ! [X177,X175,X178] : (s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,X175))) | s(bool,X175) = s(bool,X177) | s(bool,'T_0') = s(bool,X177)) )),
  inference(forward_demodulation,[],[f18560,f765])).
fof(f18560,plain,(
  ( ! [X177,X175,X178,X176] : (s(bool,X175) = s(bool,X177) | s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X176,bool)))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(forward_demodulation,[],[f18156,f765])).
fof(f18156,plain,(
  ( ! [X177,X175,X178,X176] : (s(bool,X177) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X178,bool)) | s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X176,bool)))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f782,f765])).
fof(f18536,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X70) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X71,bool)) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,X70) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68)))) )),
  inference(forward_demodulation,[],[f18535,f765])).
fof(f18535,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X70) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool))),X71,bool)) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,X70) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68)))) )),
  inference(subsumption_resolution,[],[f18125,f161])).
fof(f18125,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X70) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool))),X71,bool)) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,X70) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f782,f782])).
fof(f18119,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(bool,X32) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X33,bool)) | s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X34) = s(bool,X35) | s(bool,X31) = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f782,f282])).
fof(f18113,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X5,bool)) | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f782,f171])).
fof(f18111,plain,(
  ( ! [X175,X173,X176,X174] : (s(bool,X173) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X175)),X176,bool)) | s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X176),'const.semanticPrimitives.Rval_1'(s(bool,X175))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X173)),X174,bool))) )),
  inference(superposition,[],[f782,f765])).
fof(f18496,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f18495])).
fof(f18495,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X50) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X51)),X52,bool)) | s('type.semanticPrimitives.result'(bool,X52),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X52),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(duplicate_literal_removal,[],[f18090])).
fof(f18090,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X50) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X51)),X52,bool)) | s('type.semanticPrimitives.result'(bool,X52),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X52),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X49) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f782,f282])).
fof(f18039,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X241),X244),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X241),X243))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X241),X244),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X241),X245))) | s('type.semanticPrimitives.error_result'(X241),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X241),X245)),X244,'type.semanticPrimitives.error_result'(X241))) = s('type.semanticPrimitives.error_result'(X241),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X242,X241),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X241),X243)))),X241,'type.list.list'(X242)))) )),
  inference(superposition,[],[f789,f13351])).
fof(f18036,plain,(
  ( ! [X231,X229,X227,X230,X228] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X227),X230),X231) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X227),X230),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X227),X229))) | s('type.semanticPrimitives.error_result'(X227),sK4(X231,X230,'type.semanticPrimitives.error_result'(X227))) = s('type.semanticPrimitives.error_result'(X227),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X228,X227),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X227),X229)))),X227,'type.list.list'(X228))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X227),X230),X231) = s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X227),X230),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X230),sK5(X231,X230,'type.semanticPrimitives.error_result'(X227)))))) )),
  inference(superposition,[],[f749,f13351])).
fof(f18017,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X122),X125),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X122),X124))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X122),X125),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X122),X126))) | s('type.semanticPrimitives.error_result'(X122),X126) = s('type.semanticPrimitives.error_result'(X122),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X123,X122),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X122),X124)))),X122,'type.list.list'(X123)))) )),
  inference(superposition,[],[f160,f13351])).
fof(f18012,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s('type.list.list'('type.semanticPrimitives.error_result'(X94)),'const.list.CONS_2'(s('type.semanticPrimitives.error_result'(X94),X96),s('type.list.list'('type.semanticPrimitives.error_result'(X94)),X97))) != s('type.list.list'('type.semanticPrimitives.error_result'(X94)),'const.list.CONS_2'(s('type.semanticPrimitives.error_result'(X94),X98),s('type.list.list'('type.semanticPrimitives.error_result'(X94)),X99))) | s('type.semanticPrimitives.error_result'(X94),X98) = s('type.semanticPrimitives.error_result'(X94),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X95,X94),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X94),X96)))),X94,'type.list.list'(X95)))) )),
  inference(superposition,[],[f148,f13351])).
fof(f18008,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s('type.semanticPrimitives.result'(X83,X80),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),X82))) != s('type.semanticPrimitives.result'(X83,X80),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),X84))) | s('type.semanticPrimitives.error_result'(X80),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),X84)),X80,X83)) = s('type.semanticPrimitives.error_result'(X80),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X81,X80),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),X82)))),X80,'type.list.list'(X81)))) )),
  inference(superposition,[],[f1022,f13351])).
fof(f18004,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s('type.semanticPrimitives.result'(X64,X61),X65) != s('type.semanticPrimitives.result'(X64,X61),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X61),X63))) | s('type.semanticPrimitives.error_result'(X61),sK5(X65,X61,X64)) = s('type.semanticPrimitives.error_result'(X61),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X62,X61),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X61),X63)))),X61,'type.list.list'(X62))) | s('type.semanticPrimitives.result'(X64,X61),X65) = s('type.semanticPrimitives.result'(X64,X61),'const.semanticPrimitives.Rval_1'(s(X64,sK4(X65,X61,X64))))) )),
  inference(superposition,[],[f731,f13351])).
fof(f17995,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.semanticPrimitives.result'(X16,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X15))) != s('type.semanticPrimitives.result'(X16,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X17))) | s('type.semanticPrimitives.error_result'(X13),X17) = s('type.semanticPrimitives.error_result'(X13),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X14,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X15)))),X13,'type.list.list'(X14)))) )),
  inference(superposition,[],[f162,f13351])).
fof(f17990,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8)) = s('type.semanticPrimitives.error_result'(X9),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),X10)))),X9,'type.list.list'('type.list.list'(X8)))) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))))) )),
  inference(superposition,[],[f13351,f733])).
fof(f17988,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,X3)) = s('type.semanticPrimitives.error_result'(X4),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),X5)),X4,'type.list.list'(X3))) | s('type.semanticPrimitives.result'(X3,X4),X5) = s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,sK4(X5,X4,X3))))) )),
  inference(superposition,[],[f13351,f157])).
fof(f17987,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)) = s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2)),X1,'type.list.list'(X0))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f13351,f748])).
fof(f17966,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'(X11),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X14))) != s('type.semanticPrimitives.result'('type.list.list'(X11),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X11,X12),X13))) | s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,X11)) = s('type.semanticPrimitives.error_result'(X12),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X14)),X12,'type.list.list'(X11))) | s('type.semanticPrimitives.result'(X11,X12),X13) = s('type.semanticPrimitives.result'(X11,X12),'const.semanticPrimitives.Rval_1'(s(X11,sK4(X13,X12,X11))))) )),
  inference(superposition,[],[f1022,f733])).
fof(f17963,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)) = s('type.semanticPrimitives.error_result'(X1),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)),X1,X0)) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f1022,f748])).
fof(f17962,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6))) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9))) | s('type.semanticPrimitives.error_result'(X5),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9)),X5,X8)) = s('type.semanticPrimitives.error_result'(X5),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X5),X6)),X7,'type.semanticPrimitives.error_result'(X5)))) )),
  inference(superposition,[],[f1022,f765])).
fof(f17961,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1))) != s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X4))) | s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2)) = s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X4)),X0,X3))) )),
  inference(superposition,[],[f1022,f1017])).
fof(f17953,plain,(
  ( ! [X4,X5] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X4)) ) | $spl28),
  inference(forward_demodulation,[],[f17943,f765])).
fof(f17943,plain,(
  ( ! [X4,X5] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X4) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f7015,f765])).
fof(f15468,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f282])).
fof(f17805,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f15461,f171])).
fof(f15461,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f282])).
fof(f14914,plain,(
  ( ! [X732,X734,X730,X733,X735,X731] : (s(X732,f(s(bool,'T_0'))) != s(X732,g(s(bool,'T_0'))) | s(fun(bool,X732),X730) = s(fun(bool,X732),X731) | s(bool,X733) = s(bool,X734) | s(bool,X734) = s(bool,sK6(X730,X731,X732,bool)) | s(bool,X733) = s(bool,X735) | s(bool,'T_0') = s(bool,X735)) )),
  inference(superposition,[],[f159,f282])).
fof(f14905,plain,(
  ( ! [X681,X683,X679,X684,X680,X682] : (s(bool,'T_0') != s(bool,X680) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X679),s('type.list.list'(bool),X681))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X680),s('type.list.list'(bool),X681))) | s(bool,X682) = s(bool,X683) | s(bool,X679) = s(bool,X683) | s(bool,X682) = s(bool,X684) | s(bool,'T_0') = s(bool,X684)) )),
  inference(superposition,[],[f918,f282])).
fof(f14904,plain,(
  ( ! [X677,X673,X675,X676,X678,X674] : (s('type.semanticPrimitives.result'(bool,X674),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X674),'const.semanticPrimitives.Rval_1'(s(bool,X675))) | s(bool,X673) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X675)),X674,bool)) | s(bool,X676) = s(bool,X677) | s(bool,X673) = s(bool,X677) | s(bool,X676) = s(bool,X678) | s(bool,'T_0') = s(bool,X678)) )),
  inference(superposition,[],[f789,f282])).
fof(f14903,plain,(
  ( ! [X668,X670,X667,X669,X671,X672] : (s('type.semanticPrimitives.result'(bool,X668),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X668),'const.semanticPrimitives.Rval_1'(s(bool,X669))) | s(bool,X669) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X667)),X668,bool)) | s(bool,X670) = s(bool,X671) | s(bool,X667) = s(bool,X671) | s(bool,X670) = s(bool,X672) | s(bool,'T_0') = s(bool,X672)) )),
  inference(superposition,[],[f789,f282])).
fof(f14898,plain,(
  ( ! [X639,X640,X642,X638,X641,X643,X637] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X638),X639) != s('type.semanticPrimitives.result'('type.list.list'(bool),X638),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X638),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X638),X640),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X638),X639))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X638),X640),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X638),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X637),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X641) = s(bool,X642) | s(bool,X637) = s(bool,X642) | s(bool,X641) = s(bool,X643) | s(bool,'T_0') = s(bool,X643)) )),
  inference(superposition,[],[f667,f282])).
fof(f14897,plain,(
  ( ! [X633,X635,X631,X636,X632,X634,X630] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X631),X632),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X631),X633))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X631),X632),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X631),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X631),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X631),X633) = s('type.semanticPrimitives.result'('type.list.list'(bool),X631),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X630),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X634) = s(bool,X635) | s(bool,X630) = s(bool,X635) | s(bool,X634) = s(bool,X636) | s(bool,'T_0') = s(bool,X636)) )),
  inference(superposition,[],[f665,f282])).
fof(f14896,plain,(
  ( ! [X629,X625,X627,X623,X628,X624,X626,X622] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X623)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X623),X624),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X623)),X625))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X623)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X623),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X623),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X623)),X626))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X623),X624) = s('type.semanticPrimitives.result'('type.list.list'(bool),X623),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X622),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X627) = s(bool,X628) | s(bool,X622) = s(bool,X628) | s(bool,X627) = s(bool,X629) | s(bool,'T_0') = s(bool,X629)) )),
  inference(superposition,[],[f661,f282])).
fof(f14894,plain,(
  ( ! [X613,X615,X611,X612,X614,X610] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X611),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X612))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X611),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X611),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X612) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X610),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X613) = s(bool,X614) | s(bool,X610) = s(bool,X614) | s(bool,X613) = s(bool,X615) | s(bool,'T_0') = s(bool,X615)) )),
  inference(superposition,[],[f657,f282])).
fof(f14893,plain,(
  ( ! [X606,X609,X605,X607,X603,X608,X604] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X604),X605) != s('type.semanticPrimitives.result'('type.list.list'(bool),X604),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X604),X606),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X604),X605))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X604),X606),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X604),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X604),'const.semanticPrimitives.Rval_1'(s(bool,X603))))))) | s(bool,X607) = s(bool,X608) | s(bool,X603) = s(bool,X608) | s(bool,X607) = s(bool,X609) | s(bool,'T_0') = s(bool,X609)) )),
  inference(superposition,[],[f654,f282])).
fof(f14892,plain,(
  ( ! [X600,X602,X596,X598,X601,X597,X599] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X597),X598),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X597),X599))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X597),X598),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X597),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X597),X599) = s('type.semanticPrimitives.result'('type.list.list'(bool),X597),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X597),'const.semanticPrimitives.Rval_1'(s(bool,X596))))) | s(bool,X600) = s(bool,X601) | s(bool,X596) = s(bool,X601) | s(bool,X600) = s(bool,X602) | s(bool,'T_0') = s(bool,X602)) )),
  inference(superposition,[],[f652,f282])).
fof(f14891,plain,(
  ( ! [X592,X594,X588,X590,X593,X595,X589,X591] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X589)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X589),X590),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X589)),X591))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X589)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X589),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X589)),X592))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X589),X590) = s('type.semanticPrimitives.result'('type.list.list'(bool),X589),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X589),'const.semanticPrimitives.Rval_1'(s(bool,X588))))) | s(bool,X593) = s(bool,X594) | s(bool,X588) = s(bool,X594) | s(bool,X593) = s(bool,X595) | s(bool,'T_0') = s(bool,X595)) )),
  inference(superposition,[],[f648,f282])).
fof(f14884,plain,(
  ( ! [X546,X549,X545,X547,X548,X544] : (s(bool,'T_0') != s(bool,X545) | s('type.semanticPrimitives.result'(bool,X546),'const.semanticPrimitives.Rval_1'(s(bool,X544))) = s('type.semanticPrimitives.result'(bool,X546),'const.semanticPrimitives.Rval_1'(s(bool,X545))) | s(bool,X547) = s(bool,X548) | s(bool,X544) = s(bool,X548) | s(bool,X547) = s(bool,X549) | s(bool,'T_0') = s(bool,X549)) )),
  inference(superposition,[],[f161,f282])).
fof(f14882,plain,(
  ( ! [X536,X532,X534,X537,X533,X535] : (s('type.semanticPrimitives.result'(bool,X533),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X533),'const.semanticPrimitives.Rval_1'(s(bool,X534))) | s(bool,X532) = s(bool,X534) | s(bool,X535) = s(bool,X536) | s(bool,X532) = s(bool,X536) | s(bool,X535) = s(bool,X537) | s(bool,'T_0') = s(bool,X537)) )),
  inference(superposition,[],[f160,f282])).
fof(f14877,plain,(
  ( ! [X499,X505,X500,X502,X504,X501,X503] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X500))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X501),s('type.list.list'(bool),X502))) | s(bool,X499) = s(bool,X501) | s(bool,X503) = s(bool,X504) | s(bool,X499) = s(bool,X504) | s(bool,X503) = s(bool,X505) | s(bool,'T_0') = s(bool,X505)) )),
  inference(superposition,[],[f148,f282])).
fof(f17610,plain,(
  ( ! [X127,X125,X128,X126,X124] : (s(bool,X124) = s(bool,X125) | s(bool,'F_0') = s(bool,X125) | s(bool,X126) = s(bool,X127) | s(bool,X124) = s(bool,X127) | s(bool,X126) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f14795,f109])).
fof(f14795,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | s(bool,X124) = s(bool,X125) | s(bool,'F_0') = s(bool,X125) | s(bool,X126) = s(bool,X127) | s(bool,X124) = s(bool,X127) | s(bool,X126) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f985,f282])).
fof(f17602,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,X15)) | s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,X17) | s(bool,X14) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f14776,f109])).
fof(f14776,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,X17) | s(bool,X14) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f154,f282])).
fof(f14770,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(bool,X390) != s(bool,X391) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X392))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X391),s('type.list.list'(bool),X392))) | s(bool,X393) = s(bool,X394) | s(bool,X390) = s(bool,X394) | s(bool,X393) = s(bool,X395) | s(bool,'T_0') = s(bool,X395)) )),
  inference(superposition,[],[f918,f282])).
fof(f14769,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (s('type.semanticPrimitives.result'(bool,X385),'const.semanticPrimitives.Rval_1'(s(bool,X384))) != s('type.semanticPrimitives.result'(bool,X385),'const.semanticPrimitives.Rval_1'(s(bool,X386))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X386)),X385,bool)) | s(bool,X387) = s(bool,X388) | s(bool,X384) = s(bool,X388) | s(bool,X387) = s(bool,X389) | s(bool,'T_0') = s(bool,X389)) )),
  inference(superposition,[],[f789,f282])).
fof(f14768,plain,(
  ( ! [X383,X379,X380,X382,X378,X381] : (s('type.semanticPrimitives.result'(bool,X379),'const.semanticPrimitives.Rval_1'(s(bool,X378))) != s('type.semanticPrimitives.result'(bool,X379),'const.semanticPrimitives.Rval_1'(s(bool,X380))) | s(bool,X380) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X379,bool)) | s(bool,X381) = s(bool,X382) | s(bool,X378) = s(bool,X382) | s(bool,X381) = s(bool,X383) | s(bool,'T_0') = s(bool,X383)) )),
  inference(superposition,[],[f789,f282])).
fof(f14763,plain,(
  ( ! [X350,X352,X354,X349,X351,X353,X348] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X349),X350) != s('type.semanticPrimitives.result'('type.list.list'(bool),X349),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X349),'const.semanticPrimitives.Rval_1'(s(bool,X348))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X349),X351),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X349),X350))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X349),X351),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X349),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X352) = s(bool,X353) | s(bool,X348) = s(bool,X353) | s(bool,X352) = s(bool,X354) | s(bool,'T_0') = s(bool,X354)) )),
  inference(superposition,[],[f667,f282])).
fof(f14762,plain,(
  ( ! [X344,X346,X341,X343,X345,X347,X342] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X342),X343),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X342),X344))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X342),X343),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X342),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,X341))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X342),X344) = s('type.semanticPrimitives.result'('type.list.list'(bool),X342),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X345) = s(bool,X346) | s(bool,X341) = s(bool,X346) | s(bool,X345) = s(bool,X347) | s(bool,'T_0') = s(bool,X347)) )),
  inference(superposition,[],[f665,f282])).
fof(f14761,plain,(
  ( ! [X333,X335,X337,X339,X334,X340,X336,X338] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X334)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X334),X335),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X334)),X336))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X334)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X334),'const.semanticPrimitives.Rval_1'(s(bool,X333))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X334)),X337))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X334),X335) = s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X338) = s(bool,X339) | s(bool,X333) = s(bool,X339) | s(bool,X338) = s(bool,X340) | s(bool,'T_0') = s(bool,X340)) )),
  inference(superposition,[],[f661,f282])).
fof(f14759,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X322),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X323))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X322),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X322),'const.semanticPrimitives.Rval_1'(s(bool,X321))))) | s('type.list.list'(bool),X323) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X324) = s(bool,X325) | s(bool,X321) = s(bool,X325) | s(bool,X324) = s(bool,X326) | s(bool,'T_0') = s(bool,X326)) )),
  inference(superposition,[],[f657,f282])).
fof(f14758,plain,(
  ( ! [X315,X316,X318,X314,X320,X317,X319] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X315),X316) != s('type.semanticPrimitives.result'('type.list.list'(bool),X315),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X314),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X315),X317),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X315),X316))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X315),X317),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X315),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X315),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s(bool,X318) = s(bool,X319) | s(bool,X314) = s(bool,X319) | s(bool,X318) = s(bool,X320) | s(bool,'T_0') = s(bool,X320)) )),
  inference(superposition,[],[f654,f282])).
fof(f14757,plain,(
  ( ! [X313,X308,X310,X312,X309,X311,X307] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X308),X309),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X308),X310))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X308),X309),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X308),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X307),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X308),X310) = s('type.semanticPrimitives.result'('type.list.list'(bool),X308),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X308),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,X311) = s(bool,X312) | s(bool,X307) = s(bool,X312) | s(bool,X311) = s(bool,X313) | s(bool,'T_0') = s(bool,X313)) )),
  inference(superposition,[],[f652,f282])).
fof(f14756,plain,(
  ( ! [X300,X302,X304,X306,X301,X303,X299,X305] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X300)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X300),X301),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X300)),X302))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X300)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X300),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X299),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X300)),X303))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X300),X301) = s('type.semanticPrimitives.result'('type.list.list'(bool),X300),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X300),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,X304) = s(bool,X305) | s(bool,X299) = s(bool,X305) | s(bool,X304) = s(bool,X306) | s(bool,'T_0') = s(bool,X306)) )),
  inference(superposition,[],[f648,f282])).
fof(f14751,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (s(bool,X261) != s(bool,X262) | s('type.semanticPrimitives.result'(bool,X263),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X263),'const.semanticPrimitives.Rval_1'(s(bool,X262))) | s(bool,X264) = s(bool,X265) | s(bool,X261) = s(bool,X265) | s(bool,X264) = s(bool,X266) | s(bool,'T_0') = s(bool,X266)) )),
  inference(superposition,[],[f161,f282])).
fof(f14687,plain,(
  ( ! [X697,X699,X695,X696,X698,X694] : (s(bool,X695) != s(bool,X696) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X694),s('type.list.list'(bool),X697))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X696),s('type.list.list'(bool),X697))) | s(bool,X695) = s(bool,X698) | s(bool,'T_0') = s(bool,X694) | s(bool,X698) = s(bool,X699) | s(bool,'T_0') = s(bool,X699)) )),
  inference(superposition,[],[f918,f282])).
fof(f14686,plain,(
  ( ! [X693,X689,X691,X692,X688,X690] : (s('type.semanticPrimitives.result'(bool,X690),'const.semanticPrimitives.Rval_1'(s(bool,X689))) != s('type.semanticPrimitives.result'(bool,X690),'const.semanticPrimitives.Rval_1'(s(bool,X691))) | s(bool,X688) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X691)),X690,bool)) | s(bool,X689) = s(bool,X692) | s(bool,'T_0') = s(bool,X688) | s(bool,X692) = s(bool,X693) | s(bool,'T_0') = s(bool,X693)) )),
  inference(superposition,[],[f789,f282])).
fof(f14685,plain,(
  ( ! [X685,X687,X683,X684,X686,X682] : (s('type.semanticPrimitives.result'(bool,X684),'const.semanticPrimitives.Rval_1'(s(bool,X683))) != s('type.semanticPrimitives.result'(bool,X684),'const.semanticPrimitives.Rval_1'(s(bool,X685))) | s(bool,X685) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X682)),X684,bool)) | s(bool,X683) = s(bool,X686) | s(bool,'T_0') = s(bool,X682) | s(bool,X686) = s(bool,X687) | s(bool,'T_0') = s(bool,X687)) )),
  inference(superposition,[],[f789,f282])).
fof(f14680,plain,(
  ( ! [X656,X658,X652,X654,X657,X653,X655] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X654),X655) != s('type.semanticPrimitives.result'('type.list.list'(bool),X654),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X654),'const.semanticPrimitives.Rval_1'(s(bool,X653))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X654),X656),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X654),X655))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X654),X656),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X654),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X652),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X653) = s(bool,X657) | s(bool,'T_0') = s(bool,X652) | s(bool,X657) = s(bool,X658) | s(bool,'T_0') = s(bool,X658)) )),
  inference(superposition,[],[f667,f282])).
fof(f14679,plain,(
  ( ! [X648,X650,X646,X649,X651,X645,X647] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X647),X648),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X647),X649))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X647),X648),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X647),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X647),'const.semanticPrimitives.Rval_1'(s(bool,X646))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X647),X649) = s('type.semanticPrimitives.result'('type.list.list'(bool),X647),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X645),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X646) = s(bool,X650) | s(bool,'T_0') = s(bool,X645) | s(bool,X650) = s(bool,X651) | s(bool,'T_0') = s(bool,X651)) )),
  inference(superposition,[],[f665,f282])).
fof(f14678,plain,(
  ( ! [X639,X644,X640,X642,X638,X641,X643,X637] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X639)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X639),X640),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X639)),X641))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X639)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X639),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X639),'const.semanticPrimitives.Rval_1'(s(bool,X638))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X639)),X642))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X639),X640) = s('type.semanticPrimitives.result'('type.list.list'(bool),X639),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X637),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X638) = s(bool,X643) | s(bool,'T_0') = s(bool,X637) | s(bool,X643) = s(bool,X644) | s(bool,'T_0') = s(bool,X644)) )),
  inference(superposition,[],[f661,f282])).
fof(f14676,plain,(
  ( ! [X629,X625,X627,X628,X630,X626] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X627),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X628))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X627),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X627),'const.semanticPrimitives.Rval_1'(s(bool,X626))))) | s('type.list.list'(bool),X628) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X625),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X626) = s(bool,X629) | s(bool,'T_0') = s(bool,X625) | s(bool,X629) = s(bool,X630) | s(bool,'T_0') = s(bool,X630)) )),
  inference(superposition,[],[f657,f282])).
fof(f14675,plain,(
  ( ! [X621,X623,X619,X624,X620,X622,X618] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X620),X621) != s('type.semanticPrimitives.result'('type.list.list'(bool),X620),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X619),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X620),X622),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X620),X621))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X620),X622),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X620),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X620),'const.semanticPrimitives.Rval_1'(s(bool,X618))))))) | s(bool,X619) = s(bool,X623) | s(bool,'T_0') = s(bool,X618) | s(bool,X623) = s(bool,X624) | s(bool,'T_0') = s(bool,X624)) )),
  inference(superposition,[],[f654,f282])).
fof(f14674,plain,(
  ( ! [X617,X613,X615,X611,X616,X612,X614] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X613),X614),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X613),X615))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X613),X614),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X613),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X612),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X613),X615) = s('type.semanticPrimitives.result'('type.list.list'(bool),X613),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X613),'const.semanticPrimitives.Rval_1'(s(bool,X611))))) | s(bool,X612) = s(bool,X616) | s(bool,'T_0') = s(bool,X611) | s(bool,X616) = s(bool,X617) | s(bool,'T_0') = s(bool,X617)) )),
  inference(superposition,[],[f652,f282])).
fof(f14673,plain,(
  ( ! [X606,X610,X609,X605,X607,X603,X608,X604] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X605)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X605),X606),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X605)),X607))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X605)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X605),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X604),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X605)),X608))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X605),X606) = s('type.semanticPrimitives.result'('type.list.list'(bool),X605),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X605),'const.semanticPrimitives.Rval_1'(s(bool,X603))))) | s(bool,X604) = s(bool,X609) | s(bool,'T_0') = s(bool,X603) | s(bool,X609) = s(bool,X610) | s(bool,'T_0') = s(bool,X610)) )),
  inference(superposition,[],[f648,f282])).
fof(f14548,plain,(
  ( ! [X761,X757,X759,X760,X756,X758] : (s(X758,f(s(bool,X759))) != s(X758,g(s(bool,X759))) | s(fun(bool,X758),X756) = s(fun(bool,X758),X757) | s(bool,X760) = s(bool,sK6(X756,X757,X758,bool)) | s(bool,'T_0') = s(bool,X759) | s(bool,X760) = s(bool,X761) | s(bool,'T_0') = s(bool,X761)) )),
  inference(superposition,[],[f159,f282])).
fof(f14539,plain,(
  ( ! [X703,X707,X708,X704,X706,X705] : (s(bool,X704) != s(bool,X705) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X703),s('type.list.list'(bool),X706))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X705),s('type.list.list'(bool),X706))) | s(bool,X703) = s(bool,X707) | s(bool,'T_0') = s(bool,X704) | s(bool,X707) = s(bool,X708) | s(bool,'T_0') = s(bool,X708)) )),
  inference(superposition,[],[f918,f282])).
fof(f14538,plain,(
  ( ! [X697,X699,X700,X702,X698,X701] : (s('type.semanticPrimitives.result'(bool,X699),'const.semanticPrimitives.Rval_1'(s(bool,X698))) != s('type.semanticPrimitives.result'(bool,X699),'const.semanticPrimitives.Rval_1'(s(bool,X700))) | s(bool,X697) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X700)),X699,bool)) | s(bool,X697) = s(bool,X701) | s(bool,'T_0') = s(bool,X698) | s(bool,X701) = s(bool,X702) | s(bool,'T_0') = s(bool,X702)) )),
  inference(superposition,[],[f789,f282])).
fof(f14537,plain,(
  ( ! [X693,X695,X691,X696,X692,X694] : (s('type.semanticPrimitives.result'(bool,X693),'const.semanticPrimitives.Rval_1'(s(bool,X692))) != s('type.semanticPrimitives.result'(bool,X693),'const.semanticPrimitives.Rval_1'(s(bool,X694))) | s(bool,X694) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X691)),X693,bool)) | s(bool,X691) = s(bool,X695) | s(bool,'T_0') = s(bool,X692) | s(bool,X695) = s(bool,X696) | s(bool,'T_0') = s(bool,X696)) )),
  inference(superposition,[],[f789,f282])).
fof(f14532,plain,(
  ( ! [X666,X662,X664,X667,X661,X663,X665] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X663),X664) != s('type.semanticPrimitives.result'('type.list.list'(bool),X663),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X663),'const.semanticPrimitives.Rval_1'(s(bool,X662))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X663),X665),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X663),X664))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X663),X665),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X663),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X661),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X661) = s(bool,X666) | s(bool,'T_0') = s(bool,X662) | s(bool,X666) = s(bool,X667) | s(bool,'T_0') = s(bool,X667)) )),
  inference(superposition,[],[f667,f282])).
fof(f14531,plain,(
  ( ! [X660,X656,X658,X654,X657,X659,X655] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X656),X657),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X656),X658))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X656),X657),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X656),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X656),'const.semanticPrimitives.Rval_1'(s(bool,X655))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X656),X658) = s('type.semanticPrimitives.result'('type.list.list'(bool),X656),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X654),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X654) = s(bool,X659) | s(bool,'T_0') = s(bool,X655) | s(bool,X659) = s(bool,X660) | s(bool,'T_0') = s(bool,X660)) )),
  inference(superposition,[],[f665,f282])).
fof(f14530,plain,(
  ( ! [X652,X648,X650,X646,X653,X649,X651,X647] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X648),X649),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),X650))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X648),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X648),'const.semanticPrimitives.Rval_1'(s(bool,X647))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),X651))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X648),X649) = s('type.semanticPrimitives.result'('type.list.list'(bool),X648),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X646),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X646) = s(bool,X652) | s(bool,'T_0') = s(bool,X647) | s(bool,X652) = s(bool,X653) | s(bool,'T_0') = s(bool,X653)) )),
  inference(superposition,[],[f661,f282])).
fof(f14528,plain,(
  ( ! [X639,X635,X636,X638,X634,X637] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X636),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X637))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X636),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X636),'const.semanticPrimitives.Rval_1'(s(bool,X635))))) | s('type.list.list'(bool),X637) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X634),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X634) = s(bool,X638) | s(bool,'T_0') = s(bool,X635) | s(bool,X638) = s(bool,X639) | s(bool,'T_0') = s(bool,X639)) )),
  inference(superposition,[],[f657,f282])).
fof(f14527,plain,(
  ( ! [X633,X629,X631,X627,X632,X628,X630] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X629),X630) != s('type.semanticPrimitives.result'('type.list.list'(bool),X629),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X628),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X629),X631),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X629),X630))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X629),X631),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X629),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X629),'const.semanticPrimitives.Rval_1'(s(bool,X627))))))) | s(bool,X627) = s(bool,X632) | s(bool,'T_0') = s(bool,X628) | s(bool,X632) = s(bool,X633) | s(bool,'T_0') = s(bool,X633)) )),
  inference(superposition,[],[f654,f282])).
fof(f14526,plain,(
  ( ! [X625,X621,X623,X624,X626,X620,X622] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X622),X623),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X622),X624))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X622),X623),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X622),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X621),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X622),X624) = s('type.semanticPrimitives.result'('type.list.list'(bool),X622),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X622),'const.semanticPrimitives.Rval_1'(s(bool,X620))))) | s(bool,X620) = s(bool,X625) | s(bool,'T_0') = s(bool,X621) | s(bool,X625) = s(bool,X626) | s(bool,'T_0') = s(bool,X626)) )),
  inference(superposition,[],[f652,f282])).
fof(f14525,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X612,X614] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X614),X615),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),X616))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X614),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X613),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),X617))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X614),X615) = s('type.semanticPrimitives.result'('type.list.list'(bool),X614),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X614),'const.semanticPrimitives.Rval_1'(s(bool,X612))))) | s(bool,X612) = s(bool,X618) | s(bool,'T_0') = s(bool,X613) | s(bool,X618) = s(bool,X619) | s(bool,'T_0') = s(bool,X619)) )),
  inference(superposition,[],[f648,f282])).
fof(f14518,plain,(
  ( ! [X573,X569,X571,X572,X568,X570] : (s(bool,X569) != s(bool,X570) | s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X568))) = s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X570))) | s(bool,X568) = s(bool,X572) | s(bool,'T_0') = s(bool,X569) | s(bool,X572) = s(bool,X573) | s(bool,'T_0') = s(bool,X573)) )),
  inference(superposition,[],[f161,f282])).
fof(f14516,plain,(
  ( ! [X561,X557,X559,X560,X556,X558] : (s('type.semanticPrimitives.result'(bool,X558),'const.semanticPrimitives.Rval_1'(s(bool,X557))) != s('type.semanticPrimitives.result'(bool,X558),'const.semanticPrimitives.Rval_1'(s(bool,X559))) | s(bool,X556) = s(bool,X559) | s(bool,X556) = s(bool,X560) | s(bool,'T_0') = s(bool,X557) | s(bool,X560) = s(bool,X561) | s(bool,'T_0') = s(bool,X561)) )),
  inference(superposition,[],[f160,f282])).
fof(f14511,plain,(
  ( ! [X528,X524,X526,X529,X525,X527,X523] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X524),s('type.list.list'(bool),X525))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X526),s('type.list.list'(bool),X527))) | s(bool,X523) = s(bool,X526) | s(bool,X523) = s(bool,X528) | s(bool,'T_0') = s(bool,X524) | s(bool,X528) = s(bool,X529) | s(bool,'T_0') = s(bool,X529)) )),
  inference(superposition,[],[f148,f282])).
fof(f17446,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f17445])).
fof(f17445,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X82))) = s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X85))) | s(bool,'T_0') = s(bool,X85) | s(bool,X82) = s(bool,X86) | s(bool,'T_0') = s(bool,X83) | s(bool,X86) = s(bool,X87) | s(bool,'T_0') = s(bool,X87)) )),
  inference(subsumption_resolution,[],[f14418,f112])).
fof(f14418,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (s(bool,'F_0') != s(bool,X83) | s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X82))) = s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X85))) | s(bool,'T_0') = s(bool,X85) | s(bool,X82) = s(bool,X86) | s(bool,'T_0') = s(bool,X83) | s(bool,X86) = s(bool,X87) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f256,f282])).
fof(f17441,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f17440])).
fof(f17440,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X6)) | s(bool,X4) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X5) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f14403,f173])).
fof(f14403,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X4) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X5) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f151,f282])).
fof(f14252,plain,(
  ( ! [X761,X757,X759,X760,X756,X758] : (s(X758,f(s(bool,X759))) != s(X758,g(s(bool,X759))) | s(fun(bool,X758),X756) = s(fun(bool,X758),X757) | s(bool,X759) = s(bool,X760) | s(bool,'T_0') = s(bool,X760) | s(bool,X761) = s(bool,sK6(X756,X757,X758,bool)) | s(bool,'T_0') = s(bool,X761)) )),
  inference(superposition,[],[f159,f282])).
fof(f14243,plain,(
  ( ! [X703,X707,X708,X704,X706,X705] : (s(bool,X704) != s(bool,X705) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X703),s('type.list.list'(bool),X706))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X705),s('type.list.list'(bool),X706))) | s(bool,X704) = s(bool,X707) | s(bool,'T_0') = s(bool,X707) | s(bool,X703) = s(bool,X708) | s(bool,'T_0') = s(bool,X708)) )),
  inference(superposition,[],[f918,f282])).
fof(f14242,plain,(
  ( ! [X697,X699,X700,X702,X698,X701] : (s('type.semanticPrimitives.result'(bool,X699),'const.semanticPrimitives.Rval_1'(s(bool,X698))) != s('type.semanticPrimitives.result'(bool,X699),'const.semanticPrimitives.Rval_1'(s(bool,X700))) | s(bool,X697) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X700)),X699,bool)) | s(bool,X698) = s(bool,X701) | s(bool,'T_0') = s(bool,X701) | s(bool,X697) = s(bool,X702) | s(bool,'T_0') = s(bool,X702)) )),
  inference(superposition,[],[f789,f282])).
fof(f14241,plain,(
  ( ! [X693,X695,X691,X696,X692,X694] : (s('type.semanticPrimitives.result'(bool,X693),'const.semanticPrimitives.Rval_1'(s(bool,X692))) != s('type.semanticPrimitives.result'(bool,X693),'const.semanticPrimitives.Rval_1'(s(bool,X694))) | s(bool,X694) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X691)),X693,bool)) | s(bool,X692) = s(bool,X695) | s(bool,'T_0') = s(bool,X695) | s(bool,X691) = s(bool,X696) | s(bool,'T_0') = s(bool,X696)) )),
  inference(superposition,[],[f789,f282])).
fof(f14236,plain,(
  ( ! [X666,X662,X664,X667,X661,X663,X665] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X663),X664) != s('type.semanticPrimitives.result'('type.list.list'(bool),X663),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X663),'const.semanticPrimitives.Rval_1'(s(bool,X662))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X663),X665),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X663),X664))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X663),X665),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X663),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X661),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X662) = s(bool,X666) | s(bool,'T_0') = s(bool,X666) | s(bool,X661) = s(bool,X667) | s(bool,'T_0') = s(bool,X667)) )),
  inference(superposition,[],[f667,f282])).
fof(f14235,plain,(
  ( ! [X660,X656,X658,X654,X657,X659,X655] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X656),X657),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X656),X658))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X656),X657),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X656),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X656),'const.semanticPrimitives.Rval_1'(s(bool,X655))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X656),X658) = s('type.semanticPrimitives.result'('type.list.list'(bool),X656),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X654),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X655) = s(bool,X659) | s(bool,'T_0') = s(bool,X659) | s(bool,X654) = s(bool,X660) | s(bool,'T_0') = s(bool,X660)) )),
  inference(superposition,[],[f665,f282])).
fof(f14234,plain,(
  ( ! [X652,X648,X650,X646,X653,X649,X651,X647] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X648),X649),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),X650))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X648),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X648),'const.semanticPrimitives.Rval_1'(s(bool,X647))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X648)),X651))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X648),X649) = s('type.semanticPrimitives.result'('type.list.list'(bool),X648),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X646),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X647) = s(bool,X652) | s(bool,'T_0') = s(bool,X652) | s(bool,X646) = s(bool,X653) | s(bool,'T_0') = s(bool,X653)) )),
  inference(superposition,[],[f661,f282])).
fof(f14232,plain,(
  ( ! [X639,X635,X636,X638,X634,X637] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X636),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X637))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X636),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X636),'const.semanticPrimitives.Rval_1'(s(bool,X635))))) | s('type.list.list'(bool),X637) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X634),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X635) = s(bool,X638) | s(bool,'T_0') = s(bool,X638) | s(bool,X634) = s(bool,X639) | s(bool,'T_0') = s(bool,X639)) )),
  inference(superposition,[],[f657,f282])).
fof(f14231,plain,(
  ( ! [X633,X629,X631,X627,X632,X628,X630] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X629),X630) != s('type.semanticPrimitives.result'('type.list.list'(bool),X629),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X628),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X629),X631),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X629),X630))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X629),X631),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X629),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X629),'const.semanticPrimitives.Rval_1'(s(bool,X627))))))) | s(bool,X628) = s(bool,X632) | s(bool,'T_0') = s(bool,X632) | s(bool,X627) = s(bool,X633) | s(bool,'T_0') = s(bool,X633)) )),
  inference(superposition,[],[f654,f282])).
fof(f14230,plain,(
  ( ! [X625,X621,X623,X624,X626,X620,X622] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X622),X623),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X622),X624))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X622),X623),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X622),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X621),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X622),X624) = s('type.semanticPrimitives.result'('type.list.list'(bool),X622),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X622),'const.semanticPrimitives.Rval_1'(s(bool,X620))))) | s(bool,X621) = s(bool,X625) | s(bool,'T_0') = s(bool,X625) | s(bool,X620) = s(bool,X626) | s(bool,'T_0') = s(bool,X626)) )),
  inference(superposition,[],[f652,f282])).
fof(f14229,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X612,X614] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X614),X615),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),X616))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X614),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X613),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X614)),X617))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X614),X615) = s('type.semanticPrimitives.result'('type.list.list'(bool),X614),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X614),'const.semanticPrimitives.Rval_1'(s(bool,X612))))) | s(bool,X613) = s(bool,X618) | s(bool,'T_0') = s(bool,X618) | s(bool,X612) = s(bool,X619) | s(bool,'T_0') = s(bool,X619)) )),
  inference(superposition,[],[f648,f282])).
fof(f14222,plain,(
  ( ! [X573,X569,X571,X572,X568,X570] : (s(bool,X569) != s(bool,X570) | s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X568))) = s('type.semanticPrimitives.result'(bool,X571),'const.semanticPrimitives.Rval_1'(s(bool,X570))) | s(bool,X569) = s(bool,X572) | s(bool,'T_0') = s(bool,X572) | s(bool,X568) = s(bool,X573) | s(bool,'T_0') = s(bool,X573)) )),
  inference(superposition,[],[f161,f282])).
fof(f14220,plain,(
  ( ! [X561,X557,X559,X560,X556,X558] : (s('type.semanticPrimitives.result'(bool,X558),'const.semanticPrimitives.Rval_1'(s(bool,X557))) != s('type.semanticPrimitives.result'(bool,X558),'const.semanticPrimitives.Rval_1'(s(bool,X559))) | s(bool,X556) = s(bool,X559) | s(bool,X557) = s(bool,X560) | s(bool,'T_0') = s(bool,X560) | s(bool,X556) = s(bool,X561) | s(bool,'T_0') = s(bool,X561)) )),
  inference(superposition,[],[f160,f282])).
fof(f14215,plain,(
  ( ! [X528,X524,X526,X529,X525,X527,X523] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X524),s('type.list.list'(bool),X525))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X526),s('type.list.list'(bool),X527))) | s(bool,X523) = s(bool,X526) | s(bool,X524) = s(bool,X528) | s(bool,'T_0') = s(bool,X528) | s(bool,X523) = s(bool,X529) | s(bool,'T_0') = s(bool,X529)) )),
  inference(superposition,[],[f148,f282])).
fof(f13920,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f282,f282])).
fof(f13919,plain,(
  ( ! [X206,X204,X207,X205,X203] : (s(bool,X203) = s(bool,X205) | s(bool,X205) = s(bool,X206) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X203)),X204,bool)) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f282,f765])).
fof(f16753,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(condensation,[],[f16752])).
fof(f16752,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (s(bool,X83) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X81)),X82,bool)) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X80) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X81)) )),
  inference(duplicate_literal_removal,[],[f13890])).
fof(f13890,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (s(bool,X83) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X81)),X82,bool)) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X80) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f282,f833])).
fof(f13876,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s(bool,X215) = s(bool,X217) | s(bool,X218) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X215)),X216,bool)) | s(bool,'T_0') = s(bool,X217) | s(bool,X218) = s(bool,X219) | s(bool,'T_0') = s(bool,X219)) )),
  inference(superposition,[],[f282,f765])).
fof(f13790,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s(bool,X215) = s(bool,X217) | s(bool,X217) = s(bool,X218) | s(bool,'T_0') = s(bool,X218) | s(bool,X219) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X215)),X216,bool)) | s(bool,'T_0') = s(bool,X219)) )),
  inference(superposition,[],[f282,f765])).
fof(f16997,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f16996])).
fof(f16996,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s(bool,X123) = s(bool,X124) | s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X125) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,X128) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,X129) | s(bool,X123) = s(bool,X127)) )),
  inference(duplicate_literal_removal,[],[f13770])).
fof(f13770,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (s(bool,X123) = s(bool,X124) | s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X125) | s(bool,'T_0') = s(bool,X126) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,X128) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,X129) | s(bool,X123) = s(bool,X127)) )),
  inference(superposition,[],[f282,f282])).
fof(f13387,plain,(
  ( ! [X74,X72,X75,X73] : (s('type.semanticPrimitives.result'('type.list.list'(X72),X73),X75) != s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),X74))) | s('type.semanticPrimitives.error_result'(X73),sK5(X75,X73,'type.list.list'(X72))) = s('type.semanticPrimitives.error_result'(X73),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X72,X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),X74)))),X73,'type.list.list'(X72))) | s('type.semanticPrimitives.result'('type.list.list'(X72),X73),X75) = s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X72),sK4(X75,X73,'type.list.list'(X72)))))) )),
  inference(superposition,[],[f731,f4228])).
fof(f13367,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8)))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),X10)))),X9,'type.list.list'('type.list.list'(X8)))))) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))))) )),
  inference(superposition,[],[f4228,f733])).
fof(f13365,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,X3)))) = s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),X5)),X4,'type.list.list'(X3))))) | s('type.semanticPrimitives.result'(X3,X4),X5) = s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,sK4(X5,X4,X3))))) )),
  inference(superposition,[],[f4228,f157])).
fof(f13364,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2)),X1,'type.list.list'(X0))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f4228,f748])).
fof(f13351,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),X1) = s('type.semanticPrimitives.error_result'(X0),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X2,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)))),X0,'type.list.list'(X2)))) )),
  inference(unit_resulting_resolution,[],[f4228,f162])).
fof(f13352,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),X1) = s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X2,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)))),X0,'type.list.list'(X2)))),X0,'type.list.list'(X2)))) )),
  inference(unit_resulting_resolution,[],[f164,f4228,f731])).
fof(f13210,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X16)))),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X16)))),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X16))),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X18)))))))))))) )),
  inference(superposition,[],[f717,f635])).
fof(f13209,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X12))),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X15))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X12))),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))))))) | s('type.semanticPrimitives.result'(X12,X13),X14) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f717,f748])).
fof(f13206,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f717,f733])).
fof(f13146,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),X6) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X7))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X4))),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X4))),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X4))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X4)),sK4(X6,X5,'type.list.list'('type.list.list'(X4)))),s('type.list.list'('type.list.list'('type.list.list'(X4))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f717,f748])).
fof(f13145,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),sK4(X2,X1,'type.list.list'(X0)))))) )),
  inference(superposition,[],[f717,f733])).
fof(f12948,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X3)))))) )),
  inference(unit_resulting_resolution,[],[f574,f657])).
fof(f12957,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X3)))))) )),
  inference(unit_resulting_resolution,[],[f574,f657])).
fof(f12958,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X2))))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X4))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X5)))))) )),
  inference(unit_resulting_resolution,[],[f574,f149])).
fof(f12959,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X1))),s('type.list.list'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)))),X2))) != s('type.list.list'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X4))),s('type.list.list'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)))),X5)))) )),
  inference(unit_resulting_resolution,[],[f574,f148])).
fof(f12960,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X4)))))) )),
  inference(unit_resulting_resolution,[],[f574,f160])).
fof(f12677,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X16)),X19))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X18))))))) | s('type.list.list'('type.list.list'(X16)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X16)),X19)),X17,'type.list.list'('type.list.list'(X16)))) = s('type.list.list'('type.list.list'(X16)),'const.list.CONS_2'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X16)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f789,f635])).
fof(f12676,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),X15))) != s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) | s('type.list.list'(X12),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),X15)),X13,'type.list.list'(X12))) = s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK4(X14,X13,X12)),s('type.list.list'(X12),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X12,X13),X14) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f789,f748])).
fof(f12673,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) | s(X0,sK4(X2,X1,X0)) = s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X3)),X1,X0)) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f789,f733])).
fof(f12671,plain,(
  ( ! [X212,X216,X215,X213,X214] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X212),X215),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X212),X213))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X212),X215),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X212),X216))) | s('type.semanticPrimitives.error_result'(X212),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X212),X213)),X212,X214)) = s('type.semanticPrimitives.error_result'(X212),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X212),X216)),X215,'type.semanticPrimitives.error_result'(X212)))) )),
  inference(superposition,[],[f789,f1017])).
fof(f12669,plain,(
  ( ! [X208,X206,X204,X209,X207,X205] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X209))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X204),X205),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X204,X205),'const.semanticPrimitives.Rval_1'(s(X204,X207))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X209)),X208,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X204),X205),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X204),'const.list.CONS_2'(s(X204,X207),s('type.list.list'(X204),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f789,f634])).
fof(f12668,plain,(
  ( ! [X198,X202,X200,X199,X203,X201] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X203))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X198),X199),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X198),'const.list.CONS_2'(s(X198,X201),s('type.list.list'(X198),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X198),X199),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X198,X199),'const.semanticPrimitives.Rval_1'(s(X198,X201))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X203)),X202,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200)))) )),
  inference(superposition,[],[f789,f634])).
fof(f12667,plain,(
  ( ! [X196,X194,X197,X195,X193] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),X197))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X193,X194),X195))))) | s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X194),sK5(X195,X194,X193)))) = s('type.semanticPrimitives.result'('type.list.list'(X193),X194),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),X197)),X196,'type.semanticPrimitives.result'('type.list.list'(X193),X194))) | s('type.semanticPrimitives.result'(X193,X194),X195) = s('type.semanticPrimitives.result'(X193,X194),'const.semanticPrimitives.Rval_1'(s(X193,sK4(X195,X194,X193))))) )),
  inference(superposition,[],[f789,f733])).
fof(f12666,plain,(
  ( ! [X191,X189,X192,X190,X188] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X192))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X188),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X188,X189),'const.semanticPrimitives.Rval_1'(s(X188,X190))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X192)),X191,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X188)),'const.list.CONS_2'(s('type.list.list'(X188),'const.list.CONS_2'(s(X188,X190),s('type.list.list'(X188),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X188)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f789,f635])).
fof(f12665,plain,(
  ( ! [X187,X185,X186,X184,X183] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X183),X184),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),X187))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X183),X184),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X183,X184),X185))))) | s('type.semanticPrimitives.result'('type.list.list'(X183),X184),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),X187)),X186,'type.semanticPrimitives.result'('type.list.list'(X183),X184))) = s('type.semanticPrimitives.result'('type.list.list'(X183),X184),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X183),'const.list.CONS_2'(s(X183,sK4(X185,X184,X183)),s('type.list.list'(X183),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X183,X184),X185) = s('type.semanticPrimitives.result'(X183,X184),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X184),sK5(X185,X184,X183))))) )),
  inference(superposition,[],[f789,f748])).
fof(f12658,plain,(
  ( ! [X158,X156,X159,X157,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X159),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X160))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X159),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X156)),'const.list.CONS_2'(s('type.list.list'(X156),'const.list.CONS_2'(s(X156,X158),s('type.list.list'(X156),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X156)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X156),X157),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X156,X157),'const.semanticPrimitives.Rval_1'(s(X156,X158))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X160)),X159,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157)))) )),
  inference(superposition,[],[f789,f635])).
fof(f12655,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X142,X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),X144))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X142,X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),X146))) | s('type.semanticPrimitives.result'(X142,X143),'const.semanticPrimitives.Rval_1'(s(X142,sK4(X144,X143,X142)))) = s('type.semanticPrimitives.result'(X142,X143),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),X146)),X145,'type.semanticPrimitives.result'(X142,X143))) | s('type.semanticPrimitives.result'('type.list.list'(X142),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X142,X143),X144))) = s('type.semanticPrimitives.result'('type.list.list'(X142),X143),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X143),sK5(X144,X143,X142))))) )),
  inference(superposition,[],[f789,f733])).
fof(f12653,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X132,X133),X135),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),X134))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X132,X133),X135),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),X136))) | s('type.semanticPrimitives.result'(X132,X133),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X133),sK5(X134,X133,X132)))) = s('type.semanticPrimitives.result'(X132,X133),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),X136)),X135,'type.semanticPrimitives.result'(X132,X133))) | s('type.semanticPrimitives.result'('type.list.list'(X132),X133),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X132,X133),X134))) = s('type.semanticPrimitives.result'('type.list.list'(X132),X133),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X132),'const.list.CONS_2'(s(X132,sK4(X134,X133,X132)),s('type.list.list'(X132),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f789,f748])).
fof(f12652,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s('type.semanticPrimitives.result'('type.list.list'(X127),X130),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X127),X131))) != s('type.semanticPrimitives.result'('type.list.list'(X127),X130),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X127),'const.list.CONS_2'(s(X127,X129),s('type.list.list'(X127),'const.list.NIL_0'))))) | s('type.list.list'(X127),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X127),X131)),X130,'type.list.list'(X127))) = s('type.list.list'(X127),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X127,X128),'const.semanticPrimitives.Rval_1'(s(X127,X129)))),X128,'type.list.list'(X127)))) )),
  inference(superposition,[],[f789,f6299])).
fof(f12630,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,X58))) != s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,X60))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X60)),X59,bool)) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f789,f171])).
fof(f12618,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rval_1'(s(bool,X13))) != s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rval_1'(s(bool,X15))) | s(bool,X12) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X15)),X14,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f789,f171])).
fof(f12617,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,X10))) | s(bool,X8) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X10)),X9,bool)) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f789,f171])).
fof(f12615,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rval_1'(s(X0,X1))) != s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0)) = s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X4)),X3,X0))) )),
  inference(superposition,[],[f789,f765])).
fof(f12603,plain,(
  ( ! [X208,X206,X204,X209,X207,X205] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X209))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X204),X205),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X204,X205),'const.semanticPrimitives.Rval_1'(s(X204,X207))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),X209) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X204),X205),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X204),'const.list.CONS_2'(s(X204,X207),s('type.list.list'(X204),'const.list.NIL_0')))))))),X208,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X204),X205),X206)))) )),
  inference(superposition,[],[f789,f634])).
fof(f12602,plain,(
  ( ! [X198,X202,X200,X199,X203,X201] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X203))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X198),X199),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X198),'const.list.CONS_2'(s(X198,X201),s('type.list.list'(X198),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),X203) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X198),X199),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X198,X199),'const.semanticPrimitives.Rval_1'(s(X198,X201)))))))),X202,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X198),X199),X200)))) )),
  inference(superposition,[],[f789,f634])).
fof(f12601,plain,(
  ( ! [X196,X194,X197,X195,X193] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),X197))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X193,X194),X195))))) | s('type.semanticPrimitives.result'('type.list.list'(X193),X194),X197) = s('type.semanticPrimitives.result'('type.list.list'(X193),X194),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X194),sK5(X195,X194,X193))))),X196,'type.semanticPrimitives.result'('type.list.list'(X193),X194))) | s('type.semanticPrimitives.result'(X193,X194),X195) = s('type.semanticPrimitives.result'(X193,X194),'const.semanticPrimitives.Rval_1'(s(X193,sK4(X195,X194,X193))))) )),
  inference(superposition,[],[f789,f733])).
fof(f12600,plain,(
  ( ! [X191,X189,X192,X190,X188] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X192))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X188),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X188,X189),'const.semanticPrimitives.Rval_1'(s(X188,X190))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),X192) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X188)),'const.list.CONS_2'(s('type.list.list'(X188),'const.list.CONS_2'(s(X188,X190),s('type.list.list'(X188),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X188)),'const.list.NIL_0')))))),X191,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X188)),X189)))) )),
  inference(superposition,[],[f789,f635])).
fof(f12599,plain,(
  ( ! [X187,X185,X186,X184,X183] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X183),X184),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),X187))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X183),X184),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X183,X184),X185))))) | s('type.semanticPrimitives.result'('type.list.list'(X183),X184),X187) = s('type.semanticPrimitives.result'('type.list.list'(X183),X184),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X183),X184),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X183),'const.list.CONS_2'(s(X183,sK4(X185,X184,X183)),s('type.list.list'(X183),'const.list.NIL_0')))))),X186,'type.semanticPrimitives.result'('type.list.list'(X183),X184))) | s('type.semanticPrimitives.result'(X183,X184),X185) = s('type.semanticPrimitives.result'(X183,X184),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X184),sK5(X185,X184,X183))))) )),
  inference(superposition,[],[f789,f748])).
fof(f12592,plain,(
  ( ! [X158,X156,X159,X157,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X159),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X160))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X159),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X156)),'const.list.CONS_2'(s('type.list.list'(X156),'const.list.CONS_2'(s(X156,X158),s('type.list.list'(X156),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X156)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),X160) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X156),X157),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X156,X157),'const.semanticPrimitives.Rval_1'(s(X156,X158)))))))),X159,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X156)),X157)))) )),
  inference(superposition,[],[f789,f635])).
fof(f12590,plain,(
  ( ! [X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X147,X148),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X147,X148),X149))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X147,X148),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X147,X148),X151))) | s('type.semanticPrimitives.result'(X147,X148),X151) = s('type.semanticPrimitives.result'(X147,X148),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X147,X148),'const.semanticPrimitives.Rval_1'(s(X147,sK4(X149,X148,X147))))),X150,'type.semanticPrimitives.result'(X147,X148))) | s('type.semanticPrimitives.result'(X147,X148),X149) = s('type.semanticPrimitives.result'(X147,X148),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X148),sK5(X149,X148,X147))))) )),
  inference(superposition,[],[f789,f157])).
fof(f12589,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X142,X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),X144))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X142,X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),X146))) | s('type.semanticPrimitives.result'(X142,X143),X146) = s('type.semanticPrimitives.result'(X142,X143),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X142,X143),'const.semanticPrimitives.Rval_1'(s(X142,sK4(X144,X143,X142))))),X145,'type.semanticPrimitives.result'(X142,X143))) | s('type.semanticPrimitives.result'('type.list.list'(X142),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X142,X143),X144))) = s('type.semanticPrimitives.result'('type.list.list'(X142),X143),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X143),sK5(X144,X143,X142))))) )),
  inference(superposition,[],[f789,f733])).
fof(f12588,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X137,X138),X140),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X137,X138),X139))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X137,X138),X140),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X137,X138),X141))) | s('type.semanticPrimitives.result'(X137,X138),X141) = s('type.semanticPrimitives.result'(X137,X138),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X137,X138),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X138),sK5(X139,X138,X137))))),X140,'type.semanticPrimitives.result'(X137,X138))) | s('type.semanticPrimitives.result'(X137,X138),X139) = s('type.semanticPrimitives.result'(X137,X138),'const.semanticPrimitives.Rval_1'(s(X137,sK4(X139,X138,X137))))) )),
  inference(superposition,[],[f789,f157])).
fof(f12587,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X132,X133),X135),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),X134))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X132,X133),X135),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),X136))) | s('type.semanticPrimitives.result'(X132,X133),X136) = s('type.semanticPrimitives.result'(X132,X133),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X132,X133),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X133),sK5(X134,X133,X132))))),X135,'type.semanticPrimitives.result'(X132,X133))) | s('type.semanticPrimitives.result'('type.list.list'(X132),X133),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X132,X133),X134))) = s('type.semanticPrimitives.result'('type.list.list'(X132),X133),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X132),'const.list.CONS_2'(s(X132,sK4(X134,X133,X132)),s('type.list.list'(X132),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f789,f748])).
fof(f12564,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,X58))) != s('type.semanticPrimitives.result'(bool,X59),'const.semanticPrimitives.Rval_1'(s(bool,X60))) | s(bool,X60) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X59,bool)) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f789,f171])).
fof(f12551,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,X10))) | s(bool,X10) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f789,f171])).
fof(f11278,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X2),X3) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'(sK0,sK1),sK4(X3,X2,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4(X3,X2,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X2),X3) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),sK5(X3,X2,'type.semanticPrimitives.result'(sK0,sK1)))))) ) | $spl28),
  inference(superposition,[],[f6779,f157])).
fof(f11277,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'(sK0,sK1),sK4(X1,X0,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4(X1,X0,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK5(X1,X0,'type.semanticPrimitives.result'(sK0,sK1)))))) ) | $spl28),
  inference(superposition,[],[f6779,f733])).
fof(f11281,plain,(
  ( ! [X10,X11,X9] : (s('type.semanticPrimitives.result'(sK0,sK1),X9) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X9)),X10,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X9)))) ) | $spl28),
  inference(forward_demodulation,[],[f11276,f765])).
fof(f11276,plain,(
  ( ! [X10,X11,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X9))) | s('type.semanticPrimitives.result'(sK0,sK1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X9)),X10,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X9)),X10,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6779,f765])).
fof(f11251,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X0),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X1),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))))))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X4),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X5)))))))) )),
  inference(unit_resulting_resolution,[],[f577,f149])).
fof(f11252,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X0),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X2))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X4))))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X5)))) )),
  inference(unit_resulting_resolution,[],[f577,f148])).
fof(f11253,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X1),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X4)))))))) )),
  inference(unit_resulting_resolution,[],[f577,f160])).
fof(f11179,plain,(
  ( ! [X4,X5] : (s('type.semanticPrimitives.result'(sK0,sK1),X4) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)))) | s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X4) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))) ) | $spl28),
  inference(forward_demodulation,[],[f11176,f765])).
fof(f11176,plain,(
  ( ! [X4,X5] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X4) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)) | s('type.semanticPrimitives.result'(sK0,sK1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X4)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6360,f765])).
fof(f11153,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X2)))))) )),
  inference(unit_resulting_resolution,[],[f543,f657])).
fof(f11162,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X2)))))) )),
  inference(unit_resulting_resolution,[],[f543,f657])).
fof(f11163,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X2))))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X3),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X4)))))) )),
  inference(unit_resulting_resolution,[],[f543,f149])).
fof(f11164,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0))),X2))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X3))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0))),X4)))) )),
  inference(unit_resulting_resolution,[],[f543,f148])).
fof(f11165,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X3)))))) )),
  inference(unit_resulting_resolution,[],[f543,f160])).
fof(f10925,plain,(
  ( ! [X350,X352,X349,X351,X348] : (s('type.semanticPrimitives.result'('type.list.list'(X348),X351),X352) != s('type.semanticPrimitives.result'('type.list.list'(X348),X351),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X348),'const.list.CONS_2'(s(X348,X350),s('type.list.list'(X348),'const.list.NIL_0'))))) | s('type.list.list'(X348),sK4(X352,X351,'type.list.list'(X348))) = s('type.list.list'(X348),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X348,X349),'const.semanticPrimitives.Rval_1'(s(X348,X350)))),X349,'type.list.list'(X348))) | s('type.semanticPrimitives.result'('type.list.list'(X348),X351),X352) = s('type.semanticPrimitives.result'('type.list.list'(X348),X351),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X351),sK5(X352,X351,'type.list.list'(X348)))))) )),
  inference(superposition,[],[f749,f6299])).
fof(f10907,plain,(
  ( ! [X251,X249,X252,X250,X248] : (s('type.semanticPrimitives.result'('type.list.list'(X248),X251),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X248),X252))) != s('type.semanticPrimitives.result'('type.list.list'(X248),X251),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X248),'const.list.CONS_2'(s(X248,X250),s('type.list.list'(X248),'const.list.NIL_0'))))) | s('type.list.list'(X248),X252) = s('type.list.list'(X248),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X248,X249),'const.semanticPrimitives.Rval_1'(s(X248,X250)))),X249,'type.list.list'(X248)))) )),
  inference(superposition,[],[f160,f6299])).
fof(f10902,plain,(
  ( ! [X222,X220,X225,X223,X221,X224] : (s('type.list.list'('type.list.list'(X220)),'const.list.CONS_2'(s('type.list.list'(X220),X224),s('type.list.list'('type.list.list'(X220)),X225))) != s('type.list.list'('type.list.list'(X220)),'const.list.CONS_2'(s('type.list.list'(X220),'const.list.CONS_2'(s(X220,X222),s('type.list.list'(X220),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X220)),X223))) | s('type.list.list'(X220),X224) = s('type.list.list'(X220),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X220,X221),'const.semanticPrimitives.Rval_1'(s(X220,X222)))),X221,'type.list.list'(X220)))) )),
  inference(superposition,[],[f148,f6299])).
fof(f10858,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.semanticPrimitives.result'('type.list.list'(X36),X39),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X36,X39),'const.semanticPrimitives.Rval_1'(s(X36,X40))))) != s('type.semanticPrimitives.result'('type.list.list'(X36),X39),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X36),'const.list.CONS_2'(s(X36,X38),s('type.list.list'(X36),'const.list.NIL_0'))))) | s('type.list.list'(X36),'const.list.CONS_2'(s(X36,X40),s('type.list.list'(X36),'const.list.NIL_0'))) = s('type.list.list'(X36),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X36,X37),'const.semanticPrimitives.Rval_1'(s(X36,X38)))),X37,'type.list.list'(X36)))) )),
  inference(superposition,[],[f657,f6299])).
fof(f10854,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X16),s('type.list.list'(X12),X17))) != s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X15),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X14),s('type.list.list'(X12),'const.list.NIL_0'))))) | s('type.list.list'(X12),X17) = s('type.list.list'(X12),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X14)))),X13,'type.list.list'(X12)))) )),
  inference(superposition,[],[f149,f6299])).
fof(f10849,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X22),s('type.list.list'(X19),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.NIL_0'))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X19),X20),X21),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X22)))))))),X21,'type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20))))) )),
  inference(superposition,[],[f6299,f634])).
fof(f10848,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X15),X16)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,X18))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X15),X16)),'const.list.NIL_0'))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X15),X16)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X15),X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X15),'const.list.CONS_2'(s(X15,X18),s('type.list.list'(X15),'const.list.NIL_0')))))))),X17,'type.list.list'('type.semanticPrimitives.result'('type.list.list'(X15),X16))))) )),
  inference(superposition,[],[f6299,f634])).
fof(f10847,plain,(
  ( ! [X14,X12,X13] : (s('type.list.list'('type.list.list'('type.list.list'(X12))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X12)),'const.list.CONS_2'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X14),s('type.list.list'(X12),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X12)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X12))),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.list.list'(X12))),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X14)))))))),X13,'type.list.list'('type.list.list'('type.list.list'(X12)))))) )),
  inference(superposition,[],[f6299,f635])).
fof(f10846,plain,(
  ( ! [X10,X11,X9] : (s('type.list.list'('type.list.list'(X9)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X9),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X9,X10),X11)))),X10,'type.list.list'('type.list.list'(X9)))) = s('type.list.list'('type.list.list'(X9)),'const.list.CONS_2'(s('type.list.list'(X9),'const.list.CONS_2'(s(X9,sK4(X11,X10,X9)),s('type.list.list'(X9),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X9)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X9,X10),X11) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK5(X11,X10,X9))))) )),
  inference(superposition,[],[f6299,f748])).
fof(f10845,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'('type.list.list'(X6)),'const.list.CONS_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X6)),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'(X6)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X8)))))),X7,'type.list.list'('type.list.list'(X6))))) )),
  inference(superposition,[],[f6299,f156])).
fof(f10844,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(X3),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),X5)),X4,'type.list.list'(X3))) = s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK4(X5,X4,X3)),s('type.list.list'(X3),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X3,X4),X5) = s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,X3))))) )),
  inference(superposition,[],[f6299,f157])).
fof(f10843,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2)),X1,'type.list.list'(X0))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f6299,f733])).
fof(f9409,plain,(
  ( ! [X2,X3,X1] : (s('type.semanticPrimitives.result'(sK0,X1),X2) != s('type.semanticPrimitives.result'(sK0,X1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | s(sK0,sK4(X2,X1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X3,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6741,f733])).
fof(f9358,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),X27),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25)),X28))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25)),X29))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),X27) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X24))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X24)),'const.list.CONS_2'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X24)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X24))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f635])).
fof(f9357,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19),X21),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19)),X22))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X18),X19),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X18,X19),X20))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19)),X23))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19),X21) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X18)),X19),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X18)),'const.list.CONS_2'(s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK4(X20,X19,X18)),s('type.list.list'(X18),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X18)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X18,X19),X20) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X20,X19,X18))))) )),
  inference(superposition,[],[f661,f748])).
fof(f9354,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X4))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X5))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f661,f733])).
fof(f9350,plain,(
  ( ! [X269,X271,X273,X275,X270,X276,X272,X274] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),X274),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),X275))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),X273),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X269),X270),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X269,X270),'const.semanticPrimitives.Rval_1'(s(X269,X272))))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),X276))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),X274) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X269),X270),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X269),'const.list.CONS_2'(s(X269,X272),s('type.list.list'(X269),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f634])).
fof(f9349,plain,(
  ( ! [X261,X263,X265,X267,X262,X268,X264,X266] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),X266),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),X267))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),X265),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X261),X262),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X261),'const.list.CONS_2'(s(X261,X264),s('type.list.list'(X261),'const.list.NIL_0'))))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),X268))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),X266) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X261),X262),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X261,X262),'const.semanticPrimitives.Rval_1'(s(X261,X264))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f634])).
fof(f9348,plain,(
  ( ! [X255,X257,X259,X260,X254,X256,X258] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),X258),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),X259))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X254),X255),X257),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X254),X255),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X254,X255),X256))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),X260))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),X258) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X254),X255),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X255),sK5(X256,X255,X254)))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X254,X255),X256) = s('type.semanticPrimitives.result'(X254,X255),'const.semanticPrimitives.Rval_1'(s(X254,sK4(X256,X255,X254))))) )),
  inference(superposition,[],[f661,f733])).
fof(f9347,plain,(
  ( ! [X253,X251,X249,X252,X250,X248,X247] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),X251),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),X252))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),X250),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X247),X248),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X247,X248),'const.semanticPrimitives.Rval_1'(s(X247,X249))))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),X253))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),X251) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X247)),'const.list.CONS_2'(s('type.list.list'(X247),'const.list.CONS_2'(s(X247,X249),s('type.list.list'(X247),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X247)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f635])).
fof(f9346,plain,(
  ( ! [X243,X241,X246,X244,X242,X240,X245] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),X244),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),X245))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X240),X241),X243),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X240),X241),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X240,X241),X242))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),X246))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),X244) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X240),X241),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X240),'const.list.CONS_2'(s(X240,sK4(X242,X241,X240)),s('type.list.list'(X240),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X240,X241),X242) = s('type.semanticPrimitives.result'(X240,X241),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X241),sK5(X242,X241,X240))))) )),
  inference(superposition,[],[f661,f748])).
fof(f9345,plain,(
  ( ! [X239,X237,X235,X233,X238,X236,X234] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),X237),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),X238))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X233),X234),X236),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X233),X234),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X233,X234),'const.semanticPrimitives.Rval_1'(s(X233,X235))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),X239))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),X237) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X233),X234),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X233),'const.list.CONS_2'(s(X233,X235),s('type.list.list'(X233),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f156])).
fof(f9341,plain,(
  ( ! [X218,X216,X215,X213,X219,X217,X214] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),X217),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),X218))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X213),X214),X216),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X213),X214),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X213),'const.list.CONS_2'(s(X213,X215),s('type.list.list'(X213),'const.list.NIL_0'))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),X219))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),X217) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X213),X214),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X213,X214),'const.semanticPrimitives.Rval_1'(s(X213,X215))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f156])).
fof(f9339,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),X204))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X199)),'const.list.CONS_2'(s('type.list.list'(X199),'const.list.CONS_2'(s(X199,X201),s('type.list.list'(X199),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X199)),'const.list.NIL_0'))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),X205))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X199),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X199,X200),'const.semanticPrimitives.Rval_1'(s(X199,X201))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f635])).
fof(f9337,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),X190),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),X191))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X186,X187),X189),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X186,X187),X188))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),X192))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),X190) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X186,X187)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X186,X187),'const.semanticPrimitives.Rval_1'(s(X186,sK4(X188,X187,X186)))),s('type.list.list'('type.semanticPrimitives.result'(X186,X187)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X186,X187),X188) = s('type.semanticPrimitives.result'(X186,X187),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X187),sK5(X188,X187,X186))))) )),
  inference(superposition,[],[f661,f157])).
fof(f9336,plain,(
  ( ! [X185,X182,X180,X184,X183,X181,X179] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),X183),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),X184))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X179,X180),X182),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X179,X180),X181))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),X185))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),X183) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X179,X180)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X179,X180),'const.semanticPrimitives.Rval_1'(s(X179,sK4(X181,X180,X179)))),s('type.list.list'('type.semanticPrimitives.result'(X179,X180)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X179,X180),X181))) = s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),sK5(X181,X180,X179))))) )),
  inference(superposition,[],[f661,f733])).
fof(f9335,plain,(
  ( ! [X177,X175,X173,X178,X176,X174,X172] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),X176),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),X177))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X172,X173),X175),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X172,X173),X174))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),X178))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),X176) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X172,X173)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X172,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),sK5(X174,X173,X172)))),s('type.list.list'('type.semanticPrimitives.result'(X172,X173)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X172,X173),X174) = s('type.semanticPrimitives.result'(X172,X173),'const.semanticPrimitives.Rval_1'(s(X172,sK4(X174,X173,X172))))) )),
  inference(superposition,[],[f661,f157])).
fof(f9334,plain,(
  ( ! [X167,X165,X171,X169,X166,X170,X168] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),X169),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),X170))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X165,X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X165,X166),X167))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),X171))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),X169) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X165,X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X165,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),sK5(X167,X166,X165)))),s('type.list.list'('type.semanticPrimitives.result'(X165,X166)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X165),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X165,X166),X167))) = s('type.semanticPrimitives.result'('type.list.list'(X165),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X165),'const.list.CONS_2'(s(X165,sK4(X167,X166,X165)),s('type.list.list'(X165),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f748])).
fof(f9314,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X65),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X65),'const.semanticPrimitives.Rval_1'(s(bool,X64))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),X68))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X65),X66) = s('type.semanticPrimitives.result'('type.list.list'(bool),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X64) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f661,f171])).
fof(f9306,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X20),X21),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),X22))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,X19))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),X23))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X20),X21) = s('type.semanticPrimitives.result'('type.list.list'(bool),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X18),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f661,f171])).
fof(f9305,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X13),X14),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),X15))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),X16))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X13),X14) = s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X12),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X12) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f661,f171])).
fof(f9301,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X80))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X76,X77),'const.semanticPrimitives.Rval_1'(s(X76,X81))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X82))) | s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X76),'const.list.CONS_2'(s(X76,X81),s('type.list.list'(X76),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X76),X77),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X78)),X79,'type.semanticPrimitives.result'('type.list.list'(X76),X77)))) )),
  inference(superposition,[],[f661,f765])).
fof(f9299,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,X68))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),X69))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),sK4(X66,X65,'type.list.list'(X64))))) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,X68),s('type.list.list'(X64),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X64)),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X66))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X64)),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X66,X65,'type.list.list'(X64)))))) )),
  inference(superposition,[],[f661,f733])).
fof(f9372,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),X55))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rval_1'(s(X52,X56))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),X57))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X52)),'const.list.CONS_2'(s('type.list.list'(X52),sK4(X54,X53,'type.list.list'(X52))),s('type.list.list'('type.list.list'(X52)),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f9297,f164])).
fof(f9297,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),X55))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rval_1'(s(X52,X56))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X52),X53)),X57))) | s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X53),sK5(X54,X53,'type.list.list'(X52))))) = s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),'const.list.CONS_2'(s(X52,X56),s('type.list.list'(X52),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X52)),'const.list.CONS_2'(s('type.list.list'(X52),sK4(X54,X53,'type.list.list'(X52))),s('type.list.list'('type.list.list'(X52)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f748])).
fof(f9371,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X49))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,X50))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X51))) | s('type.semanticPrimitives.result'(X46,X47),X48) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,sK4(X48,X47,X46))))) )),
  inference(subsumption_resolution,[],[f9296,f164])).
fof(f9296,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X49))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,X50))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X51))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X48,X47,X46)))) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),'const.list.CONS_2'(s(X46,X50),s('type.list.list'(X46),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X46,X47),X48) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,sK4(X48,X47,X46))))) )),
  inference(superposition,[],[f661,f733])).
fof(f9295,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X40),X44))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),X45))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X40,X41),'const.semanticPrimitives.Rval_1'(s(X40,X42))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),X43))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X40)),'const.list.CONS_2'(s('type.list.list'(X40),X44),s('type.list.list'('type.list.list'(X40)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X40)),'const.list.CONS_2'(s('type.list.list'(X40),'const.list.CONS_2'(s(X40,X42),s('type.list.list'(X40),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X40)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f635])).
fof(f9294,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),X36))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X37))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X38))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X39))) | s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X38),s('type.list.list'(X34),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,sK4(X36,X35,X34)),s('type.list.list'(X34),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X34,X35),X36) = s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),sK5(X36,X35,X34))))) )),
  inference(superposition,[],[f661,f748])).
fof(f9293,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X28,X29),'const.semanticPrimitives.Rval_1'(s(X28,X30))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),X31))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X28,X29),'const.semanticPrimitives.Rval_1'(s(X28,X32))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),X33))) | s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X32),s('type.list.list'(X28),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f661,f156])).
fof(f9287,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X4))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X4),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))) )),
  inference(superposition,[],[f661,f635])).
fof(f9286,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X3)))) )),
  inference(unit_resulting_resolution,[],[f575,f661])).
fof(f9203,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),X15),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13)),X16))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X14))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13)),X17))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),X15) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X12)),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X14),s('type.list.list'(X12),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f648,f635])).
fof(f9202,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X6),X7)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X6),X7),X9),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X6),X7)),X10))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X6),X7)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X8))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X6),X7)),X11))) | s('type.semanticPrimitives.result'('type.list.list'(X6),X7),X9) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,sK4(X8,X7,X6)))))) | s('type.semanticPrimitives.result'(X6,X7),X8) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X8,X7,X6))))) )),
  inference(superposition,[],[f648,f748])).
fof(f9196,plain,(
  ( ! [X269,X271,X273,X275,X270,X276,X272,X274] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),X274),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),X275))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X269),X270),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X269,X270),'const.semanticPrimitives.Rval_1'(s(X269,X272))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273)),X276))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),X274) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271)),X273),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),X273),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X269),X270),X271),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X269),X270),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X269),'const.list.CONS_2'(s(X269,X272),s('type.list.list'(X269),'const.list.NIL_0')))))))))))) )),
  inference(superposition,[],[f648,f634])).
fof(f9195,plain,(
  ( ! [X261,X263,X265,X267,X262,X268,X264,X266] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),X266),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),X267))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X261),X262),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X261),'const.list.CONS_2'(s(X261,X264),s('type.list.list'(X261),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265)),X268))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),X266) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263)),X265),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),X265),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X261),X262),X263),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X261),X262),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X261,X262),'const.semanticPrimitives.Rval_1'(s(X261,X264)))))))))))) )),
  inference(superposition,[],[f648,f634])).
fof(f9194,plain,(
  ( ! [X255,X257,X259,X260,X254,X256,X258] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),X258),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),X259))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X254),X255),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X254,X255),X256))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257)),X260))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),X258) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X254),X255)),X257),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X254),X255),X257),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X254),X255),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X255),sK5(X256,X255,X254)))))))) | s('type.semanticPrimitives.result'(X254,X255),X256) = s('type.semanticPrimitives.result'(X254,X255),'const.semanticPrimitives.Rval_1'(s(X254,sK4(X256,X255,X254))))) )),
  inference(superposition,[],[f648,f733])).
fof(f9193,plain,(
  ( ! [X253,X251,X249,X252,X250,X248,X247] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),X251),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),X252))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X247),X248),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X247,X248),'const.semanticPrimitives.Rval_1'(s(X247,X249))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250)),X253))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),X251) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248)),X250),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),X250),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X247)),X248),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X247)),'const.list.CONS_2'(s('type.list.list'(X247),'const.list.CONS_2'(s(X247,X249),s('type.list.list'(X247),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X247)),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f648,f635])).
fof(f9192,plain,(
  ( ! [X243,X241,X246,X244,X242,X240,X245] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),X244),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),X245))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X240),X241),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X240,X241),X242))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243)),X246))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),X244) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X240),X241)),X243),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X240),X241),X243),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X240),X241),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X240),'const.list.CONS_2'(s(X240,sK4(X242,X241,X240)),s('type.list.list'(X240),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'(X240,X241),X242) = s('type.semanticPrimitives.result'(X240,X241),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X241),sK5(X242,X241,X240))))) )),
  inference(superposition,[],[f648,f748])).
fof(f9191,plain,(
  ( ! [X239,X237,X235,X233,X238,X236,X234] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),X237),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),X238))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X233),X234),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X233,X234),'const.semanticPrimitives.Rval_1'(s(X233,X235))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236)),X239))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),X237) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X233),X234)),X236),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X233),X234),X236),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X233),X234),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X233),'const.list.CONS_2'(s(X233,X235),s('type.list.list'(X233),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f648,f156])).
fof(f9187,plain,(
  ( ! [X218,X216,X215,X213,X219,X217,X214] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),X217),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),X218))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X213),X214),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X213),'const.list.CONS_2'(s(X213,X215),s('type.list.list'(X213),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216)),X219))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),X217) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X213),X214)),X216),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X213),X214),X216),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X213),X214),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X213,X214),'const.semanticPrimitives.Rval_1'(s(X213,X215)))))))))) )),
  inference(superposition,[],[f648,f156])).
fof(f9185,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),X204))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X199)),'const.list.CONS_2'(s('type.list.list'(X199),'const.list.CONS_2'(s(X199,X201),s('type.list.list'(X199),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X199)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202)),X205))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X199),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X199,X200),'const.semanticPrimitives.Rval_1'(s(X199,X201)))))))))))) )),
  inference(superposition,[],[f648,f635])).
fof(f9183,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),X190),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),X191))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X186,X187)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X186,X187),X188),s('type.list.list'('type.semanticPrimitives.result'(X186,X187)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189)),X192))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),X190) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X186,X187)),X189),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X186,X187),X189),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X186,X187),'const.semanticPrimitives.Rval_1'(s(X186,sK4(X188,X187,X186)))))))) | s('type.semanticPrimitives.result'(X186,X187),X188) = s('type.semanticPrimitives.result'(X186,X187),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X187),sK5(X188,X187,X186))))) )),
  inference(superposition,[],[f648,f157])).
fof(f9182,plain,(
  ( ! [X185,X182,X180,X184,X183,X181,X179] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),X183),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),X184))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X179,X180)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X179,X180),X181),s('type.list.list'('type.semanticPrimitives.result'(X179,X180)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182)),X185))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),X183) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X179,X180)),X182),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X179,X180),X182),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X179,X180),'const.semanticPrimitives.Rval_1'(s(X179,sK4(X181,X180,X179)))))))) | s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X179,X180),X181))) = s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),sK5(X181,X180,X179))))) )),
  inference(superposition,[],[f648,f733])).
fof(f9181,plain,(
  ( ! [X177,X175,X173,X178,X176,X174,X172] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),X176),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),X177))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X172,X173)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X172,X173),X174),s('type.list.list'('type.semanticPrimitives.result'(X172,X173)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175)),X178))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),X176) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X172,X173)),X175),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X172,X173),X175),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X172,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),sK5(X174,X173,X172)))))))) | s('type.semanticPrimitives.result'(X172,X173),X174) = s('type.semanticPrimitives.result'(X172,X173),'const.semanticPrimitives.Rval_1'(s(X172,sK4(X174,X173,X172))))) )),
  inference(superposition,[],[f648,f157])).
fof(f9180,plain,(
  ( ! [X167,X165,X171,X169,X166,X170,X168] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),X169),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),X170))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X165,X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X165,X166),X167),s('type.list.list'('type.semanticPrimitives.result'(X165,X166)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168)),X171))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),X169) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X165,X166)),X168),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X165,X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X165,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),sK5(X167,X166,X165)))))))) | s('type.semanticPrimitives.result'('type.list.list'(X165),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X165,X166),X167))) = s('type.semanticPrimitives.result'('type.list.list'(X165),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X165),'const.list.CONS_2'(s(X165,sK4(X167,X166,X165)),s('type.list.list'(X165),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f648,f748])).
fof(f9160,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X65),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X64),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X65)),X68))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X65),X66) = s('type.semanticPrimitives.result'('type.list.list'(bool),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X65),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,X64) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f648,f171])).
fof(f9152,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X20),X21),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),X22))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X19),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X20)),X23))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X20),X21) = s('type.semanticPrimitives.result'('type.list.list'(bool),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,X18))))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f648,f171])).
fof(f9151,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X13),X14),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),X15))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X13)),X16))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X13),X14) = s('type.semanticPrimitives.result'('type.list.list'(bool),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,X12))))) | s(bool,X12) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f648,f171])).
fof(f9147,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X80))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X76),'const.list.CONS_2'(s(X76,X81),s('type.list.list'(X76),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X82))) | s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X76,X77),'const.semanticPrimitives.Rval_1'(s(X76,X81))))) = s('type.semanticPrimitives.result'('type.list.list'(X76),X77),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X78)),X79,'type.semanticPrimitives.result'('type.list.list'(X76),X77)))) )),
  inference(superposition,[],[f648,f765])).
fof(f9145,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,X68),s('type.list.list'(X64),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X64),X65)),X69))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,X68))))) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),sK4(X66,X65,'type.list.list'(X64))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X64)),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X66))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X64)),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X66,X65,'type.list.list'(X64)))))) )),
  inference(superposition,[],[f648,f733])).
fof(f9141,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X40)),'const.list.CONS_2'(s('type.list.list'(X40),X44),s('type.list.list'('type.list.list'(X40)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),X45))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X40,X41),'const.semanticPrimitives.Rval_1'(s(X40,X42))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41)),X43))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X40),X44))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X40)),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X40)),'const.list.CONS_2'(s('type.list.list'(X40),'const.list.CONS_2'(s(X40,X42),s('type.list.list'(X40),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X40)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f648,f635])).
fof(f9140,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),X36))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X37))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X38),s('type.list.list'(X34),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X39))) | s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X38))))) = s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,sK4(X36,X35,X34)),s('type.list.list'(X34),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X34,X35),X36) = s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),sK5(X36,X35,X34))))) )),
  inference(superposition,[],[f648,f748])).
fof(f9139,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X28,X29),'const.semanticPrimitives.Rval_1'(s(X28,X30))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),X31))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X32),s('type.list.list'(X28),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X28),X29)),X33))) | s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X28,X29),'const.semanticPrimitives.Rval_1'(s(X28,X32))))) = s('type.semanticPrimitives.result'('type.list.list'(X28),X29),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X28),'const.list.CONS_2'(s(X28,X30),s('type.list.list'(X28),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f648,f156])).
fof(f9135,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X14),s('type.list.list'(X12),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),X15))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X16),s('type.list.list'(X12),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),X17))) | s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X14))))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X16)))))) )),
  inference(superposition,[],[f648,f156])).
fof(f9133,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X4),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X4))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))) )),
  inference(superposition,[],[f648,f635])).
fof(f9050,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X102),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X103))) | s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(X102,X99,X98)))) = s('type.semanticPrimitives.result'(X98,X99),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99))) | s('type.semanticPrimitives.result'(X98,X99),X102) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(X102,X99,X98))))) )),
  inference(superposition,[],[f752,f765])).
fof(f9048,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),X92),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90)),X93))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X88),X89),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X88,X89),'const.semanticPrimitives.Rval_1'(s(X88,X91))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90)),X94))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X88),X89),sK4(X92,X90,'type.semanticPrimitives.result'('type.list.list'(X88),X89))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X88),X89),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X88),'const.list.CONS_2'(s(X88,X91),s('type.list.list'(X88),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),X92) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X88),X89),X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),sK5(X92,X90,'type.semanticPrimitives.result'('type.list.list'(X88),X89)))))) )),
  inference(superposition,[],[f752,f634])).
fof(f9047,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),X85),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83)),X86))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X81),X82),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X81),'const.list.CONS_2'(s(X81,X84),s('type.list.list'(X81),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83)),X87))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X81),X82),sK4(X85,X83,'type.semanticPrimitives.result'('type.list.list'(X81),X82))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X81),X82),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X81,X82),'const.semanticPrimitives.Rval_1'(s(X81,X84))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),X85) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X81),X82),X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),sK5(X85,X83,'type.semanticPrimitives.result'('type.list.list'(X81),X82)))))) )),
  inference(superposition,[],[f752,f634])).
fof(f9084,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X79))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X75,X76),X77))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X80))) | s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78) = s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(X78,X76,'type.list.list'(X75))))) | s('type.semanticPrimitives.result'(X75,X76),X77) = s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,sK4(X77,X76,X75))))) )),
  inference(subsumption_resolution,[],[f9046,f164])).
fof(f9046,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X79))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X75,X76),X77))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X80))) | s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(X77,X76,X75)))) = s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X75),sK4(X78,X76,'type.list.list'(X75))))) | s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78) = s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(X78,X76,'type.list.list'(X75))))) | s('type.semanticPrimitives.result'(X75,X76),X77) = s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,sK4(X77,X76,X75))))) )),
  inference(superposition,[],[f752,f733])).
fof(f9045,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X73))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X69,X70),'const.semanticPrimitives.Rval_1'(s(X69,X71))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X74))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X69)),sK4(X72,X70,'type.list.list'('type.list.list'(X69)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X69)),'const.list.CONS_2'(s('type.list.list'(X69),'const.list.CONS_2'(s(X69,X71),s('type.list.list'(X69),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X69)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),sK5(X72,X70,'type.list.list'('type.list.list'(X69))))))) )),
  inference(superposition,[],[f752,f635])).
fof(f9044,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X63,X64),X65))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X68))) | s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X63),sK4(X66,X64,'type.list.list'(X63))))) = s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X63),'const.list.CONS_2'(s(X63,sK4(X65,X64,X63)),s('type.list.list'(X63),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66) = s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5(X66,X64,'type.list.list'(X63))))) | s('type.semanticPrimitives.result'(X63,X64),X65) = s('type.semanticPrimitives.result'(X63,X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5(X65,X64,X63))))) )),
  inference(superposition,[],[f752,f748])).
fof(f9043,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X61))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X59))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X62))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),sK4(X60,X58,'type.list.list'(X57))))) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X59),s('type.list.list'(X57),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),sK5(X60,X58,'type.list.list'(X57)))))) )),
  inference(superposition,[],[f752,f156])).
fof(f9039,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X41),X42)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X41),X42)),X45))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X41),X42)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X43),s('type.list.list'(X41),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X41),X42)),X46))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,X43))))) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),sK4(X44,X42,'type.list.list'(X41))))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK5(X44,X42,'type.list.list'(X41)))))) )),
  inference(superposition,[],[f752,f156])).
fof(f9037,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X32),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X33))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),'const.list.CONS_2'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X31),s('type.list.list'(X29),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X29)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X34))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),sK4(X32,X30,'type.list.list'('type.list.list'(X29)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X32) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5(X32,X30,'type.list.list'('type.list.list'(X29))))))) )),
  inference(superposition,[],[f752,f635])).
fof(f9035,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X20),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X23))) != s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X21),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X22))) | s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK4(X20,X19,X18)))) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK4(X21,X19,X18)))) | s('type.semanticPrimitives.result'(X18,X19),X21) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X21,X19,X18)))) | s('type.semanticPrimitives.result'(X18,X19),X20) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X20,X19,X18))))) )),
  inference(superposition,[],[f752,f157])).
fof(f9034,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X14),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X17))) != s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X15),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X16))) | s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X14,X13,X12)))) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X15,X13,X12)))) | s('type.semanticPrimitives.result'(X12,X13),X15) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X15,X13,X12)))) | s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f752,f733])).
fof(f9079,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X2),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X3),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f9032,f164])).
fof(f9032,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X2),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X3),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f752,f748])).
fof(f9078,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.semanticPrimitives.result'(X98,X99),X100) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98)))) | s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X102))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X103),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) | s('type.semanticPrimitives.result'(X98,X99),X103) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98))))) )),
  inference(forward_demodulation,[],[f9030,f765])).
fof(f9030,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X102))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X103),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) | s('type.semanticPrimitives.result'(X98,X99),X103) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98)))) | s('type.semanticPrimitives.result'(X98,X99),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99))) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98))))) )),
  inference(superposition,[],[f752,f765])).
fof(f9057,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X33),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X34))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),'const.list.CONS_2'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X31),s('type.list.list'(X29),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X29)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X32))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X33) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31)))))),X30,'type.list.list'('type.list.list'(X29))))))) )),
  inference(subsumption_resolution,[],[f9017,f717])).
fof(f9017,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X33),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X34))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),'const.list.CONS_2'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X31),s('type.list.list'(X29),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X29)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30)),X32))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X33) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31)))))),X30,'type.list.list'('type.list.list'(X29)))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31)))))),X30,'type.list.list'('type.list.list'(X29))))))) )),
  inference(superposition,[],[f752,f635])).
fof(f9006,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X0),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X0))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(X0,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f6251,f748])).
fof(f8992,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X1))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6251,f657])).
fof(f8999,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X1))),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6251,f657])).
fof(f9000,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X0),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X3))),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X4)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6251,f149])).
fof(f9001,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X1))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X2))),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X4)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6251,f148])).
fof(f9002,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X2))),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6251,f160])).
fof(f8941,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X102),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X103))) | s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(X102,X99,X98)))) = s('type.semanticPrimitives.result'(X98,X99),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99))) | s('type.semanticPrimitives.result'(X98,X99),X102) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(X102,X99,X98))))) )),
  inference(superposition,[],[f736,f765])).
fof(f8967,plain,(
  ( ! [X97,X95,X96] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X97))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X95),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X96))) | s('type.semanticPrimitives.result'(sK0,sK1),X95) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(X95,sK1,sK0))))) ) | $spl28),
  inference(subsumption_resolution,[],[f8940,f164])).
fof(f8940,plain,(
  ( ! [X97,X95,X96] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X97))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X95),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X96))) | s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X95,sK1,sK0)))) | s('type.semanticPrimitives.result'(sK0,sK1),X95) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(X95,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f736,f6150])).
fof(f8937,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X79))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X75,X76),X77))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X75),X76)),X80))) | s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(X77,X76,X75)))) = s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(X78,X76,'type.list.list'(X75))))) | s('type.semanticPrimitives.result'('type.list.list'(X75),X76),X78) = s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X75),sK4(X78,X76,'type.list.list'(X75))))) | s('type.semanticPrimitives.result'(X75,X76),X77) = s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,sK4(X77,X76,X75))))) )),
  inference(superposition,[],[f736,f733])).
fof(f8966,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X73))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X69,X70),'const.semanticPrimitives.Rval_1'(s(X69,X71))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X74))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X69)),sK4(X72,X70,'type.list.list'('type.list.list'(X69))))))) )),
  inference(subsumption_resolution,[],[f8936,f164])).
fof(f8936,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X73))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X69,X70),'const.semanticPrimitives.Rval_1'(s(X69,X71))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70)),X74))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),sK5(X72,X70,'type.list.list'('type.list.list'(X69)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X69)),'const.list.CONS_2'(s('type.list.list'(X69),'const.list.CONS_2'(s(X69,X71),s('type.list.list'(X69),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X69)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),X72) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X69)),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X69)),sK4(X72,X70,'type.list.list'('type.list.list'(X69))))))) )),
  inference(superposition,[],[f736,f635])).
fof(f8965,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X63,X64),X65))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X68))) | s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66) = s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X63),sK4(X66,X64,'type.list.list'(X63))))) | s('type.semanticPrimitives.result'(X63,X64),X65) = s('type.semanticPrimitives.result'(X63,X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5(X65,X64,X63))))) )),
  inference(subsumption_resolution,[],[f8935,f164])).
fof(f8935,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X67))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X63,X64),X65))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X63),X64)),X68))) | s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5(X66,X64,'type.list.list'(X63))))) = s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X63),'const.list.CONS_2'(s(X63,sK4(X65,X64,X63)),s('type.list.list'(X63),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X63),X64),X66) = s('type.semanticPrimitives.result'('type.list.list'(X63),X64),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X63),sK4(X66,X64,'type.list.list'(X63))))) | s('type.semanticPrimitives.result'(X63,X64),X65) = s('type.semanticPrimitives.result'(X63,X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),sK5(X65,X64,X63))))) )),
  inference(superposition,[],[f736,f748])).
fof(f8964,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X61))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X59))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X62))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),sK4(X60,X58,'type.list.list'(X57)))))) )),
  inference(subsumption_resolution,[],[f8934,f164])).
fof(f8934,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X61))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X59))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X57),X58)),X62))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),sK5(X60,X58,'type.list.list'(X57))))) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X59),s('type.list.list'(X57),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X60) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),sK4(X60,X58,'type.list.list'(X57)))))) )),
  inference(superposition,[],[f736,f156])).
fof(f8962,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X20),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X23))) != s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X21),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X22))) | s('type.semanticPrimitives.result'(X18,X19),X21) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK4(X21,X19,X18)))) | s('type.semanticPrimitives.result'(X18,X19),X20) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X20,X19,X18))))) )),
  inference(subsumption_resolution,[],[f8926,f164])).
fof(f8926,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X20),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X23))) != s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X18,X19),X21),s('type.list.list'('type.semanticPrimitives.result'(X18,X19)),X22))) | s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK4(X20,X19,X18)))) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X21,X19,X18)))) | s('type.semanticPrimitives.result'(X18,X19),X21) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK4(X21,X19,X18)))) | s('type.semanticPrimitives.result'(X18,X19),X20) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK5(X20,X19,X18))))) )),
  inference(superposition,[],[f736,f157])).
fof(f8961,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X14),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X17))) != s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X15),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X16))) | s('type.semanticPrimitives.result'(X12,X13),X15) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X15,X13,X12)))) | s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(subsumption_resolution,[],[f8925,f164])).
fof(f8925,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X14),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X17))) != s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X15),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X16))) | s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X14,X13,X12)))) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X15,X13,X12)))) | s('type.semanticPrimitives.result'(X12,X13),X15) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,sK4(X15,X13,X12)))) | s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f736,f733])).
fof(f8924,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.list.list'('type.semanticPrimitives.result'(X6,X7)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X6,X7),X8),s('type.list.list'('type.semanticPrimitives.result'(X6,X7)),X11))) != s('type.list.list'('type.semanticPrimitives.result'(X6,X7)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X6,X7),X9),s('type.list.list'('type.semanticPrimitives.result'(X6,X7)),X10))) | s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X8,X7,X6)))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X9,X7,X6)))) | s('type.semanticPrimitives.result'(X6,X7),X9) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,sK4(X9,X7,X6)))) | s('type.semanticPrimitives.result'(X6,X7),X8) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,sK4(X8,X7,X6))))) )),
  inference(superposition,[],[f736,f157])).
fof(f8923,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X2),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X3),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f736,f748])).
fof(f8960,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.semanticPrimitives.result'(X98,X99),X100) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98)))) | s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X102))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X103),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) | s('type.semanticPrimitives.result'(X98,X99),X103) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98))))) )),
  inference(forward_demodulation,[],[f8921,f765])).
fof(f8921,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X100),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X102))) != s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X98,X99),X103),s('type.list.list'('type.semanticPrimitives.result'(X98,X99)),X104))) | s('type.semanticPrimitives.result'(X98,X99),X103) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98)))) | s('type.semanticPrimitives.result'(X98,X99),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99))) = s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rval_1'(s(X98,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100)),X101,'type.semanticPrimitives.result'(X98,X99)),X99,X98))))) )),
  inference(superposition,[],[f736,f765])).
fof(f8951,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X40))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X38))) | s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37)))),X36,'type.list.list'(X35)))))) )),
  inference(subsumption_resolution,[],[f8950,f164])).
fof(f8950,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37))) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X35),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37)))),X36,'type.list.list'(X35))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X40))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X38))) | s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37)))),X36,'type.list.list'(X35)))))) )),
  inference(forward_demodulation,[],[f8909,f155])).
fof(f8909,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X40))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X35),X36)),X38))) | s('type.semanticPrimitives.result'('type.list.list'(X35),X36),X39) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37)))),X36,'type.list.list'(X35))))) | s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37))))) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X35),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),X37)))),X36,'type.list.list'(X35)))))) )),
  inference(superposition,[],[f736,f155])).
fof(f8827,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X23) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X23))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X20))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X20)),'const.list.CONS_2'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X22),s('type.list.list'(X20),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X20)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X20))),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f635])).
fof(f8826,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X18) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),X17))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X18))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X15)),'const.list.CONS_2'(s('type.list.list'(X15),'const.list.CONS_2'(s(X15,sK4(X17,X16,X15)),s('type.list.list'(X15),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X15)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f667,f748])).
fof(f8823,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f667,f733])).
fof(f8819,plain,(
  ( ! [X222,X227,X225,X223,X228,X226,X224] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X227) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),X226),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X222),X223),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X222,X223),'const.semanticPrimitives.Rval_1'(s(X222,X225))))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X228),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X227))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X228),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X222),X223),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X222),'const.list.CONS_2'(s(X222,X225),s('type.list.list'(X222),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f634])).
fof(f8818,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X220) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),X219),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X215),X216),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X215),'const.list.CONS_2'(s(X215,X218),s('type.list.list'(X215),'const.list.NIL_0'))))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X221),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X220))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X221),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X215),X216),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X215,X216),'const.semanticPrimitives.Rval_1'(s(X215,X218))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f634])).
fof(f8817,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X213) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X209),X210),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X209),X210),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X209,X210),X211))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X214),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X213))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X214),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X209),X210),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X210),sK5(X211,X210,X209)))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X209,X210),X211) = s('type.semanticPrimitives.result'(X209,X210),'const.semanticPrimitives.Rval_1'(s(X209,sK4(X211,X210,X209))))) )),
  inference(superposition,[],[f667,f733])).
fof(f8816,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X207) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X203),X204),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X203,X204),'const.semanticPrimitives.Rval_1'(s(X203,X205))))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X207))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X203)),'const.list.CONS_2'(s('type.list.list'(X203),'const.list.CONS_2'(s(X203,X205),s('type.list.list'(X203),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X203)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f635])).
fof(f8815,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X201) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X197),X198),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X197),X198),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X197,X198),X199))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X201))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X197),X198),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X197),'const.list.CONS_2'(s(X197,sK4(X199,X198,X197)),s('type.list.list'(X197),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X197,X198),X199) = s('type.semanticPrimitives.result'(X197,X198),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X198),sK5(X199,X198,X197))))) )),
  inference(superposition,[],[f667,f748])).
fof(f8814,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X195) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X191),X192),X194),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X191),X192),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X191,X192),'const.semanticPrimitives.Rval_1'(s(X191,X193))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X195))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X191),X192),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X191),'const.list.CONS_2'(s(X191,X193),s('type.list.list'(X191),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f156])).
fof(f8810,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f156])).
fof(f8808,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),X166),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X163)),'const.list.CONS_2'(s('type.list.list'(X163),'const.list.CONS_2'(s(X163,X165),s('type.list.list'(X163),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X163)),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X163),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X163,X164),'const.semanticPrimitives.Rval_1'(s(X163,X165))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f635])).
fof(f8806,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X152,X153),X155),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X152,X153),X154))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rval_1'(s(X152,sK4(X154,X153,X152)))),s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X152,X153),X154) = s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X153),sK5(X154,X153,X152))))) )),
  inference(superposition,[],[f667,f157])).
fof(f8805,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X146,X147),X149),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X146,X147),X148))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X146,X147),'const.semanticPrimitives.Rval_1'(s(X146,sK4(X148,X147,X146)))),s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X146,X147),X148))) = s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),sK5(X148,X147,X146))))) )),
  inference(superposition,[],[f667,f733])).
fof(f8804,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X140,X141),X143),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X140,X141),X142))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),sK5(X142,X141,X140)))),s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X140,X141),X142) = s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rval_1'(s(X140,sK4(X142,X141,X140))))) )),
  inference(superposition,[],[f667,f157])).
fof(f8803,plain,(
  ( ! [X134,X138,X136,X135,X139,X137] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X134,X135),X137),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X134,X135),X136))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X134,X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),sK5(X136,X135,X134)))),s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X134,X135),X136))) = s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X134),'const.list.CONS_2'(s(X134,sK4(X136,X135,X134)),s('type.list.list'(X134),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f667,f748])).
fof(f8783,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55) != s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X53))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X53) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f667,f171])).
fof(f8775,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18) != s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X16))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f667,f171])).
fof(f8774,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12) != s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X10),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f667,f171])).
fof(f8769,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.semanticPrimitives.result'('type.list.list'(X50),X51),X52) != s('type.semanticPrimitives.result'('type.list.list'(X50),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X50,X51),'const.semanticPrimitives.Rval_1'(s(X50,X53))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X50),X51),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X50),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X50),sK4(X52,X51,'type.list.list'(X50))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X50),X51),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X50),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X50),'const.list.CONS_2'(s(X50,X53),s('type.list.list'(X50),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X50)),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X50),X51),X52))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X50)),X51),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X51),sK5(X52,X51,'type.list.list'(X50)))))) )),
  inference(superposition,[],[f667,f733])).
fof(f8765,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X30),X31),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X30),X33))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X30),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X30,X31),'const.semanticPrimitives.Rval_1'(s(X30,X32))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),X34),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X30)),'const.list.CONS_2'(s('type.list.list'(X30),X33),s('type.list.list'('type.list.list'(X30)),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),X34),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X30)),'const.list.CONS_2'(s('type.list.list'(X30),'const.list.CONS_2'(s(X30,X32),s('type.list.list'(X30),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X30)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f635])).
fof(f8764,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X25,X26),X27))) != s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rval_1'(s(X25,X28))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X25),X26),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X25),'const.list.CONS_2'(s(X25,X28),s('type.list.list'(X25),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X25),X26),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X25),'const.list.CONS_2'(s(X25,sK4(X27,X26,X25)),s('type.list.list'(X25),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X25,X26),X27) = s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),sK5(X27,X26,X25))))) )),
  inference(superposition,[],[f667,f748])).
fof(f8763,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22))))) != s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X23))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X20),X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X22),s('type.list.list'(X20),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X20),X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X23),s('type.list.list'(X20),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f667,f156])).
fof(f8759,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X3))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X3),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))))) )),
  inference(superposition,[],[f667,f635])).
fof(f8678,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X24))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),X24) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X20))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X20)),'const.list.CONS_2'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X22),s('type.list.list'(X20),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X20)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X20))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f635])).
fof(f8677,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X19))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),X17))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),X19) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X15)),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X15)),'const.list.CONS_2'(s('type.list.list'(X15),'const.list.CONS_2'(s(X15,sK4(X17,X16,X15)),s('type.list.list'(X15),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X15)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f665,f748])).
fof(f8674,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8670,plain,(
  ( ! [X222,X227,X225,X223,X228,X226,X224] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X227),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X228))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X227),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),X226),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X222),X223),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X222,X223),'const.semanticPrimitives.Rval_1'(s(X222,X225))))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),X228) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),X226),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X222),X223),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X222),'const.list.CONS_2'(s(X222,X225),s('type.list.list'(X222),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X222),X223),X224)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f634])).
fof(f8669,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X221))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),X219),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X215),X216),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X215),'const.list.CONS_2'(s(X215,X218),s('type.list.list'(X215),'const.list.NIL_0'))))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),X221) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),X219),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X215),X216),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X215,X216),'const.semanticPrimitives.Rval_1'(s(X215,X218))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X215),X216),X217)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f634])).
fof(f8668,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X214))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X209),X210),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X209),X210),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X209,X210),X211))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),X214) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),X212),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X209),X210),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X210),sK5(X211,X210,X209)))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X209),X210)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X209,X210),X211) = s('type.semanticPrimitives.result'(X209,X210),'const.semanticPrimitives.Rval_1'(s(X209,sK4(X211,X210,X209))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8667,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X207),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X208))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X207),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),X206),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X203),X204),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X203,X204),'const.semanticPrimitives.Rval_1'(s(X203,X205))))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),X208) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),X206),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X203)),'const.list.CONS_2'(s('type.list.list'(X203),'const.list.CONS_2'(s(X203,X205),s('type.list.list'(X203),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X203)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X203)),X204)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f635])).
fof(f8666,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X201),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X202))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X201),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X197),X198),X200),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X197),X198),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X197,X198),X199))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),X202) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X197),X198),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X197),'const.list.CONS_2'(s(X197,sK4(X199,X198,X197)),s('type.list.list'(X197),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X197),X198)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X197,X198),X199) = s('type.semanticPrimitives.result'(X197,X198),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X198),sK5(X199,X198,X197))))) )),
  inference(superposition,[],[f665,f748])).
fof(f8665,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X195),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X196))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X195),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X191),X192),X194),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X191),X192),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X191,X192),'const.semanticPrimitives.Rval_1'(s(X191,X193))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),X196) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),X194),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X191),X192),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X191),'const.list.CONS_2'(s(X191,X193),s('type.list.list'(X191),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X191),X192)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f156])).
fof(f8661,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0'))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f156])).
fof(f8659,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),X166),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X163)),'const.list.CONS_2'(s('type.list.list'(X163),'const.list.CONS_2'(s(X163,X165),s('type.list.list'(X163),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X163)),'const.list.NIL_0'))))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X163),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X163,X164),'const.semanticPrimitives.Rval_1'(s(X163,X165))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f635])).
fof(f8657,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X152,X153),X155),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X152,X153),X154))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rval_1'(s(X152,sK4(X154,X153,X152)))),s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X152,X153),X154) = s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X153),sK5(X154,X153,X152))))) )),
  inference(superposition,[],[f665,f157])).
fof(f8656,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X146,X147),X149),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X146,X147),X148))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X146,X147),'const.semanticPrimitives.Rval_1'(s(X146,sK4(X148,X147,X146)))),s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X146,X147),X148))) = s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),sK5(X148,X147,X146))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8655,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X140,X141),X143),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X140,X141),X142))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),sK5(X142,X141,X140)))),s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X140,X141),X142) = s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rval_1'(s(X140,sK4(X142,X141,X140))))) )),
  inference(superposition,[],[f665,f157])).
fof(f8654,plain,(
  ( ! [X134,X138,X136,X135,X139,X137] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X134,X135),X137),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X134,X135),X136))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X134,X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),sK5(X136,X135,X134)))),s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X134,X135),X136))) = s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X134),'const.list.CONS_2'(s(X134,sK4(X136,X135,X134)),s('type.list.list'(X134),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f748])).
fof(f8634,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,X53))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56) = s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X53) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f665,f171])).
fof(f8626,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X16))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19) = s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f665,f171])).
fof(f8625,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13) = s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X10),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f665,f171])).
fof(f8621,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X14))))))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),sK4(X13,X12,'type.semanticPrimitives.result'('type.list.list'(X10),X11))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X14),s('type.list.list'(X10),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X10),X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X10),X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'('type.list.list'(X10),X11)))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8618,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X62),X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X62),X63),X64))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X62),X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X62),X63),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,X67))))))) | s('type.semanticPrimitives.result'('type.list.list'(X62),X63),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X62),'const.list.CONS_2'(s(X62,X67),s('type.list.list'(X62),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X62),X63),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X62),X63),X64)),X65,'type.semanticPrimitives.result'('type.list.list'(X62),X63)))) )),
  inference(superposition,[],[f665,f765])).
fof(f8616,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X52),X53),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X52),X53),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rval_1'(s(X52,X56))))))) | s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),sK4(X54,X53,'type.list.list'(X52))))) = s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),'const.list.CONS_2'(s(X52,X56),s('type.list.list'(X52),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X54))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X53),sK5(X54,X53,'type.list.list'(X52)))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8688,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X42),X43),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X42),X43),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X42,X43),'const.semanticPrimitives.Rval_1'(s(X42,X46))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X42)),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),X44))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X42)),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X42)),'const.list.CONS_2'(s('type.list.list'(X42),sK4(X44,X43,'type.list.list'(X42))),s('type.list.list'('type.list.list'(X42)),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f8614,f164])).
fof(f8614,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X42),X43),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X42),X43),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X42,X43),'const.semanticPrimitives.Rval_1'(s(X42,X46))))))) | s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),sK5(X44,X43,'type.list.list'(X42))))) = s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X42),'const.list.CONS_2'(s(X42,X46),s('type.list.list'(X42),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X42)),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X42),X43),X44))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X42)),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X42)),'const.list.CONS_2'(s('type.list.list'(X42),sK4(X44,X43,'type.list.list'(X42))),s('type.list.list'('type.list.list'(X42)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f748])).
fof(f8687,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X37),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),X39))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X37),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rval_1'(s(X37,X41))))))) | s('type.semanticPrimitives.result'(X37,X38),X39) = s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rval_1'(s(X37,sK4(X39,X38,X37))))) )),
  inference(subsumption_resolution,[],[f8613,f164])).
fof(f8613,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X37),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),X39))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X37),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rval_1'(s(X37,X41))))))) | s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),sK5(X39,X38,X37)))) = s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X37),'const.list.CONS_2'(s(X37,X41),s('type.list.list'(X37),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X37,X38),X39) = s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rval_1'(s(X37,sK4(X39,X38,X37))))) )),
  inference(superposition,[],[f665,f733])).
fof(f8612,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),X35),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X32),X33),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X32),X36))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),X35),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X32),X33),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X32,X33),'const.semanticPrimitives.Rval_1'(s(X32,X34))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X32)),'const.list.CONS_2'(s('type.list.list'(X32),X36),s('type.list.list'('type.list.list'(X32)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X32)),X33),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X32)),'const.list.CONS_2'(s('type.list.list'(X32),'const.list.CONS_2'(s(X32,X34),s('type.list.list'(X32),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X32)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f635])).
fof(f8611,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X27),X28),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X27,X28),X29))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X27),X28),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X27,X28),'const.semanticPrimitives.Rval_1'(s(X27,X31))))))) | s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X27),'const.list.CONS_2'(s(X27,X31),s('type.list.list'(X27),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X27),'const.list.CONS_2'(s(X27,sK4(X29,X28,X27)),s('type.list.list'(X27),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X27,X28),X29) = s('type.semanticPrimitives.result'(X27,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),sK5(X29,X28,X27))))) )),
  inference(superposition,[],[f665,f748])).
fof(f8610,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X22),X23),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rval_1'(s(X22,X24))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X22),X23),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rval_1'(s(X22,X26))))))) | s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X24),s('type.list.list'(X22),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X26),s('type.list.list'(X22),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f665,f156])).
fof(f8606,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X4))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X4),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))) )),
  inference(superposition,[],[f665,f635])).
fof(f8604,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f575,f665])).
fof(f8465,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X13) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X12))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X13))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f654,f635])).
fof(f8464,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X5),X6),X8) != s('type.semanticPrimitives.result'('type.list.list'(X5),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X5,X6),X7))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X5),X6),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X5),X6),X8))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X5),X6),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X5),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X7,X6,X5)))))))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,X5))))) )),
  inference(superposition,[],[f654,f748])).
fof(f8458,plain,(
  ( ! [X218,X222,X220,X219,X223,X221,X224] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X223) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X218),X219),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X218,X219),'const.semanticPrimitives.Rval_1'(s(X218,X221))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X223))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X224),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),X222),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X218),X219),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X218),'const.list.CONS_2'(s(X218,X221),s('type.list.list'(X218),'const.list.NIL_0')))))))))))))) )),
  inference(superposition,[],[f654,f634])).
fof(f8457,plain,(
  ( ! [X212,X216,X215,X213,X211,X217,X214] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X216) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X211),X212),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X211),'const.list.CONS_2'(s(X211,X214),s('type.list.list'(X211),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X216))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X217),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),X215),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X211),X212),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X211,X212),'const.semanticPrimitives.Rval_1'(s(X211,X214)))))))))))))) )),
  inference(superposition,[],[f654,f634])).
fof(f8456,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X209) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X205),X206),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X205,X206),X207))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X210),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X209))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X210),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X205),X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),sK5(X207,X206,X205)))))))))) | s('type.semanticPrimitives.result'(X205,X206),X207) = s('type.semanticPrimitives.result'(X205,X206),'const.semanticPrimitives.Rval_1'(s(X205,sK4(X207,X206,X205))))) )),
  inference(superposition,[],[f654,f733])).
fof(f8455,plain,(
  ( ! [X204,X202,X200,X199,X203,X201] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X199),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X199,X200),'const.semanticPrimitives.Rval_1'(s(X199,X201))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X204),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X204),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X199)),'const.list.CONS_2'(s('type.list.list'(X199),'const.list.CONS_2'(s(X199,X201),s('type.list.list'(X199),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X199)),'const.list.NIL_0')))))))))))) )),
  inference(superposition,[],[f654,f635])).
fof(f8454,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X197) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X193,X194),X195))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X198),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X197))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X198),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X193),'const.list.CONS_2'(s(X193,sK4(X195,X194,X193)),s('type.list.list'(X193),'const.list.NIL_0'))))))))))) | s('type.semanticPrimitives.result'(X193,X194),X195) = s('type.semanticPrimitives.result'(X193,X194),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X194),sK5(X195,X194,X193))))) )),
  inference(superposition,[],[f654,f748])).
fof(f8453,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X191) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X187),X188),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X187,X188),'const.semanticPrimitives.Rval_1'(s(X187,X189))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X192),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X191))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X192),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X187),X188),X190),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X187),X188),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X187),'const.list.CONS_2'(s(X187,X189),s('type.list.list'(X187),'const.list.NIL_0')))))))))))) )),
  inference(superposition,[],[f654,f156])).
fof(f8450,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177)))))))))))) )),
  inference(superposition,[],[f654,f156])).
fof(f8448,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X163)),'const.list.CONS_2'(s('type.list.list'(X163),'const.list.CONS_2'(s(X163,X165),s('type.list.list'(X163),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X163)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),X166),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X163),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X163,X164),'const.semanticPrimitives.Rval_1'(s(X163,X165)))))))))))))) )),
  inference(superposition,[],[f654,f635])).
fof(f8446,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X152,X153),X154),s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X152,X153),X155),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rval_1'(s(X152,sK4(X154,X153,X152)))))))))) | s('type.semanticPrimitives.result'(X152,X153),X154) = s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X153),sK5(X154,X153,X152))))) )),
  inference(superposition,[],[f654,f157])).
fof(f8445,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X146,X147),X148),s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X146,X147),X149),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X146,X147),'const.semanticPrimitives.Rval_1'(s(X146,sK4(X148,X147,X146)))))))))) | s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X146,X147),X148))) = s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),sK5(X148,X147,X146))))) )),
  inference(superposition,[],[f654,f733])).
fof(f8444,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X140,X141),X142),s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X140,X141),X143),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),sK5(X142,X141,X140)))))))))) | s('type.semanticPrimitives.result'(X140,X141),X142) = s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rval_1'(s(X140,sK4(X142,X141,X140))))) )),
  inference(superposition,[],[f654,f157])).
fof(f8443,plain,(
  ( ! [X134,X138,X136,X135,X139,X137] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X134,X135),X136),s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X134,X135),X137),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X134,X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),sK5(X136,X135,X134)))))))))) | s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X134,X135),X136))) = s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X134),'const.list.CONS_2'(s(X134,sK4(X136,X135,X134)),s('type.list.list'(X134),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f654,f748])).
fof(f8423,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55) != s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X53),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s(bool,X53) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f654,f171])).
fof(f8415,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18) != s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X16),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X15))))))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f654,f171])).
fof(f8414,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12) != s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X10))))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f654,f171])).
fof(f8409,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s('type.semanticPrimitives.result'('type.list.list'(X47),X48),X49) != s('type.semanticPrimitives.result'('type.list.list'(X47),X48),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X47),'const.list.CONS_2'(s(X47,X50),s('type.list.list'(X47),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X47),X48),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X47),X48),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X47,X48),'const.semanticPrimitives.Rval_1'(s(X47,X50))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X47),X48),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X47),X48),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X47),sK4(X49,X48,'type.list.list'(X47))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X47)),X48),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X47),X48),X49))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X47)),X48),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X48),sK5(X49,X48,'type.list.list'(X47)))))) )),
  inference(superposition,[],[f654,f733])).
fof(f8405,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X27)),'const.list.CONS_2'(s('type.list.list'(X27),X30),s('type.list.list'('type.list.list'(X27)),'const.list.NIL_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X27,X28),'const.semanticPrimitives.Rval_1'(s(X27,X29))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),X31),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X27),X30))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),X31),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X27)),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X27)),'const.list.CONS_2'(s('type.list.list'(X27),'const.list.CONS_2'(s(X27,X29),s('type.list.list'(X27),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X27)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f654,f635])).
fof(f8404,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X22,X23),X24))) != s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X22),'const.list.CONS_2'(s(X22,X25),s('type.list.list'(X22),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X22),X23),X26),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rval_1'(s(X22,X25))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X22),X23),X26),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X22),X23),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X22),'const.list.CONS_2'(s(X22,sK4(X24,X23,X22)),s('type.list.list'(X22),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X22,X23),X24) = s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),sK5(X24,X23,X22))))) )),
  inference(superposition,[],[f654,f748])).
fof(f8403,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.semanticPrimitives.result'('type.list.list'(X17),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,X19))))) != s('type.semanticPrimitives.result'('type.list.list'(X17),X18),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X17),'const.list.CONS_2'(s(X17,X20),s('type.list.list'(X17),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X17),X18),X21),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X17),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,X20))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X17),X18),X21),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X17),X18),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X17),'const.list.CONS_2'(s(X17,X19),s('type.list.list'(X17),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f654,f156])).
fof(f8402,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),'const.list.NIL_0'))))) != s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X13),s('type.list.list'(X10),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X12))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X13)))))))) )),
  inference(superposition,[],[f654,f156])).
fof(f8400,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X3),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X3))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))))) )),
  inference(superposition,[],[f654,f635])).
fof(f8347,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X14))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X12))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),X14) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X10)),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f652,f635])).
fof(f8346,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X5),X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X5),X6),X9))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X5),X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X5),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X5,X6),X7))))) | s('type.semanticPrimitives.result'('type.list.list'(X5),X6),X9) = s('type.semanticPrimitives.result'('type.list.list'(X5),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X7,X6,X5)))))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,X5))))) )),
  inference(superposition,[],[f652,f748])).
fof(f8340,plain,(
  ( ! [X218,X222,X220,X219,X223,X221,X224] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X223),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X224))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X223),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X218),X219),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X218,X219),'const.semanticPrimitives.Rval_1'(s(X218,X221))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),X224) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220)),X222),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),X222),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X218),X219),X220),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X218),X219),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X218),'const.list.CONS_2'(s(X218,X221),s('type.list.list'(X218),'const.list.NIL_0')))))))))))) )),
  inference(superposition,[],[f652,f634])).
fof(f8339,plain,(
  ( ! [X212,X216,X215,X213,X211,X217,X214] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X216),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X217))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X216),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X211),X212),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X211),'const.list.CONS_2'(s(X211,X214),s('type.list.list'(X211),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),X217) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213)),X215),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),X215),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X211),X212),X213),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X211),X212),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X211,X212),'const.semanticPrimitives.Rval_1'(s(X211,X214)))))))))))) )),
  inference(superposition,[],[f652,f634])).
fof(f8338,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X209),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X210))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X209),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X205),X206),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X205,X206),X207))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),X210) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X205),X206)),X208),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X205),X206),X208),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X205),X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),sK5(X207,X206,X205)))))))) | s('type.semanticPrimitives.result'(X205,X206),X207) = s('type.semanticPrimitives.result'(X205,X206),'const.semanticPrimitives.Rval_1'(s(X205,sK4(X207,X206,X205))))) )),
  inference(superposition,[],[f652,f733])).
fof(f8337,plain,(
  ( ! [X204,X202,X200,X199,X203,X201] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X204))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X203),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X199),X200),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X199,X200),'const.semanticPrimitives.Rval_1'(s(X199,X201))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),X204) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200)),X202),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),X202),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X199)),X200),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X199)),'const.list.CONS_2'(s('type.list.list'(X199),'const.list.CONS_2'(s(X199,X201),s('type.list.list'(X199),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X199)),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f652,f635])).
fof(f8336,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X197),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X198))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X197),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X193,X194),X195))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),X198) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X193),X194)),X196),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X193),X194),X196),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X193),X194),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X193),'const.list.CONS_2'(s(X193,sK4(X195,X194,X193)),s('type.list.list'(X193),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'(X193,X194),X195) = s('type.semanticPrimitives.result'(X193,X194),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X194),sK5(X195,X194,X193))))) )),
  inference(superposition,[],[f652,f748])).
fof(f8335,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X192))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X191),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X187),X188),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X187,X188),'const.semanticPrimitives.Rval_1'(s(X187,X189))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),X192) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X187),X188)),X190),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X187),X188),X190),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X187),X188),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X187),'const.list.CONS_2'(s(X187,X189),s('type.list.list'(X187),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f652,f156])).
fof(f8332,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X179),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),X180) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X178),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177)))))))))) )),
  inference(superposition,[],[f652,f156])).
fof(f8330,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X167),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X163)),'const.list.CONS_2'(s('type.list.list'(X163),'const.list.CONS_2'(s(X163,X165),s('type.list.list'(X163),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X163)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),X168) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164)),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),X166),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X163)),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X163),X164),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X163,X164),'const.semanticPrimitives.Rval_1'(s(X163,X165)))))))))))) )),
  inference(superposition,[],[f652,f635])).
fof(f8328,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X156),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X152,X153),X154),s('type.list.list'('type.semanticPrimitives.result'(X152,X153)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),X157) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X152,X153)),X155),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X152,X153),X155),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rval_1'(s(X152,sK4(X154,X153,X152)))))))) | s('type.semanticPrimitives.result'(X152,X153),X154) = s('type.semanticPrimitives.result'(X152,X153),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X153),sK5(X154,X153,X152))))) )),
  inference(superposition,[],[f652,f157])).
fof(f8327,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X150),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X146,X147),X148),s('type.list.list'('type.semanticPrimitives.result'(X146,X147)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),X151) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X146,X147)),X149),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X146,X147),X149),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X146,X147),'const.semanticPrimitives.Rval_1'(s(X146,sK4(X148,X147,X146)))))))) | s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X146,X147),X148))) = s('type.semanticPrimitives.result'('type.list.list'(X146),X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),sK5(X148,X147,X146))))) )),
  inference(superposition,[],[f652,f733])).
fof(f8326,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X144),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X140,X141),X142),s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),X145) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X140,X141),X143),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),sK5(X142,X141,X140)))))))) | s('type.semanticPrimitives.result'(X140,X141),X142) = s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rval_1'(s(X140,sK4(X142,X141,X140))))) )),
  inference(superposition,[],[f652,f157])).
fof(f8325,plain,(
  ( ! [X134,X138,X136,X135,X139,X137] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X138),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X134,X135),X136),s('type.list.list'('type.semanticPrimitives.result'(X134,X135)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),X139) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X134,X135)),X137),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X134,X135),X137),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X134,X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),sK5(X136,X135,X134)))))))) | s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X134,X135),X136))) = s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X134),'const.list.CONS_2'(s(X134,sK4(X136,X135,X134)),s('type.list.list'(X134),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f652,f748])).
fof(f8305,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X54),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X53),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X54),X56) = s('type.semanticPrimitives.result'('type.list.list'(bool),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,X53) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f652,f171])).
fof(f8297,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X17),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X16),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X17),X19) = s('type.semanticPrimitives.result'('type.list.list'(bool),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X15))))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f652,f171])).
fof(f8296,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X11),X13) = s('type.semanticPrimitives.result'('type.list.list'(bool),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X10))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f652,f171])).
fof(f8292,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X14),s('type.list.list'(X10),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),sK4(X13,X12,'type.semanticPrimitives.result'('type.list.list'(X10),X11))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X14))))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X10),X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X10),X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'('type.list.list'(X10),X11)))))) )),
  inference(superposition,[],[f652,f733])).
fof(f8289,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X59),X60),X63),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X59),X60),X61))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X59),X60),X63),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X59),X60),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X59),'const.list.CONS_2'(s(X59,X64),s('type.list.list'(X59),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X59),X60),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X59,X60),'const.semanticPrimitives.Rval_1'(s(X59,X64))))) = s('type.semanticPrimitives.result'('type.list.list'(X59),X60),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X59),X60),X61)),X62,'type.semanticPrimitives.result'('type.list.list'(X59),X60)))) )),
  inference(superposition,[],[f652,f765])).
fof(f8287,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X49),X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),X51))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X49),X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X49),'const.list.CONS_2'(s(X49,X53),s('type.list.list'(X49),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rval_1'(s(X49,X53))))) = s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X49),sK4(X51,X50,'type.list.list'(X49))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),X51))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK5(X51,X50,'type.list.list'(X49)))))) )),
  inference(superposition,[],[f652,f733])).
fof(f8283,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),'const.list.CONS_2'(s('type.list.list'(X29),X33),s('type.list.list'('type.list.list'(X29)),'const.list.NIL_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X31))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X29),X33))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X29)),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X29)),'const.list.CONS_2'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X31),s('type.list.list'(X29),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X29)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f652,f635])).
fof(f8282,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X24),X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),X26))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X24),X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X28),s('type.list.list'(X24),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X28))))) = s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,sK4(X26,X25,X24)),s('type.list.list'(X24),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X24,X25),X26) = s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK5(X26,X25,X24))))) )),
  inference(superposition,[],[f652,f748])).
fof(f8281,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X19),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X21))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X19),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X23),s('type.list.list'(X19),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X23))))) = s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X21),s('type.list.list'(X19),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f652,f156])).
fof(f8280,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X12),s('type.list.list'(X10),'const.list.NIL_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X10),X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X10),'const.list.CONS_2'(s(X10,X14),s('type.list.list'(X10),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X12))))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X14)))))) )),
  inference(superposition,[],[f652,f156])).
fof(f8278,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X4),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X4))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))) )),
  inference(superposition,[],[f652,f635])).
fof(f8094,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f759])).
fof(f8091,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),X71) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X67),X68),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X67,X68),'const.semanticPrimitives.Rval_1'(s(X67,X70))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),X72),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X67),X68),sK4(X71,X69,'type.semanticPrimitives.result'('type.list.list'(X67),X68))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),X72),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X67),X68),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X70),s('type.list.list'(X67),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),X71) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X67),X68),X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),sK5(X71,X69,'type.semanticPrimitives.result'('type.list.list'(X67),X68)))))) )),
  inference(superposition,[],[f759,f634])).
fof(f8090,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),X65) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X61),X62),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X61),'const.list.CONS_2'(s(X61,X64),s('type.list.list'(X61),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X61),X62),sK4(X65,X63,'type.semanticPrimitives.result'('type.list.list'(X61),X62))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X61),X62),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X61,X62),'const.semanticPrimitives.Rval_1'(s(X61,X64))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),X65) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X61),X62),X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK5(X65,X63,'type.semanticPrimitives.result'('type.list.list'(X61),X62)))))) )),
  inference(superposition,[],[f759,f634])).
fof(f8088,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),X54) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X51),X52),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,X53))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X51)),sK4(X54,X52,'type.list.list'('type.list.list'(X51)))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X51)),'const.list.CONS_2'(s('type.list.list'(X51),'const.list.CONS_2'(s(X51,X53),s('type.list.list'(X51),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X51)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),X54) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X51)),X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK5(X54,X52,'type.list.list'('type.list.list'(X51))))))) )),
  inference(superposition,[],[f759,f635])).
fof(f8087,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49) != s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),sK4(X49,X47,'type.list.list'(X46))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),'const.list.CONS_2'(s(X46,sK4(X48,X47,X46)),s('type.list.list'(X46),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X49,X47,'type.list.list'(X46))))) | s('type.semanticPrimitives.result'(X46,X47),X48) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X48,X47,X46))))) )),
  inference(superposition,[],[f759,f748])).
fof(f8086,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44) != s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,X43))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),sK4(X44,X42,'type.list.list'(X41))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X43),s('type.list.list'(X41),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK5(X44,X42,'type.list.list'(X41)))))) )),
  inference(superposition,[],[f759,f156])).
fof(f8084,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37) != s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X36),s('type.list.list'(X34),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X36))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),sK4(X37,X35,'type.list.list'(X34))))))) | s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37) = s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),sK5(X37,X35,'type.list.list'(X34)))))) )),
  inference(superposition,[],[f759,f156])).
fof(f8082,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),X27) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X24)),'const.list.CONS_2'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X24)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X24)),sK4(X27,X25,'type.list.list'('type.list.list'(X24)))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),X27) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK5(X27,X25,'type.list.list'('type.list.list'(X24))))))) )),
  inference(superposition,[],[f759,f635])).
fof(f8080,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'(X15,X16),X17) != s('type.semanticPrimitives.result'(X15,X16),X18) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X17,X16,X15)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X19),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X18,X16,X15)))))) | s('type.semanticPrimitives.result'(X15,X16),X18) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X18,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f759,f157])).
fof(f8079,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(X10,X11),X12) != s('type.semanticPrimitives.result'(X10,X11),X13) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X12,X11,X10)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X13,X11,X10)))))) | s('type.semanticPrimitives.result'(X10,X11),X13) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X13,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,X10))))) )),
  inference(superposition,[],[f759,f733])).
fof(f8127,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.semanticPrimitives.result'(X75,X76),X77) = s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X77)),X78,'type.semanticPrimitives.result'(X75,X76)),X76,X75)))) | s('type.semanticPrimitives.result'(X75,X76),X77) != s('type.semanticPrimitives.result'(X75,X76),X79) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X75,X76),X80),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X79))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X75,X76),X80),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X77)),X78,'type.semanticPrimitives.result'(X75,X76)),X76,X75))))))) )),
  inference(forward_demodulation,[],[f8076,f765])).
fof(f8076,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.semanticPrimitives.result'(X75,X76),X77) != s('type.semanticPrimitives.result'(X75,X76),X79) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X75,X76),X80),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X79))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X75,X76),X80),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X77)),X78,'type.semanticPrimitives.result'(X75,X76)),X76,X75)))))) | s('type.semanticPrimitives.result'(X75,X76),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X77)),X78,'type.semanticPrimitives.result'(X75,X76))) = s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X76),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X75,X76),X77)),X78,'type.semanticPrimitives.result'(X75,X76)),X76,X75))))) )),
  inference(superposition,[],[f759,f765])).
fof(f7643,plain,(
  ( ! [X92,X90,X91] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X91),X92) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X91),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),sK4(X92,X91,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X90),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X90,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X91),X92) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X91),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X91),sK5(X92,X91,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f749,f7388])).
fof(f7631,plain,(
  ( ! [X54,X52,X53] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X54))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),X54) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X52),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X52,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f160,f7388])).
fof(f7626,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),X36),s('type.list.list'('type.list.list'(sK0)),X37))) != s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),X35))) | s('type.list.list'(sK0),X36) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X34),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X34,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f148,f7388])).
fof(f7622,plain,(
  ( ! [X30,X28,X29] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X29),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X29),'const.semanticPrimitives.Rval_1'(s(sK0,X30))))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X29),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X28),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X28,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f657,f7388])).
fof(f7618,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),X15))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),X15) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X12),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X12,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f149,f7388])).
fof(f7553,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X14,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'(X10,X11)))))) )),
  inference(superposition,[],[f757,f733])).
fof(f7550,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X88))) | s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rval_1'(s(X83,sK4(X88,X84,X83)))) = s('type.semanticPrimitives.result'(X83,X84),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84))) | s('type.semanticPrimitives.result'(X83,X84),X88) = s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X84),sK5(X88,X84,X83))))) )),
  inference(superposition,[],[f757,f765])).
fof(f7548,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),X79),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),X80))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),X79),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X75,X76),'const.semanticPrimitives.Rval_1'(s(X75,X78))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),sK4(X80,X77,'type.semanticPrimitives.result'('type.list.list'(X75),X76))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X75),X76),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X75),'const.list.CONS_2'(s(X75,X78),s('type.list.list'(X75),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),X80) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X75),X76),X77),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X77),sK5(X80,X77,'type.semanticPrimitives.result'('type.list.list'(X75),X76)))))) )),
  inference(superposition,[],[f757,f634])).
fof(f7547,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),X73),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),X74))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),X73),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X69),'const.list.CONS_2'(s(X69,X72),s('type.list.list'(X69),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),sK4(X74,X71,'type.semanticPrimitives.result'('type.list.list'(X69),X70))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X69),X70),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X69,X70),'const.semanticPrimitives.Rval_1'(s(X69,X72))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),X74) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X69),X70),X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),sK5(X74,X71,'type.semanticPrimitives.result'('type.list.list'(X69),X70)))))) )),
  inference(superposition,[],[f757,f634])).
fof(f7596,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X64),X65),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X68))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X64),X65),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),X66))))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X68) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X68,X65,'type.list.list'(X64))))) | s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK4(X66,X65,X64))))) )),
  inference(subsumption_resolution,[],[f7546,f164])).
fof(f7546,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X64),X65),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X68))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X64),X65),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),X66))))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X66,X65,X64)))) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),sK4(X68,X65,'type.list.list'(X64))))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),X68) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X68,X65,'type.list.list'(X64))))) | s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK4(X66,X65,X64))))) )),
  inference(superposition,[],[f757,f733])).
fof(f7545,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),X62),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),X63))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),X62),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X59),X60),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X59,X60),'const.semanticPrimitives.Rval_1'(s(X59,X61))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X59)),sK4(X63,X60,'type.list.list'('type.list.list'(X59)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X59)),'const.list.CONS_2'(s('type.list.list'(X59),'const.list.CONS_2'(s(X59,X61),s('type.list.list'(X59),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X59)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),X63) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X59)),X60),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X60),sK5(X63,X60,'type.list.list'('type.list.list'(X59))))))) )),
  inference(superposition,[],[f757,f635])).
fof(f7544,plain,(
  ( ! [X57,X58,X56] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X56),X57),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),X58))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X56),X57),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X56),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X58,X56,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),X58) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X56),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X56),sK5(X58,X56,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f757,f7149])).
fof(f7542,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X49),X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),X53))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X49),X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X49,X50),X51))))) | s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X49),sK4(X53,X50,'type.list.list'(X49))))) = s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X49),'const.list.CONS_2'(s(X49,sK4(X51,X50,X49)),s('type.list.list'(X49),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X49),X50),X53) = s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK5(X53,X50,'type.list.list'(X49))))) | s('type.semanticPrimitives.result'(X49,X50),X51) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK5(X51,X50,X49))))) )),
  inference(superposition,[],[f757,f748])).
fof(f7541,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X44),X45),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),X48))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X44),X45),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X44,X45),'const.semanticPrimitives.Rval_1'(s(X44,X46))))))) | s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X44),sK4(X48,X45,'type.list.list'(X44))))) = s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X44),'const.list.CONS_2'(s(X44,X46),s('type.list.list'(X44),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X44),X45),X48) = s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X45),sK5(X48,X45,'type.list.list'(X44)))))) )),
  inference(superposition,[],[f757,f156])).
fof(f7540,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),'const.list.CONS_2'(s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X41),s('type.list.list'(X39),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X39)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),sK4(X43,X40,'type.list.list'('type.list.list'(X39)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,X41))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5(X43,X40,'type.list.list'('type.list.list'(X39))))))) )),
  inference(superposition,[],[f757,f635])).
fof(f7539,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X36),s('type.list.list'(X34),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X36))))) = s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),sK4(X38,X35,'type.list.list'(X34))))) | s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38) = s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),sK5(X38,X35,'type.list.list'(X34)))))) )),
  inference(superposition,[],[f757,f156])).
fof(f7537,plain,(
  ( ! [X28,X26,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X26),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),X28))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X26),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X28,X26,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X26),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),X28) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),sK5(X28,X26,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f757,f7149])).
fof(f7534,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X17))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X19))) | s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X17,X16,X15)))) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X19,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X19) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X19,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f757,f157])).
fof(f7533,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X12,X11,X10)))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X14,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,X10))))) )),
  inference(superposition,[],[f757,f733])).
fof(f7592,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X4,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f7531,f164])).
fof(f7531,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X4,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X4,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f757,f748])).
fof(f7530,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X19))) | s('type.semanticPrimitives.result'(X15,X16),X19) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16)),X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16))) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16)),X16,X15)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),sK5(X18,X17,'type.semanticPrimitives.result'(X15,X16)))))) )),
  inference(superposition,[],[f757,f157])).
fof(f7529,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'(X10,X11)))))) )),
  inference(superposition,[],[f757,f733])).
fof(f7587,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s('type.semanticPrimitives.result'(X83,X84),X85) = s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X84),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84)),X84,X83)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X88))) | s('type.semanticPrimitives.result'(X83,X84),X88) = s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rval_1'(s(X83,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84)),X84,X83))))) )),
  inference(forward_demodulation,[],[f7526,f765])).
fof(f7526,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X83,X84),X87),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X88))) | s('type.semanticPrimitives.result'(X83,X84),X88) = s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rval_1'(s(X83,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84)),X84,X83)))) | s('type.semanticPrimitives.result'(X83,X84),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84))) = s('type.semanticPrimitives.result'(X83,X84),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X84),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X83,X84),X85)),X86,'type.semanticPrimitives.result'(X83,X84)),X84,X83))))) )),
  inference(superposition,[],[f757,f765])).
fof(f7568,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),'const.list.CONS_2'(s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X41),s('type.list.list'(X39),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X39)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,X41)))))),X40,'type.list.list'('type.list.list'(X39))))))) )),
  inference(subsumption_resolution,[],[f7516,f717])).
fof(f7516,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),'const.list.CONS_2'(s('type.list.list'(X39),'const.list.CONS_2'(s(X39,X41),s('type.list.list'(X39),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X39)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),X43) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X39)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,X41)))))),X40,'type.list.list'('type.list.list'(X39)))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,X41))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X39)),X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,X41)))))),X40,'type.list.list'('type.list.list'(X39))))))) )),
  inference(superposition,[],[f757,f635])).
fof(f7481,plain,(
  ( ! [X109,X110,X108] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X108),X109) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X108),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X108),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X108)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X108),X109),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X108)),X110))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X108)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X108),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X108)),X110)))) ) | $spl28),
  inference(superposition,[],[f918,f7149])).
fof(f7479,plain,(
  ( ! [X103,X105,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X103),X104),X105) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X103),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X103),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X103),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X103),sK4(X105,X104,'type.semanticPrimitives.result'('type.list.list'(sK0),X103))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X103),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X103),X104),X105) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X103),X104),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X104),sK5(X105,X104,'type.semanticPrimitives.result'('type.list.list'(sK0),X103)))))) ) | $spl28),
  inference(superposition,[],[f749,f7149])).
fof(f7476,plain,(
  ( ! [X94,X95,X96] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),X95),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),X96))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),X95),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X94),X95),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X94),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X94),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),X96) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X94),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X94)),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f657,f7149])).
fof(f7469,plain,(
  ( ! [X72,X71,X73] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X71),X72) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X71),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X71),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X71),X73),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X71),X72))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X71),X73),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X71),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))))) ) | $spl28),
  inference(superposition,[],[f161,f7149])).
fof(f7467,plain,(
  ( ! [X66,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X65),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X65),X67))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X65),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X65),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X65),X67) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f160,f7149])).
fof(f7462,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X47),X49),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X47)),X50))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X47),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X47)),X48))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X47),X49) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f148,f7149])).
fof(f7499,plain,(
  ( ! [X43,X44] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X44))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X43),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'(sK0),X44) = s('type.list.list'(sK0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))),X43,'type.list.list'(sK0)))) ) | $spl28),
  inference(subsumption_resolution,[],[f7459,f164])).
fof(f7459,plain,(
  ( ! [X43,X44] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X44))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X43),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'(sK0),X44) = s('type.list.list'(sK0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))),X43,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))),X43,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f749,f7149])).
fof(f7452,plain,(
  ( ! [X26,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X25),X26) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X25),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'(sK0),sK4(X26,X25,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X25),X26) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK5(X26,X25,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f749,f7149])).
fof(f7449,plain,(
  ( ! [X19,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X19),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),X20))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X19),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X19),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X19),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) | s('type.list.list'('type.list.list'(sK0)),X20) = s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f657,f7149])).
fof(f7448,plain,(
  ( ! [X18] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X18),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),X18),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f635,f7149])).
fof(f7447,plain,(
  ( ! [X17,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X16),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))))))) ) | $spl28),
  inference(superposition,[],[f634,f7149])).
fof(f7442,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X4))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X3),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'(sK0),X4) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f160,f7149])).
fof(f7438,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,X1))))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f657,f7149])).
fof(f7436,plain,(
  ( ! [X90,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X89),X90) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X89),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X89)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X89),X90),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X89)),X91))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X89)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X89),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X89),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X89)),X91)))) ) | $spl28),
  inference(superposition,[],[f918,f7149])).
fof(f7434,plain,(
  ( ! [X85,X86,X84] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X84),X85),X86) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X84),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X84),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X84),sK4(X86,X85,'type.semanticPrimitives.result'('type.list.list'(sK0),X84))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X84),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X84),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X84),X85),X86) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X84),X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),sK5(X86,X85,'type.semanticPrimitives.result'('type.list.list'(sK0),X84)))))) ) | $spl28),
  inference(superposition,[],[f749,f7149])).
fof(f7431,plain,(
  ( ! [X76,X77,X75] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),X76),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),X77))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),X76),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),X77) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X75),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X75)),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f657,f7149])).
fof(f7424,plain,(
  ( ! [X54,X52,X53] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X52),X53) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X52),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X52),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X52),X53))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X52),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X52),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X52),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))))))) ) | $spl28),
  inference(superposition,[],[f161,f7149])).
fof(f7422,plain,(
  ( ! [X47,X48,X46] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X46),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X46),X48))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X46),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X46),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X46),X48) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X46),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))))) ) | $spl28),
  inference(superposition,[],[f160,f7149])).
fof(f7417,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X28)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X28),X30),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X28)),X31))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X28)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X28),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X28)),X29))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X28),X30) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X28),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))))) ) | $spl28),
  inference(superposition,[],[f148,f7149])).
fof(f7496,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X25))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),X25) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X24),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X24,'type.list.list'(sK0)))) ) | $spl28),
  inference(subsumption_resolution,[],[f7415,f659])).
fof(f7415,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X25))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),X25) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X24),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X24,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X24),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X24),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X24,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f749,f7149])).
fof(f7388,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X0,'type.list.list'(sK0)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f659,f7149,f749])).
fof(f7483,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),X1))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),X1)))) ) | $spl28),
  inference(forward_demodulation,[],[f7398,f765])).
fof(f7398,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),X1))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0)),X1)),X2,'type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),X0))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f765,f7149,f150])).
fof(f7383,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),X4))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,X2)),X3,sK0))) ) | $spl28),
  inference(superposition,[],[f7152,f765])).
fof(f7355,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f743])).
fof(f7350,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X61) != s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X58,X59),X60))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X58),X59),X62),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5(X60,X59,X58)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X58),X59),X62),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5(X61,X59,'type.list.list'(X58))))))) | s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X61) = s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X58),sK4(X61,X59,'type.list.list'(X58))))) | s('type.semanticPrimitives.result'(X58,X59),X60) = s('type.semanticPrimitives.result'(X58,X59),'const.semanticPrimitives.Rval_1'(s(X58,sK4(X60,X59,X58))))) )),
  inference(superposition,[],[f743,f733])).
fof(f7338,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X5,X6),X7) != s('type.semanticPrimitives.result'(X5,X6),X8) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,X5)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X9),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X8,X6,X5)))))) | s('type.semanticPrimitives.result'(X5,X6),X8) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X8,X6,X5)))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X7,X6,X5))))) )),
  inference(superposition,[],[f743,f157])).
fof(f7337,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f743,f748])).
fof(f7378,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.semanticPrimitives.result'(X77,X78),X79) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77)))) | s('type.semanticPrimitives.result'(X77,X78),X79) != s('type.semanticPrimitives.result'(X77,X78),X81) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X82),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X81))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X82),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77))))))) )),
  inference(forward_demodulation,[],[f7336,f765])).
fof(f7336,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.semanticPrimitives.result'(X77,X78),X79) != s('type.semanticPrimitives.result'(X77,X78),X81) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X82),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X81))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X82),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77)))))) | s('type.semanticPrimitives.result'(X77,X78),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78))) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77))))) )),
  inference(superposition,[],[f743,f765])).
fof(f7302,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X2))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X2)),X3,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f7150,f765])).
fof(f7291,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X1) | s(sK0,sK4(X1,sK1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X2,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X1))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X1,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6517,f733])).
fof(f7258,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X14,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'(X10,X11)))))) )),
  inference(superposition,[],[f741,f733])).
fof(f7255,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X82))) | s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),sK5(X82,X78,X77)))) = s('type.semanticPrimitives.result'(X77,X78),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78))) | s('type.semanticPrimitives.result'(X77,X78),X82) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,sK4(X82,X78,X77))))) )),
  inference(superposition,[],[f741,f765])).
fof(f7251,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X58),X59),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X62))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X58),X59),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X58,X59),X60))))) | s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5(X60,X59,X58)))) = s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5(X62,X59,'type.list.list'(X58))))) | s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X62) = s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X58),sK4(X62,X59,'type.list.list'(X58))))) | s('type.semanticPrimitives.result'(X58,X59),X60) = s('type.semanticPrimitives.result'(X58,X59),'const.semanticPrimitives.Rval_1'(s(X58,sK4(X60,X59,X58))))) )),
  inference(superposition,[],[f741,f733])).
fof(f7286,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X57))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X53),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X53,X54),'const.semanticPrimitives.Rval_1'(s(X53,X55))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X57) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X53)),sK4(X57,X54,'type.list.list'('type.list.list'(X53))))))) )),
  inference(subsumption_resolution,[],[f7250,f164])).
fof(f7250,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X57))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X53),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X53,X54),'const.semanticPrimitives.Rval_1'(s(X53,X55))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X54),sK5(X57,X54,'type.list.list'('type.list.list'(X53)))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X53)),'const.list.CONS_2'(s('type.list.list'(X53),'const.list.CONS_2'(s(X53,X55),s('type.list.list'(X53),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X53)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X57) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X53)),sK4(X57,X54,'type.list.list'('type.list.list'(X53))))))) )),
  inference(superposition,[],[f741,f635])).
fof(f7285,plain,(
  ( ! [X52,X51] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X52))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X52) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X52,sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(subsumption_resolution,[],[f7249,f164])).
fof(f7249,plain,(
  ( ! [X52,X51] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X52))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X51),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X52,sK1,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X52) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X52,sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f741,f4240])).
fof(f7284,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),sK4(X50,X47,'type.list.list'(X46))))) | s('type.semanticPrimitives.result'(X46,X47),X48) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X48,X47,X46))))) )),
  inference(subsumption_resolution,[],[f7248,f164])).
fof(f7248,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X50,X47,'type.list.list'(X46))))) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),'const.list.CONS_2'(s(X46,sK4(X48,X47,X46)),s('type.list.list'(X46),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X50) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),sK4(X50,X47,'type.list.list'(X46))))) | s('type.semanticPrimitives.result'(X46,X47),X48) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X48,X47,X46))))) )),
  inference(superposition,[],[f741,f748])).
fof(f7283,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,X43))))))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),sK4(X45,X42,'type.list.list'(X41)))))) )),
  inference(subsumption_resolution,[],[f7247,f164])).
fof(f7247,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X41),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,X43))))))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK5(X45,X42,'type.list.list'(X41))))) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X43),s('type.list.list'(X41),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X41),X42),X45) = s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X41),sK4(X45,X42,'type.list.list'(X41)))))) )),
  inference(superposition,[],[f741,f156])).
fof(f7280,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X17))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X19))) | s('type.semanticPrimitives.result'(X15,X16),X19) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X19,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(subsumption_resolution,[],[f7241,f164])).
fof(f7241,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X17))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X19))) | s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X17,X16,X15)))) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X19,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X19) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X19,X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f741,f157])).
fof(f7279,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X14,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,X10))))) )),
  inference(subsumption_resolution,[],[f7240,f164])).
fof(f7240,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X12,X11,X10)))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(X14,X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) = s('type.semanticPrimitives.result'('type.list.list'(X10),X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(X12,X11,X10))))) )),
  inference(superposition,[],[f741,f733])).
fof(f7239,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),X7))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),X9))) | s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,X5)))) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X9,X6,X5)))) | s('type.semanticPrimitives.result'(X5,X6),X9) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X9,X6,X5)))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK4(X7,X6,X5))))) )),
  inference(superposition,[],[f741,f157])).
fof(f7238,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X4,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X4,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f741,f748])).
fof(f7237,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),X19))) | s('type.semanticPrimitives.result'(X15,X16),X19) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16)),X16,X15)))) | s('type.semanticPrimitives.result'(X15,X16),sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16))) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16)),X16,X15)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),sK5(X18,X17,'type.semanticPrimitives.result'(X15,X16)))))) )),
  inference(superposition,[],[f741,f157])).
fof(f7236,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK5(sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'(X10,X11)))))) )),
  inference(superposition,[],[f741,f733])).
fof(f7277,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.semanticPrimitives.result'(X77,X78),X79) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X82))) | s('type.semanticPrimitives.result'(X77,X78),X82) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77))))) )),
  inference(forward_demodulation,[],[f7233,f765])).
fof(f7233,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X77,X78),X81),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X82))) | s('type.semanticPrimitives.result'(X77,X78),X82) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77)))) | s('type.semanticPrimitives.result'(X77,X78),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78))) = s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X77,X78),X79)),X80,'type.semanticPrimitives.result'(X77,X78)),X78,X77))))) )),
  inference(superposition,[],[f741,f765])).
fof(f7271,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28)))),X27,'type.list.list'(X26)))))) )),
  inference(subsumption_resolution,[],[f7270,f164])).
fof(f7270,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28))) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28)))),X27,'type.list.list'(X26))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28)))),X27,'type.list.list'(X26)))))) )),
  inference(forward_demodulation,[],[f7222,f155])).
fof(f7222,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28)))),X27,'type.list.list'(X26))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28))))) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X28)))),X27,'type.list.list'(X26)))))) )),
  inference(superposition,[],[f741,f155])).
fof(f7152,plain,(
  ( ! [X8,X9] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s(sK0,X8) = s(sK0,sK4(sK2,sK1,sK0))) ) | $spl28),
  inference(superposition,[],[f148,f7052])).
fof(f7150,plain,(
  ( ! [X4,X5] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X5))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),X5)) ) | $spl28),
  inference(superposition,[],[f149,f7052])).
fof(f7149,plain,(
  ( ! [X3] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X3),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f156,f7052])).
fof(f7148,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))))) ) | $spl28),
  inference(superposition,[],[f634,f7052])).
fof(f7147,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X0),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f635,f7052])).
fof(f7052,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f6939,f749])).
fof(f7038,plain,(
  ( ! [X167,X165,X166,X164,X168] : (s('type.semanticPrimitives.result'(X164,X165),X166) != s('type.semanticPrimitives.result'(X164,X165),X167) | s('type.list.list'('type.semanticPrimitives.result'(X164,X165)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X164,X165),X167),s('type.list.list'('type.semanticPrimitives.result'(X164,X165)),X168))) = s('type.list.list'('type.semanticPrimitives.result'(X164,X165)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X164,X165),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X165),sK5(X166,X165,X164)))),s('type.list.list'('type.semanticPrimitives.result'(X164,X165)),X168))) | s('type.semanticPrimitives.result'('type.list.list'(X164),X165),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X164,X165),X166))) = s('type.semanticPrimitives.result'('type.list.list'(X164),X165),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X164),'const.list.CONS_2'(s(X164,sK4(X166,X165,X164)),s('type.list.list'(X164),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f918,f748])).
fof(f7036,plain,(
  ( ! [X158,X156,X159,X157,X155] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X155,X156),X158),X159) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X155,X156),X158),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X155,X156),X157))) | s('type.semanticPrimitives.result'(X155,X156),sK4(X159,X158,'type.semanticPrimitives.result'(X155,X156))) = s('type.semanticPrimitives.result'(X155,X156),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X156),sK5(X157,X156,X155)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X155,X156),X158),X159) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X155,X156),X158),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X158),sK5(X159,X158,'type.semanticPrimitives.result'(X155,X156))))) | s('type.semanticPrimitives.result'('type.list.list'(X155),X156),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X155,X156),X157))) = s('type.semanticPrimitives.result'('type.list.list'(X155),X156),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X155),'const.list.CONS_2'(s(X155,sK4(X157,X156,X155)),s('type.list.list'(X155),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f749,f748])).
fof(f7033,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X144))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X143),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X140,X141),X143),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X140,X141),X142))))) | s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),X144) = s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X140,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),sK5(X142,X141,X140)))),s('type.list.list'('type.semanticPrimitives.result'(X140,X141)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X140),X141),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X140,X141),X142))) = s('type.semanticPrimitives.result'('type.list.list'(X140),X141),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X140),'const.list.CONS_2'(s(X140,sK4(X142,X141,X140)),s('type.list.list'(X140),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f657,f748])).
fof(f7026,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s('type.semanticPrimitives.result'(X103,X104),X105) != s('type.semanticPrimitives.result'(X103,X104),X106) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X103,X104),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X103,X104),X106))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X103,X104),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X103,X104),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X104),sK5(X105,X104,X103)))))) | s('type.semanticPrimitives.result'('type.list.list'(X103),X104),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X103,X104),X105))) = s('type.semanticPrimitives.result'('type.list.list'(X103),X104),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X103),'const.list.CONS_2'(s(X103,sK4(X105,X104,X103)),s('type.list.list'(X103),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f161,f748])).
fof(f7024,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X93,X94),X96),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X93,X94),X95))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X93,X94),X96),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X93,X94),X97))) | s('type.semanticPrimitives.result'(X93,X94),X97) = s('type.semanticPrimitives.result'(X93,X94),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X94),sK5(X95,X94,X93)))) | s('type.semanticPrimitives.result'('type.list.list'(X93),X94),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X93,X94),X95))) = s('type.semanticPrimitives.result'('type.list.list'(X93),X94),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X93),'const.list.CONS_2'(s(X93,sK4(X95,X94,X93)),s('type.list.list'(X93),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f160,f748])).
fof(f7019,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s('type.list.list'('type.semanticPrimitives.result'(X65,X66)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X65,X66),X67),s('type.list.list'('type.semanticPrimitives.result'(X65,X66)),X68))) != s('type.list.list'('type.semanticPrimitives.result'(X65,X66)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X65,X66),X69),s('type.list.list'('type.semanticPrimitives.result'(X65,X66)),X70))) | s('type.semanticPrimitives.result'(X65,X66),X69) = s('type.semanticPrimitives.result'(X65,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),sK5(X67,X66,X65)))) | s('type.semanticPrimitives.result'('type.list.list'(X65),X66),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X65,X66),X67))) = s('type.semanticPrimitives.result'('type.list.list'(X65),X66),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X65),'const.list.CONS_2'(s(X65,sK4(X67,X66,X65)),s('type.list.list'(X65),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f148,f748])).
fof(f7017,plain,(
  ( ! [X63] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X63) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X63))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4(X63,sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f4230,f748])).
fof(f7015,plain,(
  ( ! [X61] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X61) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X61))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(X61,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f6249,f748])).
fof(f7014,plain,(
  ( ! [X59,X60] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X60),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X60),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X59))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X59))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(X59,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl28),
  inference(superposition,[],[f6250,f748])).
fof(f7013,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.semanticPrimitives.result'('type.list.list'(X55),X56),X57) != s('type.semanticPrimitives.result'('type.list.list'(X55),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X55,X56),'const.semanticPrimitives.Rval_1'(s(X55,X58))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X55),X56),X57))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X55)),X56),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X55)),'const.list.CONS_2'(s('type.list.list'(X55),sK4(X57,X56,'type.list.list'(X55))),s('type.list.list'('type.list.list'(X55)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f659,f748])).
fof(f7051,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'(X39,X40),X41) != s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),X42))) | s('type.semanticPrimitives.error_result'(X40),X42) = s('type.semanticPrimitives.error_result'(X40),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5(X41,X40,X39))),X40,X39)) | s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),X41))) = s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X39),'const.list.CONS_2'(s(X39,sK4(X41,X40,X39)),s('type.list.list'(X39),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f7009,f164])).
fof(f7009,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'(X39,X40),X41) != s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),X42))) | s('type.semanticPrimitives.error_result'(X40),X42) = s('type.semanticPrimitives.error_result'(X40),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5(X41,X40,X39))),X40,X39)) | s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5(X41,X40,X39)))) = s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK5(X41,X40,X39))),X40,X39)))) | s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X39,X40),X41))) = s('type.semanticPrimitives.result'('type.list.list'(X39),X40),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X39),'const.list.CONS_2'(s(X39,sK4(X41,X40,X39)),s('type.list.list'(X39),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f731,f748])).
fof(f7008,plain,(
  ( ! [X37,X35,X38,X36] : (s('type.semanticPrimitives.result'(X35,X36),X37) != s('type.semanticPrimitives.result'(X35,X36),X38) | s('type.semanticPrimitives.result'(X35,X36),X38) = s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5(X38,X36,X35)))) | s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X35,X36),X37))) = s('type.semanticPrimitives.result'('type.list.list'(X35),X36),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X35),'const.list.CONS_2'(s(X35,sK4(X37,X36,X35)),s('type.list.list'(X35),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f751,f748])).
fof(f7007,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.semanticPrimitives.result'(X31,X32),X33) != s('type.semanticPrimitives.result'(X31,X32),X34) | s('type.semanticPrimitives.error_result'(X32),sK5(X33,X32,X31)) = s('type.semanticPrimitives.error_result'(X32),sK5(X34,X32,X31)) | s('type.semanticPrimitives.result'(X31,X32),X34) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK4(X34,X32,X31)))) | s('type.semanticPrimitives.result'('type.list.list'(X31),X32),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X31,X32),X33))) = s('type.semanticPrimitives.result'('type.list.list'(X31),X32),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X31),'const.list.CONS_2'(s(X31,sK4(X33,X32,X31)),s('type.list.list'(X31),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f731,f748])).
fof(f7006,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'(X25,X26)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X25,X26),X27),s('type.list.list'('type.semanticPrimitives.result'(X25,X26)),X30))) != s('type.list.list'('type.semanticPrimitives.result'(X25,X26)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rval_1'(s(X25,X28))),s('type.list.list'('type.semanticPrimitives.result'(X25,X26)),X29))) | s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X25,X26),X27))) = s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X25),'const.list.CONS_2'(s(X25,sK4(X27,X26,X25)),s('type.list.list'(X25),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f542,f748])).
fof(f7005,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),X22))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X24))))) | s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),X22))) = s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK4(X22,X21,X20)),s('type.list.list'(X20),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f231,f748])).
fof(f7004,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'(X16,X17),X18) != s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X19))) | s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),X18))) = s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,sK4(X18,X17,X16)),s('type.list.list'(X16),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f164,f748])).
fof(f7002,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(X8,X9),X10) != s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X11))) | s('type.semanticPrimitives.error_result'(X9),X11) = s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8)) | s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),X10))) = s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK4(X10,X9,X8)),s('type.list.list'(X8),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f162,f748])).
fof(f6999,plain,(
  ( ! [X177,X175,X178,X176,X179] : (s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178) != s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),X177))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X178),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X179))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,sK4(X177,X176,X175)),s('type.list.list'(X175),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X179))) | s('type.semanticPrimitives.result'(X175,X176),X177) = s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X176),sK5(X177,X176,X175))))) )),
  inference(superposition,[],[f918,f748])).
fof(f6997,plain,(
  ( ! [X167,X169,X166,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X166),X167),X169),X170) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X166),X167),X169),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X166),X167),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X166,X167),X168))))) | s('type.semanticPrimitives.result'('type.list.list'(X166),X167),sK4(X170,X169,'type.semanticPrimitives.result'('type.list.list'(X166),X167))) = s('type.semanticPrimitives.result'('type.list.list'(X166),X167),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X166),'const.list.CONS_2'(s(X166,sK4(X168,X167,X166)),s('type.list.list'(X166),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X166),X167),X169),X170) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X166),X167),X169),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X169),sK5(X170,X169,'type.semanticPrimitives.result'('type.list.list'(X166),X167))))) | s('type.semanticPrimitives.result'(X166,X167),X168) = s('type.semanticPrimitives.result'(X166,X167),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X167),sK5(X168,X167,X166))))) )),
  inference(superposition,[],[f749,f748])).
fof(f6994,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),X154),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),X155))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),X154),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X151),X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X151),X152),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X151,X152),X153))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),X155) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X151),X152),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X151),'const.list.CONS_2'(s(X151,sK4(X153,X152,X151)),s('type.list.list'(X151),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X151),X152)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X151,X152),X153) = s('type.semanticPrimitives.result'(X151,X152),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X152),sK5(X153,X152,X151))))) )),
  inference(superposition,[],[f657,f748])).
fof(f6987,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s('type.semanticPrimitives.result'('type.list.list'(X114),X115),X117) != s('type.semanticPrimitives.result'('type.list.list'(X114),X115),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X114,X115),X116))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X114),X115),X118),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X114),X115),X117))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X114),X115),X118),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X114),X115),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X114),'const.list.CONS_2'(s(X114,sK4(X116,X115,X114)),s('type.list.list'(X114),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X114,X115),X116) = s('type.semanticPrimitives.result'(X114,X115),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X115),sK5(X116,X115,X114))))) )),
  inference(superposition,[],[f161,f748])).
fof(f6985,plain,(
  ( ! [X107,X105,X108,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X104),X105),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X104),X105),X108))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X104),X105),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X104),X105),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X104,X105),X106))))) | s('type.semanticPrimitives.result'('type.list.list'(X104),X105),X108) = s('type.semanticPrimitives.result'('type.list.list'(X104),X105),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X104),'const.list.CONS_2'(s(X104,sK4(X106,X105,X104)),s('type.list.list'(X104),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X104,X105),X106) = s('type.semanticPrimitives.result'(X104,X105),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X105),sK5(X106,X105,X104))))) )),
  inference(superposition,[],[f160,f748])).
fof(f6980,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X80),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X81))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X76,X77),X78))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X76),X77)),X79))) | s('type.semanticPrimitives.result'('type.list.list'(X76),X77),X80) = s('type.semanticPrimitives.result'('type.list.list'(X76),X77),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X76),'const.list.CONS_2'(s(X76,sK4(X78,X77,X76)),s('type.list.list'(X76),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X76,X77),X78) = s('type.semanticPrimitives.result'(X76,X77),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X77),sK5(X78,X77,X76))))) )),
  inference(superposition,[],[f148,f748])).
fof(f7050,plain,(
  ( ! [X66,X64,X67,X65] : (s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),X67))) != s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),X66))) | s('type.list.list'(X64),X67) = s('type.list.list'(X64),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,sK4(X66,X65,X64)),s('type.list.list'(X64),'const.list.NIL_0')))),X65,'type.list.list'(X64))) | s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X66,X65,X64))))) )),
  inference(subsumption_resolution,[],[f6977,f164])).
fof(f6977,plain,(
  ( ! [X66,X64,X67,X65] : (s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),X67))) != s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X64,X65),X66))) | s('type.list.list'(X64),X67) = s('type.list.list'(X64),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,sK4(X66,X65,X64)),s('type.list.list'(X64),'const.list.NIL_0')))),X65,'type.list.list'(X64))) | s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,sK4(X66,X65,X64)),s('type.list.list'(X64),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X64),X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'(X64),'const.list.CONS_2'(s(X64,sK4(X66,X65,X64)),s('type.list.list'(X64),'const.list.NIL_0')))),X65,'type.list.list'(X64))))) | s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK5(X66,X65,X64))))) )),
  inference(superposition,[],[f749,f748])).
fof(f6975,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.semanticPrimitives.result'('type.list.list'(X56),X57),X59) != s('type.semanticPrimitives.result'('type.list.list'(X56),X57),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X56,X57),X58))) | s('type.list.list'(X56),sK4(X59,X57,'type.list.list'(X56))) = s('type.list.list'(X56),'const.list.CONS_2'(s(X56,sK4(X58,X57,X56)),s('type.list.list'(X56),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X56),X57),X59) = s('type.semanticPrimitives.result'('type.list.list'(X56),X57),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X57),sK5(X59,X57,'type.list.list'(X56))))) | s('type.semanticPrimitives.result'(X56,X57),X58) = s('type.semanticPrimitives.result'(X56,X57),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X57),sK5(X58,X57,X56))))) )),
  inference(superposition,[],[f749,f748])).
fof(f6974,plain,(
  ( ! [X54,X52,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X55) != s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),X54))) | s('type.semanticPrimitives.result'('type.list.list'(X52),X53),X55) = s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),sK4(X55,X53,'type.list.list'(X52))))) | s('type.semanticPrimitives.result'(X52,X53),X54) = s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X53),sK5(X54,X53,X52))))) )),
  inference(superposition,[],[f734,f748])).
fof(f6973,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X48)),X49),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X49),X51))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X48)),X49),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X48),X49),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X48,X49),X50))))) | s('type.semanticPrimitives.result'(X48,X49),X50) = s('type.semanticPrimitives.result'(X48,X49),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X49),sK5(X50,X49,X48))))) )),
  inference(superposition,[],[f659,f748])).
fof(f6972,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X44)),X47))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X44,X45),X46))))) | s('type.list.list'('type.list.list'(X44)),X47) = s('type.list.list'('type.list.list'(X44)),'const.list.CONS_2'(s('type.list.list'(X44),'const.list.CONS_2'(s(X44,sK4(X46,X45,X44)),s('type.list.list'(X44),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X44)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X44,X45),X46) = s('type.semanticPrimitives.result'(X44,X45),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X45),sK5(X46,X45,X44))))) )),
  inference(superposition,[],[f657,f748])).
fof(f6971,plain,(
  ( ! [X43,X41,X42] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X41))),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X41)),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),X43))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X41))),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X41))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X41)),'const.list.CONS_2'(s('type.list.list'(X41),'const.list.CONS_2'(s(X41,sK4(X43,X42,X41)),s('type.list.list'(X41),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X41)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X41))),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X41,X42),X43) = s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK5(X43,X42,X41))))) )),
  inference(superposition,[],[f635,f748])).
fof(f6970,plain,(
  ( ! [X39,X37,X38,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X37)),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X37)),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),X39))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X37)),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X37)),X38),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X37)),'const.list.CONS_2'(s('type.list.list'(X37),'const.list.CONS_2'(s(X37,sK4(X39,X38,X37)),s('type.list.list'(X37),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X37)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X37,X38),X39) = s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),sK5(X39,X38,X37))))) )),
  inference(superposition,[],[f634,f748])).
fof(f6969,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X31),X32)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X31),X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),X35))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X31),X32)),X36))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X31),X32)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X31),X32),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X31,X32),X33))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X31),X32)),X34))) | s('type.semanticPrimitives.result'(X31,X32),X33) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),sK5(X33,X32,X31))))) )),
  inference(superposition,[],[f542,f748])).
fof(f6968,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X30))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),X28))))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK5(X28,X27,X26))))) )),
  inference(superposition,[],[f231,f748])).
fof(f6963,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),X9))) != s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X10))))) | s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0'))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,sK4(X9,X8,X7)),s('type.list.list'(X7),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,X7))))) )),
  inference(superposition,[],[f657,f748])).
fof(f6961,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0)))))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f634,f748])).
fof(f6960,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),X5))) = s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,sK4(X5,X4,X3)))))) | s('type.semanticPrimitives.result'(X3,X4),X5) = s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,X3))))) )),
  inference(superposition,[],[f748,f156])).
fof(f7042,plain,(
  ( ! [X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X7))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f6946,f164])).
fof(f6946,plain,(
  ( ! [X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X7))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X7))) = s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK5('const.semanticPrimitives.Rval_1'(s(bool,X7)),X8,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f748,f833])).
fof(f6939,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl28),
  inference(unit_resulting_resolution,[],[f6249,f748])).
fof(f6941,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0'))))) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f748])).
fof(f6933,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X3) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,sK4(X3,sK1,sK0))),X4,sK0)) | s('type.semanticPrimitives.result'(sK0,sK1),X3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X3,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6394,f157])).
fof(f6932,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X1) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,sK4(X1,sK1,sK0))),X2,sK0)) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X1))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X1,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6394,f733])).
fof(f6902,plain,(
  ( ! [X171,X169,X172,X170,X168] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169),X171) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X168),X169),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X168,X169),'const.semanticPrimitives.Rval_1'(s(X168,X170))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169),X171),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169)),X172))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X168)),'const.list.CONS_2'(s('type.list.list'(X168),'const.list.CONS_2'(s(X168,X170),s('type.list.list'(X168),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X168)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X168)),X169)),X172)))) )),
  inference(superposition,[],[f918,f635])).
fof(f6900,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),X162),X163) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),X162),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X159),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X159,X160),'const.semanticPrimitives.Rval_1'(s(X159,X161))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),sK4(X163,X162,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X159)),'const.list.CONS_2'(s('type.list.list'(X159),'const.list.CONS_2'(s(X159,X161),s('type.list.list'(X159),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X159)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),X162),X163) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160),X162),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X162),sK5(X163,X162,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X159)),X160)))))) )),
  inference(superposition,[],[f749,f635])).
fof(f6897,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),X147),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),X148))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145),X147),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X144),X145),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X144,X145),'const.semanticPrimitives.Rval_1'(s(X144,X146))))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),X148) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X144)),'const.list.CONS_2'(s('type.list.list'(X144),'const.list.CONS_2'(s(X144,X146),s('type.list.list'(X144),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X144)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X144)),X145)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f635])).
fof(f6891,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X114) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X111),X112),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X111,X112),'const.semanticPrimitives.Rval_1'(s(X111,X113))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X115),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X114))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X115),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X111)),'const.list.CONS_2'(s('type.list.list'(X111),'const.list.CONS_2'(s(X111,X113),s('type.list.list'(X111),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X111)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f161,f635])).
fof(f6889,plain,(
  ( ! [X103,X101,X105,X102,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),X105))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X101),X102),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rval_1'(s(X101,X103))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),X105) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X101)),X102),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X101)),'const.list.CONS_2'(s('type.list.list'(X101),'const.list.CONS_2'(s(X101,X103),s('type.list.list'(X101),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X101)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f160,f635])).
fof(f6884,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74),X77),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74)),X78))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X73),X74),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X73,X74),'const.semanticPrimitives.Rval_1'(s(X73,X75))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74)),X76))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74),X77) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X73)),X74),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X73)),'const.list.CONS_2'(s('type.list.list'(X73),'const.list.CONS_2'(s(X73,X75),s('type.list.list'(X73),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X73)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f148,f635])).
fof(f6915,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),X64))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X61),X62),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X61,X62),'const.semanticPrimitives.Rval_1'(s(X61,X63))))))) | s('type.list.list'('type.list.list'(X61)),X64) = s('type.list.list'('type.list.list'(X61)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),'const.list.CONS_2'(s('type.list.list'(X61),'const.list.CONS_2'(s(X61,X63),s('type.list.list'(X61),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X61)),'const.list.NIL_0')))),X62,'type.list.list'('type.list.list'(X61))))) )),
  inference(subsumption_resolution,[],[f6881,f164])).
fof(f6881,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),X64))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X61),X62),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X61,X62),'const.semanticPrimitives.Rval_1'(s(X61,X63))))))) | s('type.list.list'('type.list.list'(X61)),X64) = s('type.list.list'('type.list.list'(X61)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),'const.list.CONS_2'(s('type.list.list'(X61),'const.list.CONS_2'(s(X61,X63),s('type.list.list'(X61),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X61)),'const.list.NIL_0')))),X62,'type.list.list'('type.list.list'(X61)))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),'const.list.CONS_2'(s('type.list.list'(X61),'const.list.CONS_2'(s(X61,X63),s('type.list.list'(X61),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X61)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X61)),X62),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X62),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X61)),'const.list.CONS_2'(s('type.list.list'(X61),'const.list.CONS_2'(s(X61,X63),s('type.list.list'(X61),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X61)),'const.list.NIL_0')))),X62,'type.list.list'('type.list.list'(X61))))))) )),
  inference(superposition,[],[f749,f635])).
fof(f6879,plain,(
  ( ! [X54,X56,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X53),X54),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X53,X54),'const.semanticPrimitives.Rval_1'(s(X53,X55))))))) | s('type.list.list'('type.list.list'(X53)),sK4(X56,X54,'type.list.list'('type.list.list'(X53)))) = s('type.list.list'('type.list.list'(X53)),'const.list.CONS_2'(s('type.list.list'(X53),'const.list.CONS_2'(s(X53,X55),s('type.list.list'(X53),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X53)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),X56) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X53)),X54),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X54),sK5(X56,X54,'type.list.list'('type.list.list'(X53))))))) )),
  inference(superposition,[],[f749,f635])).
fof(f6878,plain,(
  ( ! [X52,X50,X51,X49] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),X52) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X49),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rval_1'(s(X49,X51))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),X52) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X49)),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X49)),sK4(X52,X50,'type.list.list'('type.list.list'(X49))))))) )),
  inference(superposition,[],[f734,f635])).
fof(f6877,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X45))),X46),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X46),X48))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X45))),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X45)),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X45),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X45,X46),'const.semanticPrimitives.Rval_1'(s(X45,X47)))))))))) )),
  inference(superposition,[],[f659,f635])).
fof(f6876,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X41))),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X41))),X44))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X41))),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X41)),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X41),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,X43))))))))) | s('type.list.list'('type.list.list'('type.list.list'(X41))),X44) = s('type.list.list'('type.list.list'('type.list.list'(X41))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X41)),'const.list.CONS_2'(s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X43),s('type.list.list'(X41),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X41)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X41))),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f635])).
fof(f6875,plain,(
  ( ! [X39,X37,X38,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X37))),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X37))),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X37)),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X37),X38),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rval_1'(s(X37,X39))))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X37))),X38),X40),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X37))),X38),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X37))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X37)),'const.list.CONS_2'(s('type.list.list'(X37),'const.list.CONS_2'(s(X37,X39),s('type.list.list'(X37),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X37)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X37))),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f634,f635])).
fof(f6874,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),X35))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32)),X36))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X31),X32),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,X33))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X31)),X32)),X34)))) )),
  inference(superposition,[],[f542,f635])).
fof(f6873,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X26)),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X26)),X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X30))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X26)),X27),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X26)),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,X28)))))))))) )),
  inference(superposition,[],[f231,f635])).
fof(f6868,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X7)),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),X10))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X7)),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X9))))))) | s('type.list.list'('type.list.list'(X7)),'const.list.CONS_2'(s('type.list.list'(X7),X10),s('type.list.list'('type.list.list'(X7)),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'(X7)),'const.list.CONS_2'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X7)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f635])).
fof(f6866,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f634,f635])).
fof(f6864,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X114) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X111)),'const.list.CONS_2'(s('type.list.list'(X111),'const.list.CONS_2'(s(X111,X113),s('type.list.list'(X111),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X111)),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),X114),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112)),X115))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X111),X112),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X111,X112),'const.semanticPrimitives.Rval_1'(s(X111,X113))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X111)),X112)),X115)))) )),
  inference(superposition,[],[f918,f635])).
fof(f6862,plain,(
  ( ! [X103,X105,X102,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),X105),X106) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),X105),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X102)),'const.list.CONS_2'(s('type.list.list'(X102),'const.list.CONS_2'(s(X102,X104),s('type.list.list'(X102),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X102)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),sK4(X106,X105,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X102),X103),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X102,X103),'const.semanticPrimitives.Rval_1'(s(X102,X104))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),X105),X106) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103),X105),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X105),sK5(X106,X105,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X102)),X103)))))) )),
  inference(superposition,[],[f749,f635])).
fof(f6859,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),X91))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88),X90),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X87)),'const.list.CONS_2'(s('type.list.list'(X87),'const.list.CONS_2'(s(X87,X89),s('type.list.list'(X87),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X87)),'const.list.NIL_0'))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),X91) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X87),X88),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X87,X88),'const.semanticPrimitives.Rval_1'(s(X87,X89))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X87)),X88)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f635])).
fof(f6853,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),X57) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X54)),'const.list.CONS_2'(s('type.list.list'(X54),'const.list.CONS_2'(s(X54,X56),s('type.list.list'(X54),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X54)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),X58),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),X57))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),X58),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X54)),X55),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X54),X55),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rval_1'(s(X54,X56)))))))))) )),
  inference(superposition,[],[f161,f635])).
fof(f6851,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),X48))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),X47),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X44)),'const.list.CONS_2'(s('type.list.list'(X44),'const.list.CONS_2'(s(X44,X46),s('type.list.list'(X44),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X44)),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),X48) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X44)),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X44,X45),'const.semanticPrimitives.Rval_1'(s(X44,X46)))))))) )),
  inference(superposition,[],[f160,f635])).
fof(f6846,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),X20),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17)),X21))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X16)),'const.list.CONS_2'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X16)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17)),X19))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),X20) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X18)))))))) )),
  inference(superposition,[],[f148,f635])).
fof(f6914,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),X7))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X6),s('type.list.list'(X4),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X4)),'const.list.NIL_0'))))) | s('type.list.list'('type.list.list'(X4)),X7) = s('type.list.list'('type.list.list'(X4)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X6)))))),X5,'type.list.list'('type.list.list'(X4))))) )),
  inference(subsumption_resolution,[],[f6843,f717])).
fof(f6843,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),X7))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X6),s('type.list.list'(X4),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X4)),'const.list.NIL_0'))))) | s('type.list.list'('type.list.list'(X4)),X7) = s('type.list.list'('type.list.list'(X4)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X6)))))),X5,'type.list.list'('type.list.list'(X4)))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X6))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X6)))))),X5,'type.list.list'('type.list.list'(X4))))))) )),
  inference(superposition,[],[f749,f635])).
fof(f6841,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X3)),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,X5))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X3)),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X5),s('type.list.list'(X3),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f635,f156])).
fof(f6794,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17))),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),X18),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X16),X17),X18),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X19))))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17))),X18),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X19),s('type.list.list'(X16),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f635,f634])).
fof(f6793,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13))),X14),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),X14),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X12),X13),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,X15),s('type.list.list'(X12),'const.list.NIL_0'))))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13))),X14),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rval_1'(s(X12,X15))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X12),X13))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f635,f634])).
fof(f6792,plain,(
  ( ! [X10,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X9)))),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X9))),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X9)),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X9),X10),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,X11))))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X9)))),X10),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X9)))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.list.list'(X9))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X9)),'const.list.CONS_2'(s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X11),s('type.list.list'(X9),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X9)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X9))),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X9)))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f635,f635])).
fof(f6791,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X6))),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X6)),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X8))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X6))),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X6))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X6)),'const.list.CONS_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X6)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X6))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f635,f156])).
fof(f6790,plain,(
  ( ! [X4,X5,X3] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X3)),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X3),X4),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X4),X5))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X3)),X4),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X3)),'const.list.CONS_2'(s('type.list.list'(X3),'const.list.CONS_2'(s(X3,sK4(X5,X4,X3)),s('type.list.list'(X3),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X3)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X3,X4),X5) = s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK5(X5,X4,X3))))) )),
  inference(superposition,[],[f635,f157])).
fof(f6789,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f635,f733])).
fof(f6780,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X1,'type.list.list'('type.list.list'(X0))))))) )),
  inference(unit_resulting_resolution,[],[f635,f734])).
fof(f6910,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3)))) )),
  inference(forward_demodulation,[],[f6787,f765])).
fof(f6787,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1)),X3)),X4,'type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1))))))) )),
  inference(unit_resulting_resolution,[],[f765,f635,f150])).
fof(f6779,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X0))) | s('type.semanticPrimitives.result'(sK0,sK1),X0) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(X0,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6250,f157])).
fof(f6775,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X3)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6250,f148])).
fof(f6776,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X2)))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6250,f160])).
fof(f6752,plain,(
  ( ! [X59,X57,X58] : (s('type.semanticPrimitives.result'(sK0,X58),X59) != s('type.semanticPrimitives.result'(sK0,X58),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | s(sK0,sK4(X59,X58,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X57,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)) | s('type.semanticPrimitives.result'(sK0,X58),X59) = s('type.semanticPrimitives.result'(sK0,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),sK5(X59,X58,sK0))))) ) | $spl28),
  inference(superposition,[],[f749,f6501])).
fof(f6741,plain,(
  ( ! [X23,X21,X22] : (s('type.semanticPrimitives.result'(sK0,X22),'const.semanticPrimitives.Rval_1'(s(sK0,X23))) != s('type.semanticPrimitives.result'(sK0,X22),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | s(sK0,X23) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X21,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))) ) | $spl28),
  inference(superposition,[],[f160,f6501])).
fof(f6736,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),X6))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),X4))) | s(sK0,X5) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X3,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))) ) | $spl28),
  inference(superposition,[],[f148,f6501])).
fof(f6705,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186),X188) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X184),X185),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X184,X185),'const.semanticPrimitives.Rval_1'(s(X184,X187))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186),X188),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186)),X189))) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X184),X185),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X184),'const.list.CONS_2'(s(X184,X187),s('type.list.list'(X184),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X184),X185),X186)),X189)))) )),
  inference(superposition,[],[f918,f634])).
fof(f6703,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),X177),X178) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),X177),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X173),X174),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X173,X174),'const.semanticPrimitives.Rval_1'(s(X173,X176))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),sK4(X178,X177,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X173),X174),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X173),'const.list.CONS_2'(s(X173,X176),s('type.list.list'(X173),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),X177),X178) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175),X177),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X177),sK5(X178,X177,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X173),X174),X175)))))) )),
  inference(superposition,[],[f749,f634])).
fof(f6700,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),X159),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),X160))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),X159),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157),X159),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X155),X156),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X155,X156),'const.semanticPrimitives.Rval_1'(s(X155,X158))))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),X160) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X155),X156),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X155),'const.list.CONS_2'(s(X155,X158),s('type.list.list'(X155),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X155),X156),X157)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f634])).
fof(f6695,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),X126) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X122),X123),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X122,X123),'const.semanticPrimitives.Rval_1'(s(X122,X125))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),X127),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),X126))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),X127),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X122),X123),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X122),X123),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X122),'const.list.CONS_2'(s(X122,X125),s('type.list.list'(X122),'const.list.NIL_0')))))))))) )),
  inference(superposition,[],[f161,f634])).
fof(f6693,plain,(
  ( ! [X111,X114,X112,X110,X115,X113] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),X114),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),X115))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),X114),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X110),X111),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X110,X111),'const.semanticPrimitives.Rval_1'(s(X110,X113))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),X115) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X112),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X110),X111),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X110),'const.list.CONS_2'(s(X110,X113),s('type.list.list'(X110),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f160,f634])).
fof(f6688,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79),X82),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79)),X83))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X77),X78),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,X80))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79)),X81))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79),X82) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X79),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X77),X78),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X77),'const.list.CONS_2'(s(X77,X80),s('type.list.list'(X77),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f148,f634])).
fof(f6719,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60))))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0')))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58)))) )),
  inference(subsumption_resolution,[],[f6684,f164])).
fof(f6684,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60))))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0')))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0')))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58)))))) )),
  inference(superposition,[],[f749,f634])).
fof(f6673,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X2),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f156,f634])).
fof(f6671,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181),X183) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X179),'const.list.CONS_2'(s(X179,X182),s('type.list.list'(X179),'const.list.NIL_0'))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181),X183),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181)),X184))) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X179),X180),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X179,X180),'const.semanticPrimitives.Rval_1'(s(X179,X182))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X179),X180),X181)),X184)))) )),
  inference(superposition,[],[f918,f634])).
fof(f6669,plain,(
  ( ! [X173,X171,X169,X172,X170,X168] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),X172),X173) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),X172),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X168),X169),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X168),'const.list.CONS_2'(s(X168,X171),s('type.list.list'(X168),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),sK4(X173,X172,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X168),X169),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X168,X169),'const.semanticPrimitives.Rval_1'(s(X168,X171))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),X172),X173) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170),X172),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X172),sK5(X173,X172,'type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X168),X169),X170)))))) )),
  inference(superposition,[],[f749,f634])).
fof(f6666,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),X154),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),X155))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),X154),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152),X154),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X150),X151),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X150),'const.list.CONS_2'(s(X150,X153),s('type.list.list'(X150),'const.list.NIL_0'))))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),X155) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X150),X151),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X150,X151),'const.semanticPrimitives.Rval_1'(s(X150,X153))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X150),X151),X152)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f634])).
fof(f6661,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),X121) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X117),X118),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X117),'const.list.CONS_2'(s(X117,X120),s('type.list.list'(X117),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),X122),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),X121))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),X122),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X117),X118),X119),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X117),X118),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X117,X118),'const.semanticPrimitives.Rval_1'(s(X117,X120)))))))))) )),
  inference(superposition,[],[f161,f634])).
fof(f6659,plain,(
  ( ! [X109,X107,X105,X110,X108,X106] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),X109),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),X110))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),X109),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X105),X106),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X105),'const.list.CONS_2'(s(X105,X108),s('type.list.list'(X105),'const.list.NIL_0'))))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),X110) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X105),X106),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X105),X106),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X105,X106),'const.semanticPrimitives.Rval_1'(s(X105,X108)))))))) )),
  inference(superposition,[],[f160,f634])).
fof(f6654,plain,(
  ( ! [X78,X76,X74,X72,X77,X75,X73] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74),X77),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74)),X78))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X72),'const.list.CONS_2'(s(X72,X75),s('type.list.list'(X72),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74)),X76))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74),X77) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X74),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X72,X73),'const.semanticPrimitives.Rval_1'(s(X72,X75)))))))) )),
  inference(superposition,[],[f148,f634])).
fof(f6717,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60)))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58)))) )),
  inference(subsumption_resolution,[],[f6651,f164])).
fof(f6651,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X57),'const.list.CONS_2'(s(X57,X60),s('type.list.list'(X57),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X57),X58),X61) = s('type.semanticPrimitives.result'('type.list.list'(X57),X58),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60)))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X57),X58),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X57),X58),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,X60)))))),X59,'type.semanticPrimitives.result'('type.list.list'(X57),X58)))))) )),
  inference(superposition,[],[f749,f634])).
fof(f6640,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X2),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f156,f634])).
fof(f6597,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X18),X19),X20),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X18),X19),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,X21))))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X18),X19),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X21),s('type.list.list'(X18),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X18),X19)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f634,f634])).
fof(f6596,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),X15),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),X15),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X13),X14),X15),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X13),X14),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X13),'const.list.CONS_2'(s(X13,X16),s('type.list.list'(X13),'const.list.NIL_0'))))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),X15),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),X15),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X13),X14),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X13,X14),'const.semanticPrimitives.Rval_1'(s(X13,X16))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X13),X14)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f634,f634])).
fof(f6595,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,X10))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X8)),'const.list.CONS_2'(s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X10),s('type.list.list'(X8),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X8)),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f634,f156])).
fof(f6594,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X4),X5),X7),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X4),X5),X7),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK4(X6,X5,X4)),s('type.list.list'(X4),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f634,f157])).
fof(f6593,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f634,f733])).
fof(f6580,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)))) )),
  inference(unit_resulting_resolution,[],[f164,f634,f749])).
fof(f6587,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)))) )),
  inference(unit_resulting_resolution,[],[f164,f634,f749])).
fof(f6713,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X4))) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X4)))) )),
  inference(forward_demodulation,[],[f6591,f765])).
fof(f6591,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X4))) = s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X4)),X5,'type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2))))))) )),
  inference(unit_resulting_resolution,[],[f765,f634,f150])).
fof(f6592,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0')))))))))) )),
  inference(unit_resulting_resolution,[],[f634,f161])).
fof(f6525,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X25) | s(sK0,sK4(X25,sK1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X24,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0)) | s('type.semanticPrimitives.result'(sK0,sK1),X25) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X25,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f749,f6497])).
fof(f6517,plain,(
  ( ! [X6,X5] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X6))) | s(sK0,X6) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X5,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))) ) | $spl28),
  inference(superposition,[],[f160,f6497])).
fof(f6501,plain,(
  ( ! [X0] : (s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X0,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f6249,f6497,f749])).
fof(f6498,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X3) | s('type.semanticPrimitives.result'(sK0,sK1),X3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X3)),X4,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(forward_demodulation,[],[f6494,f765])).
fof(f6494,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X3) | s('type.semanticPrimitives.result'(sK0,sK1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X3)),X4,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),X3)),X4,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6254,f765])).
fof(f6497,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X0,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(forward_demodulation,[],[f6488,f765])).
fof(f6488,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK0,sK1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X0,'type.semanticPrimitives.result'(sK0,sK1))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),X0,'type.semanticPrimitives.result'(sK0,sK1)),sK1,sK0))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f765,f6254])).
fof(f6479,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X7),X8),X10) != s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),X9))) | s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,X7)) = s('type.semanticPrimitives.error_result'(X8),sK5(X10,X8,'type.list.list'(X7))) | s('type.semanticPrimitives.result'('type.list.list'(X7),X8),X10) = s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),sK4(X10,X8,'type.list.list'(X7))))) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,sK4(X9,X8,X7))))) )),
  inference(superposition,[],[f731,f733])).
fof(f6477,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)) = s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f731,f157])).
fof(f6476,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X8,X5),X9) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6))) | s('type.semanticPrimitives.error_result'(X5),sK5(X9,X5,X8)) = s('type.semanticPrimitives.error_result'(X5),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X5),X6)),X7,'type.semanticPrimitives.error_result'(X5))) | s('type.semanticPrimitives.result'(X8,X5),X9) = s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rval_1'(s(X8,sK4(X9,X5,X8))))) )),
  inference(superposition,[],[f731,f765])).
fof(f6475,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X3,X0),X4) != s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1))) | s('type.semanticPrimitives.error_result'(X0),sK5(X4,X0,X3)) = s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2)) | s('type.semanticPrimitives.result'(X3,X0),X4) = s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rval_1'(s(X3,sK4(X4,X0,X3))))) )),
  inference(superposition,[],[f731,f1017])).
fof(f6486,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'(X34,X35),X36) = s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X34,X35),X36)),X37,'type.semanticPrimitives.result'(X34,X35)),X35,X34)))) | s('type.semanticPrimitives.result'(X34,X35),X36) != s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),X38))) | s('type.semanticPrimitives.error_result'(X35),X38) = s('type.semanticPrimitives.error_result'(X35),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X34,X35),X36)),X37,'type.semanticPrimitives.result'(X34,X35)),X35,X34))) )),
  inference(forward_demodulation,[],[f6474,f765])).
fof(f6474,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'(X34,X35),X36) != s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),X38))) | s('type.semanticPrimitives.error_result'(X35),X38) = s('type.semanticPrimitives.error_result'(X35),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X34,X35),X36)),X37,'type.semanticPrimitives.result'(X34,X35)),X35,X34)) | s('type.semanticPrimitives.result'(X34,X35),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X34,X35),X36)),X37,'type.semanticPrimitives.result'(X34,X35))) = s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X34,X35),X36)),X37,'type.semanticPrimitives.result'(X34,X35)),X35,X34))))) )),
  inference(superposition,[],[f731,f765])).
fof(f6485,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),X32))) != s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),X31))) | s('type.semanticPrimitives.error_result'(X30),X32) = s('type.semanticPrimitives.error_result'(X30),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5(X31,X30,X29))),X30,'type.list.list'(X29))) | s('type.semanticPrimitives.result'(X29,X30),X31) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK4(X31,X30,X29))))) )),
  inference(subsumption_resolution,[],[f6472,f164])).
fof(f6472,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),X32))) != s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),X31))) | s('type.semanticPrimitives.error_result'(X30),X32) = s('type.semanticPrimitives.error_result'(X30),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5(X31,X30,X29))),X30,'type.list.list'(X29))) | s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5(X31,X30,X29)))) = s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X29),sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK5(X31,X30,X29))),X30,'type.list.list'(X29))))) | s('type.semanticPrimitives.result'(X29,X30),X31) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK4(X31,X30,X29))))) )),
  inference(superposition,[],[f731,f733])).
fof(f6484,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18))) != s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19))) | s('type.semanticPrimitives.error_result'(X17),X19) = s('type.semanticPrimitives.error_result'(X17),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18)))),X17,'type.list.list'(X16)))) )),
  inference(subsumption_resolution,[],[f6483,f164])).
fof(f6483,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18))) = s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X16),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18)))),X17,'type.list.list'(X16))))) | s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18))) != s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19))) | s('type.semanticPrimitives.error_result'(X17),X19) = s('type.semanticPrimitives.error_result'(X17),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18)))),X17,'type.list.list'(X16)))) )),
  inference(forward_demodulation,[],[f6468,f155])).
fof(f6468,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18))) != s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19))) | s('type.semanticPrimitives.error_result'(X17),X19) = s('type.semanticPrimitives.error_result'(X17),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18)))),X17,'type.list.list'(X16))) | s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18))))) = s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X16),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X18)))),X17,'type.list.list'(X16)))))) )),
  inference(superposition,[],[f731,f155])).
fof(f6481,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))),X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f6463,f164])).
fof(f6463,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))),X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))),X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f731,f157])).
fof(f6396,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X0) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(X0,sK1,sK0)) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X0))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X0,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f6247,f733])).
fof(f6394,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X0))) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,X0)),X1,sK0))) ) | $spl28),
  inference(superposition,[],[f6247,f765])).
fof(f6360,plain,(
  ( ! [X14] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X14) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(X14,sK1,sK0)) | s('type.semanticPrimitives.result'(sK0,sK1),X14) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X14,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f749,f6150])).
fof(f6356,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),X6) != s('type.semanticPrimitives.result'(X4,X5),X7) | s(X4,sK4(X6,X5,X4)) = s(X4,sK4(X7,X5,X4)) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X7,X5,X4)))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f749,f157])).
fof(f6355,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s(X0,sK4(X2,X1,X0)) = s(X0,sK4(X3,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f749,f733])).
fof(f6354,plain,(
  ( ! [X144,X142,X145,X143,X141] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X141),X144),X145) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X141),X144),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X141),X142))) | s('type.semanticPrimitives.error_result'(X141),sK4(X145,X144,'type.semanticPrimitives.error_result'(X141))) = s('type.semanticPrimitives.error_result'(X141),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),X142)),X141,X143)) | s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X141),X144),X145) = s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X141),X144),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X144),sK5(X145,X144,'type.semanticPrimitives.error_result'(X141)))))) )),
  inference(superposition,[],[f749,f1017])).
fof(f6352,plain,(
  ( ! [X134,X138,X136,X135,X137] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X134),X135),X137),X138) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X134),X135),X137),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X134,X135),X136))))) | s('type.semanticPrimitives.result'('type.list.list'(X134),X135),sK4(X138,X137,'type.semanticPrimitives.result'('type.list.list'(X134),X135))) = s('type.semanticPrimitives.result'('type.list.list'(X134),X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),sK5(X136,X135,X134)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X134),X135),X137),X138) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X134),X135),X137),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X137),sK5(X138,X137,'type.semanticPrimitives.result'('type.list.list'(X134),X135))))) | s('type.semanticPrimitives.result'(X134,X135),X136) = s('type.semanticPrimitives.result'(X134,X135),'const.semanticPrimitives.Rval_1'(s(X134,sK4(X136,X135,X134))))) )),
  inference(superposition,[],[f749,f733])).
fof(f6349,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X125),X126),X128),X129) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X125),X126),X128),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X125),X126),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X125,X126),'const.semanticPrimitives.Rval_1'(s(X125,X127))))))) | s('type.semanticPrimitives.result'('type.list.list'(X125),X126),sK4(X129,X128,'type.semanticPrimitives.result'('type.list.list'(X125),X126))) = s('type.semanticPrimitives.result'('type.list.list'(X125),X126),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X125),'const.list.CONS_2'(s(X125,X127),s('type.list.list'(X125),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X125),X126),X128),X129) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X125),X126),X128),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X128),sK5(X129,X128,'type.semanticPrimitives.result'('type.list.list'(X125),X126)))))) )),
  inference(superposition,[],[f749,f156])).
fof(f6348,plain,(
  ( ! [X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X123),X124) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X123),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),sK4(X124,X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121))) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X123),X124) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X123),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X123),sK5(X124,X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)))))) )),
  inference(superposition,[],[f749,f156])).
fof(f6344,plain,(
  ( ! [X107,X105,X108,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X104,X105),X107),X108) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X104,X105),X107),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X104,X105),X106))) | s('type.semanticPrimitives.result'(X104,X105),sK4(X108,X107,'type.semanticPrimitives.result'(X104,X105))) = s('type.semanticPrimitives.result'(X104,X105),'const.semanticPrimitives.Rval_1'(s(X104,sK4(X106,X105,X104)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X104,X105),X107),X108) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X104,X105),X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),sK5(X108,X107,'type.semanticPrimitives.result'(X104,X105))))) | s('type.semanticPrimitives.result'(X104,X105),X106) = s('type.semanticPrimitives.result'(X104,X105),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X105),sK5(X106,X105,X104))))) )),
  inference(superposition,[],[f749,f157])).
fof(f6343,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X99,X100),X102),X103) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X99,X100),X102),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X99,X100),X101))) | s('type.semanticPrimitives.result'(X99,X100),sK4(X103,X102,'type.semanticPrimitives.result'(X99,X100))) = s('type.semanticPrimitives.result'(X99,X100),'const.semanticPrimitives.Rval_1'(s(X99,sK4(X101,X100,X99)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X99,X100),X102),X103) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X99,X100),X102),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X102),sK5(X103,X102,'type.semanticPrimitives.result'(X99,X100))))) | s('type.semanticPrimitives.result'('type.list.list'(X99),X100),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X99,X100),X101))) = s('type.semanticPrimitives.result'('type.list.list'(X99),X100),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X100),sK5(X101,X100,X99))))) )),
  inference(superposition,[],[f749,f733])).
fof(f6342,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X94,X95),X97),X98) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X94,X95),X97),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X94,X95),X96))) | s('type.semanticPrimitives.result'(X94,X95),sK4(X98,X97,'type.semanticPrimitives.result'(X94,X95))) = s('type.semanticPrimitives.result'(X94,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),sK5(X96,X95,X94)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X94,X95),X97),X98) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X94,X95),X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(X98,X97,'type.semanticPrimitives.result'(X94,X95))))) | s('type.semanticPrimitives.result'(X94,X95),X96) = s('type.semanticPrimitives.result'(X94,X95),'const.semanticPrimitives.Rval_1'(s(X94,sK4(X96,X95,X94))))) )),
  inference(superposition,[],[f749,f157])).
fof(f6315,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X3),X4) != s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rval_1'(s(X0,X1))) | s(X0,sK4(X4,X3,X0)) = s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0)) | s('type.semanticPrimitives.result'(X0,X3),X4) = s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),sK5(X4,X3,X0))))) )),
  inference(superposition,[],[f749,f765])).
fof(f6373,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s('type.semanticPrimitives.result'(X35,X36),X37) = s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X35,X36),X37)),X38,'type.semanticPrimitives.result'(X35,X36)),X36,X35)))) | s('type.semanticPrimitives.result'(X35,X36),X37) != s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rval_1'(s(X35,X39))) | s(X35,X39) = s(X35,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X35,X36),X37)),X38,'type.semanticPrimitives.result'(X35,X36)),X36,X35))) )),
  inference(forward_demodulation,[],[f6314,f765])).
fof(f6314,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s('type.semanticPrimitives.result'(X35,X36),X37) != s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rval_1'(s(X35,X39))) | s(X35,X39) = s(X35,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X35,X36),X37)),X38,'type.semanticPrimitives.result'(X35,X36)),X36,X35)) | s('type.semanticPrimitives.result'(X35,X36),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X35,X36),X37)),X38,'type.semanticPrimitives.result'(X35,X36))) = s('type.semanticPrimitives.result'(X35,X36),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X36),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X35,X36),X37)),X38,'type.semanticPrimitives.result'(X35,X36)),X36,X35))))) )),
  inference(superposition,[],[f749,f765])).
fof(f6372,plain,(
  ( ! [X34] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X34))) | s(sK0,X34) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))),sK1,sK0))) ) | $spl28),
  inference(subsumption_resolution,[],[f6313,f164])).
fof(f6313,plain,(
  ( ! [X34] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X34))) | s(sK0,X34) = s(sK0,sK4('const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))),sK1,sK0)) | s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))),sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f749,f6150])).
fof(f6369,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),X27))) != s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26))))) | s('type.list.list'(X24),X27) = s('type.list.list'(X24),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0')))),X25,'type.list.list'(X24)))) )),
  inference(subsumption_resolution,[],[f6309,f164])).
fof(f6309,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),X27))) != s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26))))) | s('type.list.list'(X24),X27) = s('type.list.list'(X24),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0')))),X25,'type.list.list'(X24))) | s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0')))),X25,'type.list.list'(X24)))))) )),
  inference(superposition,[],[f749,f156])).
fof(f6368,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),X23))) != s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X22),s('type.list.list'(X20),'const.list.NIL_0'))))) | s('type.list.list'(X20),X23) = s('type.list.list'(X20),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22)))),X21,'type.list.list'(X20)))) )),
  inference(subsumption_resolution,[],[f6308,f659])).
fof(f6308,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),X23))) != s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,X22),s('type.list.list'(X20),'const.list.NIL_0'))))) | s('type.list.list'(X20),X23) = s('type.list.list'(X20),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22)))),X21,'type.list.list'(X20))) | s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22))))) = s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,X22)))),X21,'type.list.list'(X20)))))) )),
  inference(superposition,[],[f749,f156])).
fof(f6367,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(X8,X9),X10) != s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,X11))) | s(X8,X11) = s(X8,sK4('const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))),X9,X8)) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8))))) )),
  inference(subsumption_resolution,[],[f6304,f164])).
fof(f6304,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(X8,X9),X10) != s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,X11))) | s(X8,X11) = s(X8,sK4('const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))),X9,X8)) | s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8)))) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5('const.semanticPrimitives.Rval_1'(s(X8,sK4(X10,X9,X8))),X9,X8)))) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,X8))))) )),
  inference(superposition,[],[f749,f157])).
fof(f6366,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),X6) != s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X7))) | s(X4,X7) = s(X4,sK4('const.semanticPrimitives.Rval_1'(s(X4,sK4(X6,X5,X4))),X5,X4)) | s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(subsumption_resolution,[],[f6303,f164])).
fof(f6303,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),X6) != s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X7))) | s(X4,X7) = s(X4,sK4('const.semanticPrimitives.Rval_1'(s(X4,sK4(X6,X5,X4))),X5,X4)) | s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK4(X6,X5,X4)))) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5('const.semanticPrimitives.Rval_1'(s(X4,sK4(X6,X5,X4))),X5,X4)))) | s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f749,f733])).
fof(f6299,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rval_1'(s(X0,X1)))),X2,'type.list.list'(X0)))) )),
  inference(unit_resulting_resolution,[],[f156,f659,f749])).
fof(f6254,plain,(
  ( ! [X10] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),X10) | s('type.semanticPrimitives.result'(sK0,sK1),X10) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(X10,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f734,f6150])).
fof(f6252,plain,(
  ( ! [X8] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X8))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X8) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f657,f6150])).
fof(f6251,plain,(
  ( ! [X6,X7,X5] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X6))),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X7)))) ) | $spl28),
  inference(superposition,[],[f542,f6150])).
fof(f6250,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X4)))))) ) | $spl28),
  inference(superposition,[],[f231,f6150])).
fof(f6249,plain,(
  ( ! [X2] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X2)))) ) | $spl28),
  inference(superposition,[],[f164,f6150])).
fof(f6247,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK0,sK1),sK2) != s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X0))) | s(sK0,X0) = s(sK0,sK4(sK2,sK1,sK0))) ) | $spl28),
  inference(superposition,[],[f160,f6150])).
fof(f6230,plain,(
  ( ! [X151,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'(X147,X148),X149) != s('type.semanticPrimitives.result'(X147,X148),X150) | s('type.list.list'('type.semanticPrimitives.result'(X147,X148)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X147,X148),X150),s('type.list.list'('type.semanticPrimitives.result'(X147,X148)),X151))) = s('type.list.list'('type.semanticPrimitives.result'(X147,X148)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X147,X148),'const.semanticPrimitives.Rval_1'(s(X147,sK4(X149,X148,X147)))),s('type.list.list'('type.semanticPrimitives.result'(X147,X148)),X151))) | s('type.semanticPrimitives.result'('type.list.list'(X147),X148),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X147,X148),X149))) = s('type.semanticPrimitives.result'('type.list.list'(X147),X148),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X148),sK5(X149,X148,X147))))) )),
  inference(superposition,[],[f918,f733])).
fof(f6226,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X128,X129)),X131),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X128,X129)),X132))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X128,X129)),X131),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X128,X129),X131),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X128,X129),X130))))) | s('type.list.list'('type.semanticPrimitives.result'(X128,X129)),X132) = s('type.list.list'('type.semanticPrimitives.result'(X128,X129)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X128,X129),'const.semanticPrimitives.Rval_1'(s(X128,sK4(X130,X129,X128)))),s('type.list.list'('type.semanticPrimitives.result'(X128,X129)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X128),X129),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X128,X129),X130))) = s('type.semanticPrimitives.result'('type.list.list'(X128),X129),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X129),sK5(X130,X129,X128))))) )),
  inference(superposition,[],[f657,f733])).
fof(f6221,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s('type.semanticPrimitives.result'(X100,X101),X102) != s('type.semanticPrimitives.result'(X100,X101),X103) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X100,X101),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X100,X101),X103))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X100,X101),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X100,X101),'const.semanticPrimitives.Rval_1'(s(X100,sK4(X102,X101,X100)))))) | s('type.semanticPrimitives.result'('type.list.list'(X100),X101),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X100,X101),X102))) = s('type.semanticPrimitives.result'('type.list.list'(X100),X101),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X101),sK5(X102,X101,X100))))) )),
  inference(superposition,[],[f161,f733])).
fof(f6219,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X90,X91),X93),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X90,X91),X92))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X90,X91),X93),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X90,X91),X94))) | s('type.semanticPrimitives.result'(X90,X91),X94) = s('type.semanticPrimitives.result'(X90,X91),'const.semanticPrimitives.Rval_1'(s(X90,sK4(X92,X91,X90)))) | s('type.semanticPrimitives.result'('type.list.list'(X90),X91),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X90,X91),X92))) = s('type.semanticPrimitives.result'('type.list.list'(X90),X91),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X91),sK5(X92,X91,X90))))) )),
  inference(superposition,[],[f160,f733])).
fof(f6214,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.list.list'('type.semanticPrimitives.result'(X62,X63)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X62,X63),X64),s('type.list.list'('type.semanticPrimitives.result'(X62,X63)),X65))) != s('type.list.list'('type.semanticPrimitives.result'(X62,X63)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X62,X63),X66),s('type.list.list'('type.semanticPrimitives.result'(X62,X63)),X67))) | s('type.semanticPrimitives.result'(X62,X63),X66) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK4(X64,X63,X62)))) | s('type.semanticPrimitives.result'('type.list.list'(X62),X63),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X62,X63),X64))) = s('type.semanticPrimitives.result'('type.list.list'(X62),X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK5(X64,X63,X62))))) )),
  inference(superposition,[],[f148,f733])).
fof(f6212,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X60) != s('type.semanticPrimitives.result'('type.list.list'(X58),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X58,X59),'const.semanticPrimitives.Rval_1'(s(X58,X61))))) | s('type.list.list'(X58),sK4(X60,X59,'type.list.list'(X58))) = s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X61),s('type.list.list'(X58),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X58)),X59),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X58),X59),X60))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X58)),X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK5(X60,X59,'type.list.list'(X58)))))) )),
  inference(superposition,[],[f657,f733])).
fof(f6209,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.semanticPrimitives.result'(X46,X47),X48) != s('type.semanticPrimitives.result'(X46,X47),X49) | s('type.semanticPrimitives.result'(X46,X47),X49) = s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,sK4(X49,X47,X46)))) | s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),X48))) = s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK5(X48,X47,X46))))) )),
  inference(superposition,[],[f734,f733])).
fof(f6208,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),X45))) != s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X42,X43),X44))) | s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X42,X43),X44))) = s('type.semanticPrimitives.result'('type.list.list'(X42),X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),sK5(X44,X43,X42))))) )),
  inference(superposition,[],[f659,f733])).
fof(f6207,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.semanticPrimitives.result'('type.list.list'(X38),X39),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X38),X41))) != s('type.semanticPrimitives.result'('type.list.list'(X38),X39),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X38,X39),X40))) | s('type.list.list'(X38),X41) = s('type.list.list'(X38),'const.list.CONS_2'(s(X38,sK4(X40,X39,X38)),s('type.list.list'(X38),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X38),X39),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X38,X39),X40))) = s('type.semanticPrimitives.result'('type.list.list'(X38),X39),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X39),sK5(X40,X39,X38))))) )),
  inference(superposition,[],[f657,f733])).
fof(f6206,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s('type.list.list'('type.semanticPrimitives.result'(X32,X33)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X32,X33),X34),s('type.list.list'('type.semanticPrimitives.result'(X32,X33)),X35))) != s('type.list.list'('type.semanticPrimitives.result'(X32,X33)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X32,X33),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X33),X36))),s('type.list.list'('type.semanticPrimitives.result'(X32,X33)),X37))) | s('type.semanticPrimitives.result'('type.list.list'(X32),X33),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X32,X33),X34))) = s('type.semanticPrimitives.result'('type.list.list'(X32),X33),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X33),sK5(X34,X33,X32))))) )),
  inference(superposition,[],[f542,f733])).
fof(f6205,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X27,X28),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X27,X28),X29))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X27,X28),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X27,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),X31))))) | s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X27,X28),X29))) = s('type.semanticPrimitives.result'('type.list.list'(X27),X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),sK5(X29,X28,X27))))) )),
  inference(superposition,[],[f231,f733])).
fof(f6204,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.semanticPrimitives.result'(X23,X24),X25) != s('type.semanticPrimitives.result'(X23,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),X26))) | s('type.semanticPrimitives.result'('type.list.list'(X23),X24),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X23,X24),X25))) = s('type.semanticPrimitives.result'('type.list.list'(X23),X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK5(X25,X24,X23))))) )),
  inference(superposition,[],[f164,f733])).
fof(f6202,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.semanticPrimitives.result'(X15,X16),X17) != s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,X18))) | s(X15,X18) = s(X15,sK4(X17,X16,X15)) | s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),X17))) = s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f160,f733])).
fof(f6201,plain,(
  ( ! [X14,X12,X13] : (s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK4(X14,X13,X12)),s('type.list.list'(X12),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X12,X13),X14))) = s('type.semanticPrimitives.result'('type.list.list'(X12),X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f156,f733])).
fof(f6196,plain,(
  ( ! [X132,X130,X133,X131,X129] : (s('type.semanticPrimitives.result'('type.list.list'(X129),X130),X132) != s('type.semanticPrimitives.result'('type.list.list'(X129),X130),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X129,X130),X131))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X129),X130)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X129),X130),X132),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X129),X130)),X133))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X129),X130)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X129),X130),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X130),sK5(X131,X130,X129)))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X129),X130)),X133))) | s('type.semanticPrimitives.result'(X129,X130),X131) = s('type.semanticPrimitives.result'(X129,X130),'const.semanticPrimitives.Rval_1'(s(X129,sK4(X131,X130,X129))))) )),
  inference(superposition,[],[f918,f733])).
fof(f6192,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),X113),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),X114))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),X113),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X110),X111),X113),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X110),X111),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X110,X111),X112))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),X114) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X110),X111),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X111),sK5(X112,X111,X110)))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X110),X111)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X110,X111),X112) = s('type.semanticPrimitives.result'(X110,X111),'const.semanticPrimitives.Rval_1'(s(X110,sK4(X112,X111,X110))))) )),
  inference(superposition,[],[f657,f733])).
fof(f6187,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.semanticPrimitives.result'('type.list.list'(X82),X83),X85) != s('type.semanticPrimitives.result'('type.list.list'(X82),X83),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X82,X83),X84))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X82),X83),X86),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X82),X83),X85))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X82),X83),X86),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X82),X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),sK5(X84,X83,X82)))))) | s('type.semanticPrimitives.result'(X82,X83),X84) = s('type.semanticPrimitives.result'(X82,X83),'const.semanticPrimitives.Rval_1'(s(X82,sK4(X84,X83,X82))))) )),
  inference(superposition,[],[f161,f733])).
fof(f6185,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X75),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X72),X73),X76))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X72),X73),X75),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X72,X73),X74))))) | s('type.semanticPrimitives.result'('type.list.list'(X72),X73),X76) = s('type.semanticPrimitives.result'('type.list.list'(X72),X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),sK5(X74,X73,X72)))) | s('type.semanticPrimitives.result'(X72,X73),X74) = s('type.semanticPrimitives.result'(X72,X73),'const.semanticPrimitives.Rval_1'(s(X72,sK4(X74,X73,X72))))) )),
  inference(superposition,[],[f160,f733])).
fof(f6180,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X44),X45)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),X48),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X44),X45)),X49))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X44),X45)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X44,X45),X46))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X44),X45)),X47))) | s('type.semanticPrimitives.result'('type.list.list'(X44),X45),X48) = s('type.semanticPrimitives.result'('type.list.list'(X44),X45),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X45),sK5(X46,X45,X44)))) | s('type.semanticPrimitives.result'(X44,X45),X46) = s('type.semanticPrimitives.result'(X44,X45),'const.semanticPrimitives.Rval_1'(s(X44,sK4(X46,X45,X44))))) )),
  inference(superposition,[],[f148,f733])).
fof(f6178,plain,(
  ( ! [X42] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),X42))) | s('type.semanticPrimitives.result'(sK0,sK1),X42) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(X42,sK1,sK0))))) ) | $spl28),
  inference(superposition,[],[f4230,f733])).
fof(f6175,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.semanticPrimitives.result'('type.list.list'(X30),X31),X33) != s('type.semanticPrimitives.result'('type.list.list'(X30),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X30,X31),X32))) | s('type.semanticPrimitives.result'('type.list.list'(X30),X31),X33) = s('type.semanticPrimitives.result'('type.list.list'(X30),X31),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X31),sK5(X33,X31,'type.list.list'(X30))))) | s('type.semanticPrimitives.result'(X30,X31),X32) = s('type.semanticPrimitives.result'(X30,X31),'const.semanticPrimitives.Rval_1'(s(X30,sK4(X32,X31,X30))))) )),
  inference(superposition,[],[f751,f733])).
fof(f6174,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X24),X25)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),X27))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X24),X25)),X28))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X24),X25)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),X26))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X24),X25)),X29))) | s('type.semanticPrimitives.result'(X24,X25),X26) = s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,sK4(X26,X25,X24))))) )),
  inference(superposition,[],[f542,f733])).
fof(f6173,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X19),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),X23))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X19),X20),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),X21))))) | s('type.semanticPrimitives.result'(X19,X20),X21) = s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,sK4(X21,X20,X19))))) )),
  inference(superposition,[],[f231,f733])).
fof(f6172,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X15),X18))) != s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),X17))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(X17,X16,X15))))) )),
  inference(superposition,[],[f164,f733])).
fof(f6170,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X10))) != s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),X9))) | s('type.semanticPrimitives.error_result'(X8),X10) = s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,X7)) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,sK4(X9,X8,X7))))) )),
  inference(superposition,[],[f162,f733])).
fof(f6169,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4)))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK4(X6,X5,X4))))) )),
  inference(superposition,[],[f155,f733])).
fof(f6168,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f659,f733])).
fof(f6150,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f733])).
fof(f5414,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X2),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f542,f157])).
fof(f5410,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),X14),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X15))) != s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X16))),s('type.list.list'('type.semanticPrimitives.result'(X12,X13)),X17))) | s('type.semanticPrimitives.result'(X12,X13),X14) = s('type.semanticPrimitives.result'(X12,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),sK5(X14,X13,X12))))) )),
  inference(superposition,[],[f542,f157])).
fof(f5366,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5)))))) )),
  inference(unit_resulting_resolution,[],[f542,f657])).
fof(f5373,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5)))))) )),
  inference(unit_resulting_resolution,[],[f542,f657])).
fof(f5374,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X2),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),X5),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X6))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X7)))))) )),
  inference(unit_resulting_resolution,[],[f542,f149])).
fof(f5375,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(X0,X1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X3))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(X0,X1))),X4))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(X0,X1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X6))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(X0,X1))),X7)))) )),
  inference(unit_resulting_resolution,[],[f542,f148])).
fof(f5376,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X4))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X2),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X6)))))) )),
  inference(unit_resulting_resolution,[],[f542,f160])).
fof(f5060,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X6),X9))) != s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),X8))) | s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK4(X8,X7,X6)),s('type.list.list'(X6),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X6,X7),X8) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X8,X7,X6))))) )),
  inference(superposition,[],[f657,f157])).
fof(f5059,plain,(
  ( ! [X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),X5))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.list.list'('type.list.list'(sK0)),X5) = s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f657,f4240])).
fof(f5057,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),X3))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))) | s('type.list.list'('type.list.list'(X0)),X3) = s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f156])).
fof(f5055,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X96,X97)),X99),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X96,X97)),X100))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X96,X97)),X99),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X96,X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X96,X97),X98))))) | s('type.list.list'('type.semanticPrimitives.result'(X96,X97)),X100) = s('type.list.list'('type.semanticPrimitives.result'(X96,X97)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,sK4(X98,X97,X96)))),s('type.list.list'('type.semanticPrimitives.result'(X96,X97)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X96,X97),X98) = s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(X98,X97,X96))))) )),
  inference(superposition,[],[f657,f157])).
fof(f5054,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X91,X92)),X94),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(X91,X92)),X95))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X91,X92)),X94),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X91,X92),X94),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X91,X92),X93))))) | s('type.list.list'('type.semanticPrimitives.result'(X91,X92)),X95) = s('type.list.list'('type.semanticPrimitives.result'(X91,X92)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X91,X92),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X92),sK5(X93,X92,X91)))),s('type.list.list'('type.semanticPrimitives.result'(X91,X92)),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X91,X92),X93) = s('type.semanticPrimitives.result'(X91,X92),'const.semanticPrimitives.Rval_1'(s(X91,sK4(X93,X92,X91))))) )),
  inference(superposition,[],[f657,f157])).
fof(f5051,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),X85),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),X86))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),X85),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X82),X83),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X82),X83),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X82,X83),'const.semanticPrimitives.Rval_1'(s(X82,X84))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),X86) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X82),X83),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X82),'const.list.CONS_2'(s(X82,X84),s('type.list.list'(X82),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X82),X83)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f156])).
fof(f5050,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),X80),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),X81))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),X80),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X77),X78),X80),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X77),X78),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X77),'const.list.CONS_2'(s(X77,X79),s('type.list.list'(X77),'const.list.NIL_0'))))))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),X81) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X77),X78),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X77,X78),'const.semanticPrimitives.Rval_1'(s(X77,X79))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X77),X78)),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f156])).
fof(f5037,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X35))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,X33))))) | s('type.list.list'(bool),X35) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f657,f171])).
fof(f5032,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X14),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X15))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X14),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rval_1'(s(bool,X13))))) | s('type.list.list'(bool),X15) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X12),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f657,f171])).
fof(f5031,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X9),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X10))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X10) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f657,f171])).
fof(f5028,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X6),X7),X8) != s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X9))))) | s('type.list.list'(X6),sK4(X8,X7,'type.list.list'(X6))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(X6),X7),X8) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),sK5(X8,X7,'type.list.list'(X6)))))) )),
  inference(superposition,[],[f657,f157])).
fof(f5027,plain,(
  ( ! [X5] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X5))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f657,f4240])).
fof(f5025,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f657,f156])).
fof(f5024,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X3),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X1))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X3),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rval_1'(s(X0,X4))))) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X1)),X2,'type.list.list'(X0)))) )),
  inference(superposition,[],[f657,f765])).
fof(f5021,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1)))))) )),
  inference(unit_resulting_resolution,[],[f541,f657])).
fof(f4696,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X0) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f160,f4240])).
fof(f4240,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f157])).
fof(f4247,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X0) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X0) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X0,sK1,'type.list.list'(sK0)))))) ) | $spl28),
  inference(superposition,[],[f4230,f157])).
fof(f4242,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),X2)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f148])).
fof(f4243,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X1))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f4230,f160])).
fof(f4234,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.semanticPrimitives.result'(X22,X23),X24) = s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X22,X23),X24)),X25,'type.semanticPrimitives.result'(X22,X23)),X23,X22)))) | s('type.semanticPrimitives.result'(X22,X23),X24) != s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X26)))) )),
  inference(forward_demodulation,[],[f4221,f765])).
fof(f4221,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.semanticPrimitives.result'(X22,X23),X24) != s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X26))) | s('type.semanticPrimitives.result'(X22,X23),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X22,X23),X24)),X25,'type.semanticPrimitives.result'(X22,X23))) = s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X22,X23),X24)),X25,'type.semanticPrimitives.result'(X22,X23)),X23,X22))))) )),
  inference(superposition,[],[f751,f765])).
fof(f4228,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X1,'type.list.list'(X0)))))) )),
  inference(forward_demodulation,[],[f4210,f155])).
fof(f4210,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X1,'type.list.list'(X0)))))) )),
  inference(unit_resulting_resolution,[],[f155,f751])).
fof(f4227,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f4211,f765])).
fof(f4211,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f765,f751])).
fof(f4150,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f231,f157])).
fof(f4147,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),X7))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X5,X6),X8),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X9))))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK5(X7,X6,X5))))) )),
  inference(superposition,[],[f231,f157])).
fof(f4125,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2)),X4))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2)),X6)))) )),
  inference(unit_resulting_resolution,[],[f231,f148])).
fof(f4126,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5)))))))) )),
  inference(unit_resulting_resolution,[],[f231,f160])).
fof(f4092,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),X6) != s('type.semanticPrimitives.result'(X4,X5),X7) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK4(X7,X5,X4)))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f734,f157])).
fof(f4105,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.semanticPrimitives.result'(X21,X22),X23) = s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rval_1'(s(X21,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X21,X22),X23)),X24,'type.semanticPrimitives.result'(X21,X22)),X22,X21)))) | s('type.semanticPrimitives.result'(X21,X22),X23) != s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rval_1'(s(X21,X25)))) )),
  inference(forward_demodulation,[],[f4068,f765])).
fof(f4068,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.semanticPrimitives.result'(X21,X22),X23) != s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rval_1'(s(X21,X25))) | s('type.semanticPrimitives.result'(X21,X22),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X21,X22),X23)),X24,'type.semanticPrimitives.result'(X21,X22))) = s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rval_1'(s(X21,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X21,X22),X23)),X24,'type.semanticPrimitives.result'(X21,X22)),X22,X21))))) )),
  inference(superposition,[],[f734,f765])).
fof(f4100,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f4060,f765])).
fof(f4060,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f765,f734])).
fof(f1945,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)) | s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) )),
  inference(equality_factoring,[],[f1729])).
fof(f2393,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1945,f112])).
fof(f3042,plain,(
  ( ! [X59,X60,X58,X56] : (s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X56))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X59))) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X60,bool))) )),
  inference(forward_demodulation,[],[f2696,f765])).
fof(f2696,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X59))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X57,bool)))) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X60,bool))) )),
  inference(trivial_inequality_removal,[],[f2688])).
fof(f2688,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X59))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X57,bool)))) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X60,bool))) )),
  inference(superposition,[],[f256,f947])).
fof(f2037,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X4,bool))) )),
  inference(superposition,[],[f1832,f1832])).
fof(f1672,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f833])).
fof(f1663,plain,(
  ( ! [X134,X138,X136,X135,X137] : (s('type.semanticPrimitives.result'(bool,X137),'const.semanticPrimitives.Rval_1'(s(bool,X136))) != s('type.semanticPrimitives.result'(bool,X137),'const.semanticPrimitives.Rval_1'(s(bool,X138))) | s(bool,X138) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X134)),X135,bool)) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,X136)) )),
  inference(superposition,[],[f160,f833])).
fof(f1658,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X108),s('type.list.list'(bool),X109))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X110),s('type.list.list'(bool),X111))) | s(bool,X110) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X106)),X107,bool)) | s(bool,'T_0') = s(bool,X106) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f148,f833])).
fof(f1625,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X195) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X193)),X194,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X192),s('type.list.list'(bool),X196))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X195),s('type.list.list'(bool),X196))) | s(bool,'T_0') = s(bool,X193) | s(bool,'T_0') = s(bool,X192)) )),
  inference(superposition,[],[f918,f833])).
fof(f1620,plain,(
  ( ! [X171,X169,X172,X170,X168] : (s(bool,X171) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X169)),X170,bool)) | s('type.semanticPrimitives.result'(bool,X172),'const.semanticPrimitives.Rval_1'(s(bool,X168))) = s('type.semanticPrimitives.result'(bool,X172),'const.semanticPrimitives.Rval_1'(s(bool,X171))) | s(bool,'T_0') = s(bool,X169) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f161,f833])).
fof(f1560,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,X56) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X58)),X59,bool)) | s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X56)),X57,bool))) )),
  inference(superposition,[],[f833,f765])).
fof(f1477,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1418,f112])).
fof(f1171,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s('type.semanticPrimitives.result'(X61,X62),X63) != s('type.semanticPrimitives.result'(X61,X62),X64) | s('type.list.list'('type.semanticPrimitives.result'(X61,X62)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X61,X62),X64),s('type.list.list'('type.semanticPrimitives.result'(X61,X62)),X65))) = s('type.list.list'('type.semanticPrimitives.result'(X61,X62)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X61,X62),'const.semanticPrimitives.Rval_1'(s(X61,sK4(X63,X62,X61)))),s('type.list.list'('type.semanticPrimitives.result'(X61,X62)),X65))) | s('type.semanticPrimitives.result'(X61,X62),X63) = s('type.semanticPrimitives.result'(X61,X62),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X62),sK5(X63,X62,X61))))) )),
  inference(superposition,[],[f918,f157])).
fof(f1170,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s('type.semanticPrimitives.result'(X56,X57),X58) != s('type.semanticPrimitives.result'(X56,X57),X59) | s('type.list.list'('type.semanticPrimitives.result'(X56,X57)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X56,X57),X59),s('type.list.list'('type.semanticPrimitives.result'(X56,X57)),X60))) = s('type.list.list'('type.semanticPrimitives.result'(X56,X57)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X56,X57),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X57),sK5(X58,X57,X56)))),s('type.list.list'('type.semanticPrimitives.result'(X56,X57)),X60))) | s('type.semanticPrimitives.result'(X56,X57),X58) = s('type.semanticPrimitives.result'(X56,X57),'const.semanticPrimitives.Rval_1'(s(X56,sK4(X58,X57,X56))))) )),
  inference(superposition,[],[f918,f157])).
fof(f1169,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.semanticPrimitives.result'('type.list.list'(X51),X52),X54) != s('type.semanticPrimitives.result'('type.list.list'(X51),X52),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,X53))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X51),X52)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X51),X52),X54),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X51),X52)),X55))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X51),X52)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X51),X52),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X51),'const.list.CONS_2'(s(X51,X53),s('type.list.list'(X51),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X51),X52)),X55)))) )),
  inference(superposition,[],[f918,f156])).
fof(f1168,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49) != s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X46),'const.list.CONS_2'(s(X46,X48),s('type.list.list'(X46),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),X49),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X50))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X46),X47),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X46,X47),'const.semanticPrimitives.Rval_1'(s(X46,X48))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X46),X47)),X50)))) )),
  inference(superposition,[],[f918,f156])).
fof(f1162,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) != s(bool,X25) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X26))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X25),s('type.list.list'(bool),X26))) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f918,f171])).
fof(f1159,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X14) != s(bool,X15) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X13),s('type.list.list'(bool),X16))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f918,f171])).
fof(f1157,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'T_0') != s(bool,X6) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X7))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X6),s('type.list.list'(bool),X7))) | s(bool,X5) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f918,f171])).
fof(f1072,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X65),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X65),X69))) | s('type.semanticPrimitives.error_result'(X65),X69) = s('type.semanticPrimitives.error_result'(X65),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),X66)),X65,X67))) )),
  inference(superposition,[],[f160,f1017])).
fof(f1067,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s('type.list.list'('type.semanticPrimitives.error_result'(X37)),'const.list.CONS_2'(s('type.semanticPrimitives.error_result'(X37),X38),s('type.list.list'('type.semanticPrimitives.error_result'(X37)),X40))) != s('type.list.list'('type.semanticPrimitives.error_result'(X37)),'const.list.CONS_2'(s('type.semanticPrimitives.error_result'(X37),X41),s('type.list.list'('type.semanticPrimitives.error_result'(X37)),X42))) | s('type.semanticPrimitives.error_result'(X37),X41) = s('type.semanticPrimitives.error_result'(X37),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X37),X38)),X37,X39))) )),
  inference(superposition,[],[f148,f1017])).
fof(f1061,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.semanticPrimitives.result'(X10,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X8))) != s('type.semanticPrimitives.result'(X10,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X11))) | s('type.semanticPrimitives.error_result'(X7),X11) = s('type.semanticPrimitives.error_result'(X7),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X8)),X7,X9))) )),
  inference(superposition,[],[f162,f1017])).
fof(f1022,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X5))) != s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))) | s('type.semanticPrimitives.error_result'(X4),X6) = s('type.semanticPrimitives.error_result'(X4),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X5)),X4,X3))) )),
  inference(superposition,[],[f162,f723])).
fof(f1017,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),X1) = s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2))) )),
  inference(unit_resulting_resolution,[],[f723,f162])).
fof(f1004,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f993,f109])).
fof(f993,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f985,f171])).
fof(f918,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(equality_resolution,[],[f150])).
fof(f920,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3)))) )),
  inference(forward_demodulation,[],[f910,f765])).
fof(f910,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3))) = s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3)),X4,'type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1))))))) )),
  inference(unit_resulting_resolution,[],[f156,f765,f150])).
fof(f873,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'(X149,X146),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X146),X147))) != s('type.semanticPrimitives.result'(X149,X146),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X146),X150))) | s('type.semanticPrimitives.error_result'(X146),X150) = s('type.semanticPrimitives.error_result'(X146),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X146),X147)),X148,'type.semanticPrimitives.error_result'(X146)))) )),
  inference(superposition,[],[f162,f765])).
fof(f861,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X98),s('type.list.list'(X95),X99))) != s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X100),s('type.list.list'(X95),X96))) | s('type.list.list'(X95),X99) = s('type.list.list'(X95),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(X95),X96)),X97,'type.list.list'(X95)))) )),
  inference(superposition,[],[f149,f765])).
fof(f843,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s('type.semanticPrimitives.result'(X31,X34),'const.semanticPrimitives.Rval_1'(s(X31,X32))) != s('type.semanticPrimitives.result'(X31,X34),'const.semanticPrimitives.Rval_1'(s(X31,X35))) | s(X31,X35) = s(X31,sK4('const.semanticPrimitives.Rval_1'(s(X31,X32)),X33,X31))) )),
  inference(superposition,[],[f160,f765])).
fof(f838,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X4),s('type.list.list'(X3),X6))) != s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X7),s('type.list.list'(X3),X8))) | s(X3,X7) = s(X3,sK4('const.semanticPrimitives.Rval_1'(s(X3,X4)),X5,X3))) )),
  inference(superposition,[],[f148,f765])).
fof(f835,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X6)),X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f765,f171])).
fof(f833,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f765,f171])).
fof(f789,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X12))) != s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X13))) | s(X10,X13) = s(X10,sK4('const.semanticPrimitives.Rval_1'(s(X10,X12)),X11,X10))) )),
  inference(superposition,[],[f160,f724])).
fof(f786,plain,(
  ( ! [X12,X13] : (s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool))) )),
  inference(superposition,[],[f724,f112])).
fof(f784,plain,(
  ( ! [X6,X8,X7] : (s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X8))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X6)),X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f724,f171])).
fof(f782,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f724,f171])).
fof(f765,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0))) )),
  inference(unit_resulting_resolution,[],[f724,f160])).
fof(f759,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'(X57,X58),X59) != s('type.semanticPrimitives.result'(X57,X58),X60) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X57,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X57,X58),X60))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X57,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,sK4(X59,X58,X57)))))) | s('type.semanticPrimitives.result'(X57,X58),X59) = s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),sK5(X59,X58,X57))))) )),
  inference(superposition,[],[f161,f157])).
fof(f757,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X47,X48),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X47,X48),X49))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X47,X48),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X47,X48),X51))) | s('type.semanticPrimitives.result'(X47,X48),X51) = s('type.semanticPrimitives.result'(X47,X48),'const.semanticPrimitives.Rval_1'(s(X47,sK4(X49,X48,X47)))) | s('type.semanticPrimitives.result'(X47,X48),X49) = s('type.semanticPrimitives.result'(X47,X48),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X48),sK5(X49,X48,X47))))) )),
  inference(superposition,[],[f160,f157])).
fof(f752,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X19,X20),X21),s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),X22))) != s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X19,X20),X23),s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),X24))) | s('type.semanticPrimitives.result'(X19,X20),X23) = s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,sK4(X21,X20,X19)))) | s('type.semanticPrimitives.result'(X19,X20),X21) = s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X21,X20,X19))))) )),
  inference(superposition,[],[f148,f157])).
fof(f751,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.semanticPrimitives.result'(X15,X16),X17) != s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),X18))) | s('type.semanticPrimitives.result'(X15,X16),X17) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,X15))))) )),
  inference(superposition,[],[f164,f157])).
fof(f749,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'(X7,X8),X9) != s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X10))) | s(X7,X10) = s(X7,sK4(X9,X8,X7)) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK5(X9,X8,X7))))) )),
  inference(superposition,[],[f160,f157])).
fof(f748,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,sK4(X6,X5,X4)),s('type.list.list'(X4),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(X4,X5),X6) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,X4))))) )),
  inference(superposition,[],[f156,f157])).
fof(f747,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f659,f157])).
fof(f743,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.semanticPrimitives.result'(X57,X58),X59) != s('type.semanticPrimitives.result'(X57,X58),X60) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X57,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X57,X58),X60))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X57,X58),X61),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),sK5(X59,X58,X57)))))) | s('type.semanticPrimitives.result'(X57,X58),X59) = s('type.semanticPrimitives.result'(X57,X58),'const.semanticPrimitives.Rval_1'(s(X57,sK4(X59,X58,X57))))) )),
  inference(superposition,[],[f161,f157])).
fof(f741,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X47,X48),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X47,X48),X49))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X47,X48),X50),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X47,X48),X51))) | s('type.semanticPrimitives.result'(X47,X48),X51) = s('type.semanticPrimitives.result'(X47,X48),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X48),sK5(X49,X48,X47)))) | s('type.semanticPrimitives.result'(X47,X48),X49) = s('type.semanticPrimitives.result'(X47,X48),'const.semanticPrimitives.Rval_1'(s(X47,sK4(X49,X48,X47))))) )),
  inference(superposition,[],[f160,f157])).
fof(f736,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X19,X20),X21),s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),X22))) != s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X19,X20),X23),s('type.list.list'('type.semanticPrimitives.result'(X19,X20)),X24))) | s('type.semanticPrimitives.result'(X19,X20),X23) = s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),sK5(X21,X20,X19)))) | s('type.semanticPrimitives.result'(X19,X20),X21) = s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,sK4(X21,X20,X19))))) )),
  inference(superposition,[],[f148,f157])).
fof(f735,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(X15),X16),X17) != s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,X18))))) | s('type.semanticPrimitives.result'('type.list.list'(X15),X16),X17) = s('type.semanticPrimitives.result'('type.list.list'(X15),X16),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X15),sK4(X17,X16,'type.list.list'(X15)))))) )),
  inference(superposition,[],[f659,f157])).
fof(f734,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.semanticPrimitives.result'(X11,X12),X13) != s('type.semanticPrimitives.result'(X11,X12),'const.semanticPrimitives.Rval_1'(s(X11,X14))) | s('type.semanticPrimitives.result'(X11,X12),X13) = s('type.semanticPrimitives.result'(X11,X12),'const.semanticPrimitives.Rval_1'(s(X11,sK4(X13,X12,X11))))) )),
  inference(superposition,[],[f164,f157])).
fof(f731,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f162,f157])).
fof(f723,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f164,f157])).
fof(f724,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4('const.semanticPrimitives.Rval_1'(s(X0,X2)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f164,f157])).
fof(f725,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X1,'type.list.list'(X0)))))) )),
  inference(unit_resulting_resolution,[],[f659,f157])).
fof(f717,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))) )),
  inference(superposition,[],[f659,f156])).
fof(f703,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X5)))) )),
  inference(unit_resulting_resolution,[],[f659,f148])).
fof(f704,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4)))))))) )),
  inference(unit_resulting_resolution,[],[f659,f160])).
fof(f697,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X2)))) )),
  inference(unit_resulting_resolution,[],[f684,f148])).
fof(f698,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.NIL_0')))))))) )),
  inference(unit_resulting_resolution,[],[f684,f160])).
fof(f687,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK6(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f159,f171])).
fof(f685,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK6(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f159,f171])).
fof(f684,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f679,f156])).
fof(f682,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X2)))) )),
  inference(unit_resulting_resolution,[],[f679,f148])).
fof(f683,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))))))) )),
  inference(unit_resulting_resolution,[],[f679,f160])).
fof(f679,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))))) )),
  inference(superposition,[],[f660,f156])).
fof(f676,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X3)))) )),
  inference(unit_resulting_resolution,[],[f660,f148])).
fof(f677,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f660,f160])).
fof(f667,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.semanticPrimitives.result'('type.list.list'(X50),X51),X53) != s('type.semanticPrimitives.result'('type.list.list'(X50),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X50,X51),'const.semanticPrimitives.Rval_1'(s(X50,X52))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X50),X51),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X50),X51),X53))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X50),X51),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X50),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X50),'const.list.CONS_2'(s(X50,X52),s('type.list.list'(X50),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f161,f156])).
fof(f665,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X40),X41),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X40),X41),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X40,X41),'const.semanticPrimitives.Rval_1'(s(X40,X42))))))) | s('type.semanticPrimitives.result'('type.list.list'(X40),X41),X44) = s('type.semanticPrimitives.result'('type.list.list'(X40),X41),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X40),'const.list.CONS_2'(s(X40,X42),s('type.list.list'(X40),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f160,f156])).
fof(f661,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),X20),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),X21))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X18))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X16),X17)),X19))) | s('type.semanticPrimitives.result'('type.list.list'(X16),X17),X20) = s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f148,f156])).
fof(f660,plain,(
  ( ! [X14,X15] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X14),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X14),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X15)))))) )),
  inference(superposition,[],[f575,f156])).
fof(f659,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X11))) != s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,X10)))))) )),
  inference(superposition,[],[f164,f156])).
fof(f657,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f160,f156])).
fof(f654,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37) != s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X36),s('type.list.list'(X34),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),X37))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X38),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X36)))))))) )),
  inference(superposition,[],[f161,f156])).
fof(f652,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X24),X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),X28))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X24),X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X24),X25),X28) = s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26)))))) )),
  inference(superposition,[],[f160,f156])).
fof(f648,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X5))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X3))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X4) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))) )),
  inference(superposition,[],[f148,f156])).
fof(f635,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f156,f156])).
fof(f634,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))))))) )),
  inference(unit_resulting_resolution,[],[f156,f161])).
fof(f631,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X2))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0)),X4)))) )),
  inference(unit_resulting_resolution,[],[f575,f148])).
fof(f632,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3)))))))) )),
  inference(unit_resulting_resolution,[],[f575,f160])).
fof(f577,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X0),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),X2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X3)))))) )),
  inference(unit_resulting_resolution,[],[f541,f149])).
fof(f574,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X1))) != s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),'const.list.CONS_2'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2))),s('type.list.list'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1))),X3)))) )),
  inference(unit_resulting_resolution,[],[f541,f148])).
fof(f575,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1))))) != s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X2)))))) )),
  inference(unit_resulting_resolution,[],[f541,f160])).
fof(f552,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X24),s('type.list.list'(bool),X25))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X26),s('type.list.list'(bool),X27))) | s(bool,X23) = s(bool,X26) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f148,f171])).
fof(f550,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X14))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))) | s(bool,X13) = s(bool,X15) | s(bool,X13) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f148,f171])).
fof(f541,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK2),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X0))) != s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(sK0,sK1),sK3),s('type.list.list'('type.semanticPrimitives.result'(sK0,sK1)),X1)))) )),
  inference(unit_resulting_resolution,[],[f108,f148])).
fof(f542,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X3))) != s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4))),s('type.list.list'('type.semanticPrimitives.result'(X0,X1)),X5)))) )),
  inference(unit_resulting_resolution,[],[f164,f148])).
fof(f543,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0)),X2)))) )),
  inference(unit_resulting_resolution,[],[f230,f148])).
fof(f545,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1)),X2))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1)),X3)))) )),
  inference(unit_resulting_resolution,[],[f243,f148])).
fof(f498,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))))))) )),
  inference(unit_resulting_resolution,[],[f243,f160])).
fof(f361,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,X36))) | s(bool,X34) = s(bool,X36) | s(bool,X34) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f160,f171])).
fof(f359,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') != s(bool,X27) | s('type.semanticPrimitives.result'(bool,X28),'const.semanticPrimitives.Rval_1'(s(bool,X26))) = s('type.semanticPrimitives.result'(bool,X28),'const.semanticPrimitives.Rval_1'(s(bool,X27))) | s(bool,X26) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f161,f171])).
fof(f494,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f355,f109])).
fof(f355,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f154,f171])).
fof(f343,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X21) != s(bool,X22) | s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X22))) | s(bool,X21) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f161,f171])).
fof(f316,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,X37))) != s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,X39))) | s(bool,X36) = s(bool,X39) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f160,f171])).
fof(f314,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) != s(bool,X30) | s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,X28))) = s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f161,f171])).
fof(f282,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f171,f171])).
fof(f243,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))))) )),
  inference(unit_resulting_resolution,[],[f230,f160])).
fof(f230,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK0,sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)))) )),
  inference(unit_resulting_resolution,[],[f108,f160])).
fof(f231,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4)))))) )),
  inference(unit_resulting_resolution,[],[f164,f160])).
fof(f200,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f194,f111])).
fof(f194,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f151,f112])).
fof(f173,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f111,f112])).
fof(f171,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f112,f112])).
fof(f164,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : ! [X2,X3] : ~s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X7] : ! [X20,X19] : ~s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X19))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X20)))),
  file('thm.funBigStepProps.list_result_inj','thm.semanticPrimitives.result_distinct')).
fof(f162,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) & (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X7] : ! [X19,X20] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X19))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X20))) <=> s('type.semanticPrimitives.error_result'(X7),X19) = s('type.semanticPrimitives.error_result'(X7),X20))),
  file('thm.funBigStepProps.list_result_inj','thm.semanticPrimitives.result_|49||49||split|1')).
fof(f163,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))) )),
  inference(cnf_transformation,[],[f106])).
fof(f160,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) & (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X7,X6] : ! [X19,X20] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X19))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X20))) <=> s(X6,X19) = s(X6,X20))),
  file('thm.funBigStepProps.list_result_inj','thm.semanticPrimitives.result_|49||49||split|0')).
fof(f161,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))) )),
  inference(cnf_transformation,[],[f105])).
fof(f159,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.funBigStepProps.list_result_inj',aHL_EXT)).
fof(f156,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : ! [X2] : s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7,X6] : ! [X13] : s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X13))))) = s('type.semanticPrimitives.result'('type.list.list'(X6),X7),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.funBigStepProps.list_result_inj','thm.funBigStep.list_result_def|split|0')).
fof(f151,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X11,X12] : ((p(s(bool,X11)) => p(s(bool,X12))) => ((p(s(bool,X12)) => p(s(bool,X11))) => s(bool,X11) = s(bool,X12)))),
  file('thm.funBigStepProps.list_result_inj','thm.bool.IMP_ANTISYM_AX')).
fof(f154,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f148,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) = s(X0,X3)) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X15,X16,X17,X18] : (s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X16))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X18))) <=> (s(X6,X15) = s(X6,X17) & s('type.list.list'(X6),X16) = s('type.list.list'(X6),X18)))),
  file('thm.funBigStepProps.list_result_inj','thm.list.list_|49||49|')).
fof(f149,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) )),
  inference(cnf_transformation,[],[f102])).
fof(f150,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f102])).
fof(f112,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.funBigStepProps.list_result_inj',aHL_BOOL_CASES)).
fof(f109,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.funBigStepProps.list_result_inj',aHL_TRUTH)).
fof(f45791,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | ($spl26 | $spl28 | $spl172)),
  inference(backward_demodulation,[],[f45790,f34470])).
fof(f45790,plain,(
  s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK3,sK1,sK0)) | ($spl26 | $spl28 | $spl172)),
  inference(subsumption_resolution,[],[f45785,f38000])).
fof(f38000,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl28)),
  inference(forward_demodulation,[],[f37999,f35380])).
fof(f35380,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl28),
  inference(superposition,[],[f6299,f35299])).
fof(f37999,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl26 | $spl28)),
  inference(subsumption_resolution,[],[f37924,f35300])).
fof(f35300,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl28),
  inference(unit_resulting_resolution,[],[f34483,f157])).
fof(f37924,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl26 | $spl28)),
  inference(superposition,[],[f34467,f35380])).
fof(f34467,plain,(
  ( ! [X31] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X31))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X31) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) | $spl26),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4104,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f13366,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f15429,f14915,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32331,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f7018,f6942,f6179,f4647,f4644,f4643,f4642,f4265,f4261,f107,f33538,f33541,f33542,f6358,f6370,f5026,f5058,f6151,f5408,f33546,f4266,f4264,f33548,f33657,f34333,f34348,f34325,f33738,f34465,f34466])).
fof(f34465,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | $spl26),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4104,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f13366,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f15429,f14915,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32331,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f7018,f6942,f6179,f4647,f4644,f4643,f4642,f4265,f4261,f107,f33538,f33541,f33542,f6358,f6370,f5026,f5058,f6151,f5408,f33546,f4266,f4264,f33548,f33657,f34333,f34348,f34325,f33738])).
fof(f4264,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X4))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) ) | $spl26),
  inference(superposition,[],[f231,f4104])).
fof(f4266,plain,(
  ( ! [X6] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X6) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X6) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X6,sK1,'type.list.list'(sK0)))))) ) | $spl26),
  inference(superposition,[],[f734,f4104])).
fof(f33546,plain,(
  ( ! [X7] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X7))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) | $spl26),
  inference(subsumption_resolution,[],[f4267,f164])).
fof(f4267,plain,(
  ( ! [X7] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X7))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))),sK1,'type.list.list'(sK0)))))) ) | $spl26),
  inference(superposition,[],[f751,f4104])).
fof(f5408,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X7))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),X8))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1)),X6)))) ) | $spl26),
  inference(superposition,[],[f542,f4104])).
fof(f6151,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl26),
  inference(unit_resulting_resolution,[],[f4265,f733])).
fof(f5058,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),X4))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.list.list'('type.list.list'(sK0)),X4) = s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0')))) ) | $spl26),
  inference(superposition,[],[f657,f4104])).
fof(f5026,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,X4))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) | $spl26),
  inference(superposition,[],[f657,f4104])).
fof(f6370,plain,(
  ( ! [X28] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X28))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X28) = s('type.list.list'(sK0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))),sK1,'type.list.list'(sK0)))) ) | $spl26),
  inference(subsumption_resolution,[],[f6310,f164])).
fof(f6310,plain,(
  ( ! [X28] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X28))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X28) = s('type.list.list'(sK0),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))),sK1,'type.list.list'(sK0)))))) ) | $spl26),
  inference(superposition,[],[f749,f4104])).
fof(f6358,plain,(
  ( ! [X12] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X12) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),sK4(X12,sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X12) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(X12,sK1,'type.list.list'(sK0)))))) ) | $spl26),
  inference(superposition,[],[f749,f4104])).
fof(f33542,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | $spl26),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4104,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f5021,f5024,f5025,f5026,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5058,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f13366,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f15429,f14915,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32331,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f7018,f6942,f6179,f4647,f4644,f4643,f4642,f4265,f4261,f107,f33538,f33541])).
fof(f4261,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.list.list'(sK0),X0) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) | $spl26),
  inference(superposition,[],[f160,f4104])).
fof(f4265,plain,(
  ( ! [X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X5))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) ) | $spl26),
  inference(superposition,[],[f659,f4104])).
fof(f4642,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))),sK1,'type.list.list'('type.list.list'(sK0)))))) | $spl26),
  inference(unit_resulting_resolution,[],[f4265,f157])).
fof(f4643,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1)),X1))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1)),X2)))) ) | $spl26),
  inference(unit_resulting_resolution,[],[f4265,f148])).
fof(f4644,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X1))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))))) ) | $spl26),
  inference(unit_resulting_resolution,[],[f4265,f160])).
fof(f4647,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X0) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),sK4(X0,sK1,'type.list.list'('type.list.list'(sK0))))))) ) | $spl26),
  inference(superposition,[],[f4265,f157])).
fof(f6179,plain,(
  ( ! [X43] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X43))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X43) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4(X43,sK1,'type.list.list'(sK0)))))) ) | $spl26),
  inference(superposition,[],[f4265,f733])).
fof(f6942,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(sK0)),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))),sK1,'type.list.list'('type.list.list'(sK0)))),s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.NIL_0'))))) | $spl26),
  inference(unit_resulting_resolution,[],[f4265,f748])).
fof(f7018,plain,(
  ( ! [X64] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X64) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),X64))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(sK0))),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(sK0)),sK4(X64,sK1,'type.list.list'('type.list.list'(sK0)))),s('type.list.list'('type.list.list'('type.list.list'(sK0))),'const.list.NIL_0')))))) ) | $spl26),
  inference(superposition,[],[f4265,f748])).
fof(f45785,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK3,sK1,sK0)) | ($spl28 | $spl172)),
  inference(superposition,[],[f36489,f35380])).
fof(f36489,plain,(
  ( ! [X19,X18] : (s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),X19))) != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | s(sK0,X18) = s(sK0,sK4(sK3,sK1,sK0))) ) | $spl172),
  inference(superposition,[],[f148,f34664])).
fof(f34664,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK3,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl172),
  inference(superposition,[],[f6299,f34470])).
fof(f44465,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3)))) ) | $spl198),
  inference(cnf_transformation,[],[f44465_D])).
fof(f44465_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3)))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f177,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f177_D])).
fof(f177_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f44464,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(condensation,[],[f44463])).
fof(f44463,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X194) != s(bool,g(s(bool,X193))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X195))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X194),s('type.list.list'(bool),X195))) | s(bool,X192) = s(bool,X196) | s(bool,'F_0') = s(bool,X192)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f44135,f11675])).
fof(f11675,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f179,f5444])).
fof(f5444,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl32),
  inference(superposition,[],[f4392,f4392])).
fof(f4392,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl32),
  inference(subsumption_resolution,[],[f4354,f109])).
fof(f4354,plain,(
  ( ! [X25] : (~p(s(bool,'T_0')) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl32),
  inference(superposition,[],[f985,f4309])).
fof(f44135,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X194) != s(bool,g(s(bool,X193))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X195))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X194),s('type.list.list'(bool),X195))) | s(bool,X192) = s(bool,X196) | s(bool,'T_0') = s(bool,X196) | s(bool,'F_0') = s(bool,X192)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f1162,f42004])).
fof(f42004,plain,(
  ( ! [X121,X122] : (s(bool,X122) = s(bool,g(s(bool,X121))) | s(bool,'F_0') = s(bool,X122)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4327,f4831,f4787,f4792,f4834,f4837,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5444,f5618,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9609,f9546,f9586,f9580,f5613,f10512,f10469,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f11357,f11675,f11689,f12450,f12506,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12816,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f16066,f16056,f16050,f17575,f17576,f17579,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f17618,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17816,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18586,f18434,f18601,f18425,f18613,f18615,f18618,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18700,f18713,f18722,f18726,f4786,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f17523,f14908,f14690,f14542,f14246,f4847,f692,f690,f17989,f17965,f17876,f17577,f17444,f16751,f16088,f16086,f16080,f16054,f15724,f14701,f13366,f12818,f12812,f12779,f12712,f12692,f12657,f12632,f12626,f12625,f12591,f12566,f12560,f12559,f12449,f12448,f12187,f12161,f11866,f11864,f11863,f11862,f11860,f11857,f11855,f11853,f11852,f11851,f11849,f11848,f11847,f11846,f11839,f11837,f11832,f11753,f11751,f11749,f11748,f11747,f11745,f11744,f11743,f11742,f11737,f11690,f11686,f11684,f11682,f11681,f11680,f11678,f11677,f11546,f11544,f11543,f11542,f11540,f11537,f11535,f11533,f11532,f11531,f11529,f11528,f11527,f11526,f11519,f11517,f11512,f11323,f11113,f9610,f9578,f9383,f9376,f9338,f9316,f9304,f9221,f9214,f9184,f9162,f9150,f9080,f8927,f8846,f8839,f8807,f8785,f8773,f8699,f8692,f8658,f8636,f8624,f8478,f8471,f8447,f8425,f8413,f8360,f8353,f8329,f8307,f8295,f7593,f7341,f7242,f7045,f6948,f6482,f6478,f6376,f6345,f6235,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5629,f5628,f5626,f5612,f5609,f5600,f5069,f5039,f5030,f5022,f5020,f4832,f4674,f4538,f4521,f4392,f4391,f4309,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f24693,f24785,f24784,f24782,f24776,f24786,f24788,f24887,f24825,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25622,f25623,f25645,f25647,f25898,f25900,f26288,f26392,f26468,f26481,f26467,f26465,f26463,f26461,f26496,f26622,f26551,f26553,f26812,f26804,f26803,f26801,f26845,f26850,f26854,f26865,f27009,f27508,f27534,f27537,f27540,f27542,f27543,f27604,f27607,f27658,f27661,f27786,f28335,f27806,f28300,f28437,f28439,f28450,f28452,f28455,f28461,f28043,f28474,f28494,f28504,f28514,f28526,f28555,f28738,f28916,f29005,f29328,f29404,f29266,f29267,f29272,f29446,f29547,f29545,f29595,f29642,f30136,f30152,f30158,f30170,f30174,f29844,f29865,f29969,f29970,f29975,f30272,f23961,f23960,f15429,f14915,f29523,f30434,f30440,f4752,f30511,f27841,f27840,f27280,f4794,f4801,f4829,f5043,f6337,f8316,f8434,f8645,f8794,f9171,f9325,f10619,f11237,f11238,f12577,f12643,f18556,f18593,f25607,f27308,f27313,f27332,f27335,f27376,f27417,f27429,f27435,f27440,f27441,f27443,f27444,f27445,f27446,f27447,f27448,f27449,f27451,f27541,f28464,f28470,f28472,f28488,f28490,f28516,f28517,f28518,f28519,f28520,f28521,f28522,f28523,f28524,f28525,f28550,f30442,f30429,f30427,f30720,f30882,f30785,f30788,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f107,f33538,f33541,f33548,f33657,f34333,f34348,f34325,f33738,f34466,f33658,f34482,f34928,f34927,f35050,f35008,f35013,f35014,f35528,f35776,f36036,f35990,f35995,f35996,f36329,f36454,f36321,f36319,f36334,f36335,f36411,f36416,f36417,f37741,f37888,f37889,f37894,f37898,f37844,f37849,f38161,f38162,f38163,f38164,f38165,f38166,f38167,f38168,f38325,f38472,f38398,f38597,f38653,f38785,f38888,f38886,f38911,f38884,f38916,f38861,f38922,f39035,f39290,f39413,f39429,f39437,f39440,f39472,f39476,f39479,f39899,f39779,f39780,f39781,f39783,f39784,f39789,f39790,f39792,f39793,f39917,f39919,f39808,f39921,f39810,f39820,f39825,f39846,f39849,f40085,f40087,f40088,f40090,f40091,f40212,f40214,f40106,f40216,f40108,f40118,f40123,f40144,f40147,f40429,f40289,f40290,f40513,f40511,f40529,f40532,f32331,f25307,f25304,f18487,f18399,f18396,f18292,f12646,f12645,f12644,f6340,f6339,f6338,f1744,f1627,f28458,f28457,f28456,f39459,f39445,f41427,f38908,f31486,f31447,f28542])).
fof(f28542,plain,(
  ( ! [X121,X122] : (s(bool,X122) = s(bool,g(s(bool,X121))) | s(bool,'F_0') = s(bool,X122) | s(bool,X121) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(subsumption_resolution,[],[f28194,f109])).
fof(f28194,plain,(
  ( ! [X121,X122] : (~p(s(bool,'T_0')) | s(bool,X122) = s(bool,g(s(bool,X121))) | s(bool,'F_0') = s(bool,X122) | s(bool,X121) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f985,f27537])).
fof(f38908,plain,(
  ( ! [X99,X97,X100,X98] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X97),s('type.list.list'(bool),X99))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),X99))) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,X97)) ) | $spl32),
  inference(subsumption_resolution,[],[f38819,f4309])).
fof(f38819,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X97),s('type.list.list'(bool),X99))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X98),s('type.list.list'(bool),X99))) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,X97)) ) | $spl32),
  inference(superposition,[],[f1157,f4392])).
fof(f41427,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4327,f4831,f4787,f4792,f4834,f4837,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5444,f5618,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9609,f9546,f9586,f9580,f5613,f10512,f10469,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f11357,f11675,f11689,f12450,f12506,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12816,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f16066,f16056,f16050,f17575,f17576,f17579,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f17618,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17816,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18586,f18434,f18601,f18425,f18613,f18615,f18618,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18700,f18713,f18722,f18726,f4786,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f17523,f14908,f14690,f14542,f14246,f4847,f692,f690,f17989,f17965,f17876,f17577,f17444,f16751,f16088,f16086,f16080,f16054,f15724,f14701,f13366,f12818,f12812,f12779,f12712,f12692,f12657,f12632,f12626,f12625,f12591,f12566,f12560,f12559,f12449,f12448,f12187,f12161,f11866,f11864,f11863,f11862,f11860,f11857,f11855,f11853,f11852,f11851,f11849,f11848,f11847,f11846,f11839,f11837,f11832,f11753,f11751,f11749,f11748,f11747,f11745,f11744,f11743,f11742,f11737,f11690,f11686,f11684,f11682,f11681,f11680,f11678,f11677,f11546,f11544,f11543,f11542,f11540,f11537,f11535,f11533,f11532,f11531,f11529,f11528,f11527,f11526,f11519,f11517,f11512,f11323,f11113,f9610,f9578,f9383,f9376,f9338,f9316,f9304,f9221,f9214,f9184,f9162,f9150,f9080,f8927,f8846,f8839,f8807,f8785,f8773,f8699,f8692,f8658,f8636,f8624,f8478,f8471,f8447,f8425,f8413,f8360,f8353,f8329,f8307,f8295,f7593,f7341,f7242,f7045,f6948,f6482,f6478,f6376,f6345,f6235,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5629,f5628,f5626,f5612,f5609,f5600,f5069,f5039,f5030,f5022,f5020,f4832,f4674,f4538,f4521,f4392,f4391,f4309,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f24693,f24785,f24784,f24782,f24776,f24786,f24788,f24887,f24825,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25622,f25623,f25645,f25647,f25898,f25900,f26288,f26392,f26468,f26481,f26467,f26465,f26463,f26461,f26496,f26622,f26551,f26553,f26812,f26804,f26803,f26801,f26845,f26850,f26854,f26865,f27009,f27508,f27534,f27537,f27540,f27542,f27543,f27604,f27607,f27658,f27661,f27786,f28335,f27806,f28300,f28437,f28439,f28450,f28452,f28455,f28461,f28043,f28474,f28494,f28504,f28514,f28526,f28542,f28555,f28738,f28916,f29005,f29328,f29404,f29266,f29267,f29272,f29446,f29547,f29545,f29595,f29642,f30136,f30152,f30158,f30170,f30174,f29844,f29865,f29969,f29970,f29975,f30272,f23961,f23960,f15429,f14915,f29523,f30434,f30440,f4752,f30511,f27841,f27840,f27280,f4794,f4801,f4829,f5043,f6337,f8316,f8434,f8645,f8794,f9171,f9325,f10619,f11237,f11238,f12577,f12643,f18556,f18593,f25607,f27308,f27313,f27332,f27335,f27376,f27417,f27429,f27435,f27440,f27441,f27443,f27444,f27445,f27446,f27447,f27448,f27449,f27451,f27541,f28464,f28470,f28472,f28488,f28490,f28516,f28517,f28518,f28519,f28520,f28521,f28522,f28523,f28524,f28525,f28550,f30442,f30429,f30427,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f107,f33538,f33541,f33548,f33657,f34333,f34348,f34325,f33738,f34466,f33658,f34482,f34928,f34927,f35050,f35008,f35013,f35014,f35528,f35776,f36036,f35990,f35995,f35996,f36329,f36454,f36321,f36319,f36334,f36335,f36411,f36416,f36417,f37741,f37888,f37889,f37894,f37898,f37844,f37849,f38161,f38162,f38163,f38164,f38165,f38166,f38167,f38168,f38325,f38472,f38398,f38597,f38653,f38785,f38888,f38886,f38908,f38911,f38884,f38916,f38861,f38922,f39035,f39290,f39413,f39429,f39437,f39440,f39472,f39476,f39479,f39899,f39779,f39780,f39781,f39783,f39784,f39789,f39790,f39792,f39793,f39917,f39919,f39808,f39921,f39810,f39820,f39825,f39846,f39849,f40085,f40087,f40088,f40090,f40091,f40212,f40214,f40106,f40216,f40108,f40118,f40123,f40144,f40147,f40429,f40289,f40290,f40513,f40511,f40529,f40532,f32331,f25307,f25304,f18487,f18399,f18396,f18292,f12646,f12645,f12644,f6340,f6339,f6338,f1744,f1627,f28458,f28457,f28456,f39459,f39445])).
fof(f39445,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1)))) ) | $spl32),
  inference(condensation,[],[f39444])).
fof(f39444,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,g(s(bool,X2)))) ) | $spl32),
  inference(condensation,[],[f39443])).
fof(f39443,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) | s(bool,X132) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,g(s(bool,X131)))) ) | $spl32),
  inference(subsumption_resolution,[],[f39314,f4391])).
fof(f39314,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X132) != s(bool,g(s(bool,'F_0'))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) | s(bool,X132) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,g(s(bool,X131)))) ) | $spl32),
  inference(superposition,[],[f1162,f27537])).
fof(f39459,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X0))),s('type.list.list'(bool),X1)))) ) | $spl32),
  inference(condensation,[],[f39458])).
fof(f39458,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X2))),s('type.list.list'(bool),X1)))) ) | $spl32),
  inference(forward_demodulation,[],[f39457,f4309])).
fof(f39457,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X2))),s('type.list.list'(bool),X1))) | s(bool,X2) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(condensation,[],[f39456])).
fof(f39456,plain,(
  ( ! [X182,X180,X181,X179] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X181))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X179))),s('type.list.list'(bool),X181))) | s(bool,X180) = s(bool,X182) | s(bool,'T_0') = s(bool,X182) | s(bool,X179) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(subsumption_resolution,[],[f39327,f171])).
fof(f39327,plain,(
  ( ! [X182,X180,X181,X179] : (s(bool,'T_0') != s(bool,X180) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X181))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X179))),s('type.list.list'(bool),X181))) | s(bool,X180) = s(bool,X182) | s(bool,'T_0') = s(bool,X182) | s(bool,X179) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f1162,f27537])).
fof(f28456,plain,(
  ( ! [X333,X334] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X334),X333))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X334),X333) = s('type.semanticPrimitives.result'(bool,X334),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X334),sK5(X333,X334,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X333,X334,bool))))) ) | $spl32),
  inference(forward_demodulation,[],[f28037,f4309])).
fof(f28037,plain,(
  ( ! [X333,X334] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X334),X333))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X334),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X334),X333) = s('type.semanticPrimitives.result'(bool,X334),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X334),sK5(X333,X334,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X333,X334,bool))))) ) | $spl32),
  inference(superposition,[],[f748,f27537])).
fof(f28457,plain,(
  ( ! [X335,X336] : (s('type.semanticPrimitives.result'(bool,X336),X335) = s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X336),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X336),X335))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X336),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X336),sK5(X335,X336,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X335,X336,bool))))) ) | $spl32),
  inference(forward_demodulation,[],[f28038,f4309])).
fof(f28038,plain,(
  ( ! [X335,X336] : (s('type.semanticPrimitives.result'(bool,X336),X335) = s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X336),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X336),X335))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X336),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X336),sK5(X335,X336,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X335,X336,bool))))) ) | $spl32),
  inference(superposition,[],[f733,f27537])).
fof(f28458,plain,(
  ( ! [X337,X338] : (s('type.semanticPrimitives.result'(bool,X338),X337) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X338),X337) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X338),sK5(X337,X338,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X337,X338,bool))))) ) | $spl32),
  inference(forward_demodulation,[],[f28039,f4309])).
fof(f28039,plain,(
  ( ! [X337,X338] : (s('type.semanticPrimitives.result'(bool,X338),X337) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'(bool,X338),X337) = s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X338),sK5(X337,X338,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X337,X338,bool))))) ) | $spl32),
  inference(superposition,[],[f157,f27537])).
fof(f40532,plain,(
  ( ! [X134,X136,X135,X137] : (s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,X137) = s(bool,g(s(X134,sK6(X135,X136,bool,X134)))) | s(bool,'T_0') = s(bool,X137) | s(bool,'T_0') = s(bool,g(s(bool,f(s(X134,sK6(X135,X136,bool,X134))))))) ) | $spl32),
  inference(subsumption_resolution,[],[f40508,f4309])).
fof(f40508,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,X137) = s(bool,g(s(X134,sK6(X135,X136,bool,X134)))) | s(bool,'T_0') = s(bool,X137) | s(bool,'T_0') = s(bool,g(s(bool,f(s(X134,sK6(X135,X136,bool,X134))))))) ) | $spl32),
  inference(superposition,[],[f690,f27537])).
fof(f40529,plain,(
  ( ! [X103,X101,X102,X100] : (s(fun(X100,bool),X101) = s(fun(X100,bool),X102) | s(bool,X103) = s(bool,g(s(X100,sK6(X101,X102,bool,X100)))) | s(bool,'T_0') = s(bool,X103) | s(bool,'F_0') = s(bool,f(s(X100,sK6(X101,X102,bool,X100))))) ) | $spl32),
  inference(subsumption_resolution,[],[f40501,f4309])).
fof(f40501,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X100,bool),X101) = s(fun(X100,bool),X102) | s(bool,X103) = s(bool,g(s(X100,sK6(X101,X102,bool,X100)))) | s(bool,'T_0') = s(bool,X103) | s(bool,'F_0') = s(bool,f(s(X100,sK6(X101,X102,bool,X100))))) ) | $spl32),
  inference(superposition,[],[f690,f4392])).
fof(f40511,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s(fun(X41,bool),X42) = s(fun(X41,bool),X43) | s(bool,X44) = s(bool,g(s(X41,sK6(X42,X43,bool,X41)))) | s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,X46) = s(bool,f(s(X41,sK6(X42,X43,bool,X41)))) | s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) )),
  inference(trivial_inequality_removal,[],[f40492])).
fof(f40492,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X41,bool),X42) = s(fun(X41,bool),X43) | s(bool,X44) = s(bool,g(s(X41,sK6(X42,X43,bool,X41)))) | s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,X46) = s(bool,f(s(X41,sK6(X42,X43,bool,X41)))) | s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f690,f282])).
fof(f40513,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(trivial_inequality_removal,[],[f40486])).
fof(f40486,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f690,f171])).
fof(f40290,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,X19))))) | s('type.semanticPrimitives.result'(X15,X16),sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16))) = s('type.semanticPrimitives.result'(X15,X16),'const.semanticPrimitives.Rval_1'(s(X15,sK4(sK4(X18,X17,'type.semanticPrimitives.result'(X15,X16)),X16,X15)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),X18) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X15,X16),X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),sK5(X18,X17,'type.semanticPrimitives.result'(X15,X16)))))) )),
  inference(superposition,[],[f4150,f157])).
fof(f40289,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,X14))))) | s('type.semanticPrimitives.result'(X10,X11),sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK4(sK4(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'(X10,X11)),X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),sK5(X13,X12,'type.semanticPrimitives.result'(X10,X11)))))) )),
  inference(superposition,[],[f4150,f733])).
fof(f40429,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (s('type.semanticPrimitives.result'(X101,X102),X103) = s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rval_1'(s(X101,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103)),X104,'type.semanticPrimitives.result'(X101,X102)),X102,X101)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X105),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X105),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rval_1'(s(X101,X106)))))) )),
  inference(forward_demodulation,[],[f40286,f765])).
fof(f40286,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X105),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X105),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rval_1'(s(X101,X106))))) | s('type.semanticPrimitives.result'(X101,X102),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103)),X104,'type.semanticPrimitives.result'(X101,X102))) = s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rval_1'(s(X101,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103)),X104,'type.semanticPrimitives.result'(X101,X102)),X102,X101))))) )),
  inference(superposition,[],[f4150,f765])).
fof(f40147,plain,(
  ( ! [X364,X366,X362,X365,X367,X363] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X362),X363),X366),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),X367))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X362),X363),X366),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X362,X363),'const.semanticPrimitives.Rval_1'(s(X362,X364))))))) | s('type.semanticPrimitives.result'('type.list.list'(X362),X363),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),X367)),X366,'type.semanticPrimitives.result'('type.list.list'(X362),X363))) = s('type.semanticPrimitives.result'('type.list.list'(X362),X363),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X362),'const.list.CONS_2'(s(X362,X364),s('type.list.list'(X362),'const.list.NIL_0')))))),X365,'type.semanticPrimitives.result'('type.list.list'(X362),X363)))) )),
  inference(superposition,[],[f789,f6587])).
fof(f40144,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),X350) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X345),X346),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X345,X346),'const.semanticPrimitives.Rval_1'(s(X345,X347))))))) | s('type.semanticPrimitives.result'('type.list.list'(X345),X346),sK4(X350,X349,'type.semanticPrimitives.result'('type.list.list'(X345),X346))) = s('type.semanticPrimitives.result'('type.list.list'(X345),X346),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X345),X346),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X345),'const.list.CONS_2'(s(X345,X347),s('type.list.list'(X345),'const.list.NIL_0')))))),X348,'type.semanticPrimitives.result'('type.list.list'(X345),X346))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),X350) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X349),sK5(X350,X349,'type.semanticPrimitives.result'('type.list.list'(X345),X346)))))) )),
  inference(superposition,[],[f749,f6587])).
fof(f40123,plain,(
  ( ! [X212,X210,X208,X213,X211,X209] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X208),X209),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),X213))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X208),X209),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X208,X209),'const.semanticPrimitives.Rval_1'(s(X208,X210))))))) | s('type.semanticPrimitives.result'('type.list.list'(X208),X209),X213) = s('type.semanticPrimitives.result'('type.list.list'(X208),X209),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X208),'const.list.CONS_2'(s(X208,X210),s('type.list.list'(X208),'const.list.NIL_0')))))),X211,'type.semanticPrimitives.result'('type.list.list'(X208),X209)))) )),
  inference(superposition,[],[f160,f6587])).
fof(f40118,plain,(
  ( ! [X177,X175,X180,X178,X176,X181,X179] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X180),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X181))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X179))) | s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X180) = s('type.semanticPrimitives.result'('type.list.list'(X175),X176),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0')))))),X178,'type.semanticPrimitives.result'('type.list.list'(X175),X176)))) )),
  inference(superposition,[],[f148,f6587])).
fof(f40108,plain,(
  ( ! [X127,X130,X128,X126,X131,X129] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X126),X127),X130),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),X131))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X126),X127),X130),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X126,X127),'const.semanticPrimitives.Rval_1'(s(X126,X128))))))) | s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X126),sK4(X131,X127,'type.list.list'(X126))))) = s('type.semanticPrimitives.result'('type.list.list'(X126),X127),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X126),'const.list.CONS_2'(s(X126,X128),s('type.list.list'(X126),'const.list.NIL_0')))))),X129,'type.semanticPrimitives.result'('type.list.list'(X126),X127))) | s('type.semanticPrimitives.result'('type.list.list'(X126),X127),X131) = s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X127),sK5(X131,X127,'type.list.list'(X126)))))) )),
  inference(superposition,[],[f757,f6587])).
fof(f40216,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(subsumption_resolution,[],[f40215,f659])).
fof(f40215,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122))))) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(forward_demodulation,[],[f40107,f6587])).
fof(f40107,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121))) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0')))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(superposition,[],[f757,f6587])).
fof(f40106,plain,(
  ( ! [X118,X116,X114,X119,X117,X115,X113] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),X117),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),X118))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X113,X114),'const.semanticPrimitives.Rval_1'(s(X113,X115))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),X119))) | s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X113),sK4(X117,X114,'type.list.list'(X113))))) = s('type.semanticPrimitives.result'('type.list.list'(X113),X114),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X113),'const.list.CONS_2'(s(X113,X115),s('type.list.list'(X113),'const.list.NIL_0')))))),X116,'type.semanticPrimitives.result'('type.list.list'(X113),X114))) | s('type.semanticPrimitives.result'('type.list.list'(X113),X114),X117) = s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X114),sK5(X117,X114,'type.list.list'(X113)))))) )),
  inference(superposition,[],[f752,f6587])).
fof(f40214,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(subsumption_resolution,[],[f40213,f659])).
fof(f40213,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108))))) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(forward_demodulation,[],[f40105,f6587])).
fof(f40105,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106))))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107))) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0')))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(superposition,[],[f752,f6587])).
fof(f40212,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))) )),
  inference(subsumption_resolution,[],[f40211,f659])).
fof(f40211,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98))))) = s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96))))) | s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))) )),
  inference(forward_demodulation,[],[f40103,f6587])).
fof(f40103,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96))) | s('type.semanticPrimitives.result'('type.list.list'(X96),X97),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97))) = s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0')))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))))) )),
  inference(superposition,[],[f749,f6587])).
fof(f40091,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,X28))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,X31))))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),'const.list.CONS_2'(s(X26,X31),s('type.list.list'(X26),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),'const.list.CONS_2'(s(X26,X28),s('type.list.list'(X26),'const.list.NIL_0')))))),X29,'type.semanticPrimitives.result'('type.list.list'(X26),X27)))) )),
  inference(superposition,[],[f665,f6587])).
fof(f40090,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X21))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),X23))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X24))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),X25))) | s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X24),s('type.list.list'(X19),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X19),X20),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X21),s('type.list.list'(X19),'const.list.NIL_0')))))),X22,'type.semanticPrimitives.result'('type.list.list'(X19),X20)))) )),
  inference(superposition,[],[f661,f6587])).
fof(f40088,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X7),X8),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X9))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X7),X8),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X12))))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X8),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.NIL_0')))))),X10,'type.semanticPrimitives.result'('type.list.list'(X7),X8)))) )),
  inference(superposition,[],[f652,f6587])).
fof(f40087,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X4))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X6))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X5))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f648,f6587])).
fof(f40085,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X10),s('type.list.list'(X8),'const.list.NIL_0'))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rval_1'(s(X8,X10)))))))),X11,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X8)),X9)))) )),
  inference(superposition,[],[f6587,f635])).
fof(f39849,plain,(
  ( ! [X364,X366,X362,X365,X367,X363] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X362),X363),X366),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),X367))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X362),X363),X366),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X362),'const.list.CONS_2'(s(X362,X364),s('type.list.list'(X362),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X362),X363),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),X367)),X366,'type.semanticPrimitives.result'('type.list.list'(X362),X363))) = s('type.semanticPrimitives.result'('type.list.list'(X362),X363),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X362),X363),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X362,X363),'const.semanticPrimitives.Rval_1'(s(X362,X364)))))),X365,'type.semanticPrimitives.result'('type.list.list'(X362),X363)))) )),
  inference(superposition,[],[f789,f6580])).
fof(f39846,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),X350) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X345),X346),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X345),'const.list.CONS_2'(s(X345,X347),s('type.list.list'(X345),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X345),X346),sK4(X350,X349,'type.semanticPrimitives.result'('type.list.list'(X345),X346))) = s('type.semanticPrimitives.result'('type.list.list'(X345),X346),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X345),X346),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X345,X346),'const.semanticPrimitives.Rval_1'(s(X345,X347)))))),X348,'type.semanticPrimitives.result'('type.list.list'(X345),X346))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),X350) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X345),X346),X349),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X349),sK5(X350,X349,'type.semanticPrimitives.result'('type.list.list'(X345),X346)))))) )),
  inference(superposition,[],[f749,f6580])).
fof(f39825,plain,(
  ( ! [X212,X210,X208,X213,X211,X209] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X208),X209),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),X213))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X208),X209),X212),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X208),'const.list.CONS_2'(s(X208,X210),s('type.list.list'(X208),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X208),X209),X213) = s('type.semanticPrimitives.result'('type.list.list'(X208),X209),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X208),X209),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X208,X209),'const.semanticPrimitives.Rval_1'(s(X208,X210)))))),X211,'type.semanticPrimitives.result'('type.list.list'(X208),X209)))) )),
  inference(superposition,[],[f160,f6580])).
fof(f39820,plain,(
  ( ! [X177,X175,X180,X178,X176,X181,X179] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X180),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X181))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X175),'const.list.CONS_2'(s(X175,X177),s('type.list.list'(X175),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X175),X176)),X179))) | s('type.semanticPrimitives.result'('type.list.list'(X175),X176),X180) = s('type.semanticPrimitives.result'('type.list.list'(X175),X176),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X175),X176),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X175,X176),'const.semanticPrimitives.Rval_1'(s(X175,X177)))))),X178,'type.semanticPrimitives.result'('type.list.list'(X175),X176)))) )),
  inference(superposition,[],[f148,f6580])).
fof(f39810,plain,(
  ( ! [X127,X130,X128,X126,X131,X129] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X126),X127),X130),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),X131))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X126),X127),X130),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X126),'const.list.CONS_2'(s(X126,X128),s('type.list.list'(X126),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X126),sK4(X131,X127,'type.list.list'(X126))))) = s('type.semanticPrimitives.result'('type.list.list'(X126),X127),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X126,X127),'const.semanticPrimitives.Rval_1'(s(X126,X128)))))),X129,'type.semanticPrimitives.result'('type.list.list'(X126),X127))) | s('type.semanticPrimitives.result'('type.list.list'(X126),X127),X131) = s('type.semanticPrimitives.result'('type.list.list'(X126),X127),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X127),sK5(X131,X127,'type.list.list'(X126)))))) )),
  inference(superposition,[],[f757,f6580])).
fof(f39921,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(subsumption_resolution,[],[f39920,f164])).
fof(f39920,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(forward_demodulation,[],[f39809,f6580])).
fof(f39809,plain,(
  ( ! [X125,X123,X121,X124,X122,X120] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X120),X121),X124),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),'const.list.CONS_2'(s(X120,X122),s('type.list.list'(X120),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),X125) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X120),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120))))) | s('type.semanticPrimitives.result'('type.list.list'(X120),X121),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121))) = s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X120),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,X122)))))),X123,'type.semanticPrimitives.result'('type.list.list'(X120),X121)),X121,'type.list.list'(X120)))))) )),
  inference(superposition,[],[f757,f6580])).
fof(f39808,plain,(
  ( ! [X118,X116,X114,X119,X117,X115,X113] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),X117),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),X118))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X113),'const.list.CONS_2'(s(X113,X115),s('type.list.list'(X113),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X113),X114)),X119))) | s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X113),sK4(X117,X114,'type.list.list'(X113))))) = s('type.semanticPrimitives.result'('type.list.list'(X113),X114),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X113,X114),'const.semanticPrimitives.Rval_1'(s(X113,X115)))))),X116,'type.semanticPrimitives.result'('type.list.list'(X113),X114))) | s('type.semanticPrimitives.result'('type.list.list'(X113),X114),X117) = s('type.semanticPrimitives.result'('type.list.list'(X113),X114),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X114),sK5(X117,X114,'type.list.list'(X113)))))) )),
  inference(superposition,[],[f752,f6580])).
fof(f39919,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(subsumption_resolution,[],[f39918,f164])).
fof(f39918,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(forward_demodulation,[],[f39807,f6580])).
fof(f39807,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),'const.list.CONS_2'(s(X106,X108),s('type.list.list'(X106),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X106),X107)),X110))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),X111) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X106),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106))))) | s('type.semanticPrimitives.result'('type.list.list'(X106),X107),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107))) = s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X106),X107),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X106,X107),'const.semanticPrimitives.Rval_1'(s(X106,X108)))))),X109,'type.semanticPrimitives.result'('type.list.list'(X106),X107)),X107,'type.list.list'(X106)))))) )),
  inference(superposition,[],[f752,f6580])).
fof(f39917,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0'))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))) )),
  inference(subsumption_resolution,[],[f39916,f164])).
fof(f39916,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96))))) | s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0'))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))) )),
  inference(forward_demodulation,[],[f39805,f6580])).
fof(f39805,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),X100))) != s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X96),'const.list.CONS_2'(s(X96,X98),s('type.list.list'(X96),'const.list.NIL_0'))))) | s('type.list.list'(X96),X100) = s('type.list.list'(X96),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96))) | s('type.semanticPrimitives.result'('type.list.list'(X96),X97),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97))) = s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X97),sK5(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X96),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X96,X97),'const.semanticPrimitives.Rval_1'(s(X96,X98)))))),X99,'type.semanticPrimitives.result'('type.list.list'(X96),X97)),X97,'type.list.list'(X96)))))) )),
  inference(superposition,[],[f749,f6580])).
fof(f39793,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,X31))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X26),X27),X30),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),'const.list.CONS_2'(s(X26,X28),s('type.list.list'(X26),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X26),'const.list.CONS_2'(s(X26,X31),s('type.list.list'(X26),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X26),X27),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X26),X27),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,X28)))))),X29,'type.semanticPrimitives.result'('type.list.list'(X26),X27)))) )),
  inference(superposition,[],[f665,f6580])).
fof(f39792,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X24))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),X25))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X21),s('type.list.list'(X19),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X19),X20)),X23))) | s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X19),'const.list.CONS_2'(s(X19,X24),s('type.list.list'(X19),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X19),X20),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X19),X20),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X21)))))),X22,'type.semanticPrimitives.result'('type.list.list'(X19),X20)))) )),
  inference(superposition,[],[f661,f6580])).
fof(f39790,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X7),X8),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.NIL_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X7),X8),X11),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X12))))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X8),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X7),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X9)))))),X10,'type.semanticPrimitives.result'('type.list.list'(X7),X8)))) )),
  inference(superposition,[],[f652,f6580])).
fof(f39789,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X4))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X0),X1)),X6))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X5))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f648,f6580])).
fof(f39784,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X36),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X34),'const.list.CONS_2'(s(X34,X37),s('type.list.list'(X34),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X36),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X36),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X34),X35),X36),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X34),X35),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X34,X35),'const.semanticPrimitives.Rval_1'(s(X34,X37)))))))))),X38,'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X34),X35)),X36)))) )),
  inference(superposition,[],[f6580,f634])).
fof(f39783,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),X31),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,X32))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),X31),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X29),X30),X31),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X29),X30),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X32),s('type.list.list'(X29),'const.list.NIL_0')))))))))),X33,'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.result'('type.list.list'(X29),X30)),X31)))) )),
  inference(superposition,[],[f6580,f634])).
fof(f39781,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X24))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X24)),'const.list.CONS_2'(s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X26),s('type.list.list'(X24),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X24)),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.list.list'(X24))),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26)))))))))),X27,'type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25)))) )),
  inference(superposition,[],[f6580,f635])).
fof(f39780,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X20)),'const.list.CONS_2'(s('type.list.list'(X20),'const.list.CONS_2'(s(X20,sK4(X22,X21,X20)),s('type.list.list'(X20),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X20)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),X22)))))),X23,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK5(X22,X21,X20))))) )),
  inference(superposition,[],[f6580,f748])).
fof(f39779,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X16)),'const.list.CONS_2'(s('type.list.list'(X16),'const.list.CONS_2'(s(X16,X18),s('type.list.list'(X16),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X16)),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X16),X17),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X16,X17),'const.semanticPrimitives.Rval_1'(s(X16,X18)))))))),X19,'type.semanticPrimitives.result'('type.list.list'('type.list.list'(X16)),X17)))) )),
  inference(superposition,[],[f6580,f156])).
fof(f39899,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,X10) | s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X10)))))),X11,'type.semanticPrimitives.result'('type.list.list'(bool),X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f39777,f765])).
fof(f39777,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X8),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X8),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X10)))))),X11,'type.semanticPrimitives.result'('type.list.list'(bool),X8))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X10)),X8,bool)) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f6580,f784])).
fof(f39476,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f39475,f765])).
fof(f39475,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f39474])).
fof(f39474,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f39473])).
fof(f39473,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X220))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X217)),X218,bool)),s('type.list.list'(bool),X220))) | s(bool,X219) = s(bool,X221) | s(bool,'T_0') = s(bool,X221) | s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,X222))) | s(bool,'T_0') = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f39336,f171])).
fof(f39336,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (s(bool,'T_0') != s(bool,X219) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X220))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X217)),X218,bool)),s('type.list.list'(bool),X220))) | s(bool,X219) = s(bool,X221) | s(bool,'T_0') = s(bool,X221) | s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,X222))) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f1162,f784])).
fof(f39472,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X0,sK6(X1,X2,bool,X0)))),s('type.list.list'(bool),X3))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) )),
  inference(condensation,[],[f39471])).
fof(f39471,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X2,sK6(X3,X4,bool,X2)))),s('type.list.list'(bool),X1))) | s(fun(X2,bool),X3) = s(fun(X2,bool),X4) | s(bool,'T_0') = s(bool,f(s(X2,sK6(X3,X4,bool,X2))))) )),
  inference(condensation,[],[f39470])).
fof(f39470,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X215))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X211,sK6(X212,X213,bool,X211)))),s('type.list.list'(bool),X215))) | s(bool,X214) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(fun(X211,bool),X212) = s(fun(X211,bool),X213) | s(bool,'T_0') = s(bool,f(s(X211,sK6(X212,X213,bool,X211))))) )),
  inference(subsumption_resolution,[],[f39335,f171])).
fof(f39335,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (s(bool,'T_0') != s(bool,X214) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X215))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X211,sK6(X212,X213,bool,X211)))),s('type.list.list'(bool),X215))) | s(bool,X214) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(fun(X211,bool),X212) = s(fun(X211,bool),X213) | s(bool,'T_0') = s(bool,f(s(X211,sK6(X212,X213,bool,X211))))) )),
  inference(superposition,[],[f1162,f4847])).
fof(f39413,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,X3) = s(bool,X4) | s(bool,X2) = s(bool,X4) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f39412])).
fof(f39412,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,X3) = s(bool,X4) | s(bool,X2) = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(condensation,[],[f39411])).
fof(f39411,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X40))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X38),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f39298,f171])).
fof(f39298,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') != s(bool,X39) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X40))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X38),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1162,f282])).
fof(f39290,plain,(
  ( ! [X277,X273,X275,X276,X274] : (s(bool,X273) != s(bool,X275) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X276))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X275),s('type.list.list'(bool),X276))) | s(bool,X277) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X273)),X274,bool)) | s(bool,'T_0') = s(bool,X277)) )),
  inference(superposition,[],[f1162,f765])).
fof(f39035,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X265) != s(bool,X267) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X267),s('type.list.list'(bool),X269))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X268),s('type.list.list'(bool),X269))) | s(bool,'T_0') = s(bool,X268) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X265)),X266,bool))) )),
  inference(superposition,[],[f1159,f765])).
fof(f38922,plain,(
  ( ! [X231,X229,X233,X230,X234,X232] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X229),s('type.list.list'(bool),X232))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) | s(bool,X231) = s(bool,X233) | s(bool,'T_0') = s(bool,X233) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X234))) | s(bool,'T_0') = s(bool,X234)) )),
  inference(forward_demodulation,[],[f38860,f765])).
fof(f38860,plain,(
  ( ! [X231,X229,X233,X230,X234,X232] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)),s('type.list.list'(bool),X232))) | s(bool,X231) = s(bool,X233) | s(bool,'T_0') = s(bool,X233) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X234))) | s(bool,'T_0') = s(bool,X234)) )),
  inference(trivial_inequality_removal,[],[f38848])).
fof(f38848,plain,(
  ( ! [X231,X229,X233,X230,X234,X232] : (s(bool,'T_0') != s(bool,'T_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)),s('type.list.list'(bool),X232))) | s(bool,X231) = s(bool,X233) | s(bool,'T_0') = s(bool,X233) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X234))) | s(bool,'T_0') = s(bool,X234)) )),
  inference(superposition,[],[f1157,f784])).
fof(f38861,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X226),s('type.list.list'(bool),X227))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X223,sK6(X224,X225,bool,X223)))),s('type.list.list'(bool),X227))) | s(bool,X226) = s(bool,X228) | s(bool,'T_0') = s(bool,X228) | s(fun(X223,bool),X224) = s(fun(X223,bool),X225) | s(bool,'T_0') = s(bool,f(s(X223,sK6(X224,X225,bool,X223))))) )),
  inference(trivial_inequality_removal,[],[f38847])).
fof(f38847,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (s(bool,'T_0') != s(bool,'T_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X226),s('type.list.list'(bool),X227))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(X223,sK6(X224,X225,bool,X223)))),s('type.list.list'(bool),X227))) | s(bool,X226) = s(bool,X228) | s(bool,'T_0') = s(bool,X228) | s(fun(X223,bool),X224) = s(fun(X223,bool),X225) | s(bool,'T_0') = s(bool,f(s(X223,sK6(X224,X225,bool,X223))))) )),
  inference(superposition,[],[f1157,f4847])).
fof(f38916,plain,(
  ( ! [X191,X194,X192,X193] : (s(bool,'T_0') = s(bool,X191) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X192),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X191))),s('type.list.list'(bool),X193))) | s(bool,X192) = s(bool,X194) | s(bool,'T_0') = s(bool,X194)) ) | $spl32),
  inference(forward_demodulation,[],[f38865,f4309])).
fof(f38865,plain,(
  ( ! [X191,X194,X192,X193] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X192),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X191))),s('type.list.list'(bool),X193))) | s(bool,X192) = s(bool,X194) | s(bool,'T_0') = s(bool,X194) | s(bool,X191) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(trivial_inequality_removal,[],[f38839])).
fof(f38839,plain,(
  ( ! [X191,X194,X192,X193] : (s(bool,'T_0') != s(bool,'T_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X192),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X191))),s('type.list.list'(bool),X193))) | s(bool,X192) = s(bool,X194) | s(bool,'T_0') = s(bool,X194) | s(bool,X191) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f1157,f27537])).
fof(f38884,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(condensation,[],[f38883])).
fof(f38883,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,X1) = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f38882])).
fof(f38882,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f38881])).
fof(f38881,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) = s(bool,X6) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X7))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X7))) | s(bool,'T_0') = s(bool,X6) | s(bool,X5) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,X6) = s(bool,X9)) )),
  inference(condensation,[],[f38880])).
fof(f38880,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X141))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X140),s('type.list.list'(bool),X141))) | s(bool,X140) = s(bool,X142) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,X144) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145) | s(bool,X139) = s(bool,X143)) )),
  inference(trivial_inequality_removal,[],[f38828])).
fof(f38828,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (s(bool,X139) != s(bool,X139) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X141))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X140),s('type.list.list'(bool),X141))) | s(bool,X140) = s(bool,X142) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,X144) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145) | s(bool,X139) = s(bool,X143)) )),
  inference(superposition,[],[f1157,f282])).
fof(f38911,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X132),s('type.list.list'(bool),X133))) | s(bool,X132) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,g(s(bool,X131)))) ) | $spl32),
  inference(subsumption_resolution,[],[f38826,f4309])).
fof(f38826,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X132),s('type.list.list'(bool),X133))) | s(bool,X132) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,g(s(bool,X131)))) ) | $spl32),
  inference(superposition,[],[f1157,f27537])).
fof(f38886,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X38),s('type.list.list'(bool),X40))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(trivial_inequality_removal,[],[f38810])).
fof(f38810,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') != s(bool,'T_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X38),s('type.list.list'(bool),X40))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X38) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1157,f282])).
fof(f38888,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X4),s('type.list.list'(bool),X6))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X6))) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(trivial_inequality_removal,[],[f38804])).
fof(f38804,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X4),s('type.list.list'(bool),X6))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X6))) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1157,f171])).
fof(f38785,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f1157,f282])).
fof(f38653,plain,(
  ( ! [X327,X329,X331,X326,X328,X330] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X326),s('type.list.list'(bool),X330))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X328),s('type.list.list'(bool),X329))) | s(bool,X331) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X326)),X327,bool)) | s(bool,'T_0') = s(bool,X331) | s(bool,'T_0') = s(bool,X328)) )),
  inference(superposition,[],[f552,f765])).
fof(f38597,plain,(
  ( ! [X321,X323,X318,X320,X322,X319] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X318),s('type.list.list'(bool),X320))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X321),s('type.list.list'(bool),X322))) | s(bool,X321) = s(bool,X323) | s(bool,'T_0') = s(bool,X323) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X318)),X319,bool))) )),
  inference(superposition,[],[f552,f765])).
fof(f38398,plain,(
  ( ! [X327,X329,X331,X326,X328,X330] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X328))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X326),s('type.list.list'(bool),X329))) | s(bool,X330) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X326)),X327,bool)) | s(bool,X330) = s(bool,X331) | s(bool,'T_0') = s(bool,X331)) )),
  inference(superposition,[],[f550,f765])).
fof(f38325,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X2) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,X0) = s(bool,X6)) )),
  inference(superposition,[],[f550,f282])).
fof(f38168,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6) != s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) | s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,'type.list.list'(X4))) = s('type.semanticPrimitives.error_result'(X5),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7)))),X5,'type.list.list'(X4))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),sK4(X6,X5,'type.list.list'(X4))),s('type.list.list'('type.list.list'(X4)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6484,f748])).
fof(f38167,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)) = s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))),X1,'type.list.list'(X0))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f6484,f733])).
fof(f38166,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'('type.list.list'(X13),X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X11))) != s('type.semanticPrimitives.result'('type.list.list'(X13),X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X14))) | s('type.semanticPrimitives.error_result'(X10),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X10),X11)),X12,'type.semanticPrimitives.error_result'(X10))) = s('type.semanticPrimitives.error_result'(X10),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X13,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X14)))),X10,'type.list.list'(X13)))) )),
  inference(superposition,[],[f6484,f765])).
fof(f38165,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X8),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) != s('type.semanticPrimitives.result'('type.list.list'(X8),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9))) | s('type.semanticPrimitives.error_result'(X5),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X6,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7)))),X5,'type.list.list'(X6))) = s('type.semanticPrimitives.error_result'(X5),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9)))),X5,'type.list.list'(X8)))) )),
  inference(superposition,[],[f6484,f13351])).
fof(f38164,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X3),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1))) != s('type.semanticPrimitives.result'('type.list.list'(X3),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X4))) | s('type.semanticPrimitives.error_result'(X0),sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2)) = s('type.semanticPrimitives.error_result'(X0),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X4)))),X0,'type.list.list'(X3)))) )),
  inference(superposition,[],[f6484,f1017])).
fof(f38163,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X8),X9),X10) != s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X11))) | s('type.semanticPrimitives.error_result'(X9),X11) = s('type.semanticPrimitives.error_result'(X9),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK5(X10,X9,'type.list.list'(X8)))))),X9,'type.list.list'(X8))) | s('type.semanticPrimitives.result'('type.list.list'(X8),X9),X10) = s('type.semanticPrimitives.result'('type.list.list'(X8),X9),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X8),sK4(X10,X9,'type.list.list'(X8)))))) )),
  inference(superposition,[],[f6484,f157])).
fof(f38162,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6) != s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) | s('type.semanticPrimitives.error_result'(X5),X7) = s('type.semanticPrimitives.error_result'(X5),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK5(X6,X5,'type.list.list'(X4)))))),X5,'type.list.list'(X4))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X4)),'const.list.CONS_2'(s('type.list.list'(X4),sK4(X6,X5,'type.list.list'(X4))),s('type.list.list'('type.list.list'(X4)),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6484,f748])).
fof(f38161,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))),X1,'type.list.list'(X0))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X2,X1,X0))))) )),
  inference(superposition,[],[f6484,f733])).
fof(f37849,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),X23))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),X22))))) | s('type.semanticPrimitives.result'('type.list.list'(X20),X21),X23) = s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X20),sK4(X23,X21,'type.list.list'(X20))))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK5(X22,X21,X20))))) )),
  inference(superposition,[],[f6168,f748])).
fof(f37844,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4(X3,X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f6168,f733])).
fof(f37898,plain,(
  ( ! [X70,X68,X72,X71,X69] : (s('type.semanticPrimitives.result'(X68,X69),X70) = s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rval_1'(s(X68,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69)),X69,X68)))) | s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),X70))) != s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rval_1'(s(X68,X72)))))) )),
  inference(forward_demodulation,[],[f37761,f765])).
fof(f37761,plain,(
  ( ! [X70,X68,X72,X71,X69] : (s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),X70))) != s('type.semanticPrimitives.result'('type.list.list'(X68),X69),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rval_1'(s(X68,X72))))) | s('type.semanticPrimitives.result'(X68,X69),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69))) = s('type.semanticPrimitives.result'(X68,X69),'const.semanticPrimitives.Rval_1'(s(X68,sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X68,X69),X70)),X71,'type.semanticPrimitives.result'(X68,X69)),X69,X68))))) )),
  inference(superposition,[],[f6168,f765])).
fof(f37894,plain,(
  ( ! [X54,X52,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),X55))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),X54))))) | s('type.semanticPrimitives.result'(X52,X53),X54) = s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rval_1'(s(X52,sK4(X54,X53,X52))))) )),
  inference(subsumption_resolution,[],[f37756,f164])).
fof(f37756,plain,(
  ( ! [X54,X52,X55,X53] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),X55))))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X52)),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X52,X53),X54))))) | s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X53),sK5(X54,X53,X52)))) = s('type.semanticPrimitives.result'('type.list.list'(X52),X53),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X52),sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X53),sK5(X54,X53,X52))),X53,'type.list.list'(X52))))) | s('type.semanticPrimitives.result'(X52,X53),X54) = s('type.semanticPrimitives.result'(X52,X53),'const.semanticPrimitives.Rval_1'(s(X52,sK4(X54,X53,X52))))) )),
  inference(superposition,[],[f6168,f733])).
fof(f37889,plain,(
  ( ! [X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),X17))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,X18))))) | s('type.semanticPrimitives.result'(bool,X16),X17) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X17,X16,bool))) )),
  inference(subsumption_resolution,[],[f37746,f164])).
fof(f37746,plain,(
  ( ! [X17,X18,X16] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),X17))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X16),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,X18))))) | s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,bool)))) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X16),sK5(X17,X16,bool))),X16,bool)))) | s('type.semanticPrimitives.result'(bool,X16),X17) = s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X17,X16,bool))) )),
  inference(superposition,[],[f6168,f730])).
fof(f37888,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(subsumption_resolution,[],[f37742,f164])).
fof(f37742,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK4('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))),X1,X0)))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK4(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6168,f748])).
fof(f37741,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))) )),
  inference(unit_resulting_resolution,[],[f164,f6168])).
fof(f36417,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X24))))),X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),X27))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X24))))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X24)))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26)))))))))))))) )),
  inference(superposition,[],[f6877,f635])).
fof(f36416,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X20)))),X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),X23))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X20)))),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X20))),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),X22))))))))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK5(X22,X21,X20))))) )),
  inference(superposition,[],[f6877,f748])).
fof(f36411,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f6877,f733])).
fof(f36335,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X4))),X5),X6) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X4))),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X4)),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X4),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,X7))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X4)))),X5),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X4))),X5),X6))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X4)))),X5),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X4)))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.list.list'(X4))),sK4(X6,X5,'type.list.list'('type.list.list'('type.list.list'(X4))))),s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X4)))),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f6877,f748])).
fof(f36334,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),X2) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X0)),sK4(X2,X1,'type.list.list'('type.list.list'(X0))))))) )),
  inference(superposition,[],[f6877,f733])).
fof(f36319,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X0))),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))),X1,'type.list.list'('type.list.list'('type.list.list'(X0)))))))) )),
  inference(unit_resulting_resolution,[],[f6877,f157])).
fof(f36321,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X0)))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))))))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X0)))),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X0)))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.list.list'(X0))),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))))),X1,'type.list.list'('type.list.list'('type.list.list'(X0))))),s('type.list.list'('type.list.list'('type.list.list'('type.list.list'(X0)))),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f6877,f748])).
fof(f36454,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X0))),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3)))))))),X1,'type.list.list'('type.list.list'('type.list.list'(X0)))))))))) )),
  inference(forward_demodulation,[],[f36325,f765])).
fof(f36325,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X0))),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3)))))))),X1,'type.list.list'('type.list.list'('type.list.list'(X0))))))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3)))))))))),X4,'type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1)))))) )),
  inference(unit_resulting_resolution,[],[f765,f6877,f759])).
fof(f36329,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1)),X3))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X0)),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X0))),X1)),X5)))) )),
  inference(unit_resulting_resolution,[],[f6877,f148])).
fof(f35996,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),X27) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X24)),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X24),X25),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X26))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),X27) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X24))),X25),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'('type.list.list'(X24))),sK4(X27,X25,'type.list.list'('type.list.list'('type.list.list'(X24)))))))) )),
  inference(superposition,[],[f735,f635])).
fof(f35995,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),X23) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X20),X21),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X20,X21),X22))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),X23) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X20)),X21),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(X20)),sK4(X23,X21,'type.list.list'('type.list.list'(X20)))))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK5(X22,X21,X20))))) )),
  inference(superposition,[],[f735,f748])).
fof(f35990,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3) != s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),sK4(X3,X1,'type.list.list'(X0))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f735,f733])).
fof(f36036,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47) = s('type.semanticPrimitives.result'('type.list.list'(X45),X46),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X45),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47)),X48,'type.semanticPrimitives.result'('type.list.list'(X45),X46)),X46,'type.list.list'(X45))))) | s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47) != s('type.semanticPrimitives.result'('type.list.list'(X45),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X45,X46),'const.semanticPrimitives.Rval_1'(s(X45,X49)))))) )),
  inference(forward_demodulation,[],[f35916,f765])).
fof(f35916,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47) != s('type.semanticPrimitives.result'('type.list.list'(X45),X46),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X45,X46),'const.semanticPrimitives.Rval_1'(s(X45,X49))))) | s('type.semanticPrimitives.result'('type.list.list'(X45),X46),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47)),X48,'type.semanticPrimitives.result'('type.list.list'(X45),X46))) = s('type.semanticPrimitives.result'('type.list.list'(X45),X46),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X45),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X45),X46),X47)),X48,'type.semanticPrimitives.result'('type.list.list'(X45),X46)),X46,'type.list.list'(X45)))))) )),
  inference(superposition,[],[f735,f765])).
fof(f35776,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(X249,f(s(bool,X247))) != s(X249,g(s(bool,X247))) | s(fun(bool,X249),X250) = s(fun(bool,X249),X251) | s(bool,'T_0') = s(bool,sK6(X250,X251,X249,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X247)),X248,bool))) )),
  inference(superposition,[],[f687,f765])).
fof(f35528,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,X4) = s(bool,sK6(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f685,f282])).
fof(f35014,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X30))),X31),X33),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X30))),X31),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X31),X34))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X30))),X31),X33),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'('type.list.list'(X30))),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X30)),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X30),X31),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X30,X31),'const.semanticPrimitives.Rval_1'(s(X30,X32)))))))))))) )),
  inference(superposition,[],[f704,f635])).
fof(f35013,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X25)),X26),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X25)),X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),X29))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X25)),X26),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(X25)),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(X25),X26),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X25,X26),X27))))))) | s('type.semanticPrimitives.result'(X25,X26),X27) = s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),sK5(X27,X26,X25))))) )),
  inference(superposition,[],[f704,f748])).
fof(f35008,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))))) | s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f704,f733])).
fof(f35050,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)),X1,'type.list.list'(X0)))))) )),
  inference(forward_demodulation,[],[f34924,f6580])).
fof(f34924,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X0),sK4(sK4('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))))),X3,'type.semanticPrimitives.result'('type.list.list'(X0),X1)),X1,'type.list.list'(X0)))))) )),
  inference(unit_resulting_resolution,[],[f765,f704,f743])).
fof(f34927,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X4))) != s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X5))))))),s('type.list.list'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2)),X6)))) )),
  inference(unit_resulting_resolution,[],[f704,f148])).
fof(f34928,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X5)))))))))) )),
  inference(unit_resulting_resolution,[],[f704,f160])).
fof(f30427,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,'T_0') = s(bool,X197) | s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,X199))) = s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X197))))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) ) | $spl32),
  inference(forward_demodulation,[],[f29524,f4309])).
fof(f29524,plain,(
  ( ! [X198,X200,X199,X197] : (s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,X199))) = s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X197))))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200) | s(bool,X197) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(trivial_inequality_removal,[],[f29502])).
fof(f29502,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,X199))) = s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X197))))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200) | s(bool,X197) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f359,f27537])).
fof(f30429,plain,(
  ( ! [X134,X136,X135,X133] : (s('type.semanticPrimitives.result'(bool,X134),'const.semanticPrimitives.Rval_1'(s(bool,X133))) = s('type.semanticPrimitives.result'(bool,X134),'const.semanticPrimitives.Rval_1'(s(bool,X135))) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'T_0') = s(bool,g(s(bool,X133)))) ) | $spl32),
  inference(subsumption_resolution,[],[f29488,f4309])).
fof(f29488,plain,(
  ( ! [X134,X136,X135,X133] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.semanticPrimitives.result'(bool,X134),'const.semanticPrimitives.Rval_1'(s(bool,X133))) = s('type.semanticPrimitives.result'(bool,X134),'const.semanticPrimitives.Rval_1'(s(bool,X135))) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'T_0') = s(bool,g(s(bool,X133)))) ) | $spl32),
  inference(superposition,[],[f359,f27537])).
fof(f30442,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X37) != s(bool,X38) | s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,X37) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | ($spl3 | $spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28929,f179])).
fof(f28929,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X37) != s(bool,X38) | s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | ($spl3 | $spl32 | $spl52)),
  inference(superposition,[],[f28504,f282])).
fof(f28550,plain,(
  ( ! [X151,X150] : (s(bool,g(s(bool,X150))) = s(bool,g(s(bool,X151))) | s(bool,'T_0') = s(bool,X151) | s(bool,X150) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(subsumption_resolution,[],[f28207,f109])).
fof(f28207,plain,(
  ( ! [X151,X150] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X150))) = s(bool,g(s(bool,X151))) | s(bool,'T_0') = s(bool,X151) | s(bool,X150) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f4829,f27537])).
fof(f28525,plain,(
  ( ! [X292,X294,X293] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X294)),X293,bool)) | s('type.semanticPrimitives.result'(bool,X293),'const.semanticPrimitives.Rval_1'(s(bool,X292))) != s('type.semanticPrimitives.result'(bool,X293),'const.semanticPrimitives.Rval_1'(s(bool,X294))) | s(bool,'T_0') = s(bool,g(s(bool,X292)))) ) | $spl32),
  inference(forward_demodulation,[],[f28148,f4309])).
fof(f28148,plain,(
  ( ! [X292,X294,X293] : (s('type.semanticPrimitives.result'(bool,X293),'const.semanticPrimitives.Rval_1'(s(bool,X292))) != s('type.semanticPrimitives.result'(bool,X293),'const.semanticPrimitives.Rval_1'(s(bool,X294))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X294)),X293,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X292)))) ) | $spl32),
  inference(superposition,[],[f789,f27537])).
fof(f28524,plain,(
  ( ! [X290,X289,X291] : (s(bool,X291) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X290,bool)) | s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X289))) != s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X291))) | s(bool,'T_0') = s(bool,g(s(bool,X289)))) ) | $spl32),
  inference(forward_demodulation,[],[f28147,f4309])).
fof(f28147,plain,(
  ( ! [X290,X289,X291] : (s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X289))) != s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X291))) | s(bool,X291) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0')))),X290,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X289)))) ) | $spl32),
  inference(superposition,[],[f789,f27537])).
fof(f28523,plain,(
  ( ! [X285,X284,X286] : (s(bool,'T_0') = s(bool,sK4(X286,X285,bool)) | s('type.semanticPrimitives.result'(bool,X285),X286) != s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X284))) | s('type.semanticPrimitives.result'(bool,X285),X286) = s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X285),sK5(X286,X285,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X284)))) ) | $spl32),
  inference(forward_demodulation,[],[f28145,f4309])).
fof(f28145,plain,(
  ( ! [X285,X284,X286] : (s('type.semanticPrimitives.result'(bool,X285),X286) != s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X284))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK4(X286,X285,bool)) | s('type.semanticPrimitives.result'(bool,X285),X286) = s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X285),sK5(X286,X285,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X284)))) ) | $spl32),
  inference(superposition,[],[f749,f27537])).
fof(f28522,plain,(
  ( ! [X277,X275,X276,X274] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X275),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X275),X276))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X275),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X275),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X275),X276) != s('type.semanticPrimitives.result'('type.list.list'(bool),X275),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X275),'const.semanticPrimitives.Rval_1'(s(bool,X274))))) | s(bool,'T_0') = s(bool,g(s(bool,X274)))) ) | $spl32),
  inference(forward_demodulation,[],[f28142,f4309])).
fof(f28142,plain,(
  ( ! [X277,X275,X276,X274] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X275),X276) != s('type.semanticPrimitives.result'('type.list.list'(bool),X275),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X275),'const.semanticPrimitives.Rval_1'(s(bool,X274))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X275),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X275),X276))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X275),X277),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X275),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X274)))) ) | $spl32),
  inference(superposition,[],[f667,f27537])).
fof(f28521,plain,(
  ( ! [X271,X273,X270,X272] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X273) = s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X273))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X271),'const.semanticPrimitives.Rval_1'(s(bool,X270))))))) | s(bool,'T_0') = s(bool,g(s(bool,X270)))) ) | $spl32),
  inference(forward_demodulation,[],[f28141,f4309])).
fof(f28141,plain,(
  ( ! [X271,X273,X270,X272] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X273))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X271),'const.semanticPrimitives.Rval_1'(s(bool,X270))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X273) = s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X270)))) ) | $spl32),
  inference(superposition,[],[f665,f27537])).
fof(f28520,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X266),X267) = s('type.semanticPrimitives.result'('type.list.list'(bool),X266),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X266),X267),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),X268))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X266),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X266),'const.semanticPrimitives.Rval_1'(s(bool,X265))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),X269))) | s(bool,'T_0') = s(bool,g(s(bool,X265)))) ) | $spl32),
  inference(forward_demodulation,[],[f28140,f4309])).
fof(f28140,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X266),X267),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),X268))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X266),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X266),'const.semanticPrimitives.Rval_1'(s(bool,X265))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X266)),X269))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X266),X267) = s('type.semanticPrimitives.result'('type.list.list'(bool),X266),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X265)))) ) | $spl32),
  inference(superposition,[],[f661,f27537])).
fof(f28519,plain,(
  ( ! [X261,X259,X260] : (s('type.list.list'(bool),X261) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X260),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X261))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X260),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X260),'const.semanticPrimitives.Rval_1'(s(bool,X259))))) | s(bool,'T_0') = s(bool,g(s(bool,X259)))) ) | $spl32),
  inference(forward_demodulation,[],[f28138,f4309])).
fof(f28138,plain,(
  ( ! [X261,X259,X260] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X260),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X261))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X260),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X260),'const.semanticPrimitives.Rval_1'(s(bool,X259))))) | s('type.list.list'(bool),X261) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X259)))) ) | $spl32),
  inference(superposition,[],[f657,f27537])).
fof(f28518,plain,(
  ( ! [X255,X257,X256,X258] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X256),X257))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X256),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X256),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X256),X257) != s('type.semanticPrimitives.result'('type.list.list'(bool),X256),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X255),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X255)))) ) | $spl32),
  inference(forward_demodulation,[],[f28137,f4309])).
fof(f28137,plain,(
  ( ! [X255,X257,X256,X258] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X256),X257) != s('type.semanticPrimitives.result'('type.list.list'(bool),X256),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X255),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X256),X257))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X256),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X256),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))))) | s(bool,'T_0') = s(bool,g(s(bool,X255)))) ) | $spl32),
  inference(superposition,[],[f654,f27537])).
fof(f28517,plain,(
  ( ! [X253,X251,X254,X252] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X252),X254) = s('type.semanticPrimitives.result'('type.list.list'(bool),X252),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X252),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X252),X253),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X252),X254))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X252),X253),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X252),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X251),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X251)))) ) | $spl32),
  inference(forward_demodulation,[],[f28136,f4309])).
fof(f28136,plain,(
  ( ! [X253,X251,X254,X252] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X252),X253),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X252),X254))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X252),X253),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X252),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X251),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X252),X254) = s('type.semanticPrimitives.result'('type.list.list'(bool),X252),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X252),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X251)))) ) | $spl32),
  inference(superposition,[],[f652,f27537])).
fof(f28516,plain,(
  ( ! [X249,X246,X250,X248,X247] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248) = s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X247),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X249))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X246),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X250))) | s(bool,'T_0') = s(bool,g(s(bool,X246)))) ) | $spl32),
  inference(forward_demodulation,[],[f28135,f4309])).
fof(f28135,plain,(
  ( ! [X249,X246,X250,X248,X247] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X249))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X246),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X250))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248) = s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X247),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X246)))) ) | $spl32),
  inference(superposition,[],[f648,f27537])).
fof(f28490,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2)))) ) | ($spl32 | $spl52)),
  inference(condensation,[],[f28489])).
fof(f28489,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X104))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X103),s('type.list.list'(bool),X105))) | s(bool,'T_0') = s(bool,X106) | s(bool,'T_0') = s(bool,g(s(bool,X103)))) ) | ($spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28080,f9610])).
fof(f28080,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X104))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X103),s('type.list.list'(bool),X105))) | s(bool,X106) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X106) | s(bool,'T_0') = s(bool,g(s(bool,X103)))) ) | $spl32),
  inference(superposition,[],[f554,f27537])).
fof(f28488,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X95),s('type.list.list'(bool),X98))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X96),s('type.list.list'(bool),X97))) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,g(s(bool,X95)))) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f28487,f179])).
fof(f28487,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,'F_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X95),s('type.list.list'(bool),X98))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X96),s('type.list.list'(bool),X97))) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,g(s(bool,X95)))) ) | $spl32),
  inference(forward_demodulation,[],[f28078,f4309])).
fof(f28078,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X95),s('type.list.list'(bool),X98))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X96),s('type.list.list'(bool),X97))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,g(s(bool,X95)))) ) | $spl32),
  inference(superposition,[],[f549,f27537])).
fof(f28472,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | ($spl32 | $spl52)),
  inference(condensation,[],[f28471])).
fof(f28471,plain,(
  ( ! [X33,X34,X32] : (s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X32))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,g(s(bool,X32)))) ) | ($spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28061,f9610])).
fof(f28061,plain,(
  ( ! [X33,X34,X32] : (s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X32))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,g(s(bool,X32)))) ) | $spl32),
  inference(superposition,[],[f235,f27537])).
fof(f28470,plain,(
  ( ! [X30,X31,X29] : (s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X29))) != s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,g(s(bool,X29)))) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f28469,f179])).
fof(f28469,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X29))) != s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,g(s(bool,X29)))) ) | $spl32),
  inference(forward_demodulation,[],[f28060,f4309])).
fof(f28060,plain,(
  ( ! [X30,X31,X29] : (s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X29))) != s('type.semanticPrimitives.result'(bool,X30),'const.semanticPrimitives.Rval_1'(s(bool,X31))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,g(s(bool,X29)))) ) | $spl32),
  inference(superposition,[],[f234,f27537])).
fof(f28464,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl32),
  inference(condensation,[],[f28463])).
fof(f28463,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,g(s(bool,X8)))) ) | $spl32),
  inference(subsumption_resolution,[],[f28462,f173])).
fof(f28462,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X8)) | p(s(bool,X9)) | s(bool,'T_0') = s(bool,g(s(bool,X8)))) ) | $spl32),
  inference(forward_demodulation,[],[f28049,f4309])).
fof(f28049,plain,(
  ( ! [X8,X9] : (p(s(bool,X8)) | p(s(bool,X9)) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X8)))) ) | $spl32),
  inference(superposition,[],[f151,f27537])).
fof(f27541,plain,(
  ( ! [X127,X125,X126] : (s(bool,X127) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X125)),X126,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X127))) | s(bool,'T_0') = s(bool,g(s(bool,X125)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27497,f109])).
fof(f27497,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,'T_0')) | s(bool,X127) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X125)),X126,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X127))) | s(bool,'T_0') = s(bool,g(s(bool,X125)))) ) | $spl32),
  inference(superposition,[],[f27417,f4752])).
fof(f27451,plain,(
  ( ! [X393,X395,X396] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X393),s('type.list.list'(bool),X396))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X395),s('type.list.list'(bool),X396))) | s(bool,'T_0') != s(bool,X395) | s(bool,'T_0') = s(bool,g(s(bool,X393)))) ) | $spl32),
  inference(forward_demodulation,[],[f27336,f765])).
fof(f27336,plain,(
  ( ! [X393,X395,X396,X394] : (s(bool,'T_0') != s(bool,X395) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X395),s('type.list.list'(bool),X396))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X393)),X394,bool)),s('type.list.list'(bool),X396))) | s(bool,'T_0') = s(bool,g(s(bool,X393)))) ) | $spl32),
  inference(superposition,[],[f918,f4752])).
fof(f27449,plain,(
  ( ! [X368,X365,X367,X369] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X367),X369),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X367),X368))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X367),X369),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X367),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X365),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X367),X368) != s('type.semanticPrimitives.result'('type.list.list'(bool),X367),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X365)))) ) | $spl32),
  inference(forward_demodulation,[],[f27329,f765])).
fof(f27329,plain,(
  ( ! [X366,X368,X365,X367,X369] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X367),X368) != s('type.semanticPrimitives.result'('type.list.list'(bool),X367),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X367),X369),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X367),X368))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X367),X369),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X367),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X365)),X366,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X365)))) ) | $spl32),
  inference(superposition,[],[f667,f4752])).
fof(f27448,plain,(
  ( ! [X364,X360,X362,X363] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X362),X364) = s('type.semanticPrimitives.result'('type.list.list'(bool),X362),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X360),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X362),X363),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X362),X364))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X362),X363),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X362),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X362),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X360)))) ) | $spl32),
  inference(forward_demodulation,[],[f27328,f765])).
fof(f27328,plain,(
  ( ! [X364,X360,X362,X361,X363] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X362),X363),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X362),X364))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X362),X363),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X362),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X362),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X362),X364) = s('type.semanticPrimitives.result'('type.list.list'(bool),X362),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X360)),X361,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X360)))) ) | $spl32),
  inference(superposition,[],[f665,f4752])).
fof(f27447,plain,(
  ( ! [X356,X358,X354,X357,X359] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X356),X357) = s('type.semanticPrimitives.result'('type.list.list'(bool),X356),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X354),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X356),X357),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),X358))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X356),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X356),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),X359))) | s(bool,'T_0') = s(bool,g(s(bool,X354)))) ) | $spl32),
  inference(forward_demodulation,[],[f27327,f765])).
fof(f27327,plain,(
  ( ! [X356,X358,X354,X357,X359,X355] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X356),X357),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),X358))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X356),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X356),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X356)),X359))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X356),X357) = s('type.semanticPrimitives.result'('type.list.list'(bool),X356),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X354)),X355,bool)),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X354)))) ) | $spl32),
  inference(superposition,[],[f661,f4752])).
fof(f27446,plain,(
  ( ! [X346,X349,X348] : (s('type.list.list'(bool),X349) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X346),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X348),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X349))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X348),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X348),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X346)))) ) | $spl32),
  inference(forward_demodulation,[],[f27325,f765])).
fof(f27325,plain,(
  ( ! [X346,X349,X347,X348] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X348),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X349))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X348),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X348),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X349) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X346)),X347,bool)),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X346)))) ) | $spl32),
  inference(superposition,[],[f657,f4752])).
fof(f27445,plain,(
  ( ! [X344,X341,X343,X345] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X343),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X343),X344))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X343),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X343),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X343),'const.semanticPrimitives.Rval_1'(s(bool,X341))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X343),X344) != s('type.semanticPrimitives.result'('type.list.list'(bool),X343),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X341)))) ) | $spl32),
  inference(forward_demodulation,[],[f27324,f765])).
fof(f27324,plain,(
  ( ! [X344,X341,X343,X345,X342] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X343),X344) != s('type.semanticPrimitives.result'('type.list.list'(bool),X343),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X343),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X343),X344))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X343),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X343),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X343),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X341)),X342,bool)))))))) | s(bool,'T_0') = s(bool,g(s(bool,X341)))) ) | $spl32),
  inference(superposition,[],[f654,f4752])).
fof(f27444,plain,(
  ( ! [X339,X340,X336,X338] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X340) = s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X336))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X340))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,g(s(bool,X336)))) ) | $spl32),
  inference(forward_demodulation,[],[f27323,f765])).
fof(f27323,plain,(
  ( ! [X337,X339,X340,X336,X338] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X340))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X340) = s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X336)),X337,bool)))))) | s(bool,'T_0') = s(bool,g(s(bool,X336)))) ) | $spl32),
  inference(superposition,[],[f652,f4752])).
fof(f27443,plain,(
  ( ! [X333,X335,X332,X334,X330] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X332),X333) = s('type.semanticPrimitives.result'('type.list.list'(bool),X332),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X332),'const.semanticPrimitives.Rval_1'(s(bool,X330))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X332),X333),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),X334))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X332),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),X335))) | s(bool,'T_0') = s(bool,g(s(bool,X330)))) ) | $spl32),
  inference(forward_demodulation,[],[f27322,f765])).
fof(f27322,plain,(
  ( ! [X333,X335,X331,X332,X334,X330] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X332),X333),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),X334))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X332),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X332)),X335))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X332),X333) = s('type.semanticPrimitives.result'('type.list.list'(bool),X332),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X332),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X330)),X331,bool)))))) | s(bool,'T_0') = s(bool,g(s(bool,X330)))) ) | $spl32),
  inference(superposition,[],[f648,f4752])).
fof(f27441,plain,(
  ( ! [X300,X302,X303] : (s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X300))) = s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X302))) | s(bool,'T_0') != s(bool,X302) | s(bool,'T_0') = s(bool,g(s(bool,X300)))) ) | $spl32),
  inference(forward_demodulation,[],[f27315,f765])).
fof(f27315,plain,(
  ( ! [X300,X302,X301,X303] : (s(bool,'T_0') != s(bool,X302) | s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,X302))) = s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X300)),X301,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X300)))) ) | $spl32),
  inference(superposition,[],[f161,f4752])).
fof(f27440,plain,(
  ( ! [X263,X264] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X264),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X264),'const.semanticPrimitives.Rval_1'(s(bool,X263))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X264),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X263)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27305,f164])).
fof(f27305,plain,(
  ( ! [X263,X264] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X264),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X264),'const.semanticPrimitives.Rval_1'(s(bool,X263))))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X264),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X264),'const.semanticPrimitives.Rval_1'(s(bool,X263))) = s('type.semanticPrimitives.result'(bool,X264),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X264),sK5('const.semanticPrimitives.Rval_1'(s(bool,X263)),X264,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X263)))) ) | $spl32),
  inference(superposition,[],[f748,f4752])).
fof(f27435,plain,(
  ( ! [X206,X204,X205] : (s(bool,g(s(bool,X206))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X204)),X205,bool)) | s(bool,'T_0') = s(bool,X206) | s(bool,'T_0') = s(bool,g(s(bool,X204)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27282,f109])).
fof(f27282,plain,(
  ( ! [X206,X204,X205] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X206))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X204)),X205,bool)) | s(bool,'T_0') = s(bool,X206) | s(bool,'T_0') = s(bool,g(s(bool,X204)))) ) | $spl32),
  inference(superposition,[],[f4829,f4752])).
fof(f27429,plain,(
  ( ! [X167,X165,X166] : (s(bool,X167) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X165)),X166,bool)) | s(bool,'F_0') = s(bool,X167) | s(bool,'T_0') = s(bool,g(s(bool,X165)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27270,f109])).
fof(f27270,plain,(
  ( ! [X167,X165,X166] : (~p(s(bool,'T_0')) | s(bool,X167) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X165)),X166,bool)) | s(bool,'F_0') = s(bool,X167) | s(bool,'T_0') = s(bool,g(s(bool,X165)))) ) | $spl32),
  inference(superposition,[],[f985,f4752])).
fof(f27417,plain,(
  ( ! [X29,X27] : (~p(s(bool,X29)) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,g(s(bool,X27)))) ) | $spl32),
  inference(forward_demodulation,[],[f27416,f765])).
fof(f27416,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,X29)) | s(bool,X29) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X27)),X28,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X27)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27238,f109])).
fof(f27238,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | s(bool,X29) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X27)),X28,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X27)))) ) | $spl32),
  inference(superposition,[],[f154,f4752])).
fof(f27376,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X2,bool)) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl32),
  inference(condensation,[],[f27375])).
fof(f27375,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,g(s(bool,X42))) | s(bool,X45) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X42)),X43,bool)) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl32),
  inference(duplicate_literal_removal,[],[f27212])).
fof(f27212,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,g(s(bool,X42))) | s(bool,X45) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X42)),X43,bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl32),
  inference(superposition,[],[f4752,f282])).
fof(f27335,plain,(
  ( ! [X389,X391,X390,X392] : (s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X391),'const.semanticPrimitives.Rval_1'(s(bool,X392))) | s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X389)),X390,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X392)),X391,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X389)))) ) | $spl32),
  inference(superposition,[],[f789,f4752])).
fof(f27332,plain,(
  ( ! [X379,X380,X378,X381] : (s('type.semanticPrimitives.result'(bool,X380),X381) != s('type.semanticPrimitives.result'(bool,X380),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK4(X381,X380,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X378)),X379,bool)) | s('type.semanticPrimitives.result'(bool,X380),X381) = s('type.semanticPrimitives.result'(bool,X380),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X380),sK5(X381,X380,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X378)))) ) | $spl32),
  inference(superposition,[],[f749,f4752])).
fof(f27313,plain,(
  ( ! [X292,X294,X293,X295] : (s('type.semanticPrimitives.result'(bool,X294),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X294),'const.semanticPrimitives.Rval_1'(s(bool,X295))) | s(bool,X295) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X292)),X293,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X292)))) ) | $spl32),
  inference(superposition,[],[f160,f4752])).
fof(f27308,plain,(
  ( ! [X269,X271,X273,X270,X272] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X271))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X272),s('type.list.list'(bool),X273))) | s(bool,X272) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X269)),X270,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X269)))) ) | $spl32),
  inference(superposition,[],[f148,f4752])).
fof(f25607,plain,(
  ( ! [X216,X215,X217,X214] : (s(bool,g(s(bool,X216))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X214)),X215,bool)) | s(bool,'T_0') = s(bool,X216) | s('type.semanticPrimitives.result'(bool,X215),'const.semanticPrimitives.Rval_1'(s(bool,X214))) = s('type.semanticPrimitives.result'(bool,X215),'const.semanticPrimitives.Rval_1'(s(bool,X217))) | s(bool,'T_0') = s(bool,X217)) ) | $spl32),
  inference(subsumption_resolution,[],[f25256,f109])).
fof(f25256,plain,(
  ( ! [X216,X215,X217,X214] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X216))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X214)),X215,bool)) | s(bool,'T_0') = s(bool,X216) | s('type.semanticPrimitives.result'(bool,X215),'const.semanticPrimitives.Rval_1'(s(bool,X214))) = s('type.semanticPrimitives.result'(bool,X215),'const.semanticPrimitives.Rval_1'(s(bool,X217))) | s(bool,'T_0') = s(bool,X217)) ) | $spl32),
  inference(superposition,[],[f4829,f784])).
fof(f18593,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | $spl32),
  inference(forward_demodulation,[],[f18431,f765])).
fof(f18431,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)))) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | $spl32),
  inference(condensation,[],[f18430])).
fof(f18430,plain,(
  ( ! [X187,X188,X186] : (s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X187)),X188,bool)))) | s(bool,'T_0') = s(bool,X186) | s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X187)))) ) | $spl32),
  inference(duplicate_literal_removal,[],[f18225])).
fof(f18225,plain,(
  ( ! [X187,X188,X186] : (s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X187)),X188,bool)))) | s(bool,'T_0') = s(bool,X186) | s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X187))) | s(bool,'T_0') = s(bool,X186)) ) | $spl32),
  inference(superposition,[],[f4327,f782])).
fof(f18556,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X0)))))) ) | $spl32),
  inference(condensation,[],[f18555])).
fof(f18555,plain,(
  ( ! [X152,X151,X150] : (s(bool,'T_0') = s(bool,X151) | s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X150))))) | s(bool,'T_0') = s(bool,X150)) ) | $spl32),
  inference(duplicate_literal_removal,[],[f18554])).
fof(f18554,plain,(
  ( ! [X152,X151,X150] : (s(bool,'T_0') = s(bool,X151) | s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X150))))) | s(bool,'T_0') = s(bool,X151) | s(bool,'T_0') = s(bool,X150)) ) | $spl32),
  inference(forward_demodulation,[],[f18150,f765])).
fof(f18150,plain,(
  ( ! [X152,X151,X150] : (s(bool,X151) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X152,bool)) | s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X150))))) | s(bool,'T_0') = s(bool,X151) | s(bool,'T_0') = s(bool,X150)) ) | $spl32),
  inference(superposition,[],[f782,f4327])).
fof(f12643,plain,(
  ( ! [X99,X100,X98] : (s('type.semanticPrimitives.result'(bool,X99),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X99),'const.semanticPrimitives.Rval_1'(s(bool,X100))) | s(bool,g(s(bool,X98))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X100)),X99,bool)) | s(bool,'T_0') = s(bool,X98)) ) | $spl32),
  inference(superposition,[],[f789,f4327])).
fof(f12577,plain,(
  ( ! [X99,X100,X98] : (s('type.semanticPrimitives.result'(bool,X99),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X99),'const.semanticPrimitives.Rval_1'(s(bool,X100))) | s(bool,X100) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X98)))),X99,bool)) | s(bool,'T_0') = s(bool,X98)) ) | $spl32),
  inference(superposition,[],[f789,f4327])).
fof(f11238,plain,(
  ( ! [X54,X55,X53] : (s(bool,g(s(bool,X55))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X53)),X54,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X53)) ) | $spl32),
  inference(subsumption_resolution,[],[f11207,f109])).
fof(f11207,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X55))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X53)),X54,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X53)) ) | $spl32),
  inference(superposition,[],[f4829,f837])).
fof(f11237,plain,(
  ( ! [X48,X49] : (s(bool,g(s(bool,X48))) = s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl32),
  inference(subsumption_resolution,[],[f11205,f109])).
fof(f11205,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X48))) = s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl32),
  inference(superposition,[],[f4829,f4327])).
fof(f10619,plain,(
  ( ! [X35,X36] : (s(bool,X35) != s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X36,bool))) ) | ($spl3 | $spl52)),
  inference(superposition,[],[f10512,f765])).
fof(f9325,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X118))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X118)) ) | $spl32),
  inference(superposition,[],[f661,f4327])).
fof(f9171,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X118))))))) | s(bool,'T_0') = s(bool,X118)) ) | $spl32),
  inference(superposition,[],[f648,f4327])).
fof(f8794,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X96))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(superposition,[],[f667,f4327])).
fof(f8645,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X96))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(superposition,[],[f665,f4327])).
fof(f8434,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X96))))))))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(superposition,[],[f654,f4327])).
fof(f8316,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X96))))))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(superposition,[],[f652,f4327])).
fof(f6337,plain,(
  ( ! [X76,X74,X75] : (s('type.semanticPrimitives.result'(bool,X75),X76) != s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,g(s(bool,X74))) = s(bool,sK4(X76,X75,bool)) | s('type.semanticPrimitives.result'(bool,X75),X76) = s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),sK5(X76,X75,bool)))) | s(bool,'T_0') = s(bool,X74)) ) | $spl32),
  inference(superposition,[],[f749,f4327])).
fof(f5043,plain,(
  ( ! [X52,X50,X51] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X52))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X52) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X50))),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X50)) ) | $spl32),
  inference(superposition,[],[f657,f4327])).
fof(f4829,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl32),
  inference(subsumption_resolution,[],[f4761,f109])).
fof(f4761,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl32),
  inference(superposition,[],[f154,f4327])).
fof(f4801,plain,(
  ( ! [X118,X119,X117] : (s(bool,'T_0') != s(bool,X118) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,X117))),s('type.list.list'(bool),X119))) | s(bool,'T_0') = s(bool,X117)) ) | $spl32),
  inference(superposition,[],[f918,f4327])).
fof(f4794,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X97) | s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X96))))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(superposition,[],[f161,f4327])).
fof(f27280,plain,(
  ( ! [X200,X201] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X200)),X201,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X200)))) ) | $spl32),
  inference(superposition,[],[f4327,f4752])).
fof(f27840,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X17) = s(bool,g(s(bool,'F_0'))) | s(bool,X18) = s(bool,X19) | s(bool,X17) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl32),
  inference(superposition,[],[f27537,f282])).
fof(f27841,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X21) = s(bool,g(s(bool,'F_0'))) | s(bool,X22) = s(bool,X23) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X21) = s(bool,X22)) ) | $spl32),
  inference(superposition,[],[f27537,f282])).
fof(f30511,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X87)),X88,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X87)))) ) | $spl32),
  inference(forward_demodulation,[],[f27877,f4309])).
fof(f27877,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X87)),X88,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X87)))) ) | $spl32),
  inference(superposition,[],[f27537,f4752])).
fof(f4752,plain,(
  ( ! [X28,X27] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X27)),X28,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X27)))) ) | $spl32),
  inference(superposition,[],[f4327,f765])).
fof(f30440,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X45) != s(bool,X46) | s(bool,'T_0') = s(bool,g(s(bool,X46))) | s(bool,X45) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28931,f179])).
fof(f28931,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X45) != s(bool,X46) | s(bool,'T_0') = s(bool,g(s(bool,X46))) | s(bool,X45) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl32 | $spl52)),
  inference(superposition,[],[f28504,f282])).
fof(f30434,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | ($spl3 | $spl32 | $spl52)),
  inference(forward_demodulation,[],[f29075,f765])).
fof(f29075,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)))) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | ($spl3 | $spl32 | $spl52)),
  inference(condensation,[],[f29074])).
fof(f29074,plain,(
  ( ! [X90,X88,X89] : (s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X88)),X89,bool)))) | s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,X88))) | s(bool,'T_0') = s(bool,X90)) ) | ($spl3 | $spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28980,f112])).
fof(f28980,plain,(
  ( ! [X90,X88,X89] : (s(bool,'F_0') != s(bool,X90) | s(bool,'T_0') = s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X88)),X89,bool)))) | s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X89),'const.semanticPrimitives.Rval_1'(s(bool,X88))) | s(bool,'T_0') = s(bool,X90)) ) | ($spl3 | $spl32 | $spl52)),
  inference(superposition,[],[f28504,f782])).
fof(f29523,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.semanticPrimitives.result'(bool,X202),'const.semanticPrimitives.Rval_1'(s(bool,X203))) = s('type.semanticPrimitives.result'(bool,X202),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X201))))) | s(bool,X203) = s(bool,X204) | s(bool,'T_0') = s(bool,X204) | s(bool,'T_0') = s(bool,X201)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f29503])).
fof(f29503,plain,(
  ( ! [X204,X202,X203,X201] : (s(bool,'T_0') != s(bool,'T_0') | s('type.semanticPrimitives.result'(bool,X202),'const.semanticPrimitives.Rval_1'(s(bool,X203))) = s('type.semanticPrimitives.result'(bool,X202),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X201))))) | s(bool,X203) = s(bool,X204) | s(bool,'T_0') = s(bool,X204) | s(bool,'T_0') = s(bool,X201)) ) | $spl32),
  inference(superposition,[],[f359,f4327])).
fof(f30272,plain,(
  ( ! [X344,X345] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X344) = s(fun(bool,bool),X345) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X344,X345,bool,bool))))) ) | $spl32),
  inference(forward_demodulation,[],[f28286,f4309])).
fof(f28286,plain,(
  ( ! [X344,X345] : (s(bool,'F_0') != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X344) = s(fun(bool,bool),X345) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X344,X345,bool,bool))))) ) | $spl32),
  inference(duplicate_literal_removal,[],[f28042])).
fof(f28042,plain,(
  ( ! [X344,X345] : (s(bool,'F_0') != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X344) = s(fun(bool,bool),X345) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X344,X345,bool,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X344,X345,bool,bool))))) ) | $spl32),
  inference(superposition,[],[f694,f27537])).
fof(f29975,plain,(
  ( ! [X329,X331,X332,X330] : (s('type.semanticPrimitives.result'(bool,X331),'const.semanticPrimitives.Rval_1'(s(bool,X330))) != s('type.semanticPrimitives.result'(bool,X331),'const.semanticPrimitives.Rval_1'(s(bool,X332))) | s(bool,X332) = s(bool,g(s(bool,X329))) | s(bool,'F_0') = s(bool,X330)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f160,f29404])).
fof(f29970,plain,(
  ( ! [X308,X310,X306,X309,X307] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X307),s('type.list.list'(bool),X308))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X309),s('type.list.list'(bool),X310))) | s(bool,X309) = s(bool,g(s(bool,X306))) | s(bool,'F_0') = s(bool,X307)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f148,f29404])).
fof(f29969,plain,(
  ( ! [X304,X303,X305] : (s(bool,X305) != s(bool,f(s(bool,sK6(X303,X304,bool,bool)))) | s(fun(bool,bool),X303) = s(fun(bool,bool),X304) | s(bool,'F_0') = s(bool,X305)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f159,f29404])).
fof(f29865,plain,(
  ( ! [X516,X518,X517,X515] : (s(bool,X517) != s(bool,g(s(bool,X516))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X515),s('type.list.list'(bool),X518))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X517),s('type.list.list'(bool),X518))) | s(bool,'F_0') = s(bool,X515)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f918,f29404])).
fof(f29844,plain,(
  ( ! [X422,X424,X423,X425] : (s(bool,X424) != s(bool,g(s(bool,X423))) | s('type.semanticPrimitives.result'(bool,X425),'const.semanticPrimitives.Rval_1'(s(bool,X422))) = s('type.semanticPrimitives.result'(bool,X425),'const.semanticPrimitives.Rval_1'(s(bool,X424))) | s(bool,'F_0') = s(bool,X422)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f161,f29404])).
fof(f30174,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X1)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(duplicate_literal_removal,[],[f30173])).
fof(f30173,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(condensation,[],[f30172])).
fof(f30172,plain,(
  ( ! [X202,X200,X203,X201] : (s(bool,X202) != s(bool,g(s(bool,X201))) | s(bool,'T_0') = s(bool,X202) | s(bool,X200) = s(bool,X203) | s(bool,'T_0') = s(bool,X203)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29783,f9586])).
fof(f29783,plain,(
  ( ! [X202,X200,X203,X201] : (s(bool,X202) != s(bool,g(s(bool,X201))) | s(bool,'T_0') = s(bool,X202) | s(bool,X200) = s(bool,X203) | s(bool,'T_0') = s(bool,X203) | s(bool,'F_0') = s(bool,X200)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f2377,f29404])).
fof(f29642,plain,(
  ( ! [X154,X155,X153] : (s(bool,X153) = s(bool,g(s(bool,X155))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X153)),X154,bool))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f29404,f765])).
fof(f29272,plain,(
  ( ! [X218,X216,X217] : (s('type.semanticPrimitives.result'(bool,X217),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X217),'const.semanticPrimitives.Rval_1'(s(bool,X218))) | s(bool,X218) = s(bool,g(s(bool,X216)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f160,f29005])).
fof(f29267,plain,(
  ( ! [X198,X200,X199,X201] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X199))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X200),s('type.list.list'(bool),X201))) | s(bool,X200) = s(bool,g(s(bool,X198)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f148,f29005])).
fof(f29266,plain,(
  ( ! [X196,X197] : (s(bool,'T_0') != s(bool,f(s(bool,sK6(X196,X197,bool,bool)))) | s(fun(bool,bool),X196) = s(fun(bool,bool),X197)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f159,f29005])).
fof(f29404,plain,(
  ( ! [X132,X131] : (s(bool,X132) = s(bool,g(s(bool,X131))) | s(bool,'F_0') = s(bool,X132)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29229,f109])).
fof(f29229,plain,(
  ( ! [X132,X131] : (~p(s(bool,'T_0')) | s(bool,X132) = s(bool,g(s(bool,X131))) | s(bool,'F_0') = s(bool,X132)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f985,f29005])).
fof(f29328,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,X2))) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(condensation,[],[f29327])).
fof(f29327,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,X23))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(duplicate_literal_removal,[],[f29168])).
fof(f29168,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f29005,f282])).
fof(f29005,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29004,f179])).
fof(f29004,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(condensation,[],[f29003])).
fof(f29003,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f28921,f25900])).
fof(f28921,plain,(
  ( ! [X12,X11] : (s(bool,X11) != s(bool,X12) | s(bool,'T_0') = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl32 | $spl52)),
  inference(superposition,[],[f28504,f171])).
fof(f28916,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl52)),
  inference(superposition,[],[f28504,f5444])).
fof(f28555,plain,(
  ( ! [X185,X186] : (s(bool,X186) = s(bool,g(s(bool,X185))) | s(bool,'T_0') = s(bool,g(s(bool,X186))) | s(bool,X185) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(subsumption_resolution,[],[f28229,f109])).
fof(f28229,plain,(
  ( ! [X185,X186] : (~p(s(bool,'T_0')) | s(bool,X186) = s(bool,g(s(bool,X185))) | s(bool,'T_0') = s(bool,g(s(bool,X186))) | s(bool,X185) = s(bool,g(s(bool,'F_0')))) ) | $spl32),
  inference(superposition,[],[f27417,f27537])).
fof(f28526,plain,(
  ( ! [X296,X295,X297] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X297))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X296),s('type.list.list'(bool),X297))) | s(bool,X295) != s(bool,X296) | s(bool,'T_0') = s(bool,g(s(bool,X295)))) ) | $spl32),
  inference(forward_demodulation,[],[f28149,f4309])).
fof(f28149,plain,(
  ( ! [X296,X295,X297] : (s(bool,X295) != s(bool,X296) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X296),s('type.list.list'(bool),X297))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X297))) | s(bool,'T_0') = s(bool,g(s(bool,X295)))) ) | $spl32),
  inference(superposition,[],[f918,f27537])).
fof(f28514,plain,(
  ( ! [X225,X223,X224] : (s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X224))) | s(bool,X223) != s(bool,X224) | s(bool,'T_0') = s(bool,g(s(bool,X223)))) ) | $spl32),
  inference(forward_demodulation,[],[f28128,f4309])).
fof(f28128,plain,(
  ( ! [X225,X223,X224] : (s(bool,X223) != s(bool,X224) | s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,X224))) = s('type.semanticPrimitives.result'(bool,X225),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,g(s(bool,X223)))) ) | $spl32),
  inference(superposition,[],[f161,f27537])).
fof(f28504,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl3 | $spl32 | $spl52)),
  inference(condensation,[],[f28503])).
fof(f28503,plain,(
  ( ! [X173,X174] : (s(bool,'F_0') != s(bool,X173) | s(bool,'T_0') = s(bool,X174) | s(bool,'T_0') = s(bool,g(s(bool,X173)))) ) | ($spl3 | $spl32 | $spl52)),
  inference(subsumption_resolution,[],[f28105,f9610])).
fof(f28105,plain,(
  ( ! [X173,X174] : (s(bool,'F_0') != s(bool,X173) | s(bool,'T_0') = s(bool,X174) | s(bool,X174) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X173)))) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f9586,f27537])).
fof(f28043,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl32 | $spl52)),
  inference(superposition,[],[f9610,f27537])).
fof(f28461,plain,(
  ( ! [X341,X343,X342] : (s(X343,f(s(bool,'T_0'))) != s(X343,g(s(bool,'T_0'))) | s(fun(bool,X343),X341) = s(fun(bool,X343),X342) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X341,X342,X343,bool))))) ) | $spl32),
  inference(forward_demodulation,[],[f28041,f4309])).
fof(f28041,plain,(
  ( ! [X341,X343,X342] : (s(X343,f(s(bool,g(s(bool,'F_0'))))) != s(X343,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X343),X341) = s(fun(bool,X343),X342) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X341,X342,X343,bool))))) ) | $spl32),
  inference(superposition,[],[f159,f27537])).
fof(f28455,plain,(
  ( ! [X329,X328,X330] : (s(bool,'T_0') != s(bool,f(s(X328,sK6(X329,X330,bool,X328)))) | s(fun(X328,bool),X329) = s(fun(X328,bool),X330) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X328,sK6(X329,X330,bool,X328))))))) ) | $spl32),
  inference(forward_demodulation,[],[f28035,f4309])).
fof(f28035,plain,(
  ( ! [X329,X328,X330] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X328,sK6(X329,X330,bool,X328)))) | s(fun(X328,bool),X329) = s(fun(X328,bool),X330) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X328,sK6(X329,X330,bool,X328))))))) ) | $spl32),
  inference(superposition,[],[f159,f27537])).
fof(f28452,plain,(
  ( ! [X315,X316,X314] : (s('type.semanticPrimitives.result'(bool,X315),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X315),'const.semanticPrimitives.Rval_1'(s(bool,X316))) | s(bool,X314) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X316)),X315,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X314)))) ) | $spl32),
  inference(forward_demodulation,[],[f28031,f4309])).
fof(f28031,plain,(
  ( ! [X315,X316,X314] : (s('type.semanticPrimitives.result'(bool,X315),'const.semanticPrimitives.Rval_1'(s(bool,X316))) != s('type.semanticPrimitives.result'(bool,X315),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X314) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X316)),X315,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X314)))) ) | $spl32),
  inference(superposition,[],[f789,f27537])).
fof(f28450,plain,(
  ( ! [X308,X306,X307] : (s('type.semanticPrimitives.result'(bool,X307),X308) != s('type.semanticPrimitives.result'(bool,X307),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X306) = s(bool,sK4(X308,X307,bool)) | s('type.semanticPrimitives.result'(bool,X307),X308) = s('type.semanticPrimitives.result'(bool,X307),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X307),sK5(X308,X307,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X306)))) ) | $spl32),
  inference(forward_demodulation,[],[f28028,f4309])).
fof(f28028,plain,(
  ( ! [X308,X306,X307] : (s('type.semanticPrimitives.result'(bool,X307),X308) != s('type.semanticPrimitives.result'(bool,X307),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X306) = s(bool,sK4(X308,X307,bool)) | s('type.semanticPrimitives.result'(bool,X307),X308) = s('type.semanticPrimitives.result'(bool,X307),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X307),sK5(X308,X307,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,X306)))) ) | $spl32),
  inference(superposition,[],[f749,f27537])).
fof(f28439,plain,(
  ( ! [X241,X239,X240] : (s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,X241))) | s(bool,X239) = s(bool,X241) | s(bool,'T_0') = s(bool,g(s(bool,X239)))) ) | $spl32),
  inference(forward_demodulation,[],[f28009,f4309])).
fof(f28009,plain,(
  ( ! [X241,X239,X240] : (s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,X241))) != s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X239) = s(bool,X241) | s(bool,'T_0') = s(bool,g(s(bool,X239)))) ) | $spl32),
  inference(superposition,[],[f160,f27537])).
fof(f28437,plain,(
  ( ! [X222,X223,X221,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X222))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X223),s('type.list.list'(bool),X224))) | s(bool,X221) = s(bool,X223) | s(bool,'T_0') = s(bool,g(s(bool,X221)))) ) | $spl32),
  inference(forward_demodulation,[],[f28004,f4309])).
fof(f28004,plain,(
  ( ! [X222,X223,X221,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X223),s('type.list.list'(bool),X224))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X222))) | s(bool,X221) = s(bool,X223) | s(bool,'T_0') = s(bool,g(s(bool,X221)))) ) | $spl32),
  inference(superposition,[],[f148,f27537])).
fof(f28300,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f28299])).
fof(f28299,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,X24) = s(bool,g(s(bool,X22))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl32),
  inference(duplicate_literal_removal,[],[f27894])).
fof(f27894,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,X24) = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl32),
  inference(superposition,[],[f27537,f282])).
fof(f27806,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl32),
  inference(superposition,[],[f27537,f27537])).
fof(f28335,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,X37))) | s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,X37) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f27799,f179])).
fof(f27799,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,X37))) | s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl32),
  inference(superposition,[],[f27537,f282])).
fof(f27786,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl32),
  inference(superposition,[],[f27537,f5444])).
fof(f27543,plain,(
  ( ! [X136,X135,X137] : (s(bool,X137) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X135)),X136,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X137))) | s(bool,'F_0') = s(bool,X135)) ) | $spl32),
  inference(subsumption_resolution,[],[f27500,f109])).
fof(f27500,plain,(
  ( ! [X136,X135,X137] : (~p(s(bool,'T_0')) | s(bool,X137) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X135)),X136,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X137))) | s(bool,'F_0') = s(bool,X135)) ) | $spl32),
  inference(superposition,[],[f27417,f837])).
fof(f27542,plain,(
  ( ! [X130,X128,X131,X129] : (s(bool,X130) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X128)),X129,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X130))) | s('type.semanticPrimitives.result'(bool,X129),'const.semanticPrimitives.Rval_1'(s(bool,X128))) = s('type.semanticPrimitives.result'(bool,X129),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'T_0') = s(bool,X131)) ) | $spl32),
  inference(subsumption_resolution,[],[f27498,f109])).
fof(f27498,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,'T_0')) | s(bool,X130) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X128)),X129,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X130))) | s('type.semanticPrimitives.result'(bool,X129),'const.semanticPrimitives.Rval_1'(s(bool,X128))) = s('type.semanticPrimitives.result'(bool,X129),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'T_0') = s(bool,X131)) ) | $spl32),
  inference(superposition,[],[f27417,f784])).
fof(f27540,plain,(
  ( ! [X124] : (s(bool,X124) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X124)))) ) | ($spl3 | $spl32 | $spl125)),
  inference(subsumption_resolution,[],[f27496,f109])).
fof(f27496,plain,(
  ( ! [X124] : (~p(s(bool,'T_0')) | s(bool,X124) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X124)))) ) | ($spl3 | $spl32 | $spl125)),
  inference(superposition,[],[f27417,f24776])).
fof(f27537,plain,(
  ( ! [X121] : (s(bool,X121) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X121)))) ) | $spl32),
  inference(subsumption_resolution,[],[f27494,f109])).
fof(f27494,plain,(
  ( ! [X121] : (~p(s(bool,'T_0')) | s(bool,X121) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X121)))) ) | $spl32),
  inference(superposition,[],[f27417,f4309])).
fof(f27534,plain,(
  ( ! [X118,X117] : (s(bool,X118) = s(bool,g(s(bool,X117))) | s(bool,'T_0') = s(bool,g(s(bool,X118))) | s(bool,'T_0') = s(bool,X117)) ) | $spl32),
  inference(subsumption_resolution,[],[f27492,f109])).
fof(f27492,plain,(
  ( ! [X118,X117] : (~p(s(bool,'T_0')) | s(bool,X118) = s(bool,g(s(bool,X117))) | s(bool,'T_0') = s(bool,g(s(bool,X118))) | s(bool,'T_0') = s(bool,X117)) ) | $spl32),
  inference(superposition,[],[f27417,f4327])).
fof(f27508,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,g(s(bool,X25))) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl32),
  inference(subsumption_resolution,[],[f27463,f109])).
fof(f27463,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,g(s(bool,X25))) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl32),
  inference(superposition,[],[f27417,f282])).
fof(f26553,plain,(
  ( ! [X12,X10,X11] : (s(bool,X11) != s(bool,g(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl3 | $spl32 | $spl125)),
  inference(superposition,[],[f26288,f171])).
fof(f26551,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl32 | $spl125)),
  inference(superposition,[],[f26288,f282])).
fof(f26622,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl32 | $spl125)),
  inference(condensation,[],[f26621])).
fof(f26621,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | ($spl3 | $spl32 | $spl125)),
  inference(duplicate_literal_removal,[],[f26519])).
fof(f26519,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X29) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | ($spl3 | $spl32 | $spl125)),
  inference(superposition,[],[f26288,f282])).
fof(f26467,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X85),s('type.list.list'(bool),X86))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X87) | s(bool,'F_0') = s(bool,X87)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f26429])).
fof(f26429,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,'F_0') != s(bool,'F_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X85),s('type.list.list'(bool),X86))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X87) | s(bool,'F_0') = s(bool,X87)) ) | $spl32),
  inference(superposition,[],[f1161,f5444])).
fof(f26392,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X3))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl32),
  inference(superposition,[],[f1161,f5444])).
fof(f26288,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl32 | $spl125)),
  inference(duplicate_literal_removal,[],[f26287])).
fof(f26287,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl32 | $spl125)),
  inference(condensation,[],[f26286])).
fof(f26286,plain,(
  ( ! [X114,X115,X113] : (s(bool,X114) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X114) | s(bool,X113) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) ) | ($spl3 | $spl32 | $spl125)),
  inference(subsumption_resolution,[],[f25979,f9586])).
fof(f25979,plain,(
  ( ! [X114,X115,X113] : (s(bool,X114) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X114) | s(bool,X113) = s(bool,X115) | s(bool,'T_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X113)) ) | ($spl3 | $spl32 | $spl125)),
  inference(superposition,[],[f2377,f24825])).
fof(f25900,plain,(
  ( ! [X12,X10,X11] : (s(bool,X11) = s(bool,g(s(bool,X10))) | s(bool,'F_0') = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl32 | $spl125)),
  inference(superposition,[],[f24825,f171])).
fof(f25898,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X2)) ) | ($spl32 | $spl125)),
  inference(superposition,[],[f24825,f282])).
fof(f25647,plain,(
  ( ! [X8,X9] : (s(bool,X8) = s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl3 | $spl125)),
  inference(superposition,[],[f24776,f171])).
fof(f25645,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl125)),
  inference(superposition,[],[f24776,f282])).
fof(f24825,plain,(
  ( ! [X33] : (s(bool,X33) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X33)) ) | ($spl32 | $spl125)),
  inference(trivial_inequality_removal,[],[f24818])).
fof(f24818,plain,(
  ( ! [X33] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X33) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X33)) ) | ($spl32 | $spl125)),
  inference(superposition,[],[f24693,f5444])).
fof(f24887,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl125),
  inference(condensation,[],[f24886])).
fof(f24886,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl125),
  inference(subsumption_resolution,[],[f24814,f112])).
fof(f24814,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X17) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl125),
  inference(superposition,[],[f24693,f282])).
fof(f24788,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl125),
  inference(superposition,[],[f24693,f171])).
fof(f24786,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl125),
  inference(superposition,[],[f24693,f282])).
fof(f24776,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl125)),
  inference(unit_resulting_resolution,[],[f109,f179,f24693,f494])).
fof(f24782,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl125)),
  inference(unit_resulting_resolution,[],[f179,f765,f24693,f2377])).
fof(f24784,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'T_0'))),s('type.list.list'(bool),X1)))) ) | $spl125),
  inference(unit_resulting_resolution,[],[f24693,f148])).
fof(f24785,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'T_0')))))) ) | $spl125),
  inference(unit_resulting_resolution,[],[f24693,f160])).
fof(f232,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f179,f160])).
fof(f245,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f232,f160])).
fof(f544,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.result'(bool,X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X0)),X1))) != s('type.list.list'('type.semanticPrimitives.result'(bool,X0)),'const.list.CONS_2'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.list.list'('type.semanticPrimitives.result'(bool,X0)),X2)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f232,f148])).
fof(f546,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f179,f148])).
fof(f610,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3)))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f546,f149])).
fof(f611,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))),s('type.list.list'('type.list.list'(bool)),X1))) != s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2))),s('type.list.list'('type.list.list'(bool)),X3)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f546,f148])).
fof(f612,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2)))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f546,f160])).
fof(f4391,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,g(s(bool,'F_0'))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl32),
  inference(subsumption_resolution,[],[f4351,f109])).
fof(f4351,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | s(bool,X18) = s(bool,g(s(bool,'F_0'))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl32),
  inference(superposition,[],[f494,f4309])).
fof(f4832,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,g(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X58)) ) | $spl32),
  inference(subsumption_resolution,[],[f4780,f109])).
fof(f4780,plain,(
  ( ! [X59,X58] : (~p(s(bool,'T_0')) | s(bool,X59) = s(bool,g(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X58)) ) | $spl32),
  inference(superposition,[],[f985,f4327])).
fof(f5020,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1)))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f546,f657])).
fof(f5022,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f546,f657])).
fof(f5600,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X91))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X92),s('type.list.list'(bool),X93))) | s(bool,X90) = s(bool,X92) | s(bool,'F_0') = s(bool,X90)) ) | $spl32),
  inference(forward_demodulation,[],[f5496,f4309])).
fof(f5496,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X92),s('type.list.list'(bool),X93))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X91))) | s(bool,X90) = s(bool,X92) | s(bool,'F_0') = s(bool,X90)) ) | $spl32),
  inference(superposition,[],[f148,f4392])).
fof(f5609,plain,(
  ( ! [X154,X152,X153] : (s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,'F_0') = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | $spl32),
  inference(forward_demodulation,[],[f5514,f4309])).
fof(f5514,plain,(
  ( ! [X154,X152,X153] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,'F_0') = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | $spl32),
  inference(superposition,[],[f159,f4392])).
fof(f5612,plain,(
  ( ! [X163,X161,X162] : (s(X163,f(s(bool,'T_0'))) != s(X163,g(s(bool,'T_0'))) | s(fun(bool,X163),X161) = s(fun(bool,X163),X162) | s(bool,'F_0') = s(bool,sK6(X161,X162,X163,bool))) ) | $spl32),
  inference(forward_demodulation,[],[f5518,f4309])).
fof(f5518,plain,(
  ( ! [X163,X161,X162] : (s(X163,f(s(bool,g(s(bool,'F_0'))))) != s(X163,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X163),X161) = s(fun(bool,X163),X162) | s(bool,'F_0') = s(bool,sK6(X161,X162,X163,bool))) ) | $spl32),
  inference(superposition,[],[f159,f4392])).
fof(f5626,plain,(
  ( ! [X103,X102,X104] : (s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,X102) != s(bool,X103) | s(bool,'F_0') = s(bool,X102)) ) | $spl32),
  inference(forward_demodulation,[],[f5560,f4309])).
fof(f5560,plain,(
  ( ! [X103,X102,X104] : (s(bool,X102) != s(bool,X103) | s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,X103))) = s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X102)) ) | $spl32),
  inference(superposition,[],[f161,f4392])).
fof(f5628,plain,(
  ( ! [X121,X122,X120] : (s('type.list.list'(bool),X122) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X122))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X121),'const.semanticPrimitives.Rval_1'(s(bool,X120))))) | s(bool,'F_0') = s(bool,X120)) ) | $spl32),
  inference(forward_demodulation,[],[f5565,f4309])).
fof(f5565,plain,(
  ( ! [X121,X122,X120] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X121),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X122))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X121),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X121),'const.semanticPrimitives.Rval_1'(s(bool,X120))))) | s('type.list.list'(bool),X122) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'F_0') = s(bool,X120)) ) | $spl32),
  inference(superposition,[],[f657,f4392])).
fof(f5629,plain,(
  ( ! [X132,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X132),s('type.list.list'(bool),X133))) | s(bool,X131) != s(bool,X132) | s(bool,'F_0') = s(bool,X131)) ) | $spl32),
  inference(forward_demodulation,[],[f5569,f4309])).
fof(f5569,plain,(
  ( ! [X132,X133,X131] : (s(bool,X131) != s(bool,X132) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X132),s('type.list.list'(bool),X133))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X133))) | s(bool,'F_0') = s(bool,X131)) ) | $spl32),
  inference(superposition,[],[f918,f4392])).
fof(f6235,plain,(
  ( ! [X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),X33) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X34),X33))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X33,X34,bool)))) | s(bool,'F_0') = s(bool,sK4(X33,X34,bool))) ) | $spl32),
  inference(forward_demodulation,[],[f6164,f4309])).
fof(f6164,plain,(
  ( ! [X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),X33) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X34),X33))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X33,X34,bool)))) | s(bool,'F_0') = s(bool,sK4(X33,X34,bool))) ) | $spl32),
  inference(superposition,[],[f733,f4392])).
fof(f6376,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),X35) != s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X33) = s(bool,sK4(X35,X34,bool)) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X35,X34,bool)))) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(forward_demodulation,[],[f6323,f4309])).
fof(f6323,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),X35) != s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X33) = s(bool,sK4(X35,X34,bool)) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X35,X34,bool)))) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(superposition,[],[f749,f4392])).
fof(f7045,plain,(
  ( ! [X33,X34] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X34),X33))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X34),X33) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X33,X34,bool)))) | s(bool,'F_0') = s(bool,sK4(X33,X34,bool))) ) | $spl32),
  inference(forward_demodulation,[],[f6955,f4309])).
fof(f6955,plain,(
  ( ! [X33,X34] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X34),X33))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X34),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X34),X33) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),sK5(X33,X34,bool)))) | s(bool,'F_0') = s(bool,sK4(X33,X34,bool))) ) | $spl32),
  inference(superposition,[],[f748,f4392])).
fof(f8353,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X41))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(forward_demodulation,[],[f8302,f4309])).
fof(f8302,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X41))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(superposition,[],[f652,f4392])).
fof(f8360,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X89),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(forward_demodulation,[],[f8314,f4309])).
fof(f8314,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X89),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(superposition,[],[f652,f4392])).
fof(f8471,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43) != s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X41))))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(forward_demodulation,[],[f8420,f4309])).
fof(f8420,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43) != s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X41))))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(superposition,[],[f654,f4392])).
fof(f8478,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91) != s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X89),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(forward_demodulation,[],[f8432,f4309])).
fof(f8432,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91) != s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X89),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(superposition,[],[f654,f4392])).
fof(f8692,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X41),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(forward_demodulation,[],[f8631,f4309])).
fof(f8631,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44) = s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X41),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(superposition,[],[f665,f4392])).
fof(f8699,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X89))))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(forward_demodulation,[],[f8643,f4309])).
fof(f8643,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X89))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(superposition,[],[f665,f4392])).
fof(f8839,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43) != s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X41),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(forward_demodulation,[],[f8780,f4309])).
fof(f8780,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43) != s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),X43))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X42),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X41),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X41)) ) | $spl32),
  inference(superposition,[],[f667,f4392])).
fof(f8846,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91) != s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X89))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(forward_demodulation,[],[f8792,f4309])).
fof(f8792,plain,(
  ( ! [X92,X90,X91,X89] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91) != s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X90),'const.semanticPrimitives.Rval_1'(s(bool,X89))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),X91))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X90),X92),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X90),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X89)) ) | $spl32),
  inference(superposition,[],[f667,f4392])).
fof(f9214,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X52))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X53))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51) = s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))))) | s(bool,'F_0') = s(bool,X49)) ) | $spl32),
  inference(forward_demodulation,[],[f9157,f4309])).
fof(f9157,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X52))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X53))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51) = s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))))) | s(bool,'F_0') = s(bool,X49)) ) | $spl32),
  inference(superposition,[],[f648,f4392])).
fof(f9221,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111) = s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X110),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X109),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X113))) | s(bool,'F_0') = s(bool,X109)) ) | $spl32),
  inference(forward_demodulation,[],[f9169,f4309])).
fof(f9169,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X109),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X113))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111) = s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X110),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))) | s(bool,'F_0') = s(bool,X109)) ) | $spl32),
  inference(superposition,[],[f648,f4392])).
fof(f9376,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X52))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X53))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51) = s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X49),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X49)) ) | $spl32),
  inference(forward_demodulation,[],[f9311,f4309])).
fof(f9311,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X52))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X50)),X53))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X50),X51) = s('type.semanticPrimitives.result'('type.list.list'(bool),X50),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X49),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X49)) ) | $spl32),
  inference(superposition,[],[f661,f4392])).
fof(f9383,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111) = s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X110),'const.semanticPrimitives.Rval_1'(s(bool,X109))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X113))) | s(bool,'F_0') = s(bool,X109)) ) | $spl32),
  inference(forward_demodulation,[],[f9323,f4309])).
fof(f9323,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X112))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X110),'const.semanticPrimitives.Rval_1'(s(bool,X109))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X110)),X113))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X110),X111) = s('type.semanticPrimitives.result'('type.list.list'(bool),X110),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X109)) ) | $spl32),
  inference(superposition,[],[f661,f4392])).
fof(f9578,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X2,bool)) | s(bool,X0) = s(bool,X1)) ) | $spl3),
  inference(condensation,[],[f9577])).
fof(f9577,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f9553])).
fof(f9553,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X24)) ) | $spl3),
  inference(superposition,[],[f2377,f1729])).
fof(f11113,plain,(
  ( ! [X61,X59,X60] : (s(bool,'F_0') != s(bool,X59) | s(bool,'T_0') = s(bool,X61) | s(bool,X61) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X59)),X60,bool))) ) | $spl3),
  inference(superposition,[],[f9586,f765])).
fof(f11323,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) = s(bool,X81) | s(bool,'F_0') = s(bool,X81) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X79)),X80,bool))) ) | $spl32),
  inference(superposition,[],[f5444,f765])).
fof(f11512,plain,(
  ( ! [X255,X253,X251,X254,X252] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X252),s('type.list.list'(bool),X253))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X254),s('type.list.list'(bool),X255))) | s(bool,X251) = s(bool,X254) | s(bool,'F_0') = s(bool,X252) | s(bool,'F_0') = s(bool,X251)) ) | $spl32),
  inference(superposition,[],[f148,f5444])).
fof(f11517,plain,(
  ( ! [X277,X275,X276,X274] : (s('type.semanticPrimitives.result'(bool,X276),'const.semanticPrimitives.Rval_1'(s(bool,X275))) != s('type.semanticPrimitives.result'(bool,X276),'const.semanticPrimitives.Rval_1'(s(bool,X277))) | s(bool,X274) = s(bool,X277) | s(bool,'F_0') = s(bool,X275) | s(bool,'F_0') = s(bool,X274)) ) | $spl32),
  inference(superposition,[],[f160,f5444])).
fof(f11519,plain,(
  ( ! [X282,X285,X283,X284] : (s(bool,X283) != s(bool,X284) | s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X282))) = s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X284))) | s(bool,'F_0') = s(bool,X283) | s(bool,'F_0') = s(bool,X282)) ) | $spl32),
  inference(superposition,[],[f161,f5444])).
fof(f11526,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X314)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X314),X315),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X314)),X316))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X314)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X314),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X313),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X314)),X317))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X314),X315) = s('type.semanticPrimitives.result'('type.list.list'(bool),X314),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X314),'const.semanticPrimitives.Rval_1'(s(bool,X312))))) | s(bool,'F_0') = s(bool,X313) | s(bool,'F_0') = s(bool,X312)) ) | $spl32),
  inference(superposition,[],[f648,f5444])).
fof(f11527,plain,(
  ( ! [X321,X318,X320,X322,X319] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X320),X321),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X320),X322))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X320),X321),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X320),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X319),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X320),X322) = s('type.semanticPrimitives.result'('type.list.list'(bool),X320),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X320),'const.semanticPrimitives.Rval_1'(s(bool,X318))))) | s(bool,'F_0') = s(bool,X319) | s(bool,'F_0') = s(bool,X318)) ) | $spl32),
  inference(superposition,[],[f652,f5444])).
fof(f11528,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X325),X326) != s('type.semanticPrimitives.result'('type.list.list'(bool),X325),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X324),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X325),X327),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X325),X326))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X325),X327),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X325),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X325),'const.semanticPrimitives.Rval_1'(s(bool,X323))))))) | s(bool,'F_0') = s(bool,X324) | s(bool,'F_0') = s(bool,X323)) ) | $spl32),
  inference(superposition,[],[f654,f5444])).
fof(f11529,plain,(
  ( ! [X329,X331,X328,X330] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X330),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X331))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X330),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X330),'const.semanticPrimitives.Rval_1'(s(bool,X329))))) | s('type.list.list'(bool),X331) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X328),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'F_0') = s(bool,X329) | s(bool,'F_0') = s(bool,X328)) ) | $spl32),
  inference(superposition,[],[f657,f5444])).
fof(f11531,plain,(
  ( ! [X341,X337,X339,X340,X336,X338] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X338)),X340))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X338)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X338),'const.semanticPrimitives.Rval_1'(s(bool,X337))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X338)),X341))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X338),X339) = s('type.semanticPrimitives.result'('type.list.list'(bool),X338),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X336),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X337) | s(bool,'F_0') = s(bool,X336)) ) | $spl32),
  inference(superposition,[],[f661,f5444])).
fof(f11532,plain,(
  ( ! [X344,X346,X343,X345,X342] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X344),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X344),X346))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X344),X345),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X344),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X344),'const.semanticPrimitives.Rval_1'(s(bool,X343))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X344),X346) = s('type.semanticPrimitives.result'('type.list.list'(bool),X344),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X342),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X343) | s(bool,'F_0') = s(bool,X342)) ) | $spl32),
  inference(superposition,[],[f665,f5444])).
fof(f11533,plain,(
  ( ! [X350,X349,X351,X347,X348] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X349),X350) != s('type.semanticPrimitives.result'('type.list.list'(bool),X349),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X349),'const.semanticPrimitives.Rval_1'(s(bool,X348))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X349),X351),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X349),X350))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X349),X351),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X349),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X347),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X348) | s(bool,'F_0') = s(bool,X347)) ) | $spl32),
  inference(superposition,[],[f667,f5444])).
fof(f11535,plain,(
  ( ! [X356,X358,X357,X359] : (s('type.semanticPrimitives.result'(bool,X358),X359) != s('type.semanticPrimitives.result'(bool,X358),'const.semanticPrimitives.Rval_1'(s(bool,X357))) | s(bool,X356) = s(bool,sK4(X359,X358,bool)) | s('type.semanticPrimitives.result'(bool,X358),X359) = s('type.semanticPrimitives.result'(bool,X358),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X358),sK5(X359,X358,bool)))) | s(bool,'F_0') = s(bool,X357) | s(bool,'F_0') = s(bool,X356)) ) | $spl32),
  inference(superposition,[],[f749,f5444])).
fof(f11537,plain,(
  ( ! [X364,X366,X365,X363] : (s(bool,X364) != s(bool,X365) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X363),s('type.list.list'(bool),X366))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X365),s('type.list.list'(bool),X366))) | s(bool,'F_0') = s(bool,X364) | s(bool,'F_0') = s(bool,X363)) ) | $spl32),
  inference(superposition,[],[f918,f5444])).
fof(f11540,plain,(
  ( ! [X379,X380,X382,X381] : (s(bool,X382) != s(bool,f(s(X379,sK6(X380,X381,bool,X379)))) | s(fun(X379,bool),X380) = s(fun(X379,bool),X381) | s(bool,'F_0') = s(bool,X382) | s(bool,'F_0') = s(bool,g(s(X379,sK6(X380,X381,bool,X379))))) ) | $spl32),
  inference(superposition,[],[f159,f5444])).
fof(f11542,plain,(
  ( ! [X387,X388,X386] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X387),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X387),X386))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X387),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X388),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X387),X386) = s('type.semanticPrimitives.result'(bool,X387),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X387),sK5(X386,X387,bool)))) | s(bool,'F_0') = s(bool,X388) | s(bool,'F_0') = s(bool,sK4(X386,X387,bool))) ) | $spl32),
  inference(superposition,[],[f748,f5444])).
fof(f11543,plain,(
  ( ! [X389,X391,X390] : (s('type.semanticPrimitives.result'(bool,X390),X389) = s('type.semanticPrimitives.result'(bool,X390),'const.semanticPrimitives.Rval_1'(s(bool,X391))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X390),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X390),X389))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X390),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X390),sK5(X389,X390,bool)))) | s(bool,'F_0') = s(bool,X391) | s(bool,'F_0') = s(bool,sK4(X389,X390,bool))) ) | $spl32),
  inference(superposition,[],[f733,f5444])).
fof(f11544,plain,(
  ( ! [X393,X392,X394] : (s('type.semanticPrimitives.result'(bool,X393),X392) = s('type.semanticPrimitives.result'(bool,X393),'const.semanticPrimitives.Rval_1'(s(bool,X394))) | s('type.semanticPrimitives.result'(bool,X393),X392) = s('type.semanticPrimitives.result'(bool,X393),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X393),sK5(X392,X393,bool)))) | s(bool,'F_0') = s(bool,X394) | s(bool,'F_0') = s(bool,sK4(X392,X393,bool))) ) | $spl32),
  inference(superposition,[],[f157,f5444])).
fof(f11546,plain,(
  ( ! [X399,X401,X398,X400] : (s(X400,f(s(bool,X401))) != s(X400,g(s(bool,X401))) | s(fun(bool,X400),X398) = s(fun(bool,X400),X399) | s(bool,'F_0') = s(bool,X401) | s(bool,'F_0') = s(bool,sK6(X398,X399,X400,bool))) ) | $spl32),
  inference(superposition,[],[f159,f5444])).
fof(f11677,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X10))) != s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13) | s(bool,X10) = s(bool,X14) | s(bool,'F_0') = s(bool,X14)) ) | $spl32),
  inference(superposition,[],[f235,f5444])).
fof(f11678,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,X15) != s(bool,X16) | s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X16))) = s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X18))) | s(bool,'T_0') = s(bool,X18) | s(bool,X15) = s(bool,X19) | s(bool,'F_0') = s(bool,X19)) ) | $spl32),
  inference(superposition,[],[f256,f5444])).
fof(f11680,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X24),s('type.list.list'(bool),X25))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X26),s('type.list.list'(bool),X27))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X24) = s(bool,X29) | s(bool,'F_0') = s(bool,X29)) ) | $spl32),
  inference(superposition,[],[f554,f5444])).
fof(f11681,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(X31,f(s(bool,X30))) != s(X31,g(s(bool,X30))) | s(fun(bool,X31),X32) = s(fun(bool,X31),X33) | s(bool,'T_0') = s(bool,sK6(X32,X33,X31,bool)) | s(bool,X30) = s(bool,X34) | s(bool,'F_0') = s(bool,X34)) ) | $spl32),
  inference(superposition,[],[f689,f5444])).
fof(f11682,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X41,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) ) | $spl32),
  inference(superposition,[],[f1729,f5444])).
fof(f11684,plain,(
  ( ! [X47,X46] : (s(bool,'T_0') = s(bool,g(s(bool,X46))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X47)) ) | $spl32),
  inference(superposition,[],[f4309,f5444])).
fof(f11686,plain,(
  ( ! [X52,X50,X51] : (s(bool,X51) = s(bool,g(s(bool,X50))) | s(bool,'F_0') = s(bool,X51) | s(bool,X50) = s(bool,X52) | s(bool,'F_0') = s(bool,X52)) ) | $spl32),
  inference(superposition,[],[f4392,f5444])).
fof(f11690,plain,(
  ( ! [X64,X62,X63] : (s(bool,X63) != s(bool,g(s(bool,X62))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X64) | s(bool,'F_0') = s(bool,X64)) ) | ($spl32 | $spl52)),
  inference(superposition,[],[f9610,f5444])).
fof(f11737,plain,(
  ( ! [X218,X220,X219,X221] : (s(bool,X218) != s(bool,X219) | s('type.semanticPrimitives.result'(bool,X220),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X220),'const.semanticPrimitives.Rval_1'(s(bool,X219))) | s(bool,X218) = s(bool,X221) | s(bool,'F_0') = s(bool,X221)) ) | $spl32),
  inference(superposition,[],[f161,f5444])).
fof(f11742,plain,(
  ( ! [X251,X249,X246,X250,X248,X247] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X249))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X246),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X247)),X250))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X247),X248) = s('type.semanticPrimitives.result'('type.list.list'(bool),X247),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X247),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,X246) = s(bool,X251) | s(bool,'F_0') = s(bool,X251)) ) | $spl32),
  inference(superposition,[],[f648,f5444])).
fof(f11743,plain,(
  ( ! [X255,X253,X254,X252,X256] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X253),X254),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X253),X255))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X253),X254),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X253),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X252),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X253),X255) = s('type.semanticPrimitives.result'('type.list.list'(bool),X253),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X253),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,X252) = s(bool,X256) | s(bool,'F_0') = s(bool,X256)) ) | $spl32),
  inference(superposition,[],[f652,f5444])).
fof(f11744,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X258),X259) != s('type.semanticPrimitives.result'('type.list.list'(bool),X258),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X257),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X258),X260),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X258),X259))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X258),X260),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X258),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X258),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s(bool,X257) = s(bool,X261) | s(bool,'F_0') = s(bool,X261)) ) | $spl32),
  inference(superposition,[],[f654,f5444])).
fof(f11745,plain,(
  ( ! [X263,X265,X262,X264] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X263),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X264))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X263),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X263),'const.semanticPrimitives.Rval_1'(s(bool,X262))))) | s('type.list.list'(bool),X264) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X262) = s(bool,X265) | s(bool,'F_0') = s(bool,X265)) ) | $spl32),
  inference(superposition,[],[f657,f5444])).
fof(f11747,plain,(
  ( ! [X271,X273,X275,X270,X272,X274] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X271)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X271)),X273))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X271)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X271),'const.semanticPrimitives.Rval_1'(s(bool,X270))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X271)),X274))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X271),X272) = s('type.semanticPrimitives.result'('type.list.list'(bool),X271),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X270) = s(bool,X275) | s(bool,'F_0') = s(bool,X275)) ) | $spl32),
  inference(superposition,[],[f661,f5444])).
fof(f11748,plain,(
  ( ! [X280,X277,X279,X276,X278] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X277),X278),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X277),X279))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X277),X278),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X277),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X277),'const.semanticPrimitives.Rval_1'(s(bool,X276))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X277),X279) = s('type.semanticPrimitives.result'('type.list.list'(bool),X277),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X276) = s(bool,X280) | s(bool,'F_0') = s(bool,X280)) ) | $spl32),
  inference(superposition,[],[f665,f5444])).
fof(f11749,plain,(
  ( ! [X282,X285,X281,X283,X284] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X282),X283) != s('type.semanticPrimitives.result'('type.list.list'(bool),X282),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X282),'const.semanticPrimitives.Rval_1'(s(bool,X281))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X282),X284),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X282),X283))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X282),X284),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X282),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X281) = s(bool,X285) | s(bool,'F_0') = s(bool,X285)) ) | $spl32),
  inference(superposition,[],[f667,f5444])).
fof(f11751,plain,(
  ( ! [X292,X290,X293,X291] : (s('type.semanticPrimitives.result'(bool,X291),X292) != s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rval_1'(s(bool,X290))) | s(bool,'F_0') = s(bool,sK4(X292,X291,bool)) | s('type.semanticPrimitives.result'(bool,X291),X292) = s('type.semanticPrimitives.result'(bool,X291),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X291),sK5(X292,X291,bool)))) | s(bool,X290) = s(bool,X293) | s(bool,'F_0') = s(bool,X293)) ) | $spl32),
  inference(superposition,[],[f749,f5444])).
fof(f11753,plain,(
  ( ! [X300,X298,X297,X299] : (s(bool,X297) != s(bool,X298) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X299))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X298),s('type.list.list'(bool),X299))) | s(bool,X297) = s(bool,X300) | s(bool,'F_0') = s(bool,X300)) ) | $spl32),
  inference(superposition,[],[f918,f5444])).
fof(f11832,plain,(
  ( ! [X218,X220,X219,X217,X221] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X218))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X219),s('type.list.list'(bool),X220))) | s(bool,X217) = s(bool,X219) | s(bool,X217) = s(bool,X221) | s(bool,'F_0') = s(bool,X221)) ) | $spl32),
  inference(superposition,[],[f148,f5444])).
fof(f11837,plain,(
  ( ! [X243,X241,X242,X240] : (s('type.semanticPrimitives.result'(bool,X241),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X241),'const.semanticPrimitives.Rval_1'(s(bool,X242))) | s(bool,X240) = s(bool,X242) | s(bool,X240) = s(bool,X243) | s(bool,'F_0') = s(bool,X243)) ) | $spl32),
  inference(superposition,[],[f160,f5444])).
fof(f11839,plain,(
  ( ! [X251,X249,X250,X248] : (s(bool,'F_0') != s(bool,X249) | s('type.semanticPrimitives.result'(bool,X250),'const.semanticPrimitives.Rval_1'(s(bool,X248))) = s('type.semanticPrimitives.result'(bool,X250),'const.semanticPrimitives.Rval_1'(s(bool,X249))) | s(bool,X248) = s(bool,X251) | s(bool,'F_0') = s(bool,X251)) ) | $spl32),
  inference(superposition,[],[f161,f5444])).
fof(f11846,plain,(
  ( ! [X280,X282,X279,X281,X283,X278] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X279)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X279),X280),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X279)),X281))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X279)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X279),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X279)),X282))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X279),X280) = s('type.semanticPrimitives.result'('type.list.list'(bool),X279),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X279),'const.semanticPrimitives.Rval_1'(s(bool,X278))))) | s(bool,X278) = s(bool,X283) | s(bool,'F_0') = s(bool,X283)) ) | $spl32),
  inference(superposition,[],[f648,f5444])).
fof(f11847,plain,(
  ( ! [X288,X285,X287,X284,X286] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X285),X286),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X285),X287))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X285),X286),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X285),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X285),X287) = s('type.semanticPrimitives.result'('type.list.list'(bool),X285),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X284))))) | s(bool,X284) = s(bool,X288) | s(bool,'F_0') = s(bool,X288)) ) | $spl32),
  inference(superposition,[],[f652,f5444])).
fof(f11848,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X290),X291) != s('type.semanticPrimitives.result'('type.list.list'(bool),X290),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X290),X292),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X290),X291))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X290),X292),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X290),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,X289))))))) | s(bool,X289) = s(bool,X293) | s(bool,'F_0') = s(bool,X293)) ) | $spl32),
  inference(superposition,[],[f654,f5444])).
fof(f11849,plain,(
  ( ! [X294,X296,X295,X297] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X295),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X296))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X295),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X295),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'(bool),X296) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X294),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,X294) = s(bool,X297) | s(bool,'F_0') = s(bool,X297)) ) | $spl32),
  inference(superposition,[],[f657,f5444])).
fof(f11851,plain,(
  ( ! [X302,X304,X306,X303,X305,X307] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X303)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X303),X304),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X303)),X305))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X303)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X303),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X303)),X306))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X303),X304) = s('type.semanticPrimitives.result'('type.list.list'(bool),X303),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X302),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X302) = s(bool,X307) | s(bool,'F_0') = s(bool,X307)) ) | $spl32),
  inference(superposition,[],[f661,f5444])).
fof(f11852,plain,(
  ( ! [X308,X310,X312,X309,X311] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X309),X310),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X309),X311))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X309),X310),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X309),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X309),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X309),X311) = s('type.semanticPrimitives.result'('type.list.list'(bool),X309),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X308),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,X308) = s(bool,X312) | s(bool,'F_0') = s(bool,X312)) ) | $spl32),
  inference(superposition,[],[f665,f5444])).
fof(f11853,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X314),X315) != s('type.semanticPrimitives.result'('type.list.list'(bool),X314),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X314),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X314),X316),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X314),X315))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X314),X316),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X314),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X313),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,X313) = s(bool,X317) | s(bool,'F_0') = s(bool,X317)) ) | $spl32),
  inference(superposition,[],[f667,f5444])).
fof(f11855,plain,(
  ( ! [X325,X323,X324,X322] : (s('type.semanticPrimitives.result'(bool,X323),X324) != s('type.semanticPrimitives.result'(bool,X323),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X322) = s(bool,sK4(X324,X323,bool)) | s('type.semanticPrimitives.result'(bool,X323),X324) = s('type.semanticPrimitives.result'(bool,X323),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X323),sK5(X324,X323,bool)))) | s(bool,X322) = s(bool,X325) | s(bool,'F_0') = s(bool,X325)) ) | $spl32),
  inference(superposition,[],[f749,f5444])).
fof(f11857,plain,(
  ( ! [X329,X331,X332,X330] : (s(bool,'F_0') != s(bool,X330) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X329),s('type.list.list'(bool),X331))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X330),s('type.list.list'(bool),X331))) | s(bool,X329) = s(bool,X332) | s(bool,'F_0') = s(bool,X332)) ) | $spl32),
  inference(superposition,[],[f918,f5444])).
fof(f11860,plain,(
  ( ! [X344,X346,X343,X345] : (s(bool,'F_0') != s(bool,f(s(X343,sK6(X344,X345,bool,X343)))) | s(fun(X343,bool),X344) = s(fun(X343,bool),X345) | s(bool,X346) = s(bool,g(s(X343,sK6(X344,X345,bool,X343)))) | s(bool,'F_0') = s(bool,X346)) ) | $spl32),
  inference(superposition,[],[f159,f5444])).
fof(f11862,plain,(
  ( ! [X350,X352,X351] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X351),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X351),X350))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X351),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'(bool,X351),X350) = s('type.semanticPrimitives.result'(bool,X351),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X351),sK5(X350,X351,bool)))) | s(bool,X352) = s(bool,sK4(X350,X351,bool)) | s(bool,'F_0') = s(bool,X352)) ) | $spl32),
  inference(superposition,[],[f748,f5444])).
fof(f11863,plain,(
  ( ! [X354,X353,X355] : (s('type.semanticPrimitives.result'(bool,X354),X353) = s('type.semanticPrimitives.result'(bool,X354),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X354),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X354),X353))) = s('type.semanticPrimitives.result'('type.list.list'(bool),X354),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X354),sK5(X353,X354,bool)))) | s(bool,X355) = s(bool,sK4(X353,X354,bool)) | s(bool,'F_0') = s(bool,X355)) ) | $spl32),
  inference(superposition,[],[f733,f5444])).
fof(f11864,plain,(
  ( ! [X356,X358,X357] : (s('type.semanticPrimitives.result'(bool,X357),X356) = s('type.semanticPrimitives.result'(bool,X357),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'(bool,X357),X356) = s('type.semanticPrimitives.result'(bool,X357),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X357),sK5(X356,X357,bool)))) | s(bool,X358) = s(bool,sK4(X356,X357,bool)) | s(bool,'F_0') = s(bool,X358)) ) | $spl32),
  inference(superposition,[],[f157,f5444])).
fof(f11866,plain,(
  ( ! [X364,X362,X365,X363] : (s(X364,f(s(bool,'F_0'))) != s(X364,g(s(bool,'F_0'))) | s(fun(bool,X364),X362) = s(fun(bool,X364),X363) | s(bool,X365) = s(bool,sK6(X362,X363,X364,bool)) | s(bool,'F_0') = s(bool,X365)) ) | $spl32),
  inference(superposition,[],[f159,f5444])).
fof(f12161,plain,(
  ( ! [X189,X187,X190,X188] : (s(fun(X187,bool),X188) = s(fun(X187,bool),X189) | s(bool,'T_0') = s(bool,g(s(X187,sK6(X188,X189,bool,X187)))) | s(bool,X190) = s(bool,f(s(X187,sK6(X188,X189,bool,X187)))) | s(bool,'F_0') = s(bool,X190)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f11821])).
fof(f11821,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X187,bool),X188) = s(fun(X187,bool),X189) | s(bool,'T_0') = s(bool,g(s(X187,sK6(X188,X189,bool,X187)))) | s(bool,X190) = s(bool,f(s(X187,sK6(X188,X189,bool,X187)))) | s(bool,'F_0') = s(bool,X190)) ) | $spl32),
  inference(superposition,[],[f694,f5444])).
fof(f12187,plain,(
  ( ! [X52,X50,X51,X49] : (s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))) = s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,X52) | s(bool,'F_0') = s(bool,X52)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f11771])).
fof(f11771,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X49))) = s('type.semanticPrimitives.result'(bool,X50),'const.semanticPrimitives.Rval_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,X52) | s(bool,'F_0') = s(bool,X52)) ) | $spl32),
  inference(superposition,[],[f256,f5444])).
fof(f12448,plain,(
  ( ! [X182,X183] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,X182) = s(bool,X183) | s(bool,'F_0') = s(bool,X183)) ) | ($spl3 | $spl32 | $spl52)),
  inference(subsumption_resolution,[],[f11728,f179])).
fof(f11728,plain,(
  ( ! [X182,X183] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X182) = s(bool,X183) | s(bool,'F_0') = s(bool,X183)) ) | ($spl32 | $spl52)),
  inference(superposition,[],[f9610,f5444])).
fof(f12449,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,X2)) | s(bool,X1) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl32),
  inference(subsumption_resolution,[],[f11756,f111])).
fof(f11756,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,'F_0')) | p(s(bool,X2)) | s(bool,X1) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl32),
  inference(superposition,[],[f151,f5444])).
fof(f12559,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'(bool,X40),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X40),'const.semanticPrimitives.Rval_1'(s(bool,X41))) | s(bool,X41) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X39)),X40,bool)) | s(bool,X39) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12560,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.semanticPrimitives.result'(bool,X45),'const.semanticPrimitives.Rval_1'(s(bool,X44))) != s('type.semanticPrimitives.result'(bool,X45),'const.semanticPrimitives.Rval_1'(s(bool,X46))) | s(bool,X46) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X43)),X45,bool)) | s(bool,'F_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12566,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.semanticPrimitives.result'(bool,X67),'const.semanticPrimitives.Rval_1'(s(bool,X66))) != s('type.semanticPrimitives.result'(bool,X67),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,X68) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X67,bool)) | s(bool,X66) = s(bool,X69) | s(bool,'F_0') = s(bool,X69)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12625,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'(bool,X40),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X40),'const.semanticPrimitives.Rval_1'(s(bool,X41))) | s(bool,X39) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X41)),X40,bool)) | s(bool,X39) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12626,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.semanticPrimitives.result'(bool,X45),'const.semanticPrimitives.Rval_1'(s(bool,X44))) != s('type.semanticPrimitives.result'(bool,X45),'const.semanticPrimitives.Rval_1'(s(bool,X46))) | s(bool,X43) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X46)),X45,bool)) | s(bool,'F_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12632,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.semanticPrimitives.result'(bool,X67),'const.semanticPrimitives.Rval_1'(s(bool,X66))) != s('type.semanticPrimitives.result'(bool,X67),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X67,bool)) | s(bool,X66) = s(bool,X69) | s(bool,'F_0') = s(bool,X69)) ) | $spl32),
  inference(superposition,[],[f789,f5444])).
fof(f12692,plain,(
  ( ! [X94,X95,X93] : (s(bool,X95) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X94,bool)) | s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X93))) != s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X95))) | s(bool,'F_0') = s(bool,X93)) ) | $spl32),
  inference(forward_demodulation,[],[f12575,f4309])).
fof(f12575,plain,(
  ( ! [X94,X95,X93] : (s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X93))) != s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X95))) | s(bool,X95) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0')))),X94,bool)) | s(bool,'F_0') = s(bool,X93)) ) | $spl32),
  inference(superposition,[],[f789,f4392])).
fof(f12712,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,X35))) | s(bool,X33) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X34,bool)) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(forward_demodulation,[],[f12623,f4309])).
fof(f12623,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,X35))) != s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X33) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X35)),X34,bool)) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(superposition,[],[f789,f4392])).
fof(f12779,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) != s(bool,X81) | s(bool,'T_0') = s(bool,X81) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X79)),X80,bool))) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f765])).
fof(f12812,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) != s(bool,X81) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X79)),X80,bool)) | s(bool,'F_0') = s(bool,X81)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f765])).
fof(f12818,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X2,bool)) | s(bool,'F_0') = s(bool,X1)) ) | ($spl3 | $spl32)),
  inference(condensation,[],[f12817])).
fof(f12817,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X17) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X15)),X16,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X15)) ) | ($spl3 | $spl32)),
  inference(duplicate_literal_removal,[],[f12785])).
fof(f12785,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X17) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X15)),X16,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f833])).
fof(f14701,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X21))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X19),s('type.list.list'(bool),X20))) | s(bool,X22) = s(bool,X23) | s(bool,X19) = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl3),
  inference(superposition,[],[f546,f282])).
fof(f16054,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl52),
  inference(condensation,[],[f16053])).
fof(f16053,plain,(
  ( ! [X241,X239,X240,X238] : (s(bool,X239) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X238) | s(bool,X239) = s(bool,X240) | s(bool,X240) = s(bool,X241) | s(bool,'T_0') = s(bool,X241)) ) | $spl52),
  inference(duplicate_literal_removal,[],[f14596])).
fof(f14596,plain,(
  ( ! [X241,X239,X240,X238] : (s(bool,X239) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X238) | s(bool,X239) = s(bool,X240) | s(bool,'T_0') = s(bool,X238) | s(bool,X240) = s(bool,X241) | s(bool,'T_0') = s(bool,X241)) ) | $spl52),
  inference(superposition,[],[f9610,f282])).
fof(f17577,plain,(
  ( ! [X372,X370,X373,X371] : (s(bool,X371) = s(bool,g(s(bool,X370))) | s(bool,'F_0') = s(bool,X371) | s(bool,X370) = s(bool,X372) | s(bool,X372) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f14625,f179])).
fof(f14625,plain,(
  ( ! [X372,X370,X373,X371] : (s(bool,X371) = s(bool,g(s(bool,X370))) | s(bool,'F_0') = s(bool,X371) | s(bool,X370) = s(bool,X372) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X372) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) ) | $spl32),
  inference(superposition,[],[f4392,f282])).
fof(f17876,plain,(
  ( ! [X132,X133,X131] : (s(bool,'T_0') != s(bool,X131) | s(bool,X133) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X131)),X132,bool)) | s(bool,'F_0') = s(bool,X133)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f11675,f765])).
fof(f4786,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') != s(bool,f(s(bool,sK6(X70,X71,bool,bool)))) | s(fun(bool,bool),X70) = s(fun(bool,bool),X71) | s(bool,'T_0') = s(bool,sK6(X70,X71,bool,bool))) ) | $spl32),
  inference(superposition,[],[f159,f4327])).
fof(f18434,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,X0) = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) | $spl3),
  inference(condensation,[],[f18433])).
fof(f18433,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(bool,X176) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X174)),X175,bool)) | s(bool,'T_0') = s(bool,X173) | s(bool,X176) = s(bool,X177) | s(bool,'T_0') = s(bool,X177) | s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,X174)))) ) | $spl3),
  inference(duplicate_literal_removal,[],[f18222])).
fof(f18222,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(bool,X176) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X174)),X175,bool)) | s(bool,'T_0') = s(bool,X173) | s(bool,X176) = s(bool,X177) | s(bool,'T_0') = s(bool,X177) | s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,X174))) | s(bool,'T_0') = s(bool,X173)) ) | $spl3),
  inference(superposition,[],[f2377,f782])).
fof(f18526,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl3),
  inference(condensation,[],[f18525])).
fof(f18525,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X21) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X22,bool)) | s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rval_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X23) | s(bool,X19) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl3),
  inference(subsumption_resolution,[],[f18117,f9546])).
fof(f18117,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X21) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X22,bool)) | s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X22),'const.semanticPrimitives.Rval_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X19) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f782,f282])).
fof(f17816,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f11675,f282])).
fof(f17618,plain,(
  ( ! [X185,X182,X184,X183,X181] : (s(bool,X181) = s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,X184) | s(bool,X181) = s(bool,X184) | s(bool,X183) = s(bool,X185) | s(bool,'T_0') = s(bool,X185)) ) | $spl32),
  inference(subsumption_resolution,[],[f14807,f109])).
fof(f14807,plain,(
  ( ! [X185,X182,X184,X183,X181] : (~p(s(bool,'T_0')) | s(bool,X181) = s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,X184) | s(bool,X181) = s(bool,X184) | s(bool,X183) = s(bool,X185) | s(bool,'T_0') = s(bool,X185)) ) | $spl32),
  inference(superposition,[],[f4829,f282])).
fof(f17591,plain,(
  ( ! [X103,X107,X108,X106,X104] : (s(bool,X103) != s(bool,X104) | s(bool,'T_0') = s(bool,X104) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) ) | $spl3),
  inference(subsumption_resolution,[],[f14718,f232])).
fof(f14718,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (s(bool,X103) != s(bool,X104) | s('type.semanticPrimitives.result'(bool,X105),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X105),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X104) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f255,f282])).
fof(f17579,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,X397) != s(bool,g(s(bool,X396))) | s(bool,'T_0') = s(bool,X397) | s(bool,X396) = s(bool,X398) | s(bool,X398) = s(bool,X399) | s(bool,'T_0') = s(bool,X399)) ) | ($spl3 | $spl52)),
  inference(subsumption_resolution,[],[f14631,f179])).
fof(f14631,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,X397) != s(bool,g(s(bool,X396))) | s(bool,'T_0') = s(bool,X397) | s(bool,X396) = s(bool,X398) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X398) = s(bool,X399) | s(bool,'T_0') = s(bool,X399)) ) | $spl52),
  inference(superposition,[],[f9610,f282])).
fof(f17576,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s(X346,f(s(bool,X345))) != s(X346,g(s(bool,X345))) | s(fun(bool,X346),X347) = s(fun(bool,X346),X348) | s(bool,'T_0') = s(bool,sK6(X347,X348,X346,bool)) | s(bool,X345) = s(bool,X349) | s(bool,X349) = s(bool,X350) | s(bool,'T_0') = s(bool,X350)) ) | $spl3),
  inference(subsumption_resolution,[],[f14620,f179])).
fof(f14620,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s(X346,f(s(bool,X345))) != s(X346,g(s(bool,X345))) | s(fun(bool,X346),X347) = s(fun(bool,X346),X348) | s(bool,'T_0') = s(bool,sK6(X347,X348,X346,bool)) | s(bool,X345) = s(bool,X349) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X349) = s(bool,X350) | s(bool,'T_0') = s(bool,X350)) )),
  inference(superposition,[],[f689,f282])).
fof(f17575,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (s(bool,X327) != s(bool,X328) | s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X328))) = s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X330))) | s(bool,'T_0') = s(bool,X330) | s(bool,X327) = s(bool,X331) | s(bool,X331) = s(bool,X332) | s(bool,'T_0') = s(bool,X332)) ) | $spl3),
  inference(subsumption_resolution,[],[f14617,f179])).
fof(f14617,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (s(bool,X327) != s(bool,X328) | s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X328))) = s('type.semanticPrimitives.result'(bool,X329),'const.semanticPrimitives.Rval_1'(s(bool,X330))) | s(bool,'T_0') = s(bool,X330) | s(bool,X327) = s(bool,X331) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X331) = s(bool,X332) | s(bool,'T_0') = s(bool,X332)) )),
  inference(superposition,[],[f256,f282])).
fof(f16050,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl52)),
  inference(condensation,[],[f16049])).
fof(f16049,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,X247) != s(bool,g(s(bool,X247))) | s(bool,'T_0') = s(bool,X246) | s(bool,X247) = s(bool,X248) | s(bool,X248) = s(bool,X249) | s(bool,'T_0') = s(bool,X249)) ) | ($spl3 | $spl52)),
  inference(duplicate_literal_removal,[],[f14598])).
fof(f14598,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,X247) != s(bool,g(s(bool,X247))) | s(bool,'T_0') = s(bool,X246) | s(bool,X247) = s(bool,X248) | s(bool,'T_0') = s(bool,X246) | s(bool,X248) = s(bool,X249) | s(bool,'T_0') = s(bool,X249)) ) | ($spl3 | $spl52)),
  inference(superposition,[],[f10512,f282])).
fof(f16056,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl32)),
  inference(condensation,[],[f16055])).
fof(f16055,plain,(
  ( ! [X227,X225,X223,X226,X224] : (s(bool,X224) != s(bool,X225) | s(bool,'T_0') = s(bool,X223) | s(bool,'F_0') = s(bool,X225) | s(bool,X224) = s(bool,X226) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227)) ) | ($spl3 | $spl32)),
  inference(duplicate_literal_removal,[],[f14593])).
fof(f14593,plain,(
  ( ! [X227,X225,X223,X226,X224] : (s(bool,X224) != s(bool,X225) | s(bool,'T_0') = s(bool,X223) | s(bool,'F_0') = s(bool,X225) | s(bool,X224) = s(bool,X226) | s(bool,'T_0') = s(bool,X223) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f282])).
fof(f16066,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f16065])).
fof(f16065,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') = s(bool,g(s(bool,X170))) | s(bool,'T_0') = s(bool,X169) | s(bool,X170) = s(bool,X171) | s(bool,X171) = s(bool,X172) | s(bool,'T_0') = s(bool,X172)) ) | $spl32),
  inference(duplicate_literal_removal,[],[f14581])).
fof(f14581,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') = s(bool,g(s(bool,X170))) | s(bool,'T_0') = s(bool,X169) | s(bool,X170) = s(bool,X171) | s(bool,'T_0') = s(bool,X169) | s(bool,X171) = s(bool,X172) | s(bool,'T_0') = s(bool,X172)) ) | $spl32),
  inference(superposition,[],[f4327,f282])).
fof(f16070,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl3),
  inference(condensation,[],[f16069])).
fof(f16069,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s(bool,X154) != s(bool,X155) | s(bool,'T_0') = s(bool,X153) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s(bool,X154) = s(bool,X157) | s(bool,X157) = s(bool,X158) | s(bool,'T_0') = s(bool,X158)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f14578])).
fof(f14578,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s(bool,X154) != s(bool,X155) | s(bool,'T_0') = s(bool,X153) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s(bool,X154) = s(bool,X157) | s(bool,'T_0') = s(bool,X153) | s(bool,X157) = s(bool,X158) | s(bool,'T_0') = s(bool,X158)) ) | $spl3),
  inference(superposition,[],[f2377,f282])).
fof(f11689,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X58) != s(bool,X59) | s(bool,'T_0') = s(bool,X60) | s(bool,X59) = s(bool,X60) | s(bool,X58) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f9586,f5444])).
fof(f11357,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl32),
  inference(superposition,[],[f5444,f5444])).
fof(f10469,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl52),
  inference(superposition,[],[f9610,f112])).
fof(f10512,plain,(
  ( ! [X19] : (s(bool,X19) != s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl3 | $spl52)),
  inference(subsumption_resolution,[],[f10458,f179])).
fof(f10458,plain,(
  ( ! [X19] : (s(bool,X19) != s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X19)) ) | $spl52),
  inference(superposition,[],[f9610,f112])).
fof(f9580,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl3),
  inference(condensation,[],[f9579])).
fof(f9579,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X21,bool)) | s(bool,'T_0') = s(bool,X19) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X20)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f9552])).
fof(f9552,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X20)),X21,bool)) | s(bool,'T_0') = s(bool,X19) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X19)) ) | $spl3),
  inference(superposition,[],[f2377,f833])).
fof(f9586,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) ) | $spl3),
  inference(condensation,[],[f9585])).
fof(f9585,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl3),
  inference(duplicate_literal_removal,[],[f9547])).
fof(f9547,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl3),
  inference(superposition,[],[f2377,f112])).
fof(f9546,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X89) != s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X89)),X90,bool)) | s(bool,'T_0') = s(bool,X92)) ) | $spl3),
  inference(superposition,[],[f2377,f765])).
fof(f5618,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,X34) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f5617,f232])).
fof(f5617,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X33) != s(bool,X34) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(forward_demodulation,[],[f5537,f4309])).
fof(f5537,plain,(
  ( ! [X35,X33,X34] : (s(bool,X33) != s(bool,X34) | s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) ) | $spl32),
  inference(superposition,[],[f255,f4392])).
fof(f4792,plain,(
  ( ! [X92,X90,X91] : (s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,X92))) | s(bool,X92) = s(bool,g(s(bool,X90))) | s(bool,'T_0') = s(bool,X90)) ) | $spl32),
  inference(superposition,[],[f160,f4327])).
fof(f4787,plain,(
  ( ! [X74,X72,X75,X73] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X73))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),X75))) | s(bool,X74) = s(bool,g(s(bool,X72))) | s(bool,'T_0') = s(bool,X72)) ) | $spl32),
  inference(superposition,[],[f148,f4327])).
fof(f4831,plain,(
  ( ! [X37,X35,X36] : (s(bool,X36) = s(bool,g(s(bool,X35))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | $spl32),
  inference(subsumption_resolution,[],[f4773,f109])).
fof(f4773,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,X36) = s(bool,g(s(bool,X35))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | $spl32),
  inference(superposition,[],[f494,f4327])).
fof(f4327,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl32),
  inference(superposition,[],[f4309,f112])).
fof(f2377,plain,(
  ( ! [X33,X36,X34] : (s(bool,X33) != s(bool,X34) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | $spl3),
  inference(subsumption_resolution,[],[f2347,f232])).
fof(f2347,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X33) != s(bool,X34) | s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X35),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f255,f171])).
fof(f1331,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X11,bool)) | s(bool,X12) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X12)) ) | $spl3),
  inference(subsumption_resolution,[],[f1236,f179])).
fof(f1236,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X11,bool)) | s(bool,X12) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f947,f171])).
fof(f42001,plain,(
  $false | ($spl32 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f24693,f41468])).
fof(f41468,plain,(
  ( ! [X177] : (s(bool,'F_0') = s(bool,X177)) ) | ($spl32 | $spl125 | $spl158)),
  inference(global_subsumption,[],[f108,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4327,f4831,f4787,f4792,f4834,f4837,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5444,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f5613,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f11357,f12450,f12506,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16066,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f17618,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f4786,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f17523,f14908,f14690,f14542,f14246,f4847,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f13366,f12712,f12692,f12657,f12632,f12626,f12625,f12591,f12566,f12560,f12559,f12449,f12187,f12161,f11866,f11864,f11863,f11862,f11860,f11857,f11855,f11853,f11852,f11851,f11849,f11848,f11847,f11846,f11839,f11837,f11832,f11753,f11751,f11749,f11748,f11747,f11745,f11744,f11743,f11742,f11737,f11686,f11684,f11682,f11681,f11680,f11678,f11677,f11546,f11544,f11543,f11542,f11540,f11537,f11535,f11533,f11532,f11531,f11529,f11528,f11527,f11526,f11519,f11517,f11512,f11323,f9383,f9376,f9338,f9316,f9304,f9221,f9214,f9184,f9162,f9150,f9080,f8927,f8846,f8839,f8807,f8785,f8773,f8699,f8692,f8658,f8636,f8624,f8478,f8471,f8447,f8425,f8413,f8360,f8353,f8329,f8307,f8295,f7593,f7341,f7242,f7045,f6948,f6482,f6478,f6376,f6345,f6235,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5629,f5628,f5626,f5612,f5609,f5600,f5069,f5039,f5030,f4832,f4674,f4538,f4521,f4392,f4391,f4309,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f24693,f24785,f24784,f24786,f24788,f24887,f24825,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25622,f25623,f25898,f25900,f26392,f26468,f26481,f26467,f26465,f26463,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26850,f26854,f26865,f27009,f27508,f27534,f27537,f27542,f27543,f27604,f27607,f27658,f27661,f27786,f27806,f28300,f28437,f28439,f28450,f28452,f28455,f28461,f28474,f28494,f28514,f28526,f28542,f28555,f28738,f29446,f29547,f29545,f29595,f30272,f23961,f23960,f15429,f14915,f29523,f4752,f30511,f27841,f27840,f27280,f4794,f4801,f4829,f5043,f6337,f8316,f8434,f8645,f8794,f9171,f9325,f11237,f11238,f12577,f12643,f18556,f18593,f25607,f27308,f27313,f27332,f27335,f27376,f27417,f27429,f27435,f27440,f27441,f27443,f27444,f27445,f27446,f27447,f27448,f27449,f27451,f27541,f28464,f28516,f28517,f28518,f28519,f28520,f28521,f28522,f28523,f28524,f28525,f28550,f30429,f30427,f30720,f30882,f30785,f30788,f31486,f31447,f32367,f32383,f32388,f32339,f32390,f32394,f32304,f32309,f32311,f32318,f32319,f32320,f32321,f32323,f32324,f32325,f32328,f32330,f32332,f33011,f33024,f33026,f33056,f33057,f33063,f33067,f33253,f33291,f107,f33538,f33541,f33548,f33657,f34333,f34348,f34325,f33738,f34466,f33658,f34482,f34928,f34927,f35050,f35008,f35013,f35014,f35528,f35776,f36036,f35990,f35995,f35996,f36329,f36454,f36321,f36319,f36334,f36335,f36411,f36416,f36417,f37741,f37888,f37889,f37894,f37898,f37844,f37849,f38161,f38162,f38163,f38164,f38165,f38166,f38167,f38168,f38325,f38472,f38398,f38597,f38653,f38785,f38888,f38886,f38908,f38911,f38884,f38916,f38861,f38922,f39035,f39290,f39413,f39429,f39437,f39440,f39472,f39476,f39479,f39899,f39779,f39780,f39781,f39783,f39784,f39789,f39790,f39792,f39793,f39917,f39919,f39808,f39921,f39810,f39820,f39825,f39846,f39849,f40085,f40087,f40088,f40090,f40091,f40212,f40214,f40106,f40216,f40108,f40118,f40123,f40144,f40147,f40429,f40289,f40290,f40513,f40511,f40529,f40532,f32331,f25307,f25304,f18487,f18399,f18396,f18292,f12646,f12645,f12644,f6340,f6339,f6338,f1744,f1627,f28458,f28457,f28456,f39459,f39445,f32078])).
fof(f24691,plain,(
  ( ! [X206,X207] : (s(fun(bool,bool),X206) = s(fun(bool,bool),X207)) ) | $spl122),
  inference(cnf_transformation,[],[f24691_D])).
fof(f24691_D,plain,(
  ( ! [X206,X207] : (s(fun(bool,bool),X206) = s(fun(bool,bool),X207)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f41996,plain,(
  ( ! [X327,X326] : (s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X326,bool))) ) | $spl196),
  inference(cnf_transformation,[],[f41996_D])).
fof(f41996_D,plain,(
  ( ! [X327,X326] : (s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X326,bool))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f41995,plain,(
  ( ! [X325,X327,X324,X326] : (s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X326,bool)) | s(fun(bool,bool),X324) = s(fun(bool,bool),X325)) ) | ($spl3 | $spl32 | $spl40 | $spl98 | $spl125 | $spl158)),
  inference(forward_demodulation,[],[f41994,f41688])).
fof(f41688,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41485,f232])).
fof(f41485,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20828])).
fof(f20828,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X0)))))) ) | $spl40),
  inference(condensation,[],[f20827])).
fof(f20827,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') = s(bool,X57) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X56))))) | s(bool,'T_0') = s(bool,X56)) ) | $spl40),
  inference(duplicate_literal_removal,[],[f20826])).
fof(f20826,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') = s(bool,X57) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X56))))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | $spl40),
  inference(forward_demodulation,[],[f20705,f765])).
fof(f20705,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X58,bool)) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X56))))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | $spl40),
  inference(superposition,[],[f782,f19472])).
fof(f19472,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | $spl40),
  inference(superposition,[],[f4314,f112])).
fof(f4314,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl40),
  inference(cnf_transformation,[],[f4314_D])).
fof(f4314_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f41994,plain,(
  ( ! [X325,X327,X324,X326] : (s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X326,bool)) | s(fun(bool,bool),X324) = s(fun(bool,bool),X325)) ) | ($spl3 | $spl32 | $spl40 | $spl98 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41652,f41960])).
fof(f41960,plain,(
  ( ! [X64,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63)))) ) | ($spl3 | $spl32 | $spl40 | $spl98 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41740,f18592])).
fof(f41740,plain,(
  ( ! [X64,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X63))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X63)),X65,bool))) ) | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41688,f1347])).
fof(f41652,plain,(
  ( ! [X325,X327,X324,X326] : (s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X326,bool)) | s('type.semanticPrimitives.result'(bool,X326),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X326),'const.semanticPrimitives.Rval_1'(s(bool,X327))) | s(fun(bool,bool),X324) = s(fun(bool,bool),X325)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f24629])).
fof(f24629,plain,(
  ( ! [X325,X327,X324,X326] : (s('type.semanticPrimitives.result'(bool,X326),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X326),'const.semanticPrimitives.Rval_1'(s(bool,X327))) | s(bool,X327) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK6(X324,X325,bool,bool))),X326,bool)) | s(fun(bool,bool),X324) = s(fun(bool,bool),X325)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f789,f19174])).
fof(f19174,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') = s(bool,sK6(X30,X31,bool,bool)) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31)) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f4358,f4314])).
fof(f4358,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK6(X30,X31,bool,bool))) ) | $spl32),
  inference(superposition,[],[f689,f4309])).
fof(f41965,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41782,f41688])).
fof(f41782,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X1,bool))) ) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41688,f2431])).
fof(f41953,plain,(
  $false | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41689,f109])).
fof(f41689,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41688,f111])).
fof(f41952,plain,(
  $false | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(trivial_inequality_removal,[],[f41691])).
fof(f41691,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41688,f232])).
fof(f41951,plain,(
  $false | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(trivial_inequality_removal,[],[f41694])).
fof(f41694,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | ($spl3 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41688,f245])).
fof(f41687,plain,(
  $false | ($spl18 | $spl22 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41683,f2431])).
fof(f41683,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl18 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(condensation,[],[f41482])).
fof(f41482,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X75,bool)) | s(bool,'T_0') = s(bool,X74)) ) | ($spl18 | $spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20757])).
fof(f20757,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X74)))),X75,bool)) | s(bool,'T_0') = s(bool,X74)) ) | ($spl18 | $spl40)),
  inference(trivial_inequality_removal,[],[f20711])).
fof(f20711,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X74)))),X75,bool)) | s(bool,'T_0') = s(bool,X74)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f2429,f19472])).
fof(f198,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f30171,plain,(
  ( ! [X190,X193] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X190),s('type.list.list'(bool),X193)))) ) | $spl152),
  inference(cnf_transformation,[],[f30171_D])).
fof(f30171_D,plain,(
  ( ! [X190,X193] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X190),s('type.list.list'(bool),X193)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f41686,plain,(
  ( ! [X196,X197,X195] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X197))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X196),s('type.list.list'(bool),X197))) | s(bool,'T_0') = s(bool,X195)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41481,f26461])).
fof(f41481,plain,(
  ( ! [X196,X197,X195] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X197))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X196),s('type.list.list'(bool),X197))) | s(bool,'T_0') != s(bool,X196) | s(bool,'T_0') = s(bool,X195)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20752])).
fof(f20752,plain,(
  ( ! [X196,X197,X195] : (s(bool,'T_0') != s(bool,X196) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X196),s('type.list.list'(bool),X197))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X195))),s('type.list.list'(bool),X197))) | s(bool,'T_0') = s(bool,X195)) ) | $spl40),
  inference(superposition,[],[f918,f19472])).
fof(f2428,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | $spl16),
  inference(cnf_transformation,[],[f2428_D])).
fof(f2428_D,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f41685,plain,(
  ( ! [X191,X189,X190] : (s(bool,X191) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X190,bool)) | s(bool,'T_0') = s(bool,X189)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41479,f2311])).
fof(f41479,plain,(
  ( ! [X191,X189,X190] : (s(bool,X191) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X190,bool)) | s('type.semanticPrimitives.result'(bool,X190),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X190),'const.semanticPrimitives.Rval_1'(s(bool,X191))) | s(bool,'T_0') = s(bool,X189)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20750])).
fof(f20750,plain,(
  ( ! [X191,X189,X190] : (s('type.semanticPrimitives.result'(bool,X190),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X190),'const.semanticPrimitives.Rval_1'(s(bool,X191))) | s(bool,X191) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X189)))),X190,bool)) | s(bool,'T_0') = s(bool,X189)) ) | $spl40),
  inference(superposition,[],[f789,f19472])).
fof(f9759,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | $spl68),
  inference(cnf_transformation,[],[f9759_D])).
fof(f9759_D,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f41477,plain,(
  ( ! [X177,X175,X176,X174] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X175),X177),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X175),X176))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X175),X177),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X175),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X175),X176) != s('type.semanticPrimitives.result'('type.list.list'(bool),X175),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X174)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20745])).
fof(f20745,plain,(
  ( ! [X177,X175,X176,X174] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X175),X176) != s('type.semanticPrimitives.result'('type.list.list'(bool),X175),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X175),X177),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X175),X176))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X175),X177),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X175),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X174))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X174)) ) | $spl40),
  inference(superposition,[],[f667,f19472])).
fof(f9758,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))))) ) | $spl66),
  inference(cnf_transformation,[],[f9758_D])).
fof(f9758_D,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f41476,plain,(
  ( ! [X173,X171,X172,X170] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X171),X173) = s('type.semanticPrimitives.result'('type.list.list'(bool),X171),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X171),X172),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X171),X173))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X171),X172),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X171),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s(bool,'T_0') = s(bool,X170)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20744])).
fof(f20744,plain,(
  ( ! [X173,X171,X172,X170] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X171),X172),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X171),X173))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X171),X172),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X171),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X171),X173) = s('type.semanticPrimitives.result'('type.list.list'(bool),X171),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X170))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X170)) ) | $spl40),
  inference(superposition,[],[f665,f19472])).
fof(f9761,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122)))) ) | $spl72),
  inference(cnf_transformation,[],[f9761_D])).
fof(f9761_D,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f41475,plain,(
  ( ! [X167,X165,X169,X166,X168] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X166),X167) = s('type.semanticPrimitives.result'('type.list.list'(bool),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X166),X167),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),X168))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),X169))) | s(bool,'T_0') = s(bool,X165)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20743])).
fof(f20743,plain,(
  ( ! [X167,X165,X169,X166,X168] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X166),X167),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),X168))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X166),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X166),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X166)),X169))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X166),X167) = s('type.semanticPrimitives.result'('type.list.list'(bool),X166),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X165))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X165)) ) | $spl40),
  inference(superposition,[],[f661,f19472])).
fof(f9755,plain,(
  ( ! [X52,X51] : (s('type.list.list'(bool),X52) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X52))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | $spl60),
  inference(cnf_transformation,[],[f9755_D])).
fof(f9755_D,plain,(
  ( ! [X52,X51] : (s('type.list.list'(bool),X52) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X52))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f41474,plain,(
  ( ! [X161,X159,X160] : (s('type.list.list'(bool),X161) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X161))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X159)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20741])).
fof(f20741,plain,(
  ( ! [X161,X159,X160] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X160),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X161))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X160),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X160),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'(bool),X161) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X159))),s('type.list.list'(bool),'const.list.NIL_0'))) | s(bool,'T_0') = s(bool,X159)) ) | $spl40),
  inference(superposition,[],[f657,f19472])).
fof(f9757,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0')))))) ) | $spl64),
  inference(cnf_transformation,[],[f9757_D])).
fof(f9757_D,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0')))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f41473,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X156),X158),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X156),X157))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X156),X158),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X156),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X156),X157) != s('type.semanticPrimitives.result'('type.list.list'(bool),X156),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X155)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20740])).
fof(f20740,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X156),X157) != s('type.semanticPrimitives.result'('type.list.list'(bool),X156),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X156),X158),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X156),X157))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X156),X158),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X156),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X155))))))))) | s(bool,'T_0') = s(bool,X155)) ) | $spl40),
  inference(superposition,[],[f654,f19472])).
fof(f9756,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0')))))))) ) | $spl62),
  inference(cnf_transformation,[],[f9756_D])).
fof(f9756_D,plain,(
  ( ! [X99,X97,X98] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0')))))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f41472,plain,(
  ( ! [X154,X152,X151,X153] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X152),X154) = s('type.semanticPrimitives.result'('type.list.list'(bool),X152),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X152),X153),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X152),X154))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X152),X153),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X152),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X151)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20739])).
fof(f20739,plain,(
  ( ! [X154,X152,X151,X153] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X152),X153),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X152),X154))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X152),X153),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X152),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X152),X154) = s('type.semanticPrimitives.result'('type.list.list'(bool),X152),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X152),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X151))))))) | s(bool,'T_0') = s(bool,X151)) ) | $spl40),
  inference(superposition,[],[f652,f19472])).
fof(f9760,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122)))) ) | $spl70),
  inference(cnf_transformation,[],[f9760_D])).
fof(f9760_D,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f41471,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X147),X148) = s('type.semanticPrimitives.result'('type.list.list'(bool),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X147),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X147),X148),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),X149))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X147),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),X150))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20738])).
fof(f20738,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X147),X148),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),X149))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X147),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X147)),X150))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X147),X148) = s('type.semanticPrimitives.result'('type.list.list'(bool),X147),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X147),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X146))))))) | s(bool,'T_0') = s(bool,X146)) ) | $spl40),
  inference(superposition,[],[f648,f19472])).
fof(f9752,plain,(
  ( ! [X97,X98] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97)))) ) | $spl56),
  inference(cnf_transformation,[],[f9752_D])).
fof(f9752_D,plain,(
  ( ! [X97,X98] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97)))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f41684,plain,(
  ( ! [X125,X123,X124] : (s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,X124))) | s(bool,'T_0') = s(bool,X123)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(subsumption_resolution,[],[f41470,f1418])).
fof(f41470,plain,(
  ( ! [X125,X123,X124] : (s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,X124))) | s(bool,'T_0') != s(bool,X124) | s(bool,'T_0') = s(bool,X123)) ) | ($spl32 | $spl40 | $spl125 | $spl158)),
  inference(backward_demodulation,[],[f41468,f20731])).
fof(f20731,plain,(
  ( ! [X125,X123,X124] : (s(bool,'T_0') != s(bool,X124) | s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,X124))) = s('type.semanticPrimitives.result'(bool,X125),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,X123))))) | s(bool,'T_0') = s(bool,X123)) ) | $spl40),
  inference(superposition,[],[f161,f19472])).
fof(f41467,plain,(
  $false | ($spl3 | $spl32 | $spl52 | $spl125 | $spl157)),
  inference(subsumption_resolution,[],[f32050,f41427])).
fof(f41426,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41425,f179])).
fof(f41425,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41269,f41306])).
fof(f41306,plain,(
  ( ! [X86] : (s(bool,'T_0') = s(bool,g(s(bool,X86)))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41305,f179])).
fof(f41305,plain,(
  ( ! [X86] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X86)))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41304,f4309])).
fof(f41304,plain,(
  ( ! [X86] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X86)))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41213,f27539])).
fof(f41213,plain,(
  ( ! [X86] : (s(bool,X86) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X86)))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f27537])).
fof(f32099,plain,(
  ( ! [X226] : (s(bool,X226) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X226)) ) | ($spl3 | $spl22 | $spl80 | $spl124)),
  inference(subsumption_resolution,[],[f31742,f2431])).
fof(f31742,plain,(
  ( ! [X225,X226] : (s(bool,X226) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X226) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X225,bool))) ) | ($spl3 | $spl80 | $spl124)),
  inference(superposition,[],[f12854,f31344])).
fof(f31344,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl124)),
  inference(subsumption_resolution,[],[f31189,f179])).
fof(f31189,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl124),
  inference(superposition,[],[f24692,f171])).
fof(f24692,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl124),
  inference(cnf_transformation,[],[f24692_D])).
fof(f24692_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f41269,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl80 | $spl124)),
  inference(equality_resolution,[],[f32099])).
fof(f41424,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl47 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41423,f179])).
fof(f41423,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl47 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41422,f41306])).
fof(f41422,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl32 | $spl47 | $spl80 | $spl124)),
  inference(condensation,[],[f41421])).
fof(f41421,plain,(
  ( ! [X62] : (s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl47 | $spl80 | $spl124)),
  inference(subsumption_resolution,[],[f41267,f30652])).
fof(f30652,plain,(
  ( ! [X33] : (s(bool,X33) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X33)) ) | ($spl32 | $spl47)),
  inference(trivial_inequality_removal,[],[f30647])).
fof(f30647,plain,(
  ( ! [X33] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X33) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X33)) ) | ($spl32 | $spl47)),
  inference(superposition,[],[f4850,f5444])).
fof(f41267,plain,(
  ( ! [X62] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl47 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f30652])).
fof(f41420,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41419,f179])).
fof(f41419,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41418,f41306])).
fof(f41418,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124)),
  inference(condensation,[],[f41417])).
fof(f41417,plain,(
  ( ! [X61] : (s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124)),
  inference(subsumption_resolution,[],[f41266,f19568])).
fof(f19568,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | ($spl3 | $spl32 | $spl40)),
  inference(trivial_inequality_removal,[],[f19536])).
fof(f19536,plain,(
  ( ! [X47] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | ($spl3 | $spl32 | $spl40)),
  inference(superposition,[],[f11675,f4314])).
fof(f41266,plain,(
  ( ! [X61] : (s(bool,X61) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f19568])).
fof(f41416,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41415,f179])).
fof(f41415,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41414,f41306])).
fof(f41414,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(condensation,[],[f41413])).
fof(f41413,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(condensation,[],[f41412])).
fof(f41412,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X57)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(subsumption_resolution,[],[f41264,f5444])).
fof(f41264,plain,(
  ( ! [X57,X58] : (s(bool,X57) != s(bool,X58) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X57)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f5444])).
fof(f41411,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41410,f179])).
fof(f41410,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41409,f41306])).
fof(f41409,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(condensation,[],[f41408])).
fof(f41408,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(condensation,[],[f41407])).
fof(f41407,plain,(
  ( ! [X56,X55] : (s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X55) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(subsumption_resolution,[],[f41263,f5444])).
fof(f41263,plain,(
  ( ! [X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X55) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f5444])).
fof(f41390,plain,(
  ( ! [X194,X193] : (s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,X194)))) ) | $spl188),
  inference(cnf_transformation,[],[f41390_D])).
fof(f41390_D,plain,(
  ( ! [X194,X193] : (s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,X194)))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f41395,plain,(
  ( ! [X509,X507,X508] : (s(bool,'F_0') = s(bool,g(s(X507,sK6(X508,X509,bool,X507)))) | s(fun(X507,bool),X508) = s(fun(X507,bool),X509)) ) | $spl194),
  inference(cnf_transformation,[],[f41395_D])).
fof(f41395_D,plain,(
  ( ! [X509,X507,X508] : (s(bool,'F_0') = s(bool,g(s(X507,sK6(X508,X509,bool,X507)))) | s(fun(X507,bool),X508) = s(fun(X507,bool),X509)) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f41394,plain,(
  ( ! [X509,X511,X507,X508,X510] : (s(bool,'F_0') = s(bool,g(s(X507,sK6(X508,X509,bool,X507)))) | s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,X511))) | s(fun(X507,bool),X508) = s(fun(X507,bool),X509)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41380,f5609])).
fof(f41380,plain,(
  ( ! [X509,X511,X507,X508,X510] : (s(bool,'F_0') = s(bool,g(s(X507,sK6(X508,X509,bool,X507)))) | s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X510),'const.semanticPrimitives.Rval_1'(s(bool,X511))) | s(fun(X507,bool),X508) = s(fun(X507,bool),X509) | s(bool,'T_0') = s(bool,f(s(X507,sK6(X508,X509,bool,X507))))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41360,f32331])).
fof(f41360,plain,(
  ( ! [X114,X115] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X114)),X115,bool))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41359,f1221])).
fof(f41359,plain,(
  ( ! [X114,X115] : (s(bool,'T_0') != s(bool,X114) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X114)),X115,bool))) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(forward_demodulation,[],[f41226,f41306])).
fof(f41226,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X114)),X115,bool))) ) | ($spl3 | $spl22 | $spl80 | $spl124)),
  inference(superposition,[],[f32099,f765])).
fof(f41392,plain,(
  ( ! [X329,X328] : (s(bool,'F_0') = s(bool,sK6(X328,X329,bool,bool)) | s(fun(bool,bool),X328) = s(fun(bool,bool),X329)) ) | $spl192),
  inference(cnf_transformation,[],[f41392_D])).
fof(f41392_D,plain,(
  ( ! [X329,X328] : (s(bool,'F_0') = s(bool,sK6(X328,X329,bool,bool)) | s(fun(bool,bool),X328) = s(fun(bool,bool),X329)) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f41376,plain,(
  ( ! [X329,X331,X328,X330] : (s(bool,'F_0') = s(bool,sK6(X328,X329,bool,bool)) | s('type.semanticPrimitives.result'(bool,X330),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X330),'const.semanticPrimitives.Rval_1'(s(bool,X331))) | s(fun(bool,bool),X328) = s(fun(bool,bool),X329)) ) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41360,f24630])).
fof(f24630,plain,(
  ( ! [X329,X331,X328,X330] : (s('type.semanticPrimitives.result'(bool,X330),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X330),'const.semanticPrimitives.Rval_1'(s(bool,X331))) | s(bool,sK6(X328,X329,bool,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X331)),X330,bool)) | s(fun(bool,bool),X328) = s(fun(bool,bool),X329)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f789,f19174])).
fof(f41391,plain,(
  ( ! [X192] : (s(bool,'F_0') = s(bool,f(s(bool,X192))) | s(bool,'T_0') = s(bool,X192)) ) | $spl190),
  inference(cnf_transformation,[],[f41391_D])).
fof(f41391_D,plain,(
  ( ! [X192] : (s(bool,'F_0') = s(bool,f(s(bool,X192))) | s(bool,'T_0') = s(bool,X192)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f41374,plain,(
  ( ! [X194,X192,X193] : (s(bool,'F_0') = s(bool,f(s(bool,X192))) | s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,X194))) | s(bool,'T_0') = s(bool,X192)) ) | ($spl3 | $spl22 | $spl32 | $spl40 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41360,f20751])).
fof(f20751,plain,(
  ( ! [X194,X192,X193] : (s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,X194))) | s(bool,f(s(bool,X192))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X194)),X193,bool)) | s(bool,'T_0') = s(bool,X192)) ) | $spl40),
  inference(superposition,[],[f789,f19472])).
fof(f41356,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41335,f179])).
fof(f41335,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41306,f24692])).
fof(f41355,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41338,f179])).
fof(f41338,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(duplicate_literal_removal,[],[f41337])).
fof(f41337,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(condensation,[],[f41333])).
fof(f41333,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41306,f31171])).
fof(f31171,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl124),
  inference(superposition,[],[f24692,f171])).
fof(f41354,plain,(
  $false | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(subsumption_resolution,[],[f41342,f179])).
fof(f41342,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(condensation,[],[f41341])).
fof(f41341,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(condensation,[],[f41340])).
fof(f41340,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X3)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(duplicate_literal_removal,[],[f41339])).
fof(f41339,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X3)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(condensation,[],[f41332])).
fof(f41332,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl22 | $spl32 | $spl80 | $spl124 | $spl138)),
  inference(backward_demodulation,[],[f41306,f31169])).
fof(f31169,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl124),
  inference(superposition,[],[f24692,f282])).
fof(f39482,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK6(X2,X3,bool,bool)),s('type.list.list'(bool),X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | $spl186),
  inference(cnf_transformation,[],[f39482_D])).
fof(f39482_D,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK6(X2,X3,bool,bool)),s('type.list.list'(bool),X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f39481,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK6(X2,X3,bool,bool)),s('type.list.list'(bool),X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | ($spl32 | $spl40)),
  inference(condensation,[],[f39480])).
fof(f39480,plain,(
  ( ! [X257,X259,X260,X256,X258] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X259))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK6(X256,X257,bool,bool)),s('type.list.list'(bool),X259))) | s(bool,X258) = s(bool,X260) | s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X256) = s(fun(bool,bool),X257)) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f39343,f171])).
fof(f39343,plain,(
  ( ! [X257,X259,X260,X256,X258] : (s(bool,'T_0') != s(bool,X258) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X259))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK6(X256,X257,bool,bool)),s('type.list.list'(bool),X259))) | s(bool,X258) = s(bool,X260) | s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X256) = s(fun(bool,bool),X257)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f1162,f19174])).
fof(f39430,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2)) ) | $spl184),
  inference(cnf_transformation,[],[f39430_D])).
fof(f39430_D,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2)) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f39479,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X2)) )),
  inference(forward_demodulation,[],[f39478,f765])).
fof(f39478,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(condensation,[],[f39477])).
fof(f39477,plain,(
  ( ! [X231,X229,X230,X228,X232] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X231))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X228)),X229,bool)),s('type.list.list'(bool),X231))) | s(bool,X230) = s(bool,X232) | s(bool,'T_0') = s(bool,X232) | s(bool,'F_0') = s(bool,X228)) )),
  inference(subsumption_resolution,[],[f39338,f171])).
fof(f39338,plain,(
  ( ! [X231,X229,X230,X228,X232] : (s(bool,'T_0') != s(bool,X230) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X231))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X228)),X229,bool)),s('type.list.list'(bool),X231))) | s(bool,X230) = s(bool,X232) | s(bool,'T_0') = s(bool,X232) | s(bool,'F_0') = s(bool,X228)) )),
  inference(superposition,[],[f1162,f837])).
fof(f39442,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl40)),
  inference(condensation,[],[f39441])).
fof(f39441,plain,(
  ( ! [X127,X130,X128,X129] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X129))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X127),s('type.list.list'(bool),X129))) | s(bool,X128) = s(bool,X130) | s(bool,'T_0') = s(bool,X130) | s(bool,'F_0') = s(bool,X127)) ) | ($spl3 | $spl32 | $spl40)),
  inference(subsumption_resolution,[],[f39313,f19597])).
fof(f19597,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl40),
  inference(condensation,[],[f19596])).
fof(f19596,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,f(s(bool,'F_0'))) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl40),
  inference(duplicate_literal_removal,[],[f19495])).
fof(f19495,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl40),
  inference(superposition,[],[f4314,f282])).
fof(f39313,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,X128) != s(bool,f(s(bool,'F_0'))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X129))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X127),s('type.list.list'(bool),X129))) | s(bool,X128) = s(bool,X130) | s(bool,'T_0') = s(bool,X130) | s(bool,'F_0') = s(bool,X127)) ) | ($spl3 | $spl32 | $spl40)),
  inference(superposition,[],[f1162,f19568])).
fof(f39440,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2)))) ) | $spl32),
  inference(condensation,[],[f39439])).
fof(f39439,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X3)) ) | $spl32),
  inference(condensation,[],[f39438])).
fof(f39438,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X120))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X117),s('type.list.list'(bool),X120))) | s(bool,X119) = s(bool,X121) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X118)) ) | $spl32),
  inference(subsumption_resolution,[],[f39311,f1004])).
fof(f39311,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,X118) != s(bool,X119) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X120))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X117),s('type.list.list'(bool),X120))) | s(bool,X119) = s(bool,X121) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X118)) ) | $spl32),
  inference(superposition,[],[f1162,f5444])).
fof(f39437,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2)))) ) | $spl32),
  inference(condensation,[],[f39436])).
fof(f39436,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f39435])).
fof(f39435,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X115))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X112),s('type.list.list'(bool),X115))) | s(bool,X114) = s(bool,X116) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X112)) ) | $spl32),
  inference(subsumption_resolution,[],[f39310,f1004])).
fof(f39310,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,X113) != s(bool,X114) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X115))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X112),s('type.list.list'(bool),X115))) | s(bool,X114) = s(bool,X116) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X112)) ) | $spl32),
  inference(superposition,[],[f1162,f5444])).
fof(f39429,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'F_0') = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f39428])).
fof(f39428,plain,(
  ( ! [X99,X97,X100,X98] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X99))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X97),s('type.list.list'(bool),X99))) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,X97)) ) | $spl32),
  inference(subsumption_resolution,[],[f39307,f4391])).
fof(f39307,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,X98) != s(bool,g(s(bool,'F_0'))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X99))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X97),s('type.list.list'(bool),X99))) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,X97)) ) | $spl32),
  inference(superposition,[],[f1162,f4392])).
fof(f38473,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X4))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) | $spl182),
  inference(cnf_transformation,[],[f38473_D])).
fof(f38473_D,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X4))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f38472,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X4))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f38418,f765])).
fof(f38418,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X4))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f38417])).
fof(f38417,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X4)),X5,bool)),s('type.list.list'(bool),X6))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4)))) )),
  inference(duplicate_literal_removal,[],[f38416])).
fof(f38416,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X4)),X5,bool)),s('type.list.list'(bool),X6))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f38358])).
fof(f38358,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X96))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X94)),X95,bool)),s('type.list.list'(bool),X97))) | s(bool,X93) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99) | s('type.semanticPrimitives.result'(bool,X95),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X95),'const.semanticPrimitives.Rval_1'(s(bool,X94))) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f550,f782])).
fof(f35238,plain,(
  $false | ($spl163 | $spl176)),
  inference(subsumption_resolution,[],[f35237,f164])).
fof(f35237,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | ($spl163 | $spl176)),
  inference(forward_demodulation,[],[f35165,f34474])).
fof(f35165,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | ($spl163 | $spl176)),
  inference(unit_resulting_resolution,[],[f33534,f34474,f749])).
fof(f33534,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | $spl163),
  inference(cnf_transformation,[],[f33534_D])).
fof(f33534_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) <=> ~$spl163),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl163])])).
fof(f35236,plain,(
  $false | ($spl163 | $spl176)),
  inference(subsumption_resolution,[],[f35235,f34918])).
fof(f34918,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) | $spl163),
  inference(unit_resulting_resolution,[],[f33534,f160])).
fof(f35235,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl176),
  inference(forward_demodulation,[],[f35166,f34474])).
fof(f35166,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl176),
  inference(unit_resulting_resolution,[],[f34474,f734])).
fof(f35234,plain,(
  $false | ($spl163 | $spl176)),
  inference(subsumption_resolution,[],[f35233,f34918])).
fof(f35233,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl176),
  inference(forward_demodulation,[],[f35167,f34474])).
fof(f35167,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl176),
  inference(unit_resulting_resolution,[],[f231,f34474,f743])).
fof(f34809,plain,(
  $false | ($spl26 | $spl50 | $spl162 | $spl172 | $spl176)),
  inference(subsumption_resolution,[],[f34808,f34493])).
fof(f34493,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | ($spl50 | $spl162)),
  inference(forward_demodulation,[],[f7660,f33535])).
fof(f34808,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK3,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl26 | $spl162 | $spl172 | $spl176)),
  inference(backward_demodulation,[],[f34806,f34664])).
fof(f34806,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl162 | $spl176)),
  inference(forward_demodulation,[],[f34805,f33535])).
fof(f34805,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl162 | $spl176)),
  inference(trivial_inequality_removal,[],[f34797])).
fof(f34797,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl162 | $spl176)),
  inference(superposition,[],[f34500,f33535])).
fof(f34500,plain,(
  ( ! [X31] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X31))) | s('type.list.list'(sK0),X31) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) | ($spl26 | $spl176)),
  inference(backward_demodulation,[],[f34474,f34467])).
fof(f34495,plain,(
  $false | ($spl28 | $spl174)),
  inference(subsumption_resolution,[],[f34472,f34483])).
fof(f34494,plain,(
  $false | ($spl28 | $spl178)),
  inference(subsumption_resolution,[],[f34476,f34485])).
fof(f34485,plain,(
  ( ! [X30] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X30))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) ) | $spl28),
  inference(subsumption_resolution,[],[f34484,f34483])).
fof(f34484,plain,(
  ( ! [X30] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X30))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))))) )),
  inference(forward_demodulation,[],[f33669,f107])).
fof(f33669,plain,(
  ( ! [X30] : (s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X30))) != s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f747,f107])).
fof(f34472,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl174),
  inference(cnf_transformation,[],[f34472_D])).
fof(f34472_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f34478,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | $spl180),
  inference(cnf_transformation,[],[f34478_D])).
fof(f34478_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f33626,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl162),
  inference(forward_demodulation,[],[f33577,f156])).
fof(f33577,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.CONS_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK0)),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl162),
  inference(superposition,[],[f748,f33535])).
fof(f34476,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl178),
  inference(cnf_transformation,[],[f34476_D])).
fof(f34476_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f34474,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | $spl176),
  inference(cnf_transformation,[],[f34474_D])).
fof(f34474_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f33578,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) = s('type.semanticPrimitives.result'('type.list.list'('type.list.list'(sK0)),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl162),
  inference(superposition,[],[f733,f33535])).
fof(f33579,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl162),
  inference(superposition,[],[f157,f33535])).
fof(f34470,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK3,sK1,sK0)))) | $spl172),
  inference(cnf_transformation,[],[f34470_D])).
fof(f34470_D,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK3,sK1,sK0)))) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f4102,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) | $spl24),
  inference(cnf_transformation,[],[f4102_D])).
fof(f4102_D,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f33658,plain,(
  ( ! [X1] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X1))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK3,sK1,sK0))))) )),
  inference(superposition,[],[f6172,f107])).
fof(f34442,plain,(
  $false | ($spl24 | $spl168 | $spl170)),
  inference(subsumption_resolution,[],[f34441,f108])).
fof(f34441,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),sK3) | ($spl24 | $spl168 | $spl170)),
  inference(forward_demodulation,[],[f34427,f33907])).
fof(f33907,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl24),
  inference(unit_resulting_resolution,[],[f4102,f748])).
fof(f34427,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | ($spl24 | $spl168 | $spl170)),
  inference(backward_demodulation,[],[f34426,f33719])).
fof(f34426,plain,(
  s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)) = s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0)) | ($spl24 | $spl168 | $spl170)),
  inference(forward_demodulation,[],[f34425,f33968])).
fof(f33968,plain,(
  s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | $spl24),
  inference(superposition,[],[f13351,f33907])).
fof(f34425,plain,(
  s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0)) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | ($spl24 | $spl168 | $spl170)),
  inference(forward_demodulation,[],[f34424,f33789])).
fof(f33789,plain,(
  s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0)) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | $spl170),
  inference(superposition,[],[f13351,f33719])).
fof(f34424,plain,(
  s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl24 | $spl168)),
  inference(subsumption_resolution,[],[f34364,f33958])).
fof(f33958,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl24),
  inference(superposition,[],[f155,f33907])).
fof(f34364,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl24 | $spl168)),
  inference(superposition,[],[f33549,f33968])).
fof(f33719,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0)))) | $spl170),
  inference(cnf_transformation,[],[f33719_D])).
fof(f33719_D,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0)))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f4230,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) | $spl28),
  inference(cnf_transformation,[],[f4230_D])).
fof(f4230_D,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f33657,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK3,sK1,sK0))))) )),
  inference(superposition,[],[f747,f107])).
fof(f33549,plain,(
  ( ! [X15] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X15))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.error_result'(sK1),X15) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) | $spl168),
  inference(cnf_transformation,[],[f33549_D])).
fof(f33549_D,plain,(
  ( ! [X15] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X15))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.error_result'(sK1),X15) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f4104,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | $spl26),
  inference(cnf_transformation,[],[f4104_D])).
fof(f4104_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f33548,plain,(
  ( ! [X15] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X15))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.error_result'(sK1),X15) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))) )),
  inference(forward_demodulation,[],[f6467,f107])).
fof(f6467,plain,(
  ( ! [X15] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X15))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.error_result'(sK1),X15) = s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f731,f107])).
fof(f33547,plain,(
  $false | ($spl26 | $spl30)),
  inference(subsumption_resolution,[],[f4232,f33546])).
fof(f33539,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) ) | $spl166),
  inference(cnf_transformation,[],[f33539_D])).
fof(f33539_D,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f4232,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | $spl30),
  inference(cnf_transformation,[],[f4232_D])).
fof(f4232_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f33538,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(forward_demodulation,[],[f7512,f107])).
fof(f7512,plain,(
  ( ! [X24,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),X25) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f757,f107])).
fof(f33537,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl164),
  inference(cnf_transformation,[],[f33537_D])).
fof(f33537_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f33535,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | $spl162),
  inference(cnf_transformation,[],[f33535_D])).
fof(f33535_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f8216,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl48),
  inference(superposition,[],[f7659,f733])).
fof(f33533,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl160),
  inference(cnf_transformation,[],[f33533_D])).
fof(f33533_D,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f8217,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5(sK2,sK1,sK0)))) | $spl48),
  inference(superposition,[],[f7659,f157])).
fof(f33443,plain,(
  $false | ($spl26 | $spl28 | $spl48)),
  inference(subsumption_resolution,[],[f33442,f108])).
fof(f33442,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK2) = s('type.semanticPrimitives.result'(sK0,sK1),sK3) | ($spl26 | $spl28 | $spl48)),
  inference(forward_demodulation,[],[f33434,f6150])).
fof(f33434,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0)))) | ($spl26 | $spl28 | $spl48)),
  inference(backward_demodulation,[],[f33293,f33012])).
fof(f33012,plain,(
  s('type.semanticPrimitives.result'(sK0,sK1),sK3) = s('type.semanticPrimitives.result'(sK0,sK1),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK3,sK1,sK0)))) | ($spl28 | $spl48)),
  inference(unit_resulting_resolution,[],[f7712,f6172])).
fof(f7712,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) | ($spl28 | $spl48)),
  inference(backward_demodulation,[],[f7671,f107])).
fof(f7671,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | ($spl28 | $spl48)),
  inference(backward_demodulation,[],[f7668,f4240])).
fof(f7668,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) | ($spl28 | $spl48)),
  inference(backward_demodulation,[],[f7659,f7388])).
fof(f33293,plain,(
  s(sK0,sK4(sK2,sK1,sK0)) = s(sK0,sK4(sK3,sK1,sK0)) | ($spl26 | $spl28 | $spl48)),
  inference(unit_resulting_resolution,[],[f33186,f7683])).
fof(f7683,plain,(
  ( ! [X8,X9] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))) | s(sK0,X8) = s(sK0,sK4(sK2,sK1,sK0))) ) | ($spl28 | $spl48)),
  inference(backward_demodulation,[],[f7668,f7152])).
fof(f33186,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK3,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl26 | $spl28 | $spl48)),
  inference(forward_demodulation,[],[f33115,f7674])).
fof(f7674,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl28 | $spl48)),
  inference(backward_demodulation,[],[f7668,f6300])).
fof(f6300,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) | ($spl26 | $spl28)),
  inference(unit_resulting_resolution,[],[f4104,f4230,f749])).
fof(f33115,plain,(
  s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4(sK3,sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl28 | $spl48)),
  inference(superposition,[],[f6299,f33012])).
fof(f32050,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl157),
  inference(cnf_transformation,[],[f32050_D])).
fof(f32050_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl157),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl157])])).
fof(f32098,plain,(
  ( ! [X223] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X223)) ) | ($spl3 | $spl20 | $spl124)),
  inference(subsumption_resolution,[],[f31741,f2430])).
fof(f31741,plain,(
  ( ! [X223,X224] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X223) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X223)),X224,bool))) ) | ($spl3 | $spl20 | $spl124)),
  inference(superposition,[],[f2430,f31344])).
fof(f32083,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl124)),
  inference(condensation,[],[f32082])).
fof(f32082,plain,(
  ( ! [X185,X186] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,X185) = s(bool,X186) | s(bool,'F_0') = s(bool,X186)) ) | ($spl3 | $spl32 | $spl124)),
  inference(subsumption_resolution,[],[f31715,f11675])).
fof(f31715,plain,(
  ( ! [X185,X186] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,X185) = s(bool,X186) | s(bool,'F_0') = s(bool,X186) | s(bool,'T_0') = s(bool,X185)) ) | ($spl3 | $spl32 | $spl124)),
  inference(superposition,[],[f11675,f31344])).
fof(f32079,plain,(
  ( ! [X183] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X183)) ) | ($spl3 | $spl32 | $spl52 | $spl124)),
  inference(forward_demodulation,[],[f31915,f4309])).
fof(f31915,plain,(
  ( ! [X183] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X183)) ) | ($spl3 | $spl52 | $spl124)),
  inference(duplicate_literal_removal,[],[f31713])).
fof(f31713,plain,(
  ( ! [X183] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) ) | ($spl3 | $spl52 | $spl124)),
  inference(superposition,[],[f9610,f31344])).
fof(f32078,plain,(
  ( ! [X177] : (s(bool,X177) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X177)) ) | $spl158),
  inference(cnf_transformation,[],[f32078_D])).
fof(f32078_D,plain,(
  ( ! [X177] : (s(bool,X177) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X177)) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f31917,plain,(
  ( ! [X177,X176] : (s(bool,X177) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X176) | s(bool,'F_0') = s(bool,X177)) ) | ($spl3 | $spl32 | $spl124)),
  inference(duplicate_literal_removal,[],[f31710])).
fof(f31710,plain,(
  ( ! [X177,X176] : (s(bool,X177) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X176) | s(bool,'F_0') = s(bool,X177) | s(bool,'T_0') = s(bool,X176)) ) | ($spl3 | $spl32 | $spl124)),
  inference(superposition,[],[f5618,f31344])).
fof(f32069,plain,(
  ( ! [X160] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X160)) ) | ($spl3 | $spl18 | $spl20 | $spl124)),
  inference(subsumption_resolution,[],[f31701,f2430])).
fof(f31701,plain,(
  ( ! [X161,X160] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X160)),X161,bool)) | s(bool,'T_0') = s(bool,X160)) ) | ($spl3 | $spl18 | $spl124)),
  inference(superposition,[],[f2429,f31344])).
fof(f32048,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl124)),
  inference(condensation,[],[f32047])).
fof(f32047,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl124)),
  inference(condensation,[],[f32046])).
fof(f32046,plain,(
  ( ! [X95,X93,X96] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,X95) = s(bool,X96) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X93)) ) | ($spl3 | $spl124)),
  inference(subsumption_resolution,[],[f31679,f316])).
fof(f31679,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X93))) = s('type.semanticPrimitives.result'(bool,X94),'const.semanticPrimitives.Rval_1'(s(bool,X95))) | s(bool,X95) = s(bool,X96) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X93)) ) | ($spl3 | $spl124)),
  inference(superposition,[],[f359,f31344])).
fof(f30883,plain,(
  ( ! [X2,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) | $spl154),
  inference(cnf_transformation,[],[f30883_D])).
fof(f30883_D,plain,(
  ( ! [X2,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f30882,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f30828,f765])).
fof(f30828,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f30827])).
fof(f30827,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X4)),X5,bool)))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4)))) )),
  inference(duplicate_literal_removal,[],[f30826])).
fof(f30826,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X4)),X5,bool)))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f30753])).
fof(f30753,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X81)),X82,bool)))) | s(bool,X80) = s(bool,X84) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85) | s('type.semanticPrimitives.result'(bool,X82),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X82),'const.semanticPrimitives.Rval_1'(s(bool,X81))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f361,f782])).
fof(f30529,plain,(
  $false | ($spl3 | $spl47 | $spl77)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14701,f13366,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f15429,f14915,f4850,f10157])).
fof(f9381,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X93))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,X90))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X94))) | s(bool,'F_0') = s(bool,X90)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f9319,f4880])).
fof(f9319,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X93))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,X90))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X94))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X90)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f661,f5009])).
fof(f9219,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X93))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X90),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X94))) | s(bool,'F_0') = s(bool,X90)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f9165,f4880])).
fof(f9165,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X93))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X90),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X91)),X94))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X91),X92) = s('type.semanticPrimitives.result'('type.list.list'(bool),X91),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X91),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X90)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f648,f5009])).
fof(f8844,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76) != s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,X74))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f8788,f4880])).
fof(f8788,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76) != s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,X74))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f667,f5009])).
fof(f8697,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77) = s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,X74))))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f8639,f4880])).
fof(f8639,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,X74))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77) = s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f665,f5009])).
fof(f8476,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76) != s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f8428,f4880])).
fof(f8428,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76) != s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f654,f5009])).
fof(f8358,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77) = s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(forward_demodulation,[],[f8310,f4880])).
fof(f8310,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X75),X76),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X74),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X75),X77) = s('type.semanticPrimitives.result'('type.list.list'(bool),X75),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X75),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X74)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f652,f5009])).
fof(f5654,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f5009,f171])).
fof(f5009,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl3 | $spl47)),
  inference(subsumption_resolution,[],[f4967,f109])).
fof(f4967,plain,(
  ( ! [X34] : (~p(s(bool,'T_0')) | s(bool,X34) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f985,f4880])).
fof(f5008,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,f(s(bool,'T_0'))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | ($spl3 | $spl47)),
  inference(subsumption_resolution,[],[f4961,f109])).
fof(f4961,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | s(bool,X18) = s(bool,f(s(bool,'T_0'))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f494,f4880])).
fof(f4937,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f4880,f171])).
fof(f4885,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl47),
  inference(superposition,[],[f4850,f171])).
fof(f4880,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl47)),
  inference(unit_resulting_resolution,[],[f109,f179,f4850,f494])).
fof(f4883,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X1)))) ) | $spl47),
  inference(unit_resulting_resolution,[],[f4850,f148])).
fof(f4884,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | $spl47),
  inference(unit_resulting_resolution,[],[f4850,f160])).
fof(f30523,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971,f4850])).
fof(f12971,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | $spl84),
  inference(unit_resulting_resolution,[],[f765,f12856])).
fof(f13001,plain,(
  ( ! [X47,X48] : (s(bool,X47) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X47)),X48,bool))) ) | $spl84),
  inference(superposition,[],[f12856,f765])).
fof(f13038,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl84),
  inference(subsumption_resolution,[],[f13015,f112])).
fof(f13015,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f13039,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl84),
  inference(subsumption_resolution,[],[f13018,f112])).
fof(f13018,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') != s(bool,X12) | s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f13024,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl84),
  inference(equality_resolution,[],[f12856])).
fof(f17318,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(condensation,[],[f17317])).
fof(f17317,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(condensation,[],[f17316])).
fof(f17316,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,'F_0') = s(bool,X450) | s(bool,X449) = s(bool,X451) | s(bool,'T_0') = s(bool,X451) | s(bool,X452) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X452)) ) | $spl84),
  inference(subsumption_resolution,[],[f14198,f1004])).
fof(f14198,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,X449) != s(bool,X450) | s(bool,'F_0') = s(bool,X450) | s(bool,X449) = s(bool,X451) | s(bool,'T_0') = s(bool,X451) | s(bool,X452) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X452)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f17426,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(duplicate_literal_removal,[],[f17425])).
fof(f17425,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(condensation,[],[f17424])).
fof(f17424,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,'F_0') = s(bool,X450) | s(bool,X451) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X451) | s(bool,X449) = s(bool,X452) | s(bool,'T_0') = s(bool,X452)) ) | $spl84),
  inference(subsumption_resolution,[],[f14346,f1004])).
fof(f14346,plain,(
  ( ! [X449,X451,X452,X450] : (s(bool,X449) != s(bool,X450) | s(bool,'F_0') = s(bool,X450) | s(bool,X451) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X451) | s(bool,X449) = s(bool,X452) | s(bool,'T_0') = s(bool,X452)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f17631,plain,(
  ( ! [X436,X434,X437,X435] : (s(bool,'F_0') = s(bool,X434) | s(bool,X435) = s(bool,X436) | s(bool,X436) = s(bool,f(s(bool,'T_0'))) | s(bool,X435) = s(bool,X437) | s(bool,'T_0') = s(bool,X437)) ) | $spl84),
  inference(subsumption_resolution,[],[f14863,f112])).
fof(f14863,plain,(
  ( ! [X436,X434,X437,X435] : (s(bool,'T_0') != s(bool,X434) | s(bool,'F_0') = s(bool,X434) | s(bool,X435) = s(bool,X436) | s(bool,X436) = s(bool,f(s(bool,'T_0'))) | s(bool,X435) = s(bool,X437) | s(bool,'T_0') = s(bool,X437)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f17801,plain,(
  ( ! [X436,X434,X437,X435] : (s(bool,'F_0') = s(bool,X434) | s(bool,X435) = s(bool,X436) | s(bool,X436) = s(bool,X437) | s(bool,'T_0') = s(bool,X437) | s(bool,X435) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(subsumption_resolution,[],[f15377,f112])).
fof(f15377,plain,(
  ( ! [X436,X434,X437,X435] : (s(bool,'T_0') != s(bool,X434) | s(bool,'F_0') = s(bool,X434) | s(bool,X435) = s(bool,X436) | s(bool,X436) = s(bool,X437) | s(bool,'T_0') = s(bool,X437) | s(bool,X435) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f21654,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | $spl84),
  inference(unit_resulting_resolution,[],[f765,f12856])).
fof(f21689,plain,(
  ( ! [X83,X82] : (s(bool,X82) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X82)),X83,bool))) ) | $spl84),
  inference(superposition,[],[f12856,f765])).
fof(f21761,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl84),
  inference(subsumption_resolution,[],[f21712,f112])).
fof(f21712,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f21762,plain,(
  ( ! [X12,X11] : (s(bool,'F_0') = s(bool,X11) | s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X12)) ) | $spl84),
  inference(subsumption_resolution,[],[f21715,f112])).
fof(f21715,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X12)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f21765,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(condensation,[],[f21764])).
fof(f21764,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(condensation,[],[f21763])).
fof(f21763,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,'F_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16)) ) | $spl84),
  inference(subsumption_resolution,[],[f21716,f1004])).
fof(f21716,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X13) != s(bool,X14) | s(bool,'F_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f21768,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(duplicate_literal_removal,[],[f21767])).
fof(f21767,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(condensation,[],[f21766])).
fof(f21766,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,X19) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X19) | s(bool,X17) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl84),
  inference(subsumption_resolution,[],[f21717,f1004])).
fof(f21717,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X17) != s(bool,X18) | s(bool,'F_0') = s(bool,X18) | s(bool,X19) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X19) | s(bool,X17) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f21769,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'F_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,X23) = s(bool,f(s(bool,'T_0'))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl84),
  inference(subsumption_resolution,[],[f21718,f112])).
fof(f21718,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,X23) = s(bool,f(s(bool,'T_0'))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f21770,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X26) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(subsumption_resolution,[],[f21719,f112])).
fof(f21719,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') != s(bool,X25) | s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X26) = s(bool,f(s(bool,'T_0')))) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f21729,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl84),
  inference(equality_resolution,[],[f12856])).
fof(f13002,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f14706,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X53) != s(bool,f(s(bool,X52))) | s(bool,'F_0') = s(bool,X53) | s(bool,X54) = s(bool,X55) | s(bool,X52) = s(bool,X55) | s(bool,X54) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30522,plain,(
  $false | ($spl47 | $spl54 | $spl84)),
  inference(global_subsumption,[],[f9613,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30521,plain,(
  $false | ($spl47 | $spl84 | $spl124)),
  inference(global_subsumption,[],[f24692,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30520,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27280,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30519,plain,(
  $false | ($spl47 | $spl84 | $spl138)),
  inference(global_subsumption,[],[f27539,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30518,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27840,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30517,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27841,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30512,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30511,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30507,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f4752,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30506,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f4794,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30505,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f4801,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30504,plain,(
  $false | ($spl18 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f4804,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f4804,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X64)))),X65,bool)) | s(bool,'T_0') = s(bool,X64)) ) | ($spl18 | $spl32)),
  inference(trivial_inequality_removal,[],[f4783])).
fof(f4783,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,X64)))),X65,bool)) | s(bool,'T_0') = s(bool,X64)) ) | ($spl18 | $spl32)),
  inference(superposition,[],[f2429,f4327])).
fof(f30503,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f4829,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30502,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f5043,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30501,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f6337,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30500,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f8316,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30499,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f8434,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30498,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f8645,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30497,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f8794,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30496,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f9171,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30495,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f9325,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30494,plain,(
  $false | ($spl3 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f10619,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30493,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f11237,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30492,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f11238,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30491,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f12577,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30490,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f12643,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30489,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f18556,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30488,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f18593,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30487,plain,(
  $false | ($spl47 | $spl84 | $spl108)),
  inference(global_subsumption,[],[f18616,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30486,plain,(
  $false | ($spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24352,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f24352,plain,(
  ( ! [X114,X113] : (s(bool,f(s(bool,X113))) = s(bool,g(s(bool,X114))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,X113)) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f24301,f109])).
fof(f24301,plain,(
  ( ! [X114,X113] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X113))) = s(bool,g(s(bool,X114))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,X113)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f4829,f19472])).
fof(f30485,plain,(
  $false | ($spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24685,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f24685,plain,(
  ( ! [X152,X151,X153] : (s(bool,g(s(bool,X153))) = s(bool,sK6(X151,X152,bool,bool)) | s(bool,'T_0') = s(bool,X153) | s(fun(bool,bool),X151) = s(fun(bool,bool),X152)) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f24581,f109])).
fof(f24581,plain,(
  ( ! [X152,X151,X153] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X153))) = s(bool,sK6(X151,X152,bool,bool)) | s(bool,'T_0') = s(bool,X153) | s(fun(bool,bool),X151) = s(fun(bool,bool),X152)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f4829,f19174])).
fof(f30484,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f25607,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30483,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27308,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30482,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27313,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30481,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27332,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30480,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27335,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30479,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27376,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30478,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27417,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30477,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27429,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30476,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27435,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30475,plain,(
  $false | ($spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27439,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f27439,plain,(
  ( ! [X253,X254,X252] : (s(bool,f(s(bool,X254))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X252)),X253,bool)) | s(bool,'T_0') = s(bool,X254) | s(bool,'T_0') = s(bool,g(s(bool,X252)))) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f27300,f109])).
fof(f27300,plain,(
  ( ! [X253,X254,X252] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X254))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X252)),X253,bool)) | s(bool,'T_0') = s(bool,X254) | s(bool,'T_0') = s(bool,g(s(bool,X252)))) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f20825,f4752])).
fof(f20825,plain,(
  ( ! [X6,X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X6)) ) | $spl40),
  inference(subsumption_resolution,[],[f20689,f109])).
fof(f20689,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X6)) ) | $spl40),
  inference(superposition,[],[f154,f19472])).
fof(f30474,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27440,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30473,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27441,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30472,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27443,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30471,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27444,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30470,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27445,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30469,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27446,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30468,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27447,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30467,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27448,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30466,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27449,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30465,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27451,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30464,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27541,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30463,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28464,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30462,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28470,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30461,plain,(
  $false | ($spl32 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f28472,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30460,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28488,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30459,plain,(
  $false | ($spl32 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f28490,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30458,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28516,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30457,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28517,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30456,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28518,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30455,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28519,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30454,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28520,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30453,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28521,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30452,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28522,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30451,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28523,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30450,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28524,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30449,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28525,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30448,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28550,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30447,plain,(
  $false | ($spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28554,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f28554,plain,(
  ( ! [X180,X181] : (s(bool,f(s(bool,X181))) = s(bool,g(s(bool,X180))) | s(bool,'T_0') = s(bool,X181) | s(bool,X180) = s(bool,g(s(bool,'F_0')))) ) | ($spl32 | $spl40)),
  inference(subsumption_resolution,[],[f28225,f109])).
fof(f28225,plain,(
  ( ! [X180,X181] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X181))) = s(bool,g(s(bool,X180))) | s(bool,'T_0') = s(bool,X181) | s(bool,X180) = s(bool,g(s(bool,'F_0')))) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f20825,f27537])).
fof(f30446,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28458,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30445,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28457,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30444,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f28456,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30443,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f30442,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30441,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f30440,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30435,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f30434,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30430,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30429,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30428,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30427,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30426,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f29523,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30424,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001,f12971])).
fof(f30423,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038,f13001])).
fof(f30422,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039,f13038])).
fof(f30421,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024,f13039])).
fof(f30420,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f13042,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024])).
fof(f13042,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl32 | $spl84)),
  inference(condensation,[],[f13041])).
fof(f13041,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(condensation,[],[f13040])).
fof(f13040,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(subsumption_resolution,[],[f13020,f5444])).
fof(f13020,plain,(
  ( ! [X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'F_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f5444])).
fof(f30419,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f13045,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024])).
fof(f13045,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl32 | $spl84)),
  inference(condensation,[],[f13044])).
fof(f13044,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl32 | $spl84)),
  inference(condensation,[],[f13043])).
fof(f13043,plain,(
  ( ! [X21,X22] : (s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X21)) ) | ($spl32 | $spl84)),
  inference(subsumption_resolution,[],[f13021,f5444])).
fof(f13021,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X21)) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f5444])).
fof(f30418,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318,f13024])).
fof(f30417,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f17279,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318])).
fof(f17279,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f17278])).
fof(f17278,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,X260) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X259) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,X259) = s(bool,X262)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f14157,f11675])).
fof(f14157,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,X260) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X259) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,X259) = s(bool,X262) | s(bool,'T_0') = s(bool,X262)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30416,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426,f17318])).
fof(f30415,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f17393,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426])).
fof(f17393,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f17392])).
fof(f17392,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,X260) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X259) | s(bool,X259) = s(bool,X261) | s(bool,X260) = s(bool,X262) | s(bool,'T_0') = s(bool,X262)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f14305,f11675])).
fof(f14305,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,X260) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X259) | s(bool,X259) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,X260) = s(bool,X262) | s(bool,'T_0') = s(bool,X262)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30414,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631,f17426])).
fof(f30413,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915,f17631])).
fof(f30412,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801,f14915])).
fof(f30411,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429,f17801])).
fof(f30410,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654,f15429])).
fof(f30409,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20064,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20064,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f160])).
fof(f12969,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12856])).
fof(f30408,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20063,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20063,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X1)))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f148])).
fof(f30407,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20060,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20060,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f5444])).
fof(f30406,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20055,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20055,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f179,f12969,f494])).
fof(f30405,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20047,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20047,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30404,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20045,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20045,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f179,f12969,f282])).
fof(f30403,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20042,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20042,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f154])).
fof(f30402,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20041,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20041,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f160])).
fof(f30401,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20040,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20040,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X1)))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f148])).
fof(f30400,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20038,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20038,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f5444])).
fof(f30399,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20032,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20032,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f494])).
fof(f30398,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20029,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20029,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f494])).
fof(f30397,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20028,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20028,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f12969,f494])).
fof(f30396,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20025,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20025,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30395,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20024,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20024,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f12969,f12969,f282])).
fof(f30394,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20017,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20017,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30393,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20015,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20015,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f12969,f12969,f282])).
fof(f30392,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20007,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20007,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f179,f12969,f282])).
fof(f30391,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20006,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20006,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f179,f12969,f282])).
fof(f30390,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20004,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20004,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f154])).
fof(f30389,plain,(
  $false | ($spl3 | $spl47 | $spl52 | $spl84)),
  inference(global_subsumption,[],[f20003,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20003,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl52 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f10512])).
fof(f30388,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20130,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20130,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f20000,f765])).
fof(f20000,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f12969,f9586])).
fof(f30387,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19998,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19998,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f12969,f5618])).
fof(f30386,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19995,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19995,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f4327])).
fof(f30385,plain,(
  $false | ($spl3 | $spl20 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19994,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19994,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl20 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2430])).
fof(f30384,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19992,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19992,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f765,f12969,f2377])).
fof(f30383,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20135,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20135,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f19979,f765])).
fof(f19979,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f179,f12969,f2377])).
fof(f30382,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20136,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20136,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f19976,f765])).
fof(f19976,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f833])).
fof(f30381,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19974,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19974,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f833])).
fof(f30380,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19973,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19973,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f494])).
fof(f30379,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19969,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19969,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f179,f12969,f494])).
fof(f30378,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19966,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19966,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30377,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19964,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19964,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f12969,f12969,f282])).
fof(f30376,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19959,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19959,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30375,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19957,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19957,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f179,f12969,f282])).
fof(f30374,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19954,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19954,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30373,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19952,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19952,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f12969,f12969,f282])).
fof(f30372,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19947,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19947,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f12969,f12969,f282])).
fof(f30371,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19945,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19945,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f179,f12969,f282])).
fof(f30370,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19944,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19944,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f234])).
fof(f30369,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19942,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19942,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f111,f12969,f200])).
fof(f30368,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19941,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19941,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f173])).
fof(f30367,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19938,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19938,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f171])).
fof(f30366,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19935,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19935,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f171])).
fof(f30365,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f19934,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f19934,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f112])).
fof(f30364,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20106,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20106,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl84)),
  inference(trivial_inequality_removal,[],[f20086])).
fof(f20086,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f171])).
fof(f30363,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20105,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20105,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl3 | $spl84)),
  inference(trivial_inequality_removal,[],[f20089])).
fof(f20089,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f171])).
fof(f30362,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20143,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20143,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl84)),
  inference(condensation,[],[f20142])).
fof(f20142,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl84)),
  inference(condensation,[],[f20141])).
fof(f20141,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl84)),
  inference(subsumption_resolution,[],[f20090,f171])).
fof(f20090,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f282])).
fof(f30361,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20146,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20146,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl84)),
  inference(duplicate_literal_removal,[],[f20145])).
fof(f20145,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl84)),
  inference(condensation,[],[f20144])).
fof(f20144,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl3 | $spl84)),
  inference(subsumption_resolution,[],[f20091,f171])).
fof(f20091,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f282])).
fof(f30360,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20104,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20104,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | ($spl3 | $spl84)),
  inference(trivial_inequality_removal,[],[f20092])).
fof(f20092,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'T_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f282])).
fof(f30359,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20103,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20103,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) = s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X14) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl84)),
  inference(trivial_inequality_removal,[],[f20093])).
fof(f20093,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X14) = s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X14) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl84)),
  inference(superposition,[],[f12969,f282])).
fof(f30358,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30357,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f30357,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f30356])).
fof(f30356,plain,(
  ( ! [X34] : (s(bool,'F_0') = s(bool,X34) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f20099,f112])).
fof(f20099,plain,(
  ( ! [X34] : (s(bool,'T_0') != s(bool,X34) | s(bool,'F_0') = s(bool,X34) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(superposition,[],[f12969,f5444])).
fof(f30355,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30354,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f30354,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f30353])).
fof(f30353,plain,(
  ( ! [X35] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X35)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f20100,f112])).
fof(f20100,plain,(
  ( ! [X35] : (s(bool,'T_0') != s(bool,X35) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X35)) ) | ($spl3 | $spl32 | $spl84)),
  inference(superposition,[],[f12969,f5444])).
fof(f30352,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20402,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20402,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20340,f765])).
fof(f20340,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f2431,f494])).
fof(f30351,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20404,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20404,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20328,f765])).
fof(f20328,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30350,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20406,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20406,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20325,f765])).
fof(f20325,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f2431,f282])).
fof(f30349,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20408,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20408,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20322,f765])).
fof(f20322,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f179,f2431,f282])).
fof(f30348,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20304,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20304,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f494])).
fof(f30347,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20418,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20418,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20296,f765])).
fof(f20296,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30346,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20419,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20419,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20293,f765])).
fof(f20293,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f12969,f2431,f2431,f282])).
fof(f30345,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20291,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20291,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f2431,f2431,f282])).
fof(f30344,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20289,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20289,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f2431,f2431,f282])).
fof(f30343,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20421,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20421,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20281,f765])).
fof(f20281,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30342,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20422,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20422,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20278,f765])).
fof(f20278,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f12969,f2431,f2431,f282])).
fof(f30341,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20276,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20276,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f2431,f2431,f282])).
fof(f30340,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20273,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20273,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f2431,f2431,f282])).
fof(f30339,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20426,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20426,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20262,f765])).
fof(f20262,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f2431,f12969,f2431,f282])).
fof(f30338,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20427,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20427,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20261,f765])).
fof(f20261,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f2431,f282])).
fof(f30337,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20428,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20428,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20260,f765])).
fof(f20260,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f12969,f2431,f282])).
fof(f30336,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20441,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20441,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20440,f765])).
fof(f20440,plain,(
  ( ! [X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20243,f765])).
fof(f20243,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f2431,f2377])).
fof(f30335,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20239,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20239,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f2431,f2377])).
fof(f30334,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20446,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20446,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20445,f765])).
fof(f20445,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20226,f765])).
fof(f20226,plain,(
  ( ! [X0,X1] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f12969,f2431,f2377])).
fof(f30333,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20452,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20452,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20451,f765])).
fof(f20451,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20221,f765])).
fof(f20221,plain,(
  ( ! [X0,X1] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f833])).
fof(f30332,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20457,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20457,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20456,f765])).
fof(f20456,plain,(
  ( ! [X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20218,f765])).
fof(f20218,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))),X1,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f833])).
fof(f30331,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20215,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20215,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f494])).
fof(f30330,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20462,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20462,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20211,f765])).
fof(f20211,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f2431,f494])).
fof(f30329,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20464,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20464,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20207,f765])).
fof(f20207,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30328,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20465,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20465,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20204,f765])).
fof(f20204,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f12969,f2431,f2431,f282])).
fof(f30327,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20202,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20202,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f2431,f2431,f282])).
fof(f30326,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20199,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20199,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f2431,f2431,f282])).
fof(f30325,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20467,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20467,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20193,f765])).
fof(f20193,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30324,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20469,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20469,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20190,f765])).
fof(f20190,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f2431,f282])).
fof(f30323,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20471,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20471,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20187,f765])).
fof(f20187,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f179,f2431,f282])).
fof(f30322,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20473,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20473,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20183,f765])).
fof(f20183,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30321,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20474,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20474,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20180,f765])).
fof(f20180,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f12969,f2431,f2431,f282])).
fof(f30320,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20178,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20178,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f12969,f2431,f2431,f282])).
fof(f30319,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20175,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20175,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f2431,f2431,f282])).
fof(f30318,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20476,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20476,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20169,f765])).
fof(f20169,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f2431,f2431,f282])).
fof(f30317,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20478,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20478,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20166,f765])).
fof(f20166,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f2431,f282])).
fof(f30316,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20480,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20480,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20163,f765])).
fof(f20163,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f179,f2431,f282])).
fof(f30315,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20484,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20484,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20155,f765])).
fof(f20155,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f171])).
fof(f30314,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20486,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20486,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f20151,f765])).
fof(f20151,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f171])).
fof(f30313,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20624,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20624,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f20588,f765])).
fof(f20588,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f232,f782])).
fof(f30312,plain,(
  $false | ($spl3 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20626,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20626,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl40 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f19472])).
fof(f30311,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f20939,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f20939,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f20835,f765])).
fof(f20835,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X1,bool))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f12969,f255])).
fof(f30310,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f21625,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f21625,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f21554,f765])).
fof(f21554,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f256])).
fof(f30309,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689,f21654])).
fof(f30308,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f21752,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689])).
fof(f21752,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f21751])).
fof(f21751,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,X9) = s(bool,X12)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f21660,f11675])).
fof(f21660,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30307,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f21754,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689])).
fof(f21754,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f21753])).
fof(f21753,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13) | s(bool,X13) = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f21661,f11675])).
fof(f21661,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X13) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30306,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761,f21689])).
fof(f30305,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762,f21761])).
fof(f30304,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765,f21762])).
fof(f30303,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768,f21765])).
fof(f30302,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769,f21768])).
fof(f30301,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770,f21769])).
fof(f30300,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729,f21770])).
fof(f30299,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f21773,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729])).
fof(f21773,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl32 | $spl84)),
  inference(condensation,[],[f21772])).
fof(f21772,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(condensation,[],[f21771])).
fof(f21771,plain,(
  ( ! [X52,X51] : (s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(subsumption_resolution,[],[f21725,f5444])).
fof(f21725,plain,(
  ( ! [X52,X51] : (s(bool,X51) != s(bool,X52) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f5444])).
fof(f30298,plain,(
  $false | ($spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f21776,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729])).
fof(f21776,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl32 | $spl84)),
  inference(condensation,[],[f21775])).
fof(f21775,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl32 | $spl84)),
  inference(condensation,[],[f21774])).
fof(f21774,plain,(
  ( ! [X54,X53] : (s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X53)) ) | ($spl32 | $spl84)),
  inference(subsumption_resolution,[],[f21726,f5444])).
fof(f21726,plain,(
  ( ! [X54,X53] : (s(bool,X53) != s(bool,X54) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X53)) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f5444])).
fof(f30297,plain,(
  $false | ($spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4885,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f554,f549,f256,f255,f235,f234,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f23961,f23960,f21729])).
fof(f30296,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960,f23560,f23319,f22557,f22456,f22460])).
fof(f22460,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f985])).
fof(f22456,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f985])).
fof(f22557,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X1)))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f179,f549])).
fof(f23319,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f22940,f765])).
fof(f22940,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f1729])).
fof(f23560,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f1221])).
fof(f26472,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X0)))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f26389,f765])).
fof(f26389,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),X0)))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f1161])).
fof(f26823,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,'T_0'))),s('type.list.list'(bool),X0)))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f26691,f765])).
fof(f26691,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X1,bool)),s('type.list.list'(bool),X0)))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f765,f12969,f1164])).
fof(f27093,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f26943,f765])).
fof(f26943,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X1,bool))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f765,f12969,f314])).
fof(f27095,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f26938,f765])).
fof(f26938,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f179,f314])).
fof(f27550,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f12969,f12969,f316])).
fof(f27549,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f179,f179,f12969,f316])).
fof(f28824,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl84)),
  inference(forward_demodulation,[],[f28683,f765])).
fof(f28683,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl3 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f232,f343])).
fof(f18731,plain,(
  ( ! [X28,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | ($spl3 | $spl84)),
  inference(subsumption_resolution,[],[f12987,f179])).
fof(f12987,plain,(
  ( ! [X28,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f18709,plain,(
  ( ! [X212,X213,X211,X214] : (s(bool,X211) != s(bool,f(s(bool,X211))) | s(bool,X212) = s(bool,X213) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,X211) = s(bool,X212)) ) | ($spl3 | $spl84)),
  inference(subsumption_resolution,[],[f15257,f179])).
fof(f15257,plain,(
  ( ! [X212,X213,X211,X214] : (s(bool,X211) != s(bool,f(s(bool,X211))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X212) = s(bool,X213) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,X211) = s(bool,X212)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f30295,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960,f23560,f23319,f22557,f22456])).
fof(f30294,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960,f23560,f23319,f22557])).
fof(f30293,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960,f23560,f23319])).
fof(f30292,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960,f23560])).
fof(f30291,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961,f23960])).
fof(f30290,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472,f23961])).
fof(f30289,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24265,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f24265,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f4829])).
fof(f30288,plain,(
  $false | ($spl3 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24359,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f24359,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl40 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f20825])).
fof(f30287,plain,(
  $false | ($spl3 | $spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24635,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f24635,plain,(
  ( ! [X204,X205] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X204) = s(fun(bool,bool),X205) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X204,X205,bool,bool))))) ) | ($spl32 | $spl40)),
  inference(duplicate_literal_removal,[],[f24601])).
fof(f24601,plain,(
  ( ! [X204,X205] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X204) = s(fun(bool,bool),X205) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X204,X205,bool,bool)))) | s(fun(bool,bool),X204) = s(fun(bool,bool),X205)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f694,f19174])).
fof(f30286,plain,(
  $false | ($spl3 | $spl32 | $spl40 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24634,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f24634,plain,(
  ( ! [X206,X207] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X206) = s(fun(bool,bool),X207)) ) | ($spl32 | $spl40)),
  inference(duplicate_literal_removal,[],[f24602])).
fof(f24602,plain,(
  ( ! [X206,X207] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X206) = s(fun(bool,bool),X207) | s(fun(bool,bool),X206) = s(fun(bool,bool),X207)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f159,f19174])).
fof(f30285,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f24890,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f24890,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f2431,f784])).
fof(f30284,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823,f26472])).
fof(f30283,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093,f26823])).
fof(f30282,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27089,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093])).
fof(f27089,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f27088,f765])).
fof(f27088,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f26950,f765])).
fof(f26950,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))),X2,bool))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f2431,f314])).
fof(f30281,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f26947,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093])).
fof(f26947,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f12969,f765,f2431,f314])).
fof(f30280,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27092,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093])).
fof(f27092,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f27091,f765])).
fof(f27091,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(forward_demodulation,[],[f26945,f765])).
fof(f26945,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))),X2,bool))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f765,f12969,f314])).
fof(f30279,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095,f27093])).
fof(f30278,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550,f27095])).
fof(f30277,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27454,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550])).
fof(f27454,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl3 | $spl32 | $spl84)),
  inference(unit_resulting_resolution,[],[f109,f12969,f27417])).
fof(f30276,plain,(
  $false | ($spl3 | $spl22 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f27551,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550])).
fof(f27551,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl3 | $spl22 | $spl84)),
  inference(unit_resulting_resolution,[],[f2431,f2431,f12969,f316])).
fof(f30275,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549,f27550])).
fof(f30274,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824,f27549])).
fof(f30273,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30272,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824])).
fof(f30271,plain,(
  $false | ($spl3 | $spl32 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f30270,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824])).
fof(f30270,plain,(
  ( ! [X182] : (s(bool,X182) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X182)))) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f30269,f179])).
fof(f30269,plain,(
  ( ! [X182] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X182) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X182)))) ) | ($spl32 | $spl84)),
  inference(forward_demodulation,[],[f28110,f4309])).
fof(f28110,plain,(
  ( ! [X182] : (s(bool,X182) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X182)))) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f27537])).
fof(f30268,plain,(
  $false | ($spl3 | $spl47 | $spl84)),
  inference(global_subsumption,[],[f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2393,f1945,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4834,f4837,f4850,f4884,f4883,f4880,f4885,f4937,f5008,f5009,f5021,f5024,f5025,f5028,f5031,f5032,f5037,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5654,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8296,f8297,f8305,f8358,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8414,f8415,f8423,f8476,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8625,f8626,f8634,f8697,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8774,f8775,f8783,f8844,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9151,f9152,f9160,f9219,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9305,f9306,f9314,f9381,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12652,f12653,f12655,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13367,f13387,f16997,f13790,f13876,f16753,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14241,f14242,f14243,f14252,f17441,f17446,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14537,f14538,f14539,f14548,f16070,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14685,f14686,f14687,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14903,f14904,f14905,f14914,f17805,f15468,f17961,f17962,f17963,f17966,f17987,f17988,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18639,f18640,f18289,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18692,f18693,f18709,f18731,f12969,f18643,f18642,f18641,f18638,f14912,f14911,f14910,f14901,f14766,f14694,f14693,f14692,f14683,f14546,f14545,f14544,f14535,f14250,f14249,f14248,f14239,f6950,f6949,f6326,f6318,f6317,f6159,f6158,f728,f726,f18487,f18399,f18396,f12646,f6340,f1744,f18292,f17523,f14908,f14690,f14542,f14246,f4847,f1627,f692,f690,f17989,f17965,f17444,f16751,f16088,f16086,f16080,f15724,f14706,f14701,f13366,f13002,f12856,f12657,f12645,f12644,f12591,f11113,f9578,f9338,f9316,f9304,f9184,f9162,f9150,f9080,f8927,f8807,f8785,f8773,f8658,f8636,f8624,f8447,f8425,f8413,f8329,f8307,f8295,f7593,f7341,f7242,f6948,f6482,f6478,f6345,f6339,f6338,f6200,f6199,f6198,f5900,f5896,f5891,f5889,f5884,f5881,f5880,f5879,f5878,f5876,f5875,f5069,f5039,f5030,f5022,f5020,f4674,f4538,f4521,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2283,f2281,f2280,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1936,f1931,f1894,f1889,f1832,f1801,f1797,f1729,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f1496,f1455,f1452,f1439,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1339,f1337,f1336,f1335,f1291,f1286,f1260,f1255,f1221,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1102,f1101,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f947,f837,f730,f694,f689,f612,f611,f610,f554,f549,f546,f544,f256,f255,f245,f235,f234,f232,f111,f25399,f25465,f24989,f24992,f24993,f25371,f25070,f25536,f25537,f25077,f25084,f25086,f25087,f25544,f25101,f25546,f25103,f25549,f25550,f25553,f25554,f25555,f25556,f25557,f25558,f25559,f25130,f25560,f25133,f25561,f25157,f25158,f25159,f25570,f25573,f25574,f25577,f25578,f25580,f25178,f25592,f25594,f25207,f25596,f25602,f25612,f25280,f25285,f25613,f25615,f25616,f25617,f25618,f25619,f25620,f25621,f25304,f25622,f25307,f25623,f26468,f26481,f26461,f26496,f26812,f26804,f26803,f26801,f26845,f26865,f27009,f27604,f27607,f27658,f27661,f28738,f29446,f29547,f29545,f29595,f28824])).
fof(f30137,plain,(
  ( ! [X47,X48] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48)) ) | $spl146),
  inference(cnf_transformation,[],[f30137_D])).
fof(f30137_D,plain,(
  ( ! [X47,X48] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48)) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f30170,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,X192) != s(bool,g(s(bool,X191))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X190),s('type.list.list'(bool),X193))) | s(bool,'T_0') = s(bool,X192)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29780,f918])).
fof(f29780,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,X192) != s(bool,g(s(bool,X191))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X193))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X190),s('type.list.list'(bool),X193))) | s(bool,'T_0') = s(bool,X192) | s(bool,'F_0') = s(bool,X190)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f1164,f29404])).
fof(f30159,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | $spl150),
  inference(cnf_transformation,[],[f30159_D])).
fof(f30159_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f30158,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(condensation,[],[f30157])).
fof(f30157,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s(bool,X116) != s(bool,g(s(bool,X115))) | s('type.semanticPrimitives.result'(bool,X117),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X117),'const.semanticPrimitives.Rval_1'(s(bool,X116))) | s(bool,X114) = s(bool,X118) | s(bool,'F_0') = s(bool,X114)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29762,f11675])).
fof(f29762,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s(bool,X116) != s(bool,g(s(bool,X115))) | s('type.semanticPrimitives.result'(bool,X117),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X117),'const.semanticPrimitives.Rval_1'(s(bool,X116))) | s(bool,X114) = s(bool,X118) | s(bool,'T_0') = s(bool,X118) | s(bool,'F_0') = s(bool,X114)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f343,f29404])).
fof(f30153,plain,(
  ( ! [X103,X99,X102] : (s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X99))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103)) ) | $spl148),
  inference(cnf_transformation,[],[f30153_D])).
fof(f30153_D,plain,(
  ( ! [X103,X99,X102] : (s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X99))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f30152,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s(bool,X101) != s(bool,g(s(bool,X100))) | s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X99))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X101) | s(bool,'T_0') = s(bool,X103)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29759,f256])).
fof(f29759,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s(bool,X101) != s(bool,g(s(bool,X100))) | s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X99))) = s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X101) | s(bool,'T_0') = s(bool,X103) | s(bool,'F_0') = s(bool,X99)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f314,f29404])).
fof(f30136,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,X46))) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(subsumption_resolution,[],[f29748,f161])).
fof(f29748,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X49),'const.semanticPrimitives.Rval_1'(s(bool,X46))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X46)) ) | ($spl3 | $spl32 | $spl52 | $spl125)),
  inference(superposition,[],[f255,f29404])).
fof(f28475,plain,(
  ( ! [X41] : (s(bool,'F_0') != s(bool,X41) | s(bool,'T_0') = s(bool,g(s(bool,X41)))) ) | $spl140),
  inference(cnf_transformation,[],[f28475_D])).
fof(f28475_D,plain,(
  ( ! [X41] : (s(bool,'F_0') != s(bool,X41) | s(bool,'T_0') = s(bool,g(s(bool,X41)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f28495,plain,(
  ( ! [X134,X133] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X134))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134)))) ) | $spl144),
  inference(cnf_transformation,[],[f28495_D])).
fof(f28495_D,plain,(
  ( ! [X134,X133] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X134))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f28494,plain,(
  ( ! [X134,X132,X133] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X134))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134))) | s(bool,'F_0') != s(bool,X132) | s(bool,'T_0') = s(bool,g(s(bool,X132)))) ) | $spl32),
  inference(subsumption_resolution,[],[f28493,f918])).
fof(f28493,plain,(
  ( ! [X134,X132,X133] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X134))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134))) | s(bool,'F_0') != s(bool,X132) | s(bool,'T_0') = s(bool,X133) | s(bool,'T_0') = s(bool,g(s(bool,X132)))) ) | $spl32),
  inference(forward_demodulation,[],[f28088,f4309])).
fof(f28088,plain,(
  ( ! [X134,X132,X133] : (s(bool,'F_0') != s(bool,X132) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X133),s('type.list.list'(bool),X134))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X134))) | s(bool,'T_0') = s(bool,X133) | s(bool,'T_0') = s(bool,g(s(bool,X132)))) ) | $spl32),
  inference(superposition,[],[f1161,f27537])).
fof(f28476,plain,(
  ( ! [X43,X42] : (s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X43)))) ) | $spl142),
  inference(cnf_transformation,[],[f28476_D])).
fof(f28476_D,plain,(
  ( ! [X43,X42] : (s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X43)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f28474,plain,(
  ( ! [X43,X41,X42] : (s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X43))) | s(bool,'F_0') != s(bool,X41) | s(bool,'T_0') = s(bool,g(s(bool,X41)))) ) | $spl32),
  inference(subsumption_resolution,[],[f28473,f161])).
fof(f28473,plain,(
  ( ! [X43,X41,X42] : (s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X43))) | s(bool,'F_0') != s(bool,X41) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,g(s(bool,X41)))) ) | $spl32),
  inference(forward_demodulation,[],[f28064,f4309])).
fof(f28064,plain,(
  ( ! [X43,X41,X42] : (s(bool,'F_0') != s(bool,X41) | s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,X43))) = s('type.semanticPrimitives.result'(bool,X42),'const.semanticPrimitives.Rval_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,g(s(bool,X41)))) ) | $spl32),
  inference(superposition,[],[f256,f27537])).
fof(f27539,plain,(
  ( ! [X123] : (s(bool,X123) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X123)))) ) | $spl138),
  inference(cnf_transformation,[],[f27539_D])).
fof(f27539_D,plain,(
  ( ! [X123] : (s(bool,X123) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X123)))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f27538,plain,(
  ( ! [X123,X122] : (s(bool,X123) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X123))) | s(bool,'F_0') = s(bool,X122)) ) | ($spl6 | $spl32 | $spl125)),
  inference(subsumption_resolution,[],[f27495,f199])).
fof(f27495,plain,(
  ( ! [X123,X122] : (~p(s(bool,X122)) | s(bool,X123) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X123))) | s(bool,'F_0') = s(bool,X122)) ) | ($spl32 | $spl125)),
  inference(superposition,[],[f27417,f24825])).
fof(f27536,plain,(
  ( ! [X120] : (s(bool,X120) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X120)))) ) | $spl136),
  inference(cnf_transformation,[],[f27536_D])).
fof(f27536_D,plain,(
  ( ! [X120] : (s(bool,X120) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X120)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f27535,plain,(
  ( ! [X120,X119] : (s(bool,X120) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X120))) | s(bool,'F_0') = s(bool,X119)) ) | ($spl6 | $spl32)),
  inference(subsumption_resolution,[],[f27493,f199])).
fof(f27493,plain,(
  ( ! [X120,X119] : (~p(s(bool,X119)) | s(bool,X120) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X120))) | s(bool,'F_0') = s(bool,X119)) ) | $spl32),
  inference(superposition,[],[f27417,f4392])).
fof(f26866,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) | $spl134),
  inference(cnf_transformation,[],[f26866_D])).
fof(f26866_D,plain,(
  ( ! [X2,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f26865,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f26864,f765])).
fof(f26864,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)),s('type.list.list'(bool),X1))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f26863])).
fof(f26863,plain,(
  ( ! [X177,X180,X178,X181,X179] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X181))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X178,bool)),s('type.list.list'(bool),X181))) | s(bool,'T_0') = s(bool,X180) | s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,X177))) | s(bool,'T_0') = s(bool,X179)) )),
  inference(subsumption_resolution,[],[f26794,f171])).
fof(f26794,plain,(
  ( ! [X177,X180,X178,X181,X179] : (s(bool,X179) != s(bool,X180) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X181))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X177)),X178,bool)),s('type.list.list'(bool),X181))) | s(bool,'T_0') = s(bool,X180) | s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,X177))) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f1164,f782])).
fof(f26851,plain,(
  ( ! [X87,X86,X84] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) | s(bool,'F_0') = s(bool,X87) | s(bool,X84) = s(bool,X87)) ) | $spl132),
  inference(cnf_transformation,[],[f26851_D])).
fof(f26851_D,plain,(
  ( ! [X87,X86,X84] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) | s(bool,'F_0') = s(bool,X87) | s(bool,X84) = s(bool,X87)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f26854,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X98))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X96),s('type.list.list'(bool),X98))) | s(bool,'T_0') = s(bool,X97) | s(bool,X96) = s(bool,X99) | s(bool,'F_0') = s(bool,X99)) ) | $spl32),
  inference(subsumption_resolution,[],[f26770,f112])).
fof(f26770,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'F_0') != s(bool,X97) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X98))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X96),s('type.list.list'(bool),X98))) | s(bool,'T_0') = s(bool,X97) | s(bool,X96) = s(bool,X99) | s(bool,'F_0') = s(bool,X99)) ) | $spl32),
  inference(superposition,[],[f1164,f5444])).
fof(f26850,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X87) | s(bool,'F_0') = s(bool,X87)) ) | $spl32),
  inference(subsumption_resolution,[],[f26767,f112])).
fof(f26767,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,'F_0') != s(bool,X85) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X86))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X84),s('type.list.list'(bool),X86))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X87) | s(bool,'F_0') = s(bool,X87)) ) | $spl32),
  inference(superposition,[],[f1164,f5444])).
fof(f26829,plain,(
  ( ! [X80,X78,X79] : (s(bool,X79) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X78,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X80))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X79),s('type.list.list'(bool),X80)))) ) | $spl130),
  inference(cnf_transformation,[],[f26829_D])).
fof(f26829_D,plain,(
  ( ! [X80,X78,X79] : (s(bool,X79) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X78,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X80))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X79),s('type.list.list'(bool),X80)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f26801,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,X79) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X78,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X80))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X79),s('type.list.list'(bool),X80))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(duplicate_literal_removal,[],[f26716])).
fof(f26716,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,X79) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X78,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X80))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X79),s('type.list.list'(bool),X80))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f1164,f1729])).
fof(f26828,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,X70) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X71))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X70),s('type.list.list'(bool),X71)))) ) | $spl128),
  inference(cnf_transformation,[],[f26828_D])).
fof(f26828_D,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,X70) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X71))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X70),s('type.list.list'(bool),X71)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f26804,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X70) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X71))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X70),s('type.list.list'(bool),X71))) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68)))) )),
  inference(duplicate_literal_removal,[],[f26714])).
fof(f26714,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X70) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X71))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X70),s('type.list.list'(bool),X71))) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f1164,f782])).
fof(f26488,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl126),
  inference(cnf_transformation,[],[f26488_D])).
fof(f26488_D,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f26463,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f26462])).
fof(f26462,plain,(
  ( ! [X118,X120,X119,X117] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) | s(bool,'T_0') = s(bool,X118) | s(bool,X117) = s(bool,X120) | s(bool,'F_0') = s(bool,X120)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f26437])).
fof(f26437,plain,(
  ( ! [X118,X120,X119,X117] : (s(bool,X117) != s(bool,X117) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) | s(bool,'T_0') = s(bool,X118) | s(bool,X117) = s(bool,X120) | s(bool,'F_0') = s(bool,X120)) ) | $spl32),
  inference(superposition,[],[f1161,f5444])).
fof(f26465,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl32),
  inference(condensation,[],[f26464])).
fof(f26464,plain,(
  ( ! [X116,X114,X115,X113] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X115))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X114),s('type.list.list'(bool),X115))) | s(bool,'T_0') = s(bool,X114) | s(bool,X113) = s(bool,X116) | s(bool,'F_0') = s(bool,X116)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f26436])).
fof(f26436,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X113) != s(bool,X113) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X115))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X114),s('type.list.list'(bool),X115))) | s(bool,'T_0') = s(bool,X114) | s(bool,X113) = s(bool,X116) | s(bool,'F_0') = s(bool,X116)) ) | $spl32),
  inference(superposition,[],[f1161,f5444])).
fof(f24693,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | $spl125),
  inference(cnf_transformation,[],[f24693_D])).
fof(f24693_D,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl125),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl125])])).
fof(f24690,plain,(
  ( ! [X206,X207] : (s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X206) = s(fun(bool,bool),X207)) ) | ($spl32 | $spl40 | $spl46)),
  inference(forward_demodulation,[],[f24634,f4849])).
fof(f4849,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl46),
  inference(cnf_transformation,[],[f4849_D])).
fof(f4849_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f24677,plain,(
  ( ! [X105,X108,X106] : (s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,sK6(X105,X106,bool,bool)))) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | $spl120),
  inference(cnf_transformation,[],[f24677_D])).
fof(f24677_D,plain,(
  ( ! [X105,X108,X106] : (s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,sK6(X105,X106,bool,bool)))) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f24676,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,'T_0') = s(bool,X107) | s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,sK6(X105,X106,bool,bool)))) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | ($spl32 | $spl40)),
  inference(duplicate_literal_removal,[],[f24675])).
fof(f24675,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,'T_0') = s(bool,X107) | s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,sK6(X105,X106,bool,bool)))) | s(bool,'T_0') = s(bool,X107) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | ($spl32 | $spl40)),
  inference(forward_demodulation,[],[f24567,f765])).
fof(f24567,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,X107) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X108,bool)) | s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X108),'const.semanticPrimitives.Rval_1'(s(bool,sK6(X105,X106,bool,bool)))) | s(bool,'T_0') = s(bool,X107) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | ($spl32 | $spl40)),
  inference(superposition,[],[f782,f19174])).
fof(f19159,plain,(
  $false | ($spl22 | $spl38 | $spl52)),
  inference(subsumption_resolution,[],[f18855,f18750])).
fof(f18750,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,X4)) ) | ($spl38 | $spl52)),
  inference(subsumption_resolution,[],[f4313,f9610])).
fof(f18855,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X1,bool))) ) | ($spl22 | $spl38 | $spl52)),
  inference(backward_demodulation,[],[f18750,f2431])).
fof(f19147,plain,(
  $false | ($spl38 | $spl52)),
  inference(subsumption_resolution,[],[f18751,f109])).
fof(f18751,plain,(
  ~p(s(bool,'T_0')) | ($spl38 | $spl52)),
  inference(backward_demodulation,[],[f18750,f111])).
fof(f19146,plain,(
  $false | ($spl3 | $spl38 | $spl52)),
  inference(trivial_inequality_removal,[],[f18753])).
fof(f18753,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))) ) | ($spl3 | $spl38 | $spl52)),
  inference(backward_demodulation,[],[f18750,f232])).
fof(f19145,plain,(
  $false | ($spl3 | $spl38 | $spl52)),
  inference(trivial_inequality_removal,[],[f18756])).
fof(f18756,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | ($spl3 | $spl38 | $spl52)),
  inference(backward_demodulation,[],[f18750,f245])).
fof(f18749,plain,(
  $false | ($spl3 | $spl40 | $spl82)),
  inference(subsumption_resolution,[],[f4314,f12860])).
fof(f12860,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | ($spl3 | $spl82)),
  inference(unit_resulting_resolution,[],[f179,f12855])).
fof(f4315,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl41),
  inference(cnf_transformation,[],[f4315_D])).
fof(f4315_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f18744,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'F_0')))) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18743])).
fof(f18743,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f12864,f11675])).
fof(f12864,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl82),
  inference(superposition,[],[f12855,f171])).
fof(f18742,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'F_0')))) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18741])).
fof(f18741,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X7) | s(bool,X7) = s(bool,X8)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f12867,f11675])).
fof(f12867,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl82),
  inference(superposition,[],[f12855,f171])).
fof(f12933,plain,(
  ( ! [X14] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl82)),
  inference(forward_demodulation,[],[f12931,f4309])).
fof(f12931,plain,(
  ( ! [X14] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl82)),
  inference(duplicate_literal_removal,[],[f12870])).
fof(f12870,plain,(
  ( ! [X14] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl82)),
  inference(superposition,[],[f12855,f4392])).
fof(f18724,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl118),
  inference(cnf_transformation,[],[f18724_D])).
fof(f18724_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f12935,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl82),
  inference(subsumption_resolution,[],[f12909,f112])).
fof(f12909,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X7) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl82),
  inference(superposition,[],[f12855,f171])).
fof(f12936,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl82),
  inference(subsumption_resolution,[],[f12912,f112])).
fof(f12912,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') != s(bool,X12) | s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl82),
  inference(superposition,[],[f12855,f171])).
fof(f10157,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl77),
  inference(cnf_transformation,[],[f10157_D])).
fof(f10157_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f18735,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18734])).
fof(f18734,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f12973,f11675])).
fof(f12973,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f18733,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18732])).
fof(f18732,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X7) | s(bool,X7) = s(bool,X8)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f12976,f11675])).
fof(f12976,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl84),
  inference(superposition,[],[f12856,f171])).
fof(f13036,plain,(
  ( ! [X14] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl84)),
  inference(forward_demodulation,[],[f13034,f4309])).
fof(f13034,plain,(
  ( ! [X14] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl84)),
  inference(duplicate_literal_removal,[],[f12979])).
fof(f12979,plain,(
  ( ! [X14] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X14)) ) | ($spl32 | $spl84)),
  inference(superposition,[],[f12856,f4392])).
fof(f18723,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | $spl116),
  inference(cnf_transformation,[],[f18723_D])).
fof(f18723_D,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f17277,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f17276])).
fof(f17276,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X256) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X255) | s(bool,X256) = s(bool,X257) | s(bool,'T_0') = s(bool,X257) | s(bool,X255) = s(bool,X258)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f14156,f11675])).
fof(f14156,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X256) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X255) | s(bool,X256) = s(bool,X257) | s(bool,'T_0') = s(bool,X257) | s(bool,X255) = s(bool,X258) | s(bool,'T_0') = s(bool,X258)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f17305,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,f(s(bool,'F_0')))) ) | $spl82),
  inference(condensation,[],[f17304])).
fof(f17304,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl82),
  inference(condensation,[],[f17303])).
fof(f17303,plain,(
  ( ! [X424,X426,X423,X425] : (s(bool,'F_0') = s(bool,X424) | s(bool,X423) = s(bool,X425) | s(bool,'T_0') = s(bool,X425) | s(bool,X426) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X426)) ) | $spl82),
  inference(subsumption_resolution,[],[f14191,f1004])).
fof(f14191,plain,(
  ( ! [X424,X426,X423,X425] : (s(bool,X423) != s(bool,X424) | s(bool,'F_0') = s(bool,X424) | s(bool,X423) = s(bool,X425) | s(bool,'T_0') = s(bool,X425) | s(bool,X426) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X426)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f4310,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool))) ) | $spl34),
  inference(cnf_transformation,[],[f4310_D])).
fof(f4310_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f18726,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl52),
  inference(condensation,[],[f18725])).
fof(f18725,plain,(
  ( ! [X732,X734,X733,X735,X731] : (s(bool,X731) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X732) = s(fun(bool,bool),X733) | s(bool,'T_0') = s(bool,sK6(X732,X733,bool,bool)) | s(bool,X731) = s(bool,X734) | s(bool,'T_0') = s(bool,X734) | s(bool,'T_0') = s(bool,X735)) ) | $spl52),
  inference(subsumption_resolution,[],[f14247,f9610])).
fof(f14247,plain,(
  ( ! [X732,X734,X733,X735,X731] : (s(bool,X731) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X732) = s(fun(bool,bool),X733) | s(bool,'T_0') = s(bool,sK6(X732,X733,bool,bool)) | s(bool,X731) = s(bool,X734) | s(bool,'T_0') = s(bool,X734) | s(bool,X735) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X735)) )),
  inference(superposition,[],[f689,f282])).
fof(f17391,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f17390])).
fof(f17390,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X256) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X255) | s(bool,X255) = s(bool,X257) | s(bool,X256) = s(bool,X258) | s(bool,'T_0') = s(bool,X258)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f14304,f11675])).
fof(f14304,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X256) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X255) | s(bool,X255) = s(bool,X257) | s(bool,'T_0') = s(bool,X257) | s(bool,X256) = s(bool,X258) | s(bool,'T_0') = s(bool,X258)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f17413,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl82),
  inference(duplicate_literal_removal,[],[f17412])).
fof(f17412,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl82),
  inference(condensation,[],[f17411])).
fof(f17411,plain,(
  ( ! [X424,X426,X423,X425] : (s(bool,'F_0') = s(bool,X424) | s(bool,X425) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X425) | s(bool,X423) = s(bool,X426) | s(bool,'T_0') = s(bool,X426)) ) | $spl82),
  inference(subsumption_resolution,[],[f14339,f1004])).
fof(f14339,plain,(
  ( ! [X424,X426,X423,X425] : (s(bool,X423) != s(bool,X424) | s(bool,'F_0') = s(bool,X424) | s(bool,X425) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X425) | s(bool,X423) = s(bool,X426) | s(bool,'T_0') = s(bool,X426)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f18722,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl52),
  inference(condensation,[],[f18721])).
fof(f18721,plain,(
  ( ! [X732,X734,X733,X735,X731] : (s(bool,X731) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X732) = s(fun(bool,bool),X733) | s(bool,'T_0') = s(bool,sK6(X732,X733,bool,bool)) | s(bool,'T_0') = s(bool,X734) | s(bool,X731) = s(bool,X735) | s(bool,'T_0') = s(bool,X735)) ) | $spl52),
  inference(subsumption_resolution,[],[f14395,f9610])).
fof(f14395,plain,(
  ( ! [X732,X734,X733,X735,X731] : (s(bool,X731) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X732) = s(fun(bool,bool),X733) | s(bool,'T_0') = s(bool,sK6(X732,X733,bool,bool)) | s(bool,X734) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X734) | s(bool,X731) = s(bool,X735) | s(bool,'T_0') = s(bool,X735)) )),
  inference(superposition,[],[f689,f282])).
fof(f18720,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') != s(bool,f(s(bool,'F_0')))) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18719])).
fof(f18719,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18718])).
fof(f18718,plain,(
  ( ! [X249,X250,X248,X247] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X247) | s(bool,X247) = s(bool,X249) | s(bool,X248) = s(bool,X250) | s(bool,'T_0') = s(bool,X250)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f14821,f11689])).
fof(f14821,plain,(
  ( ! [X249,X250,X248,X247] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X247) | s(bool,X248) = s(bool,X249) | s(bool,X247) = s(bool,X249) | s(bool,X248) = s(bool,X250) | s(bool,'T_0') = s(bool,X250)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f18717,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl18 | $spl20 | $spl32 | $spl46 | $spl84)),
  inference(global_subsumption,[],[f18716,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2429,f2393,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1945,f1936,f1931,f1894,f1889,f1832,f1797,f1729,f1496,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1291,f1286,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f837,f689,f612,f611,f610,f554,f549,f546,f256,f255,f235,f234,f232,f111,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f544,f245,f1452,f1339,f1337,f1336,f1335,f1260,f1255,f1221,f1101,f947,f2430,f3907,f4000,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4521,f4538,f4674,f4834,f4837,f5022,f5021,f5020,f5024,f5025,f5028,f5030,f5031,f5032,f5037,f5039,f5069,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5878,f5881,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8295,f8296,f8297,f8305,f8307,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8413,f8414,f8415,f8423,f8425,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8624,f8625,f8626,f8634,f8636,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8773,f8774,f8775,f8783,f8785,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9150,f9151,f9152,f9160,f9162,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9304,f9305,f9306,f9314,f9316,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f9578,f2283,f9338,f9184,f9080,f8927,f8807,f8658,f8447,f8329,f7593,f7341,f7242,f6950,f6949,f6948,f6482,f6478,f6345,f6326,f6318,f6317,f6200,f6199,f6198,f6159,f6158,f5900,f5896,f5891,f5889,f5884,f5880,f5879,f5876,f5875,f2281,f1801,f1455,f1439,f1102,f730,f728,f726,f6340,f6339,f6338,f1744,f4847,f2280,f1627,f694,f692,f690,f4849,f9784,f9868,f9917,f10098,f10155,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11113,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12591,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12644,f12645,f12646,f12652,f12653,f12655,f12657,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13366,f13367,f13387,f16997,f13790,f13876,f16753,f16751,f16747,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14239,f14241,f14242,f14243,f14246,f14248,f14249,f14250,f14252,f17441,f17444,f17446,f17523,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14535,f14537,f14538,f14539,f14542,f14544,f14545,f14546,f14548,f16088,f16086,f16080,f16070,f17550,f16068,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14683,f14685,f14686,f14687,f14690,f14692,f14693,f14694,f14701,f14702,f14703,f14704,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14766,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14901,f14903,f14904,f14905,f14908,f14910,f14911,f14912,f14914,f17632,f17805,f15468,f17961,f17962,f17963,f17965,f17966,f17987,f17988,f17989,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18487,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18589,f18591,f18623,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18638,f18639,f18640,f18289,f18292,f18641,f18642,f18643,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18396,f18692,f18399,f18693,f15724])).
fof(f17632,plain,(
  ( ! [X736,X738,X737,X739,X740] : (s(fun(bool,bool),X736) = s(fun(bool,bool),X737) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X736,X737,bool,bool)))) | s(bool,X738) = s(bool,X739) | s(bool,X739) = s(bool,sK6(X736,X737,bool,bool)) | s(bool,X738) = s(bool,X740) | s(bool,'T_0') = s(bool,X740)) ) | $spl46),
  inference(subsumption_resolution,[],[f14915,f4849])).
fof(f14704,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,X44) = s(bool,f(s(bool,X43))) | s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,X43) = s(bool,X46) | s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) ) | ($spl3 | $spl46)),
  inference(superposition,[],[f9868,f282])).
fof(f14703,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,f(s(bool,X39))) | s(bool,X40) = s(bool,X41) | s(bool,X39) = s(bool,X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | $spl46),
  inference(superposition,[],[f4849,f282])).
fof(f14702,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X25) != s(bool,X26) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X26)),X27,bool)) | s(bool,X28) = s(bool,X29) | s(bool,X25) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl18),
  inference(superposition,[],[f2429,f282])).
fof(f16068,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl20),
  inference(condensation,[],[f16067])).
fof(f16067,plain,(
  ( ! [X167,X165,X166,X164,X168] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X165)),X166,bool)) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,X167) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f14580])).
fof(f14580,plain,(
  ( ! [X167,X165,X166,X164,X168] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X165)),X166,bool)) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,X167) | s(bool,'T_0') = s(bool,X164) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168)) ) | $spl20),
  inference(superposition,[],[f2430,f282])).
fof(f17550,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl18 | $spl20)),
  inference(condensation,[],[f17549])).
fof(f17549,plain,(
  ( ! [X163,X159,X162,X160] : (s(bool,'T_0') != s(bool,X160) | s(bool,X160) = s(bool,X162) | s(bool,'T_0') = s(bool,X159) | s(bool,X162) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) ) | ($spl18 | $spl20)),
  inference(subsumption_resolution,[],[f14579,f2430])).
fof(f14579,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(bool,'T_0') != s(bool,X160) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X159)),X161,bool)) | s(bool,X160) = s(bool,X162) | s(bool,'T_0') = s(bool,X159) | s(bool,X162) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) ) | $spl18),
  inference(superposition,[],[f2429,f282])).
fof(f16747,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl46)),
  inference(condensation,[],[f16746])).
fof(f16746,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,X120) = s(bool,f(s(bool,'T_0'))) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X119) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X122)) ) | ($spl3 | $spl46)),
  inference(duplicate_literal_removal,[],[f13898])).
fof(f13898,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,X120) = s(bool,f(s(bool,'T_0'))) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X119) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X119)) ) | ($spl3 | $spl46)),
  inference(superposition,[],[f282,f9868])).
fof(f10098,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl46)),
  inference(condensation,[],[f10097])).
fof(f10097,plain,(
  ( ! [X70,X71,X69] : (s(bool,X70) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,X71) | s(bool,'T_0') = s(bool,X71)) ) | ($spl3 | $spl46)),
  inference(duplicate_literal_removal,[],[f9961])).
fof(f9961,plain,(
  ( ! [X70,X71,X69] : (s(bool,X70) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,X71) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X69)) ) | ($spl3 | $spl46)),
  inference(superposition,[],[f2377,f9868])).
fof(f9917,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl46)),
  inference(superposition,[],[f9868,f171])).
fof(f9868,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl46)),
  inference(subsumption_resolution,[],[f9791,f179])).
fof(f9791,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(superposition,[],[f4849,f171])).
fof(f9784,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl46),
  inference(superposition,[],[f4849,f171])).
fof(f4000,plain,(
  ( ! [X41,X42,X40] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X40)),X42,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X40)),X41,bool))) ) | $spl20),
  inference(superposition,[],[f2430,f765])).
fof(f3907,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f2429,f171])).
fof(f18716,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18715])).
fof(f18715,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18714])).
fof(f18714,plain,(
  ( ! [X253,X251,X254,X252] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X251) | s(bool,X251) = s(bool,X253) | s(bool,X252) = s(bool,X254) | s(bool,'T_0') = s(bool,X254)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f14822,f11689])).
fof(f14822,plain,(
  ( ! [X253,X251,X254,X252] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X251) | s(bool,X252) = s(bool,X253) | s(bool,X251) = s(bool,X253) | s(bool,X252) = s(bool,X254) | s(bool,'T_0') = s(bool,X254)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f18701,plain,(
  ( ! [X410,X409,X411] : (s(bool,X409) = s(bool,X410) | s(bool,X409) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X411) | s(bool,X410) = s(bool,X411)) ) | $spl114),
  inference(cnf_transformation,[],[f18701_D])).
fof(f18701_D,plain,(
  ( ! [X410,X409,X411] : (s(bool,X409) = s(bool,X410) | s(bool,X409) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X411) | s(bool,X410) = s(bool,X411)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f17630,plain,(
  ( ! [X408,X410,X409,X411] : (s(bool,'F_0') = s(bool,X408) | s(bool,X409) = s(bool,X410) | s(bool,X410) = s(bool,f(s(bool,'F_0'))) | s(bool,X409) = s(bool,X411) | s(bool,'T_0') = s(bool,X411)) ) | $spl82),
  inference(subsumption_resolution,[],[f14856,f112])).
fof(f14856,plain,(
  ( ! [X408,X410,X409,X411] : (s(bool,'T_0') != s(bool,X408) | s(bool,'F_0') = s(bool,X408) | s(bool,X409) = s(bool,X410) | s(bool,X410) = s(bool,f(s(bool,'F_0'))) | s(bool,X409) = s(bool,X411) | s(bool,'T_0') = s(bool,X411)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f18713,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl52),
  inference(condensation,[],[f18712])).
fof(f18712,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl52),
  inference(duplicate_literal_removal,[],[f18711])).
fof(f18711,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl52),
  inference(condensation,[],[f18710])).
fof(f18710,plain,(
  ( ! [X707,X708,X706,X709,X705] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X705) = s(fun(bool,bool),X706) | s(bool,'T_0') = s(bool,sK6(X705,X706,bool,bool)) | s(bool,X707) = s(bool,X708) | s(bool,X707) = s(bool,X709) | s(bool,'T_0') = s(bool,X709)) ) | $spl52),
  inference(subsumption_resolution,[],[f14909,f16054])).
fof(f14909,plain,(
  ( ! [X707,X708,X706,X709,X705] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X705) = s(fun(bool,bool),X706) | s(bool,'T_0') = s(bool,sK6(X705,X706,bool,bool)) | s(bool,X707) = s(bool,X708) | s(bool,X708) = s(bool,g(s(bool,'F_0'))) | s(bool,X707) = s(bool,X709) | s(bool,'T_0') = s(bool,X709)) )),
  inference(superposition,[],[f689,f282])).
fof(f18708,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') != s(bool,f(s(bool,'F_0')))) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18707])).
fof(f18707,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl82)),
  inference(condensation,[],[f18706])).
fof(f18706,plain,(
  ( ! [X249,X250,X248,X247] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X247) | s(bool,X249) = s(bool,X250) | s(bool,'T_0') = s(bool,X250) | s(bool,X247) = s(bool,X248)) ) | ($spl3 | $spl32 | $spl82)),
  inference(subsumption_resolution,[],[f15335,f11689])).
fof(f15335,plain,(
  ( ! [X249,X250,X248,X247] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X247) | s(bool,X248) = s(bool,X249) | s(bool,X249) = s(bool,X250) | s(bool,'T_0') = s(bool,X250) | s(bool,X247) = s(bool,X248)) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f18705,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl18 | $spl20 | $spl32 | $spl46 | $spl84)),
  inference(global_subsumption,[],[f18704,f108,f107,f109,f112,f150,f149,f148,f154,f151,f155,f156,f157,f159,f161,f160,f163,f162,f164,f171,f173,f176,f179,f197,f200,f201,f231,f230,f243,f282,f314,f316,f343,f494,f359,f361,f498,f545,f543,f542,f541,f550,f552,f575,f574,f577,f632,f631,f634,f635,f648,f652,f654,f657,f659,f660,f661,f665,f667,f677,f676,f679,f683,f682,f684,f685,f687,f698,f697,f704,f703,f717,f725,f724,f723,f731,f733,f734,f735,f736,f741,f743,f747,f748,f749,f751,f752,f757,f759,f765,f782,f784,f786,f789,f833,f835,f838,f843,f861,f873,f920,f918,f1004,f1017,f1022,f1061,f1067,f1072,f1157,f1159,f1162,f1168,f1169,f1170,f1171,f1207,f1208,f1209,f1331,f1477,f1560,f1620,f1625,f1658,f1663,f1672,f2037,f2361,f2326,f2377,f2399,f2417,f2416,f2433,f3042,f2429,f2393,f2363,f2314,f2312,f2311,f2310,f2306,f2300,f2298,f2278,f2276,f2215,f2210,f2173,f2168,f2129,f2124,f1945,f1936,f1931,f1894,f1889,f1832,f1797,f1729,f1496,f1436,f1418,f1398,f1393,f1350,f1348,f1347,f1291,f1286,f1196,f1173,f1172,f1164,f1161,f1133,f1131,f1126,f1121,f1120,f1114,f1112,f1107,f1104,f1095,f1089,f1011,f988,f987,f986,f985,f969,f964,f837,f689,f612,f611,f610,f554,f549,f546,f256,f255,f235,f234,f232,f111,f1539,f1534,f1532,f1527,f1518,f1515,f1510,f1508,f1503,f544,f245,f1452,f1339,f1337,f1336,f1335,f1260,f1255,f1221,f1101,f947,f2430,f3907,f4000,f4100,f4101,f4105,f4092,f4126,f4125,f4147,f4150,f4227,f4228,f4229,f4234,f4303,f4304,f4305,f4306,f4307,f4521,f4538,f4674,f4834,f4837,f5022,f5021,f5020,f5024,f5025,f5028,f5030,f5031,f5032,f5037,f5039,f5069,f5050,f5051,f5054,f5055,f5057,f5060,f5376,f5375,f5374,f5373,f5366,f5410,f5414,f5878,f5881,f6168,f6169,f6170,f6172,f6173,f6174,f6175,f6180,f6185,f6187,f6192,f6196,f6201,f6202,f6204,f6205,f6206,f6207,f6208,f6209,f6212,f6214,f6219,f6221,f6226,f6230,f6299,f6366,f6367,f6368,f6369,f6373,f6315,f6342,f6343,f6344,f6348,f6349,f6352,f6354,f6355,f6356,f6481,f6484,f6485,f6486,f6475,f6476,f6477,f6479,f6592,f6713,f6587,f6580,f6593,f6594,f6595,f6596,f6597,f6640,f6717,f6654,f6659,f6661,f6666,f6669,f6671,f6673,f6719,f6688,f6693,f6695,f6700,f6703,f6705,f6910,f6780,f6789,f6790,f6791,f6792,f6793,f6794,f6841,f6914,f6846,f6851,f6853,f6859,f6862,f6864,f6866,f6868,f6873,f6874,f6875,f6876,f6877,f6878,f6879,f6915,f6884,f6889,f6891,f6897,f6900,f6902,f7042,f6960,f6961,f6963,f6968,f6969,f6970,f6971,f6972,f6973,f6974,f6975,f7050,f6980,f6985,f6987,f6994,f6997,f6999,f7002,f7004,f7005,f7006,f7007,f7008,f7051,f7013,f7019,f7024,f7026,f7033,f7036,f7038,f7271,f7277,f7236,f7237,f7238,f7239,f7279,f7280,f7283,f7284,f7286,f7251,f7255,f7258,f7378,f7337,f7338,f7350,f7355,f7568,f7587,f7529,f7530,f7592,f7533,f7534,f7539,f7540,f7541,f7542,f7545,f7596,f7547,f7548,f7550,f7553,f8127,f8079,f8080,f8082,f8084,f8086,f8087,f8088,f8090,f8091,f8094,f8278,f8280,f8281,f8282,f8283,f8287,f8289,f8292,f8295,f8296,f8297,f8305,f8307,f8325,f8326,f8327,f8328,f8330,f8332,f8335,f8336,f8337,f8338,f8339,f8340,f8346,f8347,f8400,f8402,f8403,f8404,f8405,f8409,f8413,f8414,f8415,f8423,f8425,f8443,f8444,f8445,f8446,f8448,f8450,f8453,f8454,f8455,f8456,f8457,f8458,f8464,f8465,f8604,f8606,f8610,f8611,f8612,f8687,f8688,f8616,f8618,f8621,f8624,f8625,f8626,f8634,f8636,f8654,f8655,f8656,f8657,f8659,f8661,f8665,f8666,f8667,f8668,f8669,f8670,f8674,f8677,f8678,f8759,f8763,f8764,f8765,f8769,f8773,f8774,f8775,f8783,f8785,f8803,f8804,f8805,f8806,f8808,f8810,f8814,f8815,f8816,f8817,f8818,f8819,f8823,f8826,f8827,f8951,f8960,f8923,f8924,f8961,f8962,f8964,f8965,f8966,f8937,f8941,f9057,f9078,f9079,f9034,f9035,f9037,f9039,f9043,f9044,f9045,f9084,f9047,f9048,f9050,f9133,f9135,f9139,f9140,f9141,f9145,f9147,f9150,f9151,f9152,f9160,f9162,f9180,f9181,f9182,f9183,f9185,f9187,f9191,f9192,f9193,f9194,f9195,f9196,f9202,f9203,f9286,f9287,f9293,f9294,f9295,f9371,f9372,f9299,f9301,f9304,f9305,f9306,f9314,f9316,f9334,f9335,f9336,f9337,f9339,f9341,f9345,f9346,f9347,f9348,f9349,f9350,f9354,f9357,f9358,f9546,f9586,f9580,f9578,f2283,f9338,f9184,f9080,f8927,f8807,f8658,f8447,f8329,f7593,f7341,f7242,f6950,f6949,f6948,f6482,f6478,f6345,f6326,f6318,f6317,f6200,f6199,f6198,f6159,f6158,f5900,f5896,f5891,f5889,f5884,f5880,f5879,f5876,f5875,f2281,f1801,f1455,f1439,f1102,f730,f728,f726,f6340,f6339,f6338,f1744,f4847,f2280,f1627,f694,f692,f690,f4849,f9784,f9868,f9917,f10098,f10155,f10843,f10844,f10845,f10846,f10847,f10848,f10849,f10854,f10858,f10902,f10907,f10925,f11113,f11165,f11164,f11163,f11162,f11153,f11253,f11252,f11251,f12551,f12564,f12587,f12588,f12589,f12590,f12591,f12592,f12599,f12600,f12601,f12602,f12603,f12615,f12617,f12618,f12630,f12644,f12645,f12646,f12652,f12653,f12655,f12657,f12658,f12665,f12666,f12667,f12668,f12669,f12671,f12673,f12676,f12677,f12960,f12959,f12958,f12957,f12948,f13145,f13146,f13206,f13209,f13210,f13352,f13351,f13364,f13365,f13366,f13367,f13387,f16997,f13790,f13876,f16753,f16751,f16747,f13919,f13920,f14215,f14220,f14222,f14229,f14230,f14231,f14232,f14234,f14235,f14236,f14239,f14241,f14242,f14243,f14246,f14248,f14249,f14250,f14252,f17441,f17444,f17446,f17523,f14511,f14516,f14518,f14525,f14526,f14527,f14528,f14530,f14531,f14532,f14535,f14537,f14538,f14539,f14542,f14544,f14545,f14546,f14548,f16088,f16086,f16080,f16070,f17550,f16068,f17575,f17576,f14673,f14674,f14675,f14676,f14678,f14679,f14680,f14683,f14685,f14686,f14687,f14690,f14692,f14693,f14694,f14701,f14702,f14703,f14704,f17591,f14751,f14756,f14757,f14758,f14759,f14761,f14762,f14763,f14766,f14768,f14769,f14770,f17602,f17610,f14877,f14882,f14884,f14891,f14892,f14893,f14894,f14896,f14897,f14898,f14901,f14903,f14904,f14905,f14908,f14910,f14911,f14912,f14914,f17632,f17805,f15468,f17961,f17962,f17963,f17965,f17966,f17987,f17988,f17989,f17990,f17995,f18004,f18008,f18012,f18017,f18036,f18039,f18496,f18488,f18487,f18111,f18113,f18526,f18119,f18536,f18561,f18572,f18574,f18575,f18457,f18580,f18581,f18583,f18434,f18589,f18591,f18623,f18627,f18629,f18268,f18631,f18632,f18633,f18634,f18635,f18636,f18637,f18638,f18639,f18640,f18289,f18292,f18641,f18642,f18643,f18644,f18646,f18649,f18655,f18659,f18682,f18372,f18377,f18683,f18685,f18686,f18687,f18688,f18689,f18690,f18691,f18396,f18692,f18399,f18693])).
fof(f18704,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18703])).
fof(f18703,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl32 | $spl84)),
  inference(condensation,[],[f18702])).
fof(f18702,plain,(
  ( ! [X253,X251,X254,X252] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X251) | s(bool,X253) = s(bool,X254) | s(bool,'T_0') = s(bool,X254) | s(bool,X251) = s(bool,X252)) ) | ($spl3 | $spl32 | $spl84)),
  inference(subsumption_resolution,[],[f15336,f11689])).
fof(f15336,plain,(
  ( ! [X253,X251,X254,X252] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X251) | s(bool,X252) = s(bool,X253) | s(bool,X253) = s(bool,X254) | s(bool,'T_0') = s(bool,X254) | s(bool,X251) = s(bool,X252)) ) | $spl84),
  inference(superposition,[],[f12856,f282])).
fof(f17800,plain,(
  ( ! [X408,X410,X409,X411] : (s(bool,'F_0') = s(bool,X408) | s(bool,X409) = s(bool,X410) | s(bool,X410) = s(bool,X411) | s(bool,'T_0') = s(bool,X411) | s(bool,X409) = s(bool,f(s(bool,'F_0')))) ) | $spl82),
  inference(subsumption_resolution,[],[f15370,f112])).
fof(f15370,plain,(
  ( ! [X408,X410,X409,X411] : (s(bool,'T_0') != s(bool,X408) | s(bool,'F_0') = s(bool,X408) | s(bool,X409) = s(bool,X410) | s(bool,X410) = s(bool,X411) | s(bool,'T_0') = s(bool,X411) | s(bool,X409) = s(bool,f(s(bool,'F_0')))) ) | $spl82),
  inference(superposition,[],[f12855,f282])).
fof(f18700,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl52),
  inference(condensation,[],[f18699])).
fof(f18699,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl52),
  inference(duplicate_literal_removal,[],[f18698])).
fof(f18698,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl52),
  inference(condensation,[],[f18697])).
fof(f18697,plain,(
  ( ! [X707,X708,X706,X709,X705] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X705) = s(fun(bool,bool),X706) | s(bool,'T_0') = s(bool,sK6(X705,X706,bool,bool)) | s(bool,X707) = s(bool,X708) | s(bool,X708) = s(bool,X709) | s(bool,'T_0') = s(bool,X709)) ) | $spl52),
  inference(subsumption_resolution,[],[f15423,f16054])).
fof(f15423,plain,(
  ( ! [X707,X708,X706,X709,X705] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X705) = s(fun(bool,bool),X706) | s(bool,'T_0') = s(bool,sK6(X705,X706,bool,bool)) | s(bool,X707) = s(bool,X708) | s(bool,X708) = s(bool,X709) | s(bool,'T_0') = s(bool,X709) | s(bool,X707) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f689,f282])).
fof(f18696,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl32 | $spl46)),
  inference(condensation,[],[f18695])).
fof(f18695,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | ($spl3 | $spl32 | $spl46)),
  inference(subsumption_resolution,[],[f17855,f11675])).
fof(f17855,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X77)) ) | ($spl3 | $spl32 | $spl46)),
  inference(superposition,[],[f11675,f9868])).
fof(f18656,plain,(
  ( ! [X2,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) | $spl112),
  inference(cnf_transformation,[],[f18656_D])).
fof(f18656_D,plain,(
  ( ! [X2,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f18655,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(forward_demodulation,[],[f18654,f765])).
fof(f18654,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)))) | s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2)))) )),
  inference(condensation,[],[f18653])).
fof(f18653,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X82)),X83,bool)))) | s(bool,'T_0') = s(bool,X85) | s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,X82))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f18321,f171])).
fof(f18321,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,X84) != s(bool,X85) | s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X82)),X83,bool)))) | s(bool,'T_0') = s(bool,X85) | s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,X82))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f255,f782])).
fof(f18647,plain,(
  ( ! [X24,X27,X25] : (s(bool,X24) = s(bool,X27) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,X24))) | p(s(bool,X27))) ) | $spl110),
  inference(cnf_transformation,[],[f18647_D])).
fof(f18647_D,plain,(
  ( ! [X24,X27,X25] : (s(bool,X24) = s(bool,X27) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,X24))) | p(s(bool,X27))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f18649,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X28) = s(bool,X31) | p(s(bool,X31)) | s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(forward_demodulation,[],[f18648,f765])).
fof(f18648,plain,(
  ( ! [X30,X28,X31,X29] : (p(s(bool,X31)) | s(bool,X31) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X28)),X29,bool)) | s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f18308,f173])).
fof(f18308,plain,(
  ( ! [X30,X28,X31,X29] : (p(s(bool,X30)) | p(s(bool,X31)) | s(bool,X31) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X28)),X29,bool)) | s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f151,f782])).
fof(f18646,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) = s(bool,X27) | p(s(bool,X27)) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(forward_demodulation,[],[f18645,f765])).
fof(f18645,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X27)) | s(bool,X27) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X24)),X25,bool)) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f18307,f173])).
fof(f18307,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X27) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X24)),X25,bool)) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f151,f782])).
fof(f18590,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X179)),X180,bool)) | s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179)))) ) | $spl96),
  inference(cnf_transformation,[],[f18590_D])).
fof(f18590_D,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X179)),X180,bool)) | s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f18623,plain,(
  ( ! [X393,X395,X396] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X395)),X396,bool)) | s(bool,'T_0') = s(bool,X393) | s('type.semanticPrimitives.result'(bool,X396),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X396),'const.semanticPrimitives.Rval_1'(s(bool,X395)))) ) | $spl20),
  inference(subsumption_resolution,[],[f18254,f2430])).
fof(f18254,plain,(
  ( ! [X393,X395,X396,X394] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X395)),X396,bool)) | s(bool,'T_0') = s(bool,X393) | s('type.semanticPrimitives.result'(bool,X396),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X396),'const.semanticPrimitives.Rval_1'(s(bool,X395))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X393)),X394,bool))) ) | $spl20),
  inference(superposition,[],[f2430,f782])).
fof(f18621,plain,(
  ( ! [X366,X365,X367] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X366)),X367,bool)) | s(bool,'T_0') = s(bool,X365) | s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,X366)))) ) | $spl41),
  inference(subsumption_resolution,[],[f18250,f4459])).
fof(f4459,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(superposition,[],[f4315,f112])).
fof(f18250,plain,(
  ( ! [X366,X365,X367] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X366)),X367,bool)) | s(bool,'T_0') = s(bool,X365) | s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X367),'const.semanticPrimitives.Rval_1'(s(bool,X366))) | s(bool,'T_0') = s(bool,f(s(bool,X365)))) ) | $spl41),
  inference(superposition,[],[f4459,f782])).
fof(f18618,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl3 | $spl32)),
  inference(condensation,[],[f18617])).
fof(f18617,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X250)),X251,bool)) | s(bool,X249) = s(bool,X252) | s(bool,'F_0') = s(bool,X252) | s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,X250)))) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f18243,f11675])).
fof(f18243,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X250)),X251,bool)) | s(bool,X249) = s(bool,X252) | s(bool,'F_0') = s(bool,X252) | s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,X250))) | s(bool,'T_0') = s(bool,X249)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f11675,f782])).
fof(f18616,plain,(
  ( ! [X248,X247] : (s(bool,X247) != s(bool,g(s(bool,X247))) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X247)))) ) | $spl108),
  inference(cnf_transformation,[],[f18616_D])).
fof(f18616_D,plain,(
  ( ! [X248,X247] : (s(bool,X247) != s(bool,g(s(bool,X247))) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X247)))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f18615,plain,(
  ( ! [X246,X248,X247] : (s(bool,X247) != s(bool,g(s(bool,X247))) | s(bool,'T_0') = s(bool,X246) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X247)))) ) | ($spl3 | $spl52)),
  inference(forward_demodulation,[],[f18422,f765])).
fof(f18422,plain,(
  ( ! [X246,X248,X247] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X247)),X248,bool)) != s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X247)),X248,bool)))) | s(bool,'T_0') = s(bool,X246) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X247)))) ) | ($spl3 | $spl52)),
  inference(duplicate_literal_removal,[],[f18242])).
fof(f18242,plain,(
  ( ! [X246,X248,X247] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X247)),X248,bool)) != s(bool,g(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X247)),X248,bool)))) | s(bool,'T_0') = s(bool,X246) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X247))) | s(bool,'T_0') = s(bool,X246)) ) | ($spl3 | $spl52)),
  inference(superposition,[],[f10512,f782])).
fof(f18613,plain,(
  ( ! [X241,X242,X240] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X241)),X242,bool)) | s(bool,'T_0') = s(bool,X240) | s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,X241)))) ) | ($spl32 | $spl52)),
  inference(forward_demodulation,[],[f18424,f4309])).
fof(f18424,plain,(
  ( ! [X241,X242,X240] : (s(bool,g(s(bool,'F_0'))) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X241)),X242,bool)) | s(bool,'T_0') = s(bool,X240) | s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,X241)))) ) | $spl52),
  inference(duplicate_literal_removal,[],[f18240])).
fof(f18240,plain,(
  ( ! [X241,X242,X240] : (s(bool,g(s(bool,'F_0'))) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X241)),X242,bool)) | s(bool,'T_0') = s(bool,X240) | s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X242),'const.semanticPrimitives.Rval_1'(s(bool,X241))) | s(bool,'T_0') = s(bool,X240)) ) | $spl52),
  inference(superposition,[],[f9610,f782])).
fof(f18612,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) | s(bool,'F_0') = s(bool,X231)) ) | $spl106),
  inference(cnf_transformation,[],[f18612_D])).
fof(f18612_D,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) | s(bool,'F_0') = s(bool,X231)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f18425,plain,(
  ( ! [X231,X229,X230,X228] : (s(bool,X231) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)) | s(bool,'T_0') = s(bool,X228) | s(bool,'F_0') = s(bool,X231) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229)))) ) | ($spl3 | $spl32)),
  inference(duplicate_literal_removal,[],[f18237])).
fof(f18237,plain,(
  ( ! [X231,X229,X230,X228] : (s(bool,X231) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X229)),X230,bool)) | s(bool,'T_0') = s(bool,X228) | s(bool,'F_0') = s(bool,X231) | s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X229))) | s(bool,'T_0') = s(bool,X228)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f782])).
fof(f18611,plain,(
  ( ! [X222,X223] : (s(bool,'F_0') = s(bool,f(s(bool,X222))) | s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X222)))) ) | $spl104),
  inference(cnf_transformation,[],[f18611_D])).
fof(f18611_D,plain,(
  ( ! [X222,X223] : (s(bool,'F_0') = s(bool,f(s(bool,X222))) | s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X222)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f18610,plain,(
  ( ! [X222,X223,X221] : (s(bool,'F_0') = s(bool,f(s(bool,X222))) | s(bool,'T_0') = s(bool,X221) | s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X222)))) ) | ($spl32 | $spl41)),
  inference(forward_demodulation,[],[f18426,f765])).
fof(f18426,plain,(
  ( ! [X222,X223,X221] : (s(bool,'F_0') = s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X222)),X223,bool)))) | s(bool,'T_0') = s(bool,X221) | s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X222)))) ) | ($spl32 | $spl41)),
  inference(duplicate_literal_removal,[],[f18235])).
fof(f18235,plain,(
  ( ! [X222,X223,X221] : (s(bool,'F_0') = s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X222)),X223,bool)))) | s(bool,'T_0') = s(bool,X221) | s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X222))) | s(bool,'T_0') = s(bool,X221)) ) | ($spl32 | $spl41)),
  inference(superposition,[],[f5597,f782])).
fof(f5597,plain,(
  ( ! [X73] : (s(bool,'F_0') = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl32 | $spl41)),
  inference(subsumption_resolution,[],[f5486,f4309])).
fof(f5486,plain,(
  ( ! [X73] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,f(s(bool,X73)))) ) | ($spl32 | $spl41)),
  inference(superposition,[],[f4459,f4392])).
fof(f18573,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | $spl88),
  inference(cnf_transformation,[],[f18573_D])).
fof(f18573_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f18601,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl32 | $spl52)),
  inference(forward_demodulation,[],[f18600,f765])).
fof(f18600,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool))) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl32 | $spl52)),
  inference(condensation,[],[f18599])).
fof(f18599,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X202)),X203,bool))) | s(bool,'T_0') = s(bool,X204) | s('type.semanticPrimitives.result'(bool,X203),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X203),'const.semanticPrimitives.Rval_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,X201)) ) | ($spl32 | $spl52)),
  inference(subsumption_resolution,[],[f18230,f10469])).
fof(f18230,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X202)),X203,bool))) | s(bool,X201) = s(bool,g(s(bool,X204))) | s(bool,'T_0') = s(bool,X204) | s('type.semanticPrimitives.result'(bool,X203),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X203),'const.semanticPrimitives.Rval_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,X201)) ) | $spl32),
  inference(superposition,[],[f4829,f782])).
fof(f18598,plain,(
  ( ! [X200,X199] : (s(bool,X199) = s(bool,f(s(bool,X199))) | s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,X199)))) ) | $spl102),
  inference(cnf_transformation,[],[f18598_D])).
fof(f18598_D,plain,(
  ( ! [X200,X199] : (s(bool,X199) = s(bool,f(s(bool,X199))) | s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,X199)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f18597,plain,(
  ( ! [X198,X200,X199] : (s(bool,X199) = s(bool,f(s(bool,X199))) | s(bool,'T_0') = s(bool,X198) | s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,X199)))) ) | $spl41),
  inference(forward_demodulation,[],[f18427,f765])).
fof(f18427,plain,(
  ( ! [X198,X200,X199] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X199)),X200,bool)) = s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X199)),X200,bool)))) | s(bool,'T_0') = s(bool,X198) | s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,X199)))) ) | $spl41),
  inference(duplicate_literal_removal,[],[f18229])).
fof(f18229,plain,(
  ( ! [X198,X200,X199] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X199)),X200,bool)) = s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X199)),X200,bool)))) | s(bool,'T_0') = s(bool,X198) | s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X200),'const.semanticPrimitives.Rval_1'(s(bool,X199))) | s(bool,'T_0') = s(bool,X198)) ) | $spl41),
  inference(superposition,[],[f4566,f782])).
fof(f4566,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(superposition,[],[f4456,f112])).
fof(f4456,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl41),
  inference(unit_resulting_resolution,[],[f109,f4315,f985])).
fof(f18595,plain,(
  ( ! [X194,X193] : (s(bool,'T_0') != s(bool,f(s(bool,X193))) | s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X193)))) ) | $spl100),
  inference(cnf_transformation,[],[f18595_D])).
fof(f18595_D,plain,(
  ( ! [X194,X193] : (s(bool,'T_0') != s(bool,f(s(bool,X193))) | s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X193)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f18594,plain,(
  ( ! [X194,X192,X193] : (s(bool,'T_0') != s(bool,f(s(bool,X193))) | s(bool,'T_0') = s(bool,X192) | s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X193)))) ) | $spl41),
  inference(forward_demodulation,[],[f18429,f765])).
fof(f18429,plain,(
  ( ! [X194,X192,X193] : (s(bool,'T_0') != s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X193)),X194,bool)))) | s(bool,'T_0') = s(bool,X192) | s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X193)))) ) | $spl41),
  inference(duplicate_literal_removal,[],[f18227])).
fof(f18227,plain,(
  ( ! [X194,X192,X193] : (s(bool,'T_0') != s(bool,f(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X193)),X194,bool)))) | s(bool,'T_0') = s(bool,X192) | s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X193))) | s(bool,'T_0') = s(bool,X192)) ) | $spl41),
  inference(superposition,[],[f4459,f782])).
fof(f18592,plain,(
  ( ! [X185,X184,X183] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X185,bool)) | s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,X183)))) ) | $spl98),
  inference(cnf_transformation,[],[f18592_D])).
fof(f18592_D,plain,(
  ( ! [X185,X184,X183] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X185,bool)) | s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,X183)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f18591,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X185,bool)) | s(bool,'T_0') = s(bool,X182) | s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,X183)))) ) | $spl20),
  inference(forward_demodulation,[],[f18432,f765])).
fof(f18432,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X184,bool))),X185,bool)) | s(bool,'T_0') = s(bool,X182) | s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,X183)))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f18224])).
fof(f18224,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X183)),X184,bool))),X185,bool)) | s(bool,'T_0') = s(bool,X182) | s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X184),'const.semanticPrimitives.Rval_1'(s(bool,X183))) | s(bool,'T_0') = s(bool,X182)) ) | $spl20),
  inference(superposition,[],[f2430,f782])).
fof(f18589,plain,(
  ( ! [X180,X178,X179] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X179)),X180,bool)) | s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179))) | s(bool,'T_0') = s(bool,X178)) ) | ($spl18 | $spl20)),
  inference(subsumption_resolution,[],[f18223,f2430])).
fof(f18223,plain,(
  ( ! [X180,X178,X181,X179] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X179)),X180,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X178)),X181,bool)) | s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179))) | s(bool,'T_0') = s(bool,X178)) ) | $spl18),
  inference(superposition,[],[f2429,f782])).
fof(f18586,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | s(bool,'F_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl3 | $spl32)),
  inference(forward_demodulation,[],[f18585,f765])).
fof(f18585,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool))) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) ) | ($spl3 | $spl32)),
  inference(condensation,[],[f18584])).
fof(f18584,plain,(
  ( ! [X158,X156,X159,X157] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X157)),X158,bool))) | s(bool,X156) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,X157)))) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f18218,f11675])).
fof(f18218,plain,(
  ( ! [X158,X156,X159,X157] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X157)),X158,bool))) | s(bool,X156) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,X157))) | s(bool,'T_0') = s(bool,X156)) )),
  inference(superposition,[],[f985,f782])).
fof(f18582,plain,(
  ( ! [X134,X132,X135,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135))) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'F_0') = s(bool,X134)) ) | $spl94),
  inference(cnf_transformation,[],[f18582_D])).
fof(f18582_D,plain,(
  ( ! [X134,X132,X135,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135))) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'F_0') = s(bool,X134)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f18581,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X131),s('type.list.list'(bool),X133))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135))) | s(bool,'F_0') = s(bool,X134) | s(bool,'T_0') = s(bool,X130) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131)))) )),
  inference(forward_demodulation,[],[f18441,f765])).
fof(f18441,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X131)),X132,bool)),s('type.list.list'(bool),X133))) | s(bool,'F_0') = s(bool,X134) | s(bool,'T_0') = s(bool,X130) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131)))) )),
  inference(duplicate_literal_removal,[],[f18213])).
fof(f18213,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X134),s('type.list.list'(bool),X135))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X131)),X132,bool)),s('type.list.list'(bool),X133))) | s(bool,'F_0') = s(bool,X134) | s(bool,'T_0') = s(bool,X130) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f549,f782])).
fof(f18580,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(forward_demodulation,[],[f18444,f765])).
fof(f18444,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool))) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(condensation,[],[f18443])).
fof(f18443,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X3)),X4,bool))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X3)))) )),
  inference(duplicate_literal_removal,[],[f18442])).
fof(f18442,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X3)),X4,bool))) | s(bool,'T_0') = s(bool,X1) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f18211])).
fof(f18211,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X120)),X121,bool))) | s(bool,X119) = s(bool,X122) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,X123) | s('type.semanticPrimitives.result'(bool,X121),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X121),'const.semanticPrimitives.Rval_1'(s(bool,X120))) | s(bool,'T_0') = s(bool,X119)) )),
  inference(superposition,[],[f494,f782])).
fof(f18577,plain,(
  ( ! [X59,X57,X60,X58] : (s(bool,X59) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X57)),X58,bool)) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,X59)))) ) | $spl92),
  inference(cnf_transformation,[],[f18577_D])).
fof(f18577_D,plain,(
  ( ! [X59,X57,X60,X58] : (s(bool,X59) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X57)),X58,bool)) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,X59)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f18457,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X59) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X57)),X58,bool)) | s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,X59))) | s(bool,'T_0') = s(bool,X56) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X57)))) )),
  inference(duplicate_literal_removal,[],[f18200])).
fof(f18200,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X59) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X57)),X58,bool)) | s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X60),'const.semanticPrimitives.Rval_1'(s(bool,X59))) | s(bool,'T_0') = s(bool,X56) | s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f255,f782])).
fof(f18576,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X42))) != s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42))) | s(bool,'F_0') = s(bool,X45)) ) | $spl90),
  inference(cnf_transformation,[],[f18576_D])).
fof(f18576_D,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X42))) != s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42))) | s(bool,'F_0') = s(bool,X45)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f18575,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X42))) != s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X41) | s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42)))) )),
  inference(forward_demodulation,[],[f18458,f765])).
fof(f18458,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X45))) != s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X42)),X43,bool)))) | s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X41) | s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42)))) )),
  inference(duplicate_literal_removal,[],[f18197])).
fof(f18197,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,X45))) != s('type.semanticPrimitives.result'(bool,X44),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X42)),X43,bool)))) | s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X41) | s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f234,f782])).
fof(f18574,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | s(bool,'T_0') = s(bool,X31) | s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X32)))) )),
  inference(forward_demodulation,[],[f18459,f765])).
fof(f18459,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X32)),X33,bool))) | s(bool,'T_0') = s(bool,X31) | s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X32)))) )),
  inference(duplicate_literal_removal,[],[f18194])).
fof(f18194,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X32)),X33,bool))) | s(bool,'T_0') = s(bool,X31) | s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X33),'const.semanticPrimitives.Rval_1'(s(bool,X32))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f173,f782])).
fof(f18572,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(forward_demodulation,[],[f18571,f765])).
fof(f18571,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool))) | s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,X1)))) )),
  inference(condensation,[],[f18570])).
fof(f18570,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool))) | s(bool,X11) = s(bool,X14) | s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f18189,f200])).
fof(f18189,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool))) | ~p(s(bool,X14)) | s(bool,X11) = s(bool,X14) | s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,X12))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f154,f782])).
fof(f18511,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X70)))) ) | $spl86),
  inference(cnf_transformation,[],[f18511_D])).
fof(f18511_D,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X70)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f18488,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X70))) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68)))) )),
  inference(duplicate_literal_removal,[],[f18093])).
fof(f18093,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X68)),X69,bool)) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X70)),X71,bool)) | s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X71),'const.semanticPrimitives.Rval_1'(s(bool,X70))) | s(bool,'T_0') = s(bool,X67) | s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X69),'const.semanticPrimitives.Rval_1'(s(bool,X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f782,f782])).
fof(f12856,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X38)) ) | $spl84),
  inference(cnf_transformation,[],[f12856_D])).
fof(f12856_D,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X38)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f12814,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38)) ) | ($spl3 | $spl32 | $spl46)),
  inference(duplicate_literal_removal,[],[f12793])).
fof(f12793,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) ) | ($spl3 | $spl32 | $spl46)),
  inference(superposition,[],[f5618,f9868])).
fof(f12855,plain,(
  ( ! [X24] : (s(bool,X24) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X24)) ) | $spl82),
  inference(cnf_transformation,[],[f12855_D])).
fof(f12855_D,plain,(
  ( ! [X24] : (s(bool,X24) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X24)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f12815,plain,(
  ( ! [X24,X23] : (s(bool,X24) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X24)) ) | ($spl3 | $spl32 | $spl41)),
  inference(duplicate_literal_removal,[],[f12788])).
fof(f12788,plain,(
  ( ! [X24,X23] : (s(bool,X24) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X23)) ) | ($spl3 | $spl32 | $spl41)),
  inference(superposition,[],[f5618,f4471])).
fof(f4471,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(trivial_inequality_removal,[],[f4466])).
fof(f4466,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl41),
  inference(superposition,[],[f4315,f171])).
fof(f12854,plain,(
  ( ! [X19,X20] : (s(bool,X20) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X19,bool)) | s(bool,'F_0') = s(bool,X20)) ) | $spl80),
  inference(cnf_transformation,[],[f12854_D])).
fof(f12854_D,plain,(
  ( ! [X19,X20] : (s(bool,X20) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X19,bool)) | s(bool,'F_0') = s(bool,X20)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f12816,plain,(
  ( ! [X19,X20,X18] : (s(bool,X20) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X19,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X20)) ) | ($spl3 | $spl32)),
  inference(duplicate_literal_removal,[],[f12786])).
fof(f12786,plain,(
  ( ! [X19,X20,X18] : (s(bool,X20) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X19,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X18)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f5618,f1729])).
fof(f12451,plain,(
  ( ! [X47,X45,X48] : (s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'F_0') = s(bool,X48) | s(bool,X45) = s(bool,X48)) ) | $spl78),
  inference(cnf_transformation,[],[f12451_D])).
fof(f12451_D,plain,(
  ( ! [X47,X45,X48] : (s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'F_0') = s(bool,X48) | s(bool,X45) = s(bool,X48)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f12506,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl32),
  inference(subsumption_resolution,[],[f11965,f112])).
fof(f11965,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,'F_0') != s(bool,X46) | s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl32),
  inference(superposition,[],[f255,f5444])).
fof(f12450,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl32),
  inference(subsumption_resolution,[],[f11770,f112])).
fof(f11770,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,'F_0') != s(bool,X46) | s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl32),
  inference(superposition,[],[f255,f5444])).
fof(f10155,plain,(
  ( ! [X72] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X72)) ) | ($spl3 | $spl18 | $spl20 | $spl46)),
  inference(subsumption_resolution,[],[f9962,f2430])).
fof(f9962,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X72)),X73,bool)) | s(bool,'T_0') = s(bool,X72)) ) | ($spl3 | $spl18 | $spl46)),
  inference(superposition,[],[f2429,f9868])).
fof(f9768,plain,(
  ( ! [X165,X164] : (s(fun(bool,bool),X164) = s(fun(bool,bool),X165) | s(bool,'F_0') = s(bool,sK6(X164,X165,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X164,X165,bool,bool))))) ) | $spl74),
  inference(cnf_transformation,[],[f9768_D])).
fof(f9768_D,plain,(
  ( ! [X165,X164] : (s(fun(bool,bool),X164) = s(fun(bool,bool),X165) | s(bool,'F_0') = s(bool,sK6(X164,X165,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X164,X165,bool,bool))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f4850,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl47),
  inference(cnf_transformation,[],[f4850_D])).
fof(f4850_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f5613,plain,(
  ( ! [X165,X164] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X164) = s(fun(bool,bool),X165) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X164,X165,bool,bool)))) | s(bool,'F_0') = s(bool,sK6(X164,X165,bool,bool))) ) | $spl32),
  inference(forward_demodulation,[],[f5519,f4309])).
fof(f5519,plain,(
  ( ! [X165,X164] : (s(bool,'F_0') != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X164) = s(fun(bool,bool),X165) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X164,X165,bool,bool)))) | s(bool,'F_0') = s(bool,sK6(X164,X165,bool,bool))) ) | $spl32),
  inference(superposition,[],[f694,f4392])).
fof(f9691,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f9325])).
fof(f9690,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120) = s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X119),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),X120),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X121))) != s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),'const.list.CONS_2'(s('type.semanticPrimitives.result'('type.list.list'(bool),X119),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))),s('type.list.list'('type.semanticPrimitives.result'('type.list.list'(bool),X119)),X122))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f9171])).
fof(f9689,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f8794])).
fof(f9688,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f8645])).
fof(f9687,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98) != s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f8434])).
fof(f9686,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99) = s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),X99))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.list.list'(bool),X97),X98),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.list.list'(bool),X97),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.NIL_0'))))))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f8316])).
fof(f9684,plain,(
  ( ! [X52,X50,X51] : (s('type.list.list'(bool),X52) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X52))) != s('type.semanticPrimitives.result'('type.list.list'(bool),X51),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(bool,X51),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f5043])).
fof(f9754,plain,(
  $false | ($spl0 | $spl18 | $spl22 | $spl32)),
  inference(subsumption_resolution,[],[f9741,f2431])).
fof(f9741,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool))) ) | ($spl0 | $spl18 | $spl32)),
  inference(condensation,[],[f9682])).
fof(f9682,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X65,bool)) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl18 | $spl32)),
  inference(backward_demodulation,[],[f177,f4804])).
fof(f9753,plain,(
  ( ! [X118,X119] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) | s(bool,'T_0') != s(bool,X118)) ) | $spl58),
  inference(cnf_transformation,[],[f9753_D])).
fof(f9753_D,plain,(
  ( ! [X118,X119] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) | s(bool,'T_0') != s(bool,X118)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f9681,plain,(
  ( ! [X118,X119,X117] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X119))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X118),s('type.list.list'(bool),X119))) | s(bool,'T_0') != s(bool,X118) | s(bool,'T_0') = s(bool,X117)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f4801])).
fof(f9751,plain,(
  ( ! [X97,X98,X96] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f9680,f1418])).
fof(f9680,plain,(
  ( ! [X97,X98,X96] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) | s(bool,'T_0') != s(bool,X97) | s(bool,'T_0') = s(bool,X96)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f177,f4794])).
fof(f9613,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(cnf_transformation,[],[f9613_D])).
fof(f9613_D,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f9612,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl3 | $spl32 | $spl47)),
  inference(condensation,[],[f9611])).
fof(f9611,plain,(
  ( ! [X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,X34)) ) | ($spl3 | $spl32 | $spl47)),
  inference(subsumption_resolution,[],[f9529,f5618])).
fof(f9529,plain,(
  ( ! [X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,X34)) ) | ($spl3 | $spl47)),
  inference(superposition,[],[f2377,f5009])).
fof(f9610,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl52),
  inference(cnf_transformation,[],[f9610_D])).
fof(f9610_D,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f9609,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl3 | $spl32)),
  inference(condensation,[],[f9608])).
fof(f9608,plain,(
  ( ! [X30,X28,X29] : (s(bool,X29) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X28)) ) | ($spl3 | $spl32)),
  inference(subsumption_resolution,[],[f9527,f5618])).
fof(f9527,plain,(
  ( ! [X30,X28,X29] : (s(bool,X29) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X28)) ) | ($spl3 | $spl32)),
  inference(superposition,[],[f2377,f4392])).
fof(f7659,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X2),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X2,'type.list.list'(sK0)))) ) | $spl48),
  inference(cnf_transformation,[],[f7659_D])).
fof(f7659_D,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X2),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X2,'type.list.list'(sK0)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f7660,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) | $spl50),
  inference(cnf_transformation,[],[f7660_D])).
fof(f7660_D,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0)))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f7615,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,X2),'const.semanticPrimitives.Rval_1'(s(sK0,sK4(sK2,sK1,sK0))))),X2,'type.list.list'(sK0)))) ) | $spl28),
  inference(superposition,[],[f7150,f7388])).
fof(f4848,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4)) ) | $spl44),
  inference(cnf_transformation,[],[f4848_D])).
fof(f4848_D,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f4837,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK6(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f694,f171])).
fof(f4834,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f694,f171])).
fof(f4313,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl38),
  inference(cnf_transformation,[],[f4313_D])).
fof(f4313_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f4307,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK6(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f689,f171])).
fof(f4309,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl32),
  inference(cnf_transformation,[],[f4309_D])).
fof(f4309_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f4316,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl42),
  inference(cnf_transformation,[],[f4316_D])).
fof(f4316_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f4306,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK6(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f689,f171])).
fof(f4305,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK6(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f689,f171])).
fof(f4304,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f689,f171])).
fof(f4312,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl37),
  inference(cnf_transformation,[],[f4312_D])).
fof(f4312_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f4303,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f689,f112])).
fof(f4249,plain,(
  $false | ($spl24 | $spl28)),
  inference(subsumption_resolution,[],[f4240,f4102])).
fof(f4241,plain,(
  $false | ($spl24 | $spl28)),
  inference(unit_resulting_resolution,[],[f4102,f4230,f157])).
fof(f4239,plain,(
  $false | ($spl24 | $spl28)),
  inference(unit_resulting_resolution,[],[f4109,f4230,f751])).
fof(f4109,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)),sK1,'type.list.list'(sK0))))) | $spl24),
  inference(unit_resulting_resolution,[],[f4102,f157])).
fof(f4235,plain,(
  $false | ($spl24 | $spl28)),
  inference(unit_resulting_resolution,[],[f4109,f4230])).
fof(f4248,plain,(
  $false | ($spl24 | $spl28)),
  inference(trivial_inequality_removal,[],[f4246])).
fof(f4246,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | ($spl24 | $spl28)),
  inference(superposition,[],[f4230,f4109])).
fof(f4229,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) )),
  inference(forward_demodulation,[],[f4214,f107])).
fof(f4214,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),sK5('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f751,f107])).
fof(f4101,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0))))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2)))) )),
  inference(forward_demodulation,[],[f4062,f107])).
fof(f4062,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),X0))) != s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK2))) | s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK0),sK1),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK0),sK4('const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK0,sK1),sK3)),sK1,'type.list.list'(sK0)))))) )),
  inference(superposition,[],[f734,f107])).
fof(f3299,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f3207,f109])).
fof(f3207,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f3144,f111])).
fof(f3144,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f3066])).
fof(f3066,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(superposition,[],[f1321,f1729])).
fof(f3298,plain,(
  $false | ($spl3 | $spl12)),
  inference(trivial_inequality_removal,[],[f3209])).
fof(f3209,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))) ) | ($spl3 | $spl12)),
  inference(backward_demodulation,[],[f3144,f232])).
fof(f3200,plain,(
  $false | ($spl3 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f3180,f179])).
fof(f3180,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl12 | $spl18)),
  inference(condensation,[],[f3168])).
fof(f3168,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X23)) ) | ($spl12 | $spl18)),
  inference(backward_demodulation,[],[f3165,f1221])).
fof(f3165,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool))) ) | ($spl12 | $spl18)),
  inference(subsumption_resolution,[],[f3059,f2429])).
fof(f3059,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f1321,f112])).
fof(f3197,plain,(
  $false | ($spl3 | $spl12 | $spl18)),
  inference(trivial_inequality_removal,[],[f3182])).
fof(f3182,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | ($spl3 | $spl12 | $spl18)),
  inference(backward_demodulation,[],[f3181,f245])).
fof(f3181,plain,(
  ( ! [X23,X21] : (s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X21)))) ) | ($spl3 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f3167,f179])).
fof(f3167,plain,(
  ( ! [X23,X21] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X23),'const.semanticPrimitives.Rval_1'(s(bool,X21)))) ) | ($spl12 | $spl18)),
  inference(backward_demodulation,[],[f3165,f1101])).
fof(f3164,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3163,f546])).
fof(f3163,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3050,f765])).
fof(f3050,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f1321,f918])).
fof(f3162,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3161,f546])).
fof(f3161,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3160,f765])).
fof(f3160,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3051,f765])).
fof(f3051,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X0)),X2,'type.list.list'(bool)))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f765,f1321,f150])).
fof(f3159,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3158,f546])).
fof(f3158,plain,(
  ( ! [X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))) ) | $spl12),
  inference(forward_demodulation,[],[f3157,f765])).
fof(f3157,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)),s('type.list.list'(bool),X1)))) ) | $spl12),
  inference(forward_demodulation,[],[f3052,f765])).
fof(f3052,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X2,'type.list.list'(bool)))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f765,f1321,f150])).
fof(f3156,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3155,f232])).
fof(f3155,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) | $spl12),
  inference(forward_demodulation,[],[f3053,f765])).
fof(f3053,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f1321,f161])).
fof(f3154,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3153,f546])).
fof(f3153,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3055,f765])).
fof(f3055,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f1321,f918])).
fof(f3152,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3151,f546])).
fof(f3151,plain,(
  ( ! [X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))) ) | $spl12),
  inference(forward_demodulation,[],[f3150,f765])).
fof(f3150,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)),s('type.list.list'(bool),X1)))) ) | $spl12),
  inference(forward_demodulation,[],[f3056,f765])).
fof(f3056,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X2,'type.list.list'(bool)))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f765,f1321,f150])).
fof(f3149,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3148,f546])).
fof(f3148,plain,(
  ( ! [X0] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3147,f765])).
fof(f3147,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f3057,f765])).
fof(f3057,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X0)),X2,'type.list.list'(bool)))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f765,f1321,f150])).
fof(f3146,plain,(
  $false | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f3145,f232])).
fof(f3145,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) | $spl12),
  inference(forward_demodulation,[],[f3058,f765])).
fof(f3058,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))))) ) | $spl12),
  inference(unit_resulting_resolution,[],[f1321,f161])).
fof(f3035,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2903,f2661])).
fof(f2661,plain,(
  ( ! [X177,X180,X179] : (s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X177))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179)))) ) | $spl16),
  inference(subsumption_resolution,[],[f2535,f2471])).
fof(f2471,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2)) ) | $spl16),
  inference(superposition,[],[f2428,f2428])).
fof(f2535,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X179) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X178,bool)) | s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X177))) = s('type.semanticPrimitives.result'(bool,X180),'const.semanticPrimitives.Rval_1'(s(bool,X179)))) ) | $spl16),
  inference(superposition,[],[f161,f2428])).
fof(f2903,plain,(
  ( ! [X125,X126] : (s('type.semanticPrimitives.result'(bool,X126),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X126),'const.semanticPrimitives.Rval_1'(s(bool,X125)))) ) | ($spl3 | $spl16)),
  inference(superposition,[],[f232,f2471])).
fof(f3034,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2902,f2471])).
fof(f2902,plain,(
  ( ! [X124] : (s(bool,'T_0') != s(bool,X124)) ) | ($spl3 | $spl16)),
  inference(superposition,[],[f179,f2471])).
fof(f3033,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f2900,f2819])).
fof(f2819,plain,(
  ( ! [X103] : (p(s(bool,X103))) ) | $spl16),
  inference(superposition,[],[f109,f2471])).
fof(f2900,plain,(
  ( ! [X121] : (~p(s(bool,X121))) ) | $spl16),
  inference(superposition,[],[f111,f2471])).
fof(f3032,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2827,f2661])).
fof(f2827,plain,(
  ( ! [X125,X126] : (s('type.semanticPrimitives.result'(bool,X126),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X126),'const.semanticPrimitives.Rval_1'(s(bool,X125)))) ) | ($spl3 | $spl16)),
  inference(superposition,[],[f232,f2471])).
fof(f3031,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2826,f2471])).
fof(f2826,plain,(
  ( ! [X124] : (s(bool,'T_0') != s(bool,X124)) ) | ($spl3 | $spl16)),
  inference(superposition,[],[f179,f2471])).
fof(f3030,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f2824,f2819])).
fof(f2824,plain,(
  ( ! [X121] : (~p(s(bool,X121))) ) | $spl16),
  inference(superposition,[],[f111,f2471])).
fof(f3029,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2712,f2735])).
fof(f2735,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),X0) != s('type.list.list'(bool),X1)) ) | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f546,f2471,f150])).
fof(f2712,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X3,'type.list.list'(bool)))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f765,f2471,f150])).
fof(f3028,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2713,f2735])).
fof(f2713,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X3,'type.list.list'(bool)))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f765,f2471,f150])).
fof(f3027,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2731,f2735])).
fof(f2731,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X3,'type.list.list'(bool)))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f765,f2471,f150])).
fof(f3026,plain,(
  $false | ($spl3 | $spl16)),
  inference(subsumption_resolution,[],[f2732,f2735])).
fof(f2732,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),sK4('const.semanticPrimitives.Rval_1'(s('type.list.list'(bool),X1)),X3,'type.list.list'(bool)))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f765,f2471,f150])).
fof(f2738,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f232,f2471,f161])).
fof(f2736,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f765,f546,f2471,f150])).
fof(f2734,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f765,f546,f2471,f150])).
fof(f2730,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f546,f2471,f918])).
fof(f2728,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f179,f232,f2471,f256])).
fof(f2723,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f179,f232,f2471,f255])).
fof(f2719,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f232,f2471,f161])).
fof(f2717,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f765,f546,f2471,f150])).
fof(f2715,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f765,f546,f2471,f150])).
fof(f2711,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f546,f2471,f918])).
fof(f2709,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f179,f232,f2471,f256])).
fof(f2704,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f179,f232,f2471,f255])).
fof(f2701,plain,(
  $false | ($spl3 | $spl16)),
  inference(unit_resulting_resolution,[],[f179,f2471])).
fof(f2431,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) ) | $spl22),
  inference(cnf_transformation,[],[f2431_D])).
fof(f2431_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1321,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X17,bool))) ) | $spl12),
  inference(cnf_transformation,[],[f1321_D])).
fof(f1321_D,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X17,bool))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2433,plain,(
  ( ! [X47,X45,X46] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X47,bool)) | s(bool,'F_0') = s(bool,X46) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X45,bool))) )),
  inference(forward_demodulation,[],[f2432,f765])).
fof(f2432,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'F_0') = s(bool,X46) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X45,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X44,bool))),X47,bool))) )),
  inference(forward_demodulation,[],[f2414,f765])).
fof(f2414,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X45,bool)) | s(bool,X46) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X44,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X44,bool))),X47,bool))) )),
  inference(superposition,[],[f1945,f1832])).
fof(f2416,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool))) )),
  inference(condensation,[],[f2413])).
fof(f2413,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X42,bool)) | s(bool,X43) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X41,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X41,bool))) )),
  inference(superposition,[],[f1945,f1729])).
fof(f2430,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,'T_0') = s(bool,X1)) ) | $spl20),
  inference(cnf_transformation,[],[f2430_D])).
fof(f2430_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2417,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)) | s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f2412])).
fof(f2412,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,'T_0') != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X38)),X39,bool)) | s(bool,X40) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X37,bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X37,bool))) )),
  inference(superposition,[],[f1945,f833])).
fof(f2429,plain,(
  ( ! [X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X3,bool))) ) | $spl18),
  inference(cnf_transformation,[],[f2429_D])).
fof(f2429_D,plain,(
  ( ! [X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X3,bool))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2399,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X2) = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X0,bool)) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X1)),X3,bool))) )),
  inference(superposition,[],[f1945,f1832])).
fof(f1320,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl10),
  inference(cnf_transformation,[],[f1320_D])).
fof(f1320_D,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2371,plain,(
  ( ! [X26,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26)))) ) | $spl14),
  inference(cnf_transformation,[],[f2371_D])).
fof(f2371_D,plain,(
  ( ! [X26,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2326,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,X30) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X29,bool)) | s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X28)),X32,bool))) )),
  inference(superposition,[],[f255,f1832])).
fof(f2361,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(duplicate_literal_removal,[],[f2325])).
fof(f2325,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X26) != s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X25,bool)) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f255,f1729])).
fof(f1319,plain,(
  ( ! [X8,X11] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X11,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl8),
  inference(cnf_transformation,[],[f1319_D])).
fof(f1319_D,plain,(
  ( ! [X8,X11] : (s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X11,bool)) | s(bool,'T_0') = s(bool,X8)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1209,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X17,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X16)),X18,bool)) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f947,f112])).
fof(f1208,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X13)),X14,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X12)),X15,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f947,f171])).
fof(f1207,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'F_0') = s(bool,sK4('const.semanticPrimitives.Rval_1'(s(bool,X8)),X11,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f947,f171])).
fof(f203,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f202,f109])).
fof(f202,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(backward_demodulation,[],[f198,f111])).
fof(f199,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) | $spl6),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f201,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f195,f173])).
fof(f195,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f151,f112])).
fof(f197,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f193,f173])).
fof(f193,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f151,f112])).
fof(f179,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f179_D])).
fof(f179_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f176,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f112])).
% SZS output end Proof for thm.funBigStepProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 366
% Passive clauses: 3315
% Generated clauses: 46900
% Final active clauses: 154
% Final passive clauses: 1351
% Input formulas: 28
% Initial clauses: 58
% 
% Duplicate literals: 2830
% Trivial inequalities: 459
% Fw subsumption resolutions: 2580
% Fw demodulations: 5692
% Bw demodulations: 1262
% Condensations: 5357
% Global subsumptions: 242
% 
% Simple tautologies: 513
% Equational tautologies: 633
% Forward subsumptions: 23441
% Fw demodulations to eq. taut.: 1475
% Bw demodulations to eq. taut.: 134
% 
% Unit resulting resolution: 3977
% Factoring: 1
% Forward superposition: 10388
% Backward superposition: 11671
% Self superposition: 275
% Equality factoring: 174
% Equality resolution: 105
% 
% Split clauses: 141
% Split components: 290
% SAT solver clauses: 4142
% SAT solver unit clauses: 122
% SAT solver binary clauses: 648
% 
% Sat splits: 141
% Sat splitting refutations: 301
% 
% Memory used [KB]: 33261
% Time elapsed: 3.780 s
% ------------------------------
% ------------------------------
% Success in time 5.07 s
