Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSound
% (137303)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 638
% Passive clauses: 5337
% Generated clauses: 13576
% Final active clauses: 623
% Final passive clauses: 4128
% Input formulas: 38
% Initial clauses: 169
% 
% Duplicate literals: 464
% Trivial inequalities: 75
% Fw subsumption resolutions: 1345
% Fw demodulations: 191
% Bw demodulations: 4
% 
% Simple tautologies: 193
% Equational tautologies: 58
% Forward subsumptions: 5650
% 
% Binary resolution: 7115
% Factoring: 1254
% Forward superposition: 1620
% Backward superposition: 1143
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 19
% 
% Split clauses: 283
% Split components: 574
% SAT solver clauses: 558
% SAT solver unit clauses: 11
% SAT solver binary clauses: 84
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 283
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 557
% TWLsolver calls for satisfiability: 382
% 
% Memory used [KB]: 5884
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSound
% (137324)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 393
% Passive clauses: 2122
% Generated clauses: 9630
% Final active clauses: 379
% Final passive clauses: 1497
% Input formulas: 38
% Initial clauses: 169
% 
% Duplicate literals: 236
% Trivial inequalities: 15
% Fw subsumption resolutions: 875
% Fw demodulations: 168
% Bw demodulations: 243
% Condensations: 224
% Global subsumptions: 14
% 
% Simple tautologies: 214
% Equational tautologies: 20
% Forward subsumptions: 3325
% 
% Binary resolution: 3504
% Factoring: 332
% Forward superposition: 800
% Backward superposition: 864
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 6
% 
% Split clauses: 41
% Split components: 89
% SAT solver clauses: 2593
% SAT solver unit clauses: 180
% SAT solver binary clauses: 76
% SAT solver learnt clauses: 28
% SAT solver learnt literals: 12
% 
% Sat splits: 41
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2537
% TWLsolver calls for satisfiability: 1857
% 
% Memory used [KB]: 12281
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSound
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSound
% SZS output start Proof for thm.typeSound
fof(f25148,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f222,f403,f401,f399,f397,f221,f220,f402,f219,f398,f218,f400,f396,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2112,f2025,f2114,f2029,f2116,f2032,f2119,f2036,f2121,f2039,f2123,f2042,f2125,f2045,f2127,f2048,f2129,f2051,f2131,f2054,f2133,f2057,f2135,f2060,f2137,f2063,f2139,f2066,f2141,f2069,f2143,f2072,f2145,f2075,f2147,f2078,f2149,f2081,f2169,f2170,f2176,f2180,f2797,f2798,f2802,f2799,f2800,f2801,f3029,f3030,f3042,f3040,f3198,f3201,f3199,f3203,f3204,f3205,f3207,f3212,f3214,f3218,f3220,f3222,f3224,f3232,f3234,f3242,f3244,f3254,f3264,f3268,f3270,f3274,f3276,f3291,f3311,f3344,f3346,f3434,f3441,f3445,f3455,f3460,f3465,f3473,f3480,f3488,f3495,f3497,f3505,f3512,f3520,f3527,f3529,f3531,f3533,f3535,f4534,f4535,f3554,f3556,f3558,f3560,f3580,f3582,f3595,f3608,f3626,f3630,f3632,f3639,f3641,f3648,f3650,f3652,f3654,f3672,f3677,f3679,f3686,f3688,f3695,f3697,f3699,f3701,f3709,f3716,f3724,f3731,f3733,f3753,f3755,f3768,f3770,f3791,f3793,f3806,f3808,f3832,f3834,f3847,f3849,f3859,f3872,f3882,f3895,f3912,f3929,f3954,f3956,f3958,f3989,f3991,f3993,f3995,f4005,f4007,f4009,f4020,f4022,f4033,f4035,f4046,f4048,f4059,f4061,f4079,f4093,f4110,f4112,f4114,f4126,f4128,f4130,f4132,f4165,f4167,f4169,f4171,f4173,f4193,f4195,f4215,f4217,f4230,f4232,f4245,f4247,f4249,f4262,f4274,f4286,f4288,f4300,f4302,f4313,f4327,f4342,f4356,f4368,f4370,f4372,f4374,f4376,f4387,f4389,f4391,f4393,f4395,f4397,f4399,f4401,f4403,f4409,f4415,f4421,f4425,f4427,f4431,f4433,f4436,f4438,f4440,f4446,f4448,f4451,f4455,f4461,f4467,f4473,f4477,f4479,f4483,f4485,f4493,f4495,f4497,f4503,f4505,f4511,f4515,f4519,f4536,f4537,f4538,f4539,f4540,f4541,f4542,f4543,f4544,f4545,f4546,f4547,f4548,f4549,f4550,f4551,f4552,f4553,f4554,f4555,f4556,f4557,f4558,f4559,f4560,f4561,f4562,f4563,f4564,f4565,f4566,f4567,f4568,f4569,f4570,f4571,f4572,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4581,f4582,f4583,f4584,f4585,f4586,f4587,f4588,f4589,f4590,f4591,f4592,f4593,f4594,f4595,f4596,f4597,f4598,f4599,f4600,f4601,f4602,f4603,f4604,f4605,f4606,f4607,f4608,f4609,f4610,f4611,f4612,f4613,f4614,f4615,f4616,f4617,f4618,f4619,f4620,f4621,f4622,f4623,f4624,f4625,f4626,f4627,f4628,f4629,f4630,f4631,f4632,f4633,f4634,f4635,f4636,f4637,f4638,f4639,f4640,f4641,f4642,f4643,f4644,f4645,f4646,f4647,f4648,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4657,f4658,f4659,f4660,f4661,f4662,f4663,f4664,f4665,f4666,f4667,f4668,f4669,f4670,f4671,f4672,f4673,f4674,f4675,f4676,f4677,f4678,f4679,f4680,f4681,f4682,f4683,f4684,f4685,f4686,f4687,f4688,f4689,f4690,f4691,f4692,f4693,f4694,f4695,f4696,f4697,f4698,f4699,f4700,f4701,f4702,f4703,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4716,f4718,f4720,f4722,f4724,f4726,f4727,f4728,f4730,f4731,f4732,f4733,f4738,f4739,f4740,f4741,f4742,f4743,f4744,f4745,f4746,f4747,f4748,f4749,f4750,f4751,f4752,f4753,f4754,f4755,f4756,f4757,f4758,f4759,f4760,f4761,f4762,f4763,f4764,f4765,f4766,f4767,f4768,f4769,f4770,f4771,f4772,f4773,f4774,f4775,f4776,f4777,f4778,f4779,f4780,f4781,f4782,f4783,f4784,f4785,f4786,f4787,f4788,f4789,f4790,f4822,f4824,f4823,f4826,f4827,f5364,f5367,f5365,f6856,f6189,f6867,f6865,f6198,f6869,f6846,f6836,f6835,f6870,f6830,f6821,f6864,f6888,f6889,f6894,f6895,f6896,f6897,f6804,f6875,f6903,f6904,f3033,f3032,f3031,f6950,f7740,f11577,f11578,f11579,f11580,f16828,f16829,f16830,f16832,f16834,f16836,f12625,f16856,f16857,f16947,f16831,f16948,f16833,f16949,f16835,f16950,f16837,f17080,f17143,f17145,f17146,f17271,f17272,f17273,f17274,f17275,f17276,f17277,f17278,f17279,f17285,f17286,f17287,f17288,f17289,f17290,f17291,f17292,f17293,f17294,f17295,f17296,f17297,f17298,f17299,f17300,f17301,f17302,f17303,f17304,f17316,f17318,f17122,f17321,f17319,f17125,f17337,f17142,f2810,f17342,f17347,f17350,f17354,f17351,f11421,f17355,f17358,f17360,f17361,f17363,f11575,f17364,f17365,f11427,f17367,f11428,f17369,f11429,f17371,f11430,f17373,f11431,f17375,f11432,f17377,f11433,f17379,f11434,f17381,f11435,f17383,f11436,f17385,f11437,f17387,f11438,f17389,f11439,f17390,f11440,f17391,f11441,f17392,f11442,f17393,f11443,f17394,f11444,f17396,f11445,f17398,f11453,f17400,f11454,f17402,f11455,f17404,f11459,f17406,f11460,f17408,f11461,f17410,f11462,f17412,f11467,f17413,f11468,f17414,f17415,f17357,f11479,f11488,f17320,f7245,f12886,f13306,f13824,f17566,f2807,f14244,f2805,f17567,f13565,f13563,f6951,f16855,f12627,f2808,f2803,f17568,f21506,f21510,f21514,f22774,f22775,f22819,f21513,f23655,f23661,f24756,f24757,f24799,f24800,f24801,f24802,f24803,f24805,f24808,f24811,f24814,f24817,f2026,f3200,f24825,f24826,f24827,f24828,f24829,f24830,f24831,f24832,f24833,f24834,f24835,f24836,f24837,f24838,f24839,f24840,f24841,f24842,f24843,f24844,f24845,f24846,f24847,f24848,f24849,f24850,f24851,f24852,f24853,f24854,f24855,f24856,f24857,f24858,f24859,f24860,f24861,f24862,f24863,f24864,f24865,f24866,f24867,f24868,f24869,f24870,f24871,f24872,f24873,f24874,f24875,f24876,f24877,f24878,f24879,f24880,f24881,f24882,f24883,f24884,f24885,f24886,f24887,f24888,f24889,f24890,f24891,f24892,f24893,f24894,f24895,f24896,f24897,f24898,f24899,f24900,f24901,f24902,f24903,f24904,f24905,f24906,f24907,f24908,f24909,f24910,f24911,f24912,f24913,f24914,f24915,f24916,f24917,f24918,f24919,f24920,f24921,f24922,f24923,f24924,f24925,f24926,f24927,f24928,f24929,f24930,f24931,f24932,f24933,f24934,f24935,f24936,f24937,f24938,f24940,f24941,f24942,f24944,f24945,f24946,f24947,f24949,f24951,f24952,f24953,f24954,f24955,f24956,f24958,f24959,f24960,f24961,f24962,f24963,f24964,f24965,f24966,f24967,f24968,f24969,f24970,f24971,f24972,f24973,f24974,f24975,f24976,f24977,f24978,f24979,f24980,f24981,f24982,f24983,f24984,f24985,f24986,f24987,f24988,f24989,f24990,f24992,f24993,f24994,f24995,f24997,f24998,f24999,f25000,f25001,f25002,f25003,f25005,f25006,f25007,f25008,f25009,f25010,f25011,f25012,f25013,f25014,f25015,f25016,f25017,f25018,f25019,f25020,f25021,f25022,f25023,f25024,f25025,f25026,f25027,f25028,f25029,f25030,f25031,f25032,f25033,f25034,f25035,f25036,f25037,f25038,f25039,f25040,f25041,f25042,f25043,f25044,f25045,f25046,f25047,f25048,f25049,f25050,f25051,f25052,f25053,f25054,f25055,f25056,f25057,f25058,f25059,f25060,f25061,f25062,f25063,f25064,f25065,f25066,f25067,f25068,f25069,f25070,f25071,f25072,f25073,f25074,f25075,f25076,f25077,f25078,f25079,f25080,f25081,f25082,f25083,f25084,f25085,f25086,f25087,f25088,f25089,f25090,f25091,f25092,f25093,f25094,f25095,f25096,f25097,f25098,f25099,f25100,f25101,f25102,f25103,f25104,f25105,f25106,f25107,f25108,f25109,f25110,f25111,f25112,f25113,f25114,f25115,f25116,f25117,f25118,f25119,f25120,f25121,f25122,f25123,f25124,f25125,f25126,f25127,f25128,f25129,f25130,f25131,f25132,f25133,f25134,f25135,f25136,f25137,f25138,f25139,f25140,f25141,f25142,f25143,f25144,f25145,f25146,f25147])).
fof(f25147,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(global_subsumption,[],[f401,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f24327,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f398,f396,f386])).
fof(f24342,plain,(
  ( ! [X0] : (sP2(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f301])).
fof(f24356,plain,(
  ~sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f316])).
fof(f24367,plain,(
  ~sP4('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f320])).
fof(f24399,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f417,f396,f335])).
fof(f24400,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f417,f396,f335])).
fof(f24405,plain,(
  sP8('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f417,f396,f335])).
fof(f24406,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f417,f396,f335])).
fof(f24411,plain,(
  ~sP7('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f339])).
fof(f24422,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f223,f396,f345])).
fof(f24424,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f396,f345])).
fof(f24427,plain,(
  sP8('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f223,f396,f345])).
fof(f24428,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f223,f396,f345])).
fof(f24436,plain,(
  ~sP8('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f348])).
fof(f24471,plain,(
  ( ! [X0] : (sP10('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f361])).
fof(f24477,plain,(
  ( ! [X0] : (sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f362])).
fof(f24508,plain,(
  ~sP11('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f223,f396,f373])).
fof(f24523,plain,(
  ( ! [X0] : (sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f379])).
fof(f24528,plain,(
  ~sP12('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f380])).
fof(f24596,plain,(
  ( ! [X0] : (sP2(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f427,f427,f396,f2088])).
fof(f24601,plain,(
  ~sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2090])).
fof(f24610,plain,(
  ~sP4('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2091])).
fof(f24619,plain,(
  ~sP7('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2092])).
fof(f24628,plain,(
  sP8('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f396,f2093])).
fof(f24629,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f427,f427,f396,f2093])).
fof(f24634,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f396,f2093])).
fof(f24635,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f427,f427,f396,f2093])).
fof(f24640,plain,(
  ~sP8('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2094])).
fof(f24645,plain,(
  ( ! [X0] : (sP10('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f427,f427,f396,f2096])).
fof(f24653,plain,(
  ( ! [X0] : (sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f427,f427,f396,f2097])).
fof(f24661,plain,(
  ~sP11('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2099])).
fof(f24670,plain,(
  ( ! [X0] : (sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f427,f427,f396,f2101])).
fof(f24675,plain,(
  ~sP12('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f396,f2102])).
fof(f24824,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | p(s(bool,X0))) ) | $spl0),
  inference(condensation,[],[f24823])).
fof(f24823,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(condensation,[],[f24822])).
fof(f24822,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X25)) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f24737,f1747])).
fof(f24737,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X25)) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(superposition,[],[f396,f1645])).
fof(f25004,plain,(
  ( ! [X24,X23,X22] : (p(s(bool,X22)) | s(bool,X23) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(subsumption_resolution,[],[f24736,f237])).
fof(f24736,plain,(
  ( ! [X24,X23,X22] : (p(s(bool,X22)) | s(bool,X23) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f396,f1645])).
fof(f24820,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | p(s(bool,X0))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f24819])).
fof(f24819,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(condensation,[],[f24818])).
fof(f24818,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X13)) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(subsumption_resolution,[],[f24733,f1747])).
fof(f24733,plain,(
  ( ! [X14,X15,X13] : (p(s(bool,X13)) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f396,f1645])).
fof(f24813,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(condensation,[],[f24812])).
fof(f24812,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f24728,f238])).
fof(f24728,plain,(
  ( ! [X2] : (p(s(bool,X2)) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f396,f524])).
fof(f24810,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(condensation,[],[f24809])).
fof(f24809,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f24727,f238])).
fof(f24727,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(superposition,[],[f396,f524])).
fof(f24807,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(subsumption_resolution,[],[f24725,f404])).
fof(f24725,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(superposition,[],[f396,f230])).
fof(f24328,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f238])).
fof(f24330,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f268])).
fof(f24332,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f268])).
fof(f24594,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f427,f427,f396,f2083])).
fof(f24336,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f289])).
fof(f24338,plain,(
  ~sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f289])).
fof(f24815,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X10)) | s(bool,X11) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(subsumption_resolution,[],[f24732,f237])).
fof(f24732,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X10)) | s(bool,X11) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(superposition,[],[f396,f1645])).
fof(f24326,plain,(
  p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f398,f396,f385])).
fof(f24329,plain,(
  s(bool,'F_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f241])).
fof(f24334,plain,(
  ( ! [X0] : (sP0(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f274])).
fof(f24335,plain,(
  ( ! [X0] : (sP0('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f275])).
fof(f24339,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f289])).
fof(f24340,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f290])).
fof(f24341,plain,(
  sP1('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f293])).
fof(f24345,plain,(
  ( ! [X0] : (sP2(X0,'T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f301])).
fof(f24346,plain,(
  ( ! [X0] : (sP2(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f301])).
fof(f24350,plain,(
  ~sP6('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f312])).
fof(f24351,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f312])).
fof(f24352,plain,(
  sP6('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f408,f396,f313])).
fof(f24361,plain,(
  ~sP5('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f316])).
fof(f24362,plain,(
  ~sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f316])).
fof(f24366,plain,(
  ( ! [X0,X1] : (sP5(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f317])).
fof(f24372,plain,(
  ~sP4('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f320])).
fof(f24373,plain,(
  ~sP4('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f320])).
fof(f24377,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f321])).
fof(f24378,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f325])).
fof(f24379,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f326])).
fof(f24380,plain,(
  ( ! [X0,X1] : (sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f327])).
fof(f24393,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f427,f396,f330])).
fof(f24395,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f427,f396,f330])).
fof(f24397,plain,(
  ( ! [X0] : (~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f333])).
fof(f24398,plain,(
  ( ! [X0] : (~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f334])).
fof(f24416,plain,(
  ~sP7('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f339])).
fof(f24417,plain,(
  ~sP7('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f339])).
fof(f24421,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f340])).
fof(f24432,plain,(
  sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f223,f396,f345])).
fof(f24433,plain,(
  sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f396,f223,f396,f345])).
fof(f24434,plain,(
  sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f396,f396,f345])).
fof(f24435,plain,(
  sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f396,f345])).
fof(f24439,plain,(
  ~sP8('F_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f348])).
fof(f24440,plain,(
  ~sP8('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f348])).
fof(f24442,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f349])).
fof(f24451,plain,(
  ( ! [X0] : (~sP10('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f350])).
fof(f24464,plain,(
  ~sP9('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f404,f396,f356])).
fof(f24469,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f357])).
fof(f24470,plain,(
  ( ! [X0,X1] : (sP9(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f358])).
fof(f24476,plain,(
  ( ! [X0] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f361])).
fof(f24482,plain,(
  ( ! [X0] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f362])).
fof(f24483,plain,(
  ~sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f404,f404,f396,f363])).
fof(f24484,plain,(
  ( ! [X0] : (~sP12('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f367])).
fof(f24513,plain,(
  ~sP11('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f223,f396,f373])).
fof(f24514,plain,(
  ~sP11('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f396,f396,f373])).
fof(f24518,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f375])).
fof(f24519,plain,(
  sP12('F_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f404,f404,f396,f377])).
fof(f24527,plain,(
  ( ! [X0] : (sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f396,f379])).
fof(f24532,plain,(
  ~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f223,f404,f396,f380])).
fof(f24533,plain,(
  ~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f404,f396,f380])).
fof(f24534,plain,(
  ( ! [X0] : (sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f423,f396,f387])).
fof(f24535,plain,(
  ( ! [X0] : (sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f424,f396,f387])).
fof(f24537,plain,(
  ( ! [X0] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f420,f396,f388])).
fof(f24539,plain,(
  ( ! [X0] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f421,f396,f388])).
fof(f24541,plain,(
  ( ! [X0,X1] : (sP2('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0,X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f396,f390])).
fof(f23663,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X6))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9),s('type.typeSystem.tenv_val',X10)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X6),s('type.typeSystem.tenv_val',X10))))))) ) | $spl2),
  inference(superposition,[],[f386,f398])).
fof(f23662,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X0))) | p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X0)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X0),s('type.typeSystem.tenv_val',X5))))))) ) | $spl2),
  inference(superposition,[],[f385,f398])).
fof(f22898,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,X58) = s(bool,g(s(X55,sK20(X56,X57,bool,X55)))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,X60) | s(bool,X60) = s(bool,f(s(X55,sK20(X56,X57,bool,X55)))) | s(bool,X59) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(trivial_inequality_removal,[],[f22891])).
fof(f22891,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,X58) = s(bool,g(s(X55,sK20(X56,X57,bool,X55)))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,X60) | s(bool,X60) = s(bool,f(s(X55,sK20(X56,X57,bool,X55)))) | s(bool,X59) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f1816,f1645])).
fof(f22900,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK20(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK20(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(trivial_inequality_removal,[],[f22883])).
fof(f22883,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK20(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK20(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1816,f524])).
fof(f22388,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,X4) = s(bool,sK20(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f1815,f1645])).
fof(f22280,plain,(
  ( ! [X222,X220,X225,X223,X221,X224] : (p(s(bool,X223)) | ~sP12(X224,X223,g(s(X220,sK20(X221,X222,bool,X220)))) | s(bool,X224) = s(bool,X225) | s(bool,'T_0') = s(bool,X225) | s(fun(X220,bool),X221) = s(fun(X220,bool),X222) | s(bool,'T_0') = s(bool,f(s(X220,sK20(X221,X222,bool,X220))))) )),
  inference(subsumption_resolution,[],[f22210,f223])).
fof(f22210,plain,(
  ( ! [X222,X220,X225,X223,X221,X224] : (~p(s(bool,'T_0')) | p(s(bool,X223)) | ~sP12(X224,X223,g(s(X220,sK20(X221,X222,bool,X220)))) | s(bool,X224) = s(bool,X225) | s(bool,'T_0') = s(bool,X225) | s(fun(X220,bool),X221) = s(fun(X220,bool),X222) | s(bool,'T_0') = s(bool,f(s(X220,sK20(X221,X222,bool,X220))))) )),
  inference(superposition,[],[f2102,f3044])).
fof(f22279,plain,(
  ( ! [X127,X125,X128,X126,X129] : (~sP9(g(s(X125,sK20(X126,X127,bool,X125))),X128,X129) | sP10(g(s(X125,sK20(X126,X127,bool,X125))),X128,X129) | s(fun(X125,bool),X126) = s(fun(X125,bool),X127) | s(bool,'T_0') = s(bool,f(s(X125,sK20(X126,X127,bool,X125))))) )),
  inference(subsumption_resolution,[],[f22193,f223])).
fof(f22193,plain,(
  ( ! [X127,X125,X128,X126,X129] : (~p(s(bool,'T_0')) | ~sP9(g(s(X125,sK20(X126,X127,bool,X125))),X128,X129) | sP10(g(s(X125,sK20(X126,X127,bool,X125))),X128,X129) | s(fun(X125,bool),X126) = s(fun(X125,bool),X127) | s(bool,'T_0') = s(bool,f(s(X125,sK20(X126,X127,bool,X125))))) )),
  inference(superposition,[],[f388,f3044])).
fof(f22278,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~sP11(g(s(X120,sK20(X121,X122,bool,X120))),X123,X124) | sP12(g(s(X120,sK20(X121,X122,bool,X120))),X123,X124) | s(fun(X120,bool),X121) = s(fun(X120,bool),X122) | s(bool,'T_0') = s(bool,f(s(X120,sK20(X121,X122,bool,X120))))) )),
  inference(subsumption_resolution,[],[f22192,f223])).
fof(f22192,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,'T_0')) | ~sP11(g(s(X120,sK20(X121,X122,bool,X120))),X123,X124) | sP12(g(s(X120,sK20(X121,X122,bool,X120))),X123,X124) | s(fun(X120,bool),X121) = s(fun(X120,bool),X122) | s(bool,'T_0') = s(bool,f(s(X120,sK20(X121,X122,bool,X120))))) )),
  inference(superposition,[],[f387,f3044])).
fof(f22277,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,X118)) | p(s(bool,X119)) | ~sP12(g(s(X115,sK20(X116,X117,bool,X115))),X119,X118) | s(fun(X115,bool),X116) = s(fun(X115,bool),X117) | s(bool,'T_0') = s(bool,f(s(X115,sK20(X116,X117,bool,X115))))) )),
  inference(subsumption_resolution,[],[f22191,f223])).
fof(f22191,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,'T_0')) | ~p(s(bool,X118)) | p(s(bool,X119)) | ~sP12(g(s(X115,sK20(X116,X117,bool,X115))),X119,X118) | s(fun(X115,bool),X116) = s(fun(X115,bool),X117) | s(bool,'T_0') = s(bool,f(s(X115,sK20(X116,X117,bool,X115))))) )),
  inference(superposition,[],[f380,f3044])).
fof(f22276,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,X113)) | sP12(g(s(X110,sK20(X111,X112,bool,X110))),X113,X114) | s(fun(X110,bool),X111) = s(fun(X110,bool),X112) | s(bool,'T_0') = s(bool,f(s(X110,sK20(X111,X112,bool,X110))))) )),
  inference(subsumption_resolution,[],[f22190,f223])).
fof(f22190,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X113)) | sP12(g(s(X110,sK20(X111,X112,bool,X110))),X113,X114) | s(fun(X110,bool),X111) = s(fun(X110,bool),X112) | s(bool,'T_0') = s(bool,f(s(X110,sK20(X111,X112,bool,X110))))) )),
  inference(superposition,[],[f379,f3044])).
fof(f22275,plain,(
  ( ! [X109,X107,X105,X108,X106] : (p(s(bool,X108)) | sP12(g(s(X105,sK20(X106,X107,bool,X105))),X109,X108) | s(fun(X105,bool),X106) = s(fun(X105,bool),X107) | s(bool,'T_0') = s(bool,f(s(X105,sK20(X106,X107,bool,X105))))) )),
  inference(subsumption_resolution,[],[f22189,f223])).
fof(f22189,plain,(
  ( ! [X109,X107,X105,X108,X106] : (~p(s(bool,'T_0')) | p(s(bool,X108)) | sP12(g(s(X105,sK20(X106,X107,bool,X105))),X109,X108) | s(fun(X105,bool),X106) = s(fun(X105,bool),X107) | s(bool,'T_0') = s(bool,f(s(X105,sK20(X106,X107,bool,X105))))) )),
  inference(superposition,[],[f378,f3044])).
fof(f22274,plain,(
  ( ! [X103,X101,X102,X100,X104] : (p(s(bool,X103)) | ~p(s(bool,X104)) | ~sP11(X104,X103,g(s(X100,sK20(X101,X102,bool,X100)))) | s(fun(X100,bool),X101) = s(fun(X100,bool),X102) | s(bool,'T_0') = s(bool,f(s(X100,sK20(X101,X102,bool,X100))))) )),
  inference(subsumption_resolution,[],[f22188,f223])).
fof(f22188,plain,(
  ( ! [X103,X101,X102,X100,X104] : (~p(s(bool,'T_0')) | p(s(bool,X103)) | ~p(s(bool,X104)) | ~sP11(X104,X103,g(s(X100,sK20(X101,X102,bool,X100)))) | s(fun(X100,bool),X101) = s(fun(X100,bool),X102) | s(bool,'T_0') = s(bool,f(s(X100,sK20(X101,X102,bool,X100))))) )),
  inference(superposition,[],[f373,f3044])).
fof(f22273,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,X98)) | p(s(bool,X99)) | ~sP10(g(s(X95,sK20(X96,X97,bool,X95))),X99,X98) | s(fun(X95,bool),X96) = s(fun(X95,bool),X97) | s(bool,'T_0') = s(bool,f(s(X95,sK20(X96,X97,bool,X95))))) )),
  inference(subsumption_resolution,[],[f22187,f223])).
fof(f22187,plain,(
  ( ! [X99,X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X98)) | p(s(bool,X99)) | ~sP10(g(s(X95,sK20(X96,X97,bool,X95))),X99,X98) | s(fun(X95,bool),X96) = s(fun(X95,bool),X97) | s(bool,'T_0') = s(bool,f(s(X95,sK20(X96,X97,bool,X95))))) )),
  inference(superposition,[],[f363,f3044])).
fof(f22272,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,X93)) | sP10(g(s(X90,sK20(X91,X92,bool,X90))),X93,X94) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'T_0') = s(bool,f(s(X90,sK20(X91,X92,bool,X90))))) )),
  inference(subsumption_resolution,[],[f22186,f223])).
fof(f22186,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,X93)) | sP10(g(s(X90,sK20(X91,X92,bool,X90))),X93,X94) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'T_0') = s(bool,f(s(X90,sK20(X91,X92,bool,X90))))) )),
  inference(superposition,[],[f362,f3044])).
fof(f22271,plain,(
  ( ! [X88,X87,X85,X89,X86] : (~p(s(bool,X88)) | sP10(g(s(X85,sK20(X86,X87,bool,X85))),X89,X88) | s(fun(X85,bool),X86) = s(fun(X85,bool),X87) | s(bool,'T_0') = s(bool,f(s(X85,sK20(X86,X87,bool,X85))))) )),
  inference(subsumption_resolution,[],[f22185,f223])).
fof(f22185,plain,(
  ( ! [X88,X87,X85,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,X88)) | sP10(g(s(X85,sK20(X86,X87,bool,X85))),X89,X88) | s(fun(X85,bool),X86) = s(fun(X85,bool),X87) | s(bool,'T_0') = s(bool,f(s(X85,sK20(X86,X87,bool,X85))))) )),
  inference(superposition,[],[f361,f3044])).
fof(f22270,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,X83)) | p(s(bool,X84)) | ~sP9(g(s(X80,sK20(X81,X82,bool,X80))),X83,X84) | s(fun(X80,bool),X81) = s(fun(X80,bool),X82) | s(bool,'T_0') = s(bool,f(s(X80,sK20(X81,X82,bool,X80))))) )),
  inference(subsumption_resolution,[],[f22184,f223])).
fof(f22184,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | p(s(bool,X84)) | ~sP9(g(s(X80,sK20(X81,X82,bool,X80))),X83,X84) | s(fun(X80,bool),X81) = s(fun(X80,bool),X82) | s(bool,'T_0') = s(bool,f(s(X80,sK20(X81,X82,bool,X80))))) )),
  inference(superposition,[],[f356,f3044])).
fof(f22269,plain,(
  ( ! [X78,X76,X79,X77,X75] : (~p(s(bool,X78)) | p(s(bool,X79)) | ~sP8(X79,X78,g(s(X75,sK20(X76,X77,bool,X75)))) | s(fun(X75,bool),X76) = s(fun(X75,bool),X77) | s(bool,'T_0') = s(bool,f(s(X75,sK20(X76,X77,bool,X75))))) )),
  inference(subsumption_resolution,[],[f22183,f223])).
fof(f22183,plain,(
  ( ! [X78,X76,X79,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,X78)) | p(s(bool,X79)) | ~sP8(X79,X78,g(s(X75,sK20(X76,X77,bool,X75)))) | s(fun(X75,bool),X76) = s(fun(X75,bool),X77) | s(bool,'T_0') = s(bool,f(s(X75,sK20(X76,X77,bool,X75))))) )),
  inference(superposition,[],[f348,f3044])).
fof(f22268,plain,(
  ( ! [X70,X74,X72,X71,X73] : (~p(s(bool,X73)) | ~p(s(bool,X74)) | sP8(g(s(X70,sK20(X71,X72,bool,X70))),X73,X74) | s(fun(X70,bool),X71) = s(fun(X70,bool),X72) | s(bool,'T_0') = s(bool,f(s(X70,sK20(X71,X72,bool,X70))))) )),
  inference(subsumption_resolution,[],[f22182,f223])).
fof(f22182,plain,(
  ( ! [X70,X74,X72,X71,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X73)) | ~p(s(bool,X74)) | sP8(g(s(X70,sK20(X71,X72,bool,X70))),X73,X74) | s(fun(X70,bool),X71) = s(fun(X70,bool),X72) | s(bool,'T_0') = s(bool,f(s(X70,sK20(X71,X72,bool,X70))))) )),
  inference(superposition,[],[f345,f3044])).
fof(f22267,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X68,g(s(X65,sK20(X66,X67,bool,X65))),X69) | s(fun(X65,bool),X66) = s(fun(X65,bool),X67) | s(bool,'T_0') = s(bool,f(s(X65,sK20(X66,X67,bool,X65))))) )),
  inference(subsumption_resolution,[],[f22181,f223])).
fof(f22181,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X68,g(s(X65,sK20(X66,X67,bool,X65))),X69) | s(fun(X65,bool),X66) = s(fun(X65,bool),X67) | s(bool,'T_0') = s(bool,f(s(X65,sK20(X66,X67,bool,X65))))) )),
  inference(superposition,[],[f339,f3044])).
fof(f22266,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,X63)) | p(s(bool,X64)) | ~sP4(X63,g(s(X60,sK20(X61,X62,bool,X60))),X64) | s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,'T_0') = s(bool,f(s(X60,sK20(X61,X62,bool,X60))))) )),
  inference(subsumption_resolution,[],[f22180,f223])).
fof(f22180,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X63)) | p(s(bool,X64)) | ~sP4(X63,g(s(X60,sK20(X61,X62,bool,X60))),X64) | s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,'T_0') = s(bool,f(s(X60,sK20(X61,X62,bool,X60))))) )),
  inference(superposition,[],[f320,f3044])).
fof(f22265,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~p(s(bool,X58)) | p(s(bool,X59)) | ~sP5(X58,g(s(X55,sK20(X56,X57,bool,X55))),X59) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,f(s(X55,sK20(X56,X57,bool,X55))))) )),
  inference(subsumption_resolution,[],[f22179,f223])).
fof(f22179,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X58)) | p(s(bool,X59)) | ~sP5(X58,g(s(X55,sK20(X56,X57,bool,X55))),X59) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,f(s(X55,sK20(X56,X57,bool,X55))))) )),
  inference(superposition,[],[f316,f3044])).
fof(f22264,plain,(
  ( ! [X54,X52,X50,X53,X51] : (sP6(X53,X54,g(s(X50,sK20(X51,X52,bool,X50)))) | ~sP5(X53,g(s(X50,sK20(X51,X52,bool,X50))),X54) | ~sP4(X54,g(s(X50,sK20(X51,X52,bool,X50))),X53) | ~sP3(g(s(X50,sK20(X51,X52,bool,X50))),X54,X53) | s(fun(X50,bool),X51) = s(fun(X50,bool),X52) | s(bool,'T_0') = s(bool,f(s(X50,sK20(X51,X52,bool,X50))))) )),
  inference(subsumption_resolution,[],[f22178,f223])).
fof(f22178,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | sP6(X53,X54,g(s(X50,sK20(X51,X52,bool,X50)))) | ~sP5(X53,g(s(X50,sK20(X51,X52,bool,X50))),X54) | ~sP4(X54,g(s(X50,sK20(X51,X52,bool,X50))),X53) | ~sP3(g(s(X50,sK20(X51,X52,bool,X50))),X54,X53) | s(fun(X50,bool),X51) = s(fun(X50,bool),X52) | s(bool,'T_0') = s(bool,f(s(X50,sK20(X51,X52,bool,X50))))) )),
  inference(superposition,[],[f313,f3044])).
fof(f22263,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,X48)) | sP2(X49,X48,g(s(X45,sK20(X46,X47,bool,X45)))) | s(fun(X45,bool),X46) = s(fun(X45,bool),X47) | s(bool,'T_0') = s(bool,f(s(X45,sK20(X46,X47,bool,X45))))) )),
  inference(subsumption_resolution,[],[f22177,f223])).
fof(f22177,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X48)) | sP2(X49,X48,g(s(X45,sK20(X46,X47,bool,X45)))) | s(fun(X45,bool),X46) = s(fun(X45,bool),X47) | s(bool,'T_0') = s(bool,f(s(X45,sK20(X46,X47,bool,X45))))) )),
  inference(superposition,[],[f301,f3044])).
fof(f22262,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X44)) | sP1(X44,g(s(X41,sK20(X42,X43,bool,X41)))) | s(fun(X41,bool),X42) = s(fun(X41,bool),X43) | s(bool,'T_0') = s(bool,f(s(X41,sK20(X42,X43,bool,X41))))) )),
  inference(subsumption_resolution,[],[f22176,f223])).
fof(f22176,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | sP1(X44,g(s(X41,sK20(X42,X43,bool,X41)))) | s(fun(X41,bool),X42) = s(fun(X41,bool),X43) | s(bool,'T_0') = s(bool,f(s(X41,sK20(X42,X43,bool,X41))))) )),
  inference(superposition,[],[f293,f3044])).
fof(f22261,plain,(
  ( ! [X39,X37,X38,X40] : (p(s(bool,X40)) | sP1(g(s(X37,sK20(X38,X39,bool,X37))),X40) | s(fun(X37,bool),X38) = s(fun(X37,bool),X39) | s(bool,'T_0') = s(bool,f(s(X37,sK20(X38,X39,bool,X37))))) )),
  inference(subsumption_resolution,[],[f22175,f223])).
fof(f22175,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | p(s(bool,X40)) | sP1(g(s(X37,sK20(X38,X39,bool,X37))),X40) | s(fun(X37,bool),X38) = s(fun(X37,bool),X39) | s(bool,'T_0') = s(bool,f(s(X37,sK20(X38,X39,bool,X37))))) )),
  inference(superposition,[],[f290,f3044])).
fof(f22260,plain,(
  ( ! [X35,X33,X36,X34] : (sP0(g(s(X33,sK20(X34,X35,bool,X33))),X36) | s(fun(X33,bool),X34) = s(fun(X33,bool),X35) | s(bool,'T_0') = s(bool,f(s(X33,sK20(X34,X35,bool,X33))))) )),
  inference(subsumption_resolution,[],[f22174,f223])).
fof(f22174,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | sP0(g(s(X33,sK20(X34,X35,bool,X33))),X36) | s(fun(X33,bool),X34) = s(fun(X33,bool),X35) | s(bool,'T_0') = s(bool,f(s(X33,sK20(X34,X35,bool,X33))))) )),
  inference(superposition,[],[f275,f3044])).
fof(f22259,plain,(
  ( ! [X30,X31,X29,X32] : (sP0(X32,g(s(X29,sK20(X30,X31,bool,X29)))) | s(fun(X29,bool),X30) = s(fun(X29,bool),X31) | s(bool,'T_0') = s(bool,f(s(X29,sK20(X30,X31,bool,X29))))) )),
  inference(subsumption_resolution,[],[f22173,f223])).
fof(f22173,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | sP0(X32,g(s(X29,sK20(X30,X31,bool,X29)))) | s(fun(X29,bool),X30) = s(fun(X29,bool),X31) | s(bool,'T_0') = s(bool,f(s(X29,sK20(X30,X31,bool,X29))))) )),
  inference(superposition,[],[f274,f3044])).
fof(f22258,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,X28)) | s(bool,X28) = s(bool,g(s(X25,sK20(X26,X27,bool,X25)))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,f(s(X25,sK20(X26,X27,bool,X25))))) )),
  inference(subsumption_resolution,[],[f22172,f223])).
fof(f22172,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X28)) | s(bool,X28) = s(bool,g(s(X25,sK20(X26,X27,bool,X25)))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,f(s(X25,sK20(X26,X27,bool,X25))))) )),
  inference(superposition,[],[f268,f3044])).
fof(f22257,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,g(s(X11,sK20(X12,X13,bool,X11)))) | s(fun(X11,bool),X12) = s(fun(X11,bool),X13) | s(bool,'T_0') = s(bool,f(s(X11,sK20(X12,X13,bool,X11))))) )),
  inference(subsumption_resolution,[],[f22168,f223])).
fof(f22168,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,g(s(X11,sK20(X12,X13,bool,X11)))) | s(fun(X11,bool),X12) = s(fun(X11,bool),X13) | s(bool,'T_0') = s(bool,f(s(X11,sK20(X12,X13,bool,X11))))) )),
  inference(superposition,[],[f241,f3044])).
fof(f22232,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,g(s(X5,sK20(X6,X7,bool,X5))))) | s(fun(X5,bool),X6) = s(fun(X5,bool),X7) | s(bool,'T_0') = s(bool,f(s(X5,sK20(X6,X7,bool,X5))))) )),
  inference(trivial_inequality_removal,[],[f22166])).
fof(f22166,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,g(s(X5,sK20(X6,X7,bool,X5))))) | s(fun(X5,bool),X6) = s(fun(X5,bool),X7) | s(bool,'T_0') = s(bool,f(s(X5,sK20(X6,X7,bool,X5))))) )),
  inference(superposition,[],[f237,f3044])).
fof(f22244,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,f(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK20(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f22243])).
fof(f22243,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X37) | s(fun(X34,bool),X35) = s(fun(X34,bool),X36) | s(bool,'T_0') = s(bool,f(s(X34,sK20(X35,X36,bool,X34)))) | s(bool,X38) = s(bool,g(s(X34,sK20(X35,X36,bool,X34)))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(duplicate_literal_removal,[],[f22159])).
fof(f22159,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') = s(bool,X37) | s(fun(X34,bool),X35) = s(fun(X34,bool),X36) | s(bool,'T_0') = s(bool,f(s(X34,sK20(X35,X36,bool,X34)))) | s(bool,X38) = s(bool,g(s(X34,sK20(X35,X36,bool,X34)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f3044,f1645])).
fof(f241,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.bool.EQ_CLAUSES|split|3')).
fof(f242,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f153])).
fof(f404,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f226,f223])).
fof(f226,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f16])).
fof(f16,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.bool.NOT_CLAUSES|split|2')).
fof(f1037,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK20(X0,X1,X2,bool))) )),
  inference(superposition,[],[f298,f230])).
fof(f1038,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK20(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f298,f230])).
fof(f1705,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,X139) != s(bool,f(s(X136,sK20(X137,X138,bool,X136)))) | s(fun(X136,bool),X137) = s(fun(X136,bool),X138) | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,g(s(X136,sK20(X137,X138,bool,X136))))) )),
  inference(superposition,[],[f298,f524])).
fof(f1816,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,'T_0') != s(bool,f(s(X132,sK20(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,X135) = s(bool,g(s(X132,sK20(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f298,f524])).
fof(f3044,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK20(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f3043])).
fof(f3043,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK20(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK20(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f3036,f230])).
fof(f3036,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') != s(bool,X11) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK20(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK20(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1038,f524])).
fof(f12108,plain,(
  ( ! [X1081,X1085,X1082,X1080,X1084,X1083] : (s(bool,X1083) != s(bool,f(s(X1080,sK20(X1081,X1082,bool,X1080)))) | s(fun(X1080,bool),X1081) = s(fun(X1080,bool),X1082) | s(bool,X1083) = s(bool,X1084) | s(bool,'T_0') = s(bool,X1084) | s(bool,X1085) = s(bool,g(s(X1080,sK20(X1081,X1082,bool,X1080)))) | s(bool,'T_0') = s(bool,X1085)) )),
  inference(superposition,[],[f298,f1645])).
fof(f12626,plain,(
  ( ! [X1081,X1085,X1082,X1080,X1084,X1083] : (s(bool,X1083) != s(bool,f(s(X1080,sK20(X1081,X1082,bool,X1080)))) | s(fun(X1080,bool),X1081) = s(fun(X1080,bool),X1082) | s(bool,X1084) = s(bool,g(s(X1080,sK20(X1081,X1082,bool,X1080)))) | s(bool,'T_0') = s(bool,X1083) | s(bool,X1084) = s(bool,X1085) | s(bool,'T_0') = s(bool,X1085)) )),
  inference(superposition,[],[f298,f1645])).
fof(f12885,plain,(
  ( ! [X994,X998,X996,X995,X999,X997] : (s(bool,X997) != s(bool,f(s(X994,sK20(X995,X996,bool,X994)))) | s(fun(X994,bool),X995) = s(fun(X994,bool),X996) | s(bool,X997) = s(bool,X998) | s(bool,'T_0') = s(bool,g(s(X994,sK20(X995,X996,bool,X994)))) | s(bool,X998) = s(bool,X999) | s(bool,'T_0') = s(bool,X999)) )),
  inference(superposition,[],[f298,f1645])).
fof(f13305,plain,(
  ( ! [X1054,X1052,X1056,X1055,X1053,X1057] : (s(bool,'T_0') != s(bool,f(s(X1052,sK20(X1053,X1054,bool,X1052)))) | s(fun(X1052,bool),X1053) = s(fun(X1052,bool),X1054) | s(bool,X1055) = s(bool,X1056) | s(bool,X1056) = s(bool,g(s(X1052,sK20(X1053,X1054,bool,X1052)))) | s(bool,X1055) = s(bool,X1057) | s(bool,'T_0') = s(bool,X1057)) )),
  inference(superposition,[],[f298,f1645])).
fof(f16854,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK20(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16853])).
fof(f16853,plain,(
  ( ! [X1011,X1009,X1010,X1008,X1012,X1007] : (s(fun(X1007,bool),X1008) = s(fun(X1007,bool),X1009) | s(bool,'T_0') = s(bool,g(s(X1007,sK20(X1008,X1009,bool,X1007)))) | s(bool,X1011) = s(bool,f(s(X1007,sK20(X1008,X1009,bool,X1007)))) | s(bool,'T_0') = s(bool,X1010) | s(bool,X1011) = s(bool,X1012) | s(bool,'T_0') = s(bool,X1012)) )),
  inference(subsumption_resolution,[],[f12612,f230])).
fof(f12612,plain,(
  ( ! [X1011,X1009,X1010,X1008,X1012,X1007] : (s(bool,'F_0') != s(bool,X1010) | s(fun(X1007,bool),X1008) = s(fun(X1007,bool),X1009) | s(bool,'T_0') = s(bool,g(s(X1007,sK20(X1008,X1009,bool,X1007)))) | s(bool,X1011) = s(bool,f(s(X1007,sK20(X1008,X1009,bool,X1007)))) | s(bool,'T_0') = s(bool,X1010) | s(bool,X1011) = s(bool,X1012) | s(bool,'T_0') = s(bool,X1012)) )),
  inference(superposition,[],[f1038,f1645])).
fof(f16936,plain,(
  ( ! [X1019,X1017,X1021,X1015,X1013,X1018,X1016,X1020,X1014,X1012] : (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1016),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1014))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X1017),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1018),s('type.typeSystem.tenv_val',X1015)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.num.num',X1017),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1016),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1018)))) | s(bool,X1019) = s(bool,X1020) | s(bool,X1020) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1014),s('type.typeSystem.tenv_val',X1015))) | s(bool,X1019) = s(bool,X1021) | s(bool,'T_0') = s(bool,X1021)) )),
  inference(subsumption_resolution,[],[f13300,f223])).
fof(f13300,plain,(
  ( ! [X1019,X1017,X1021,X1015,X1013,X1018,X1016,X1020,X1014,X1012] : (~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1016),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1014))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X1017),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1018),s('type.typeSystem.tenv_val',X1015)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.num.num',X1017),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1016),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1018)))) | s(bool,X1019) = s(bool,X1020) | s(bool,X1020) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1012),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1013),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1014),s('type.typeSystem.tenv_val',X1015))) | s(bool,X1019) = s(bool,X1021) | s(bool,'T_0') = s(bool,X1021)) )),
  inference(superposition,[],[f383,f1645])).
fof(f2105,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X115,X113] : (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X113),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X111))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X114),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X115),s('type.typeSystem.tenv_val',X112)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.num.num',X114),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X113),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X115)))) | s(bool,X116) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X111),s('type.typeSystem.tenv_val',X112))) | s(bool,'T_0') = s(bool,X116)) )),
  inference(subsumption_resolution,[],[f1813,f223])).
fof(f1813,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X115,X113] : (~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X113),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X111))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X114),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X115),s('type.typeSystem.tenv_val',X112)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.num.num',X114),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X113),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X115)))) | s(bool,X116) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X109),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X110),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X111),s('type.typeSystem.tenv_val',X112))) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f383,f524])).
fof(f386,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3))))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) | (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(ennf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) => (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10),s('type.typeSystem.tenv_val',X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8)))) => (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7),s('type.typeSystem.tenv_val',X9))))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.typeSound.typeSound_24_prove_ltb')).
fof(f383,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))) | (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))) | (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))))),
  inference(ennf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))) => (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7),s('type.typeSystem.tenv_val',X9))))) => (p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10),s('type.typeSystem.tenv_val',X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8)))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.typeSound.typeSound_23_prove_ltb')).
fof(f385,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3))))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f384,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f2106,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X121))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X122))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X117),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X118),s('type.num.num',X123),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X122),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X121)))) | s(bool,X124) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X117),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X118),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X119),s('type.typeSystem.tenv_val',X120))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(subsumption_resolution,[],[f1814,f223])).
fof(f1814,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119,X117] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X121))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X122))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X117),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X118),s('type.num.num',X123),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X122),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X121)))) | s(bool,X124) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X117),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X118),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X119),s('type.typeSystem.tenv_val',X120))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f384,f524])).
fof(f16937,plain,(
  ( ! [X1023,X1027,X1025,X1031,X1029,X1022,X1026,X1024,X1030,X1028] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1026))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1027))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1022),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1023),s('type.num.num',X1028),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1027),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1026)))) | s(bool,X1029) = s(bool,X1030) | s(bool,X1030) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1022),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1023),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1024),s('type.typeSystem.tenv_val',X1025))) | s(bool,X1029) = s(bool,X1031) | s(bool,'T_0') = s(bool,X1031)) )),
  inference(subsumption_resolution,[],[f13301,f223])).
fof(f13301,plain,(
  ( ! [X1023,X1027,X1025,X1031,X1029,X1022,X1026,X1024,X1030,X1028] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1026))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1027))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1022),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1023),s('type.num.num',X1028),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1027),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X1026)))) | s(bool,X1029) = s(bool,X1030) | s(bool,X1030) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1022),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1023),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1024),s('type.typeSystem.tenv_val',X1025))) | s(bool,X1029) = s(bool,X1031) | s(bool,'T_0') = s(bool,X1031)) )),
  inference(superposition,[],[f384,f1645])).
fof(f14283,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f1645])).
fof(f17002,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f14276,f524])).
fof(f14276,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f1645])).
fof(f13303,plain,(
  ( ! [X1042,X1046,X1044,X1043,X1041,X1045] : (s(X1043,f(s(bool,'T_0'))) != s(X1043,g(s(bool,'T_0'))) | s(fun(bool,X1043),X1041) = s(fun(bool,X1043),X1042) | s(bool,X1044) = s(bool,X1045) | s(bool,X1045) = s(bool,sK20(X1041,X1042,X1043,bool)) | s(bool,X1044) = s(bool,X1046) | s(bool,'T_0') = s(bool,X1046)) )),
  inference(superposition,[],[f298,f1645])).
fof(f16932,plain,(
  ( ! [X212,X216,X215,X213,X211,X217,X214] : (p(s(bool,X212)) | ~sP12(X213,X212,X211) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,X215) = s(bool,X216) | s(bool,X211) = s(bool,X216) | s(bool,X215) = s(bool,X217) | s(bool,'T_0') = s(bool,X217)) )),
  inference(subsumption_resolution,[],[f13094,f223])).
fof(f13094,plain,(
  ( ! [X212,X216,X215,X213,X211,X217,X214] : (~p(s(bool,'T_0')) | p(s(bool,X212)) | ~sP12(X213,X212,X211) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,X215) = s(bool,X216) | s(bool,X211) = s(bool,X216) | s(bool,X215) = s(bool,X217) | s(bool,'T_0') = s(bool,X217)) )),
  inference(superposition,[],[f2102,f1645])).
fof(f16931,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (~sP9(X151,X152,X153) | sP10(X151,X152,X153) | s(bool,X154) = s(bool,X155) | s(bool,X151) = s(bool,X155) | s(bool,X154) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) )),
  inference(subsumption_resolution,[],[f13083,f223])).
fof(f13083,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (~p(s(bool,'T_0')) | ~sP9(X151,X152,X153) | sP10(X151,X152,X153) | s(bool,X154) = s(bool,X155) | s(bool,X151) = s(bool,X155) | s(bool,X154) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) )),
  inference(superposition,[],[f388,f1645])).
fof(f16930,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (~sP11(X145,X146,X147) | sP12(X145,X146,X147) | s(bool,X148) = s(bool,X149) | s(bool,X145) = s(bool,X149) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(subsumption_resolution,[],[f13082,f223])).
fof(f13082,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | ~sP11(X145,X146,X147) | sP12(X145,X146,X147) | s(bool,X148) = s(bool,X149) | s(bool,X145) = s(bool,X149) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f387,f1645])).
fof(f16929,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (~p(s(bool,X140)) | p(s(bool,X141)) | ~sP12(X139,X141,X140) | s(bool,X142) = s(bool,X143) | s(bool,X139) = s(bool,X143) | s(bool,X142) = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) )),
  inference(subsumption_resolution,[],[f13081,f223])).
fof(f13081,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~p(s(bool,X140)) | p(s(bool,X141)) | ~sP12(X139,X141,X140) | s(bool,X142) = s(bool,X143) | s(bool,X139) = s(bool,X143) | s(bool,X142) = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) )),
  inference(superposition,[],[f380,f1645])).
fof(f16928,plain,(
  ( ! [X134,X138,X136,X135,X133,X137] : (~p(s(bool,X134)) | sP12(X133,X134,X135) | s(bool,X136) = s(bool,X137) | s(bool,X133) = s(bool,X137) | s(bool,X136) = s(bool,X138) | s(bool,'T_0') = s(bool,X138)) )),
  inference(subsumption_resolution,[],[f13080,f223])).
fof(f13080,plain,(
  ( ! [X134,X138,X136,X135,X133,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,X134)) | sP12(X133,X134,X135) | s(bool,X136) = s(bool,X137) | s(bool,X133) = s(bool,X137) | s(bool,X136) = s(bool,X138) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f379,f1645])).
fof(f16927,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (p(s(bool,X128)) | sP12(X127,X129,X128) | s(bool,X130) = s(bool,X131) | s(bool,X127) = s(bool,X131) | s(bool,X130) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(subsumption_resolution,[],[f13079,f223])).
fof(f13079,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X128)) | sP12(X127,X129,X128) | s(bool,X130) = s(bool,X131) | s(bool,X127) = s(bool,X131) | s(bool,X130) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(superposition,[],[f378,f1645])).
fof(f16926,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (p(s(bool,X122)) | ~p(s(bool,X123)) | ~sP11(X123,X122,X121) | s(bool,X124) = s(bool,X125) | s(bool,X121) = s(bool,X125) | s(bool,X124) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(subsumption_resolution,[],[f13078,f223])).
fof(f13078,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | p(s(bool,X122)) | ~p(s(bool,X123)) | ~sP11(X123,X122,X121) | s(bool,X124) = s(bool,X125) | s(bool,X121) = s(bool,X125) | s(bool,X124) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(superposition,[],[f373,f1645])).
fof(f16925,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (p(s(bool,X116)) | p(s(bool,X117)) | ~sP10(X115,X117,X116) | s(bool,X118) = s(bool,X119) | s(bool,X115) = s(bool,X119) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(subsumption_resolution,[],[f13077,f223])).
fof(f13077,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X116)) | p(s(bool,X117)) | ~sP10(X115,X117,X116) | s(bool,X118) = s(bool,X119) | s(bool,X115) = s(bool,X119) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f363,f1645])).
fof(f16924,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (~p(s(bool,X110)) | sP10(X109,X110,X111) | s(bool,X112) = s(bool,X113) | s(bool,X109) = s(bool,X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f13076,f223])).
fof(f13076,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X110)) | sP10(X109,X110,X111) | s(bool,X112) = s(bool,X113) | s(bool,X109) = s(bool,X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f362,f1645])).
fof(f16923,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,X104)) | sP10(X103,X105,X104) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(subsumption_resolution,[],[f13075,f223])).
fof(f13075,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X104)) | sP10(X103,X105,X104) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f361,f1645])).
fof(f16922,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (p(s(bool,X98)) | p(s(bool,X99)) | ~sP9(X97,X98,X99) | s(bool,X100) = s(bool,X101) | s(bool,X97) = s(bool,X101) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f13074,f223])).
fof(f13074,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X98)) | p(s(bool,X99)) | ~sP9(X97,X98,X99) | s(bool,X100) = s(bool,X101) | s(bool,X97) = s(bool,X101) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f356,f1645])).
fof(f16921,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP8(X93,X92,X91) | s(bool,X94) = s(bool,X95) | s(bool,X91) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f13073,f223])).
fof(f13073,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP8(X93,X92,X91) | s(bool,X94) = s(bool,X95) | s(bool,X91) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f348,f1645])).
fof(f16920,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,X86)) | ~p(s(bool,X87)) | sP8(X85,X86,X87) | s(bool,X88) = s(bool,X89) | s(bool,X85) = s(bool,X89) | s(bool,X88) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f13072,f223])).
fof(f13072,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,X86)) | ~p(s(bool,X87)) | sP8(X85,X86,X87) | s(bool,X88) = s(bool,X89) | s(bool,X85) = s(bool,X89) | s(bool,X88) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f345,f1645])).
fof(f16919,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,X80)) | p(s(bool,X81)) | ~sP7(X80,X79,X81) | s(bool,X82) = s(bool,X83) | s(bool,X79) = s(bool,X83) | s(bool,X82) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f13071,f223])).
fof(f13071,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | p(s(bool,X81)) | ~sP7(X80,X79,X81) | s(bool,X82) = s(bool,X83) | s(bool,X79) = s(bool,X83) | s(bool,X82) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f339,f1645])).
fof(f16918,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (~p(s(bool,X74)) | p(s(bool,X75)) | ~sP4(X74,X73,X75) | s(bool,X76) = s(bool,X77) | s(bool,X73) = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f13070,f223])).
fof(f13070,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X74)) | p(s(bool,X75)) | ~sP4(X74,X73,X75) | s(bool,X76) = s(bool,X77) | s(bool,X73) = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f320,f1645])).
fof(f16917,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP5(X68,X67,X69) | s(bool,X70) = s(bool,X71) | s(bool,X67) = s(bool,X71) | s(bool,X70) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f13069,f223])).
fof(f13069,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP5(X68,X67,X69) | s(bool,X70) = s(bool,X71) | s(bool,X67) = s(bool,X71) | s(bool,X70) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f316,f1645])).
fof(f16916,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (sP6(X62,X63,X61) | ~sP5(X62,X61,X63) | ~sP4(X63,X61,X62) | ~sP3(X61,X63,X62) | s(bool,X64) = s(bool,X65) | s(bool,X61) = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f13068,f223])).
fof(f13068,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | sP6(X62,X63,X61) | ~sP5(X62,X61,X63) | ~sP4(X63,X61,X62) | ~sP3(X61,X63,X62) | s(bool,X64) = s(bool,X65) | s(bool,X61) = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f313,f1645])).
fof(f16915,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,X56)) | sP2(X57,X56,X55) | s(bool,X58) = s(bool,X59) | s(bool,X55) = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f13067,f223])).
fof(f13067,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | sP2(X57,X56,X55) | s(bool,X58) = s(bool,X59) | s(bool,X55) = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f301,f1645])).
fof(f16914,plain,(
  ( ! [X54,X52,X50,X53,X51] : (p(s(bool,X51)) | sP1(X51,X50) | s(bool,X52) = s(bool,X53) | s(bool,X50) = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f13066,f223])).
fof(f13066,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | sP1(X51,X50) | s(bool,X52) = s(bool,X53) | s(bool,X50) = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f293,f1645])).
fof(f16913,plain,(
  ( ! [X47,X45,X48,X46,X49] : (p(s(bool,X46)) | sP1(X45,X46) | s(bool,X47) = s(bool,X48) | s(bool,X45) = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f13065,f223])).
fof(f13065,plain,(
  ( ! [X47,X45,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X46)) | sP1(X45,X46) | s(bool,X47) = s(bool,X48) | s(bool,X45) = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f290,f1645])).
fof(f16912,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | s(bool,X42) = s(bool,X43) | s(bool,X40) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f13064,f223])).
fof(f13064,plain,(
  ( ! [X43,X41,X44,X42,X40] : (~p(s(bool,'T_0')) | sP0(X40,X41) | s(bool,X42) = s(bool,X43) | s(bool,X40) = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f275,f1645])).
fof(f16911,plain,(
  ( ! [X39,X37,X35,X38,X36] : (sP0(X36,X35) | s(bool,X37) = s(bool,X38) | s(bool,X35) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f13063,f223])).
fof(f13063,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,'T_0')) | sP0(X36,X35) | s(bool,X37) = s(bool,X38) | s(bool,X35) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f274,f1645])).
fof(f16910,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f13062,f223])).
fof(f13062,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f268,f1645])).
fof(f16909,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f13058,f223])).
fof(f13058,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f241,f1645])).
fof(f12888,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | s(bool,X6) = s(bool,X7) | s(bool,X4) = s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f237,f1645])).
fof(f16872,plain,(
  ( ! [X681,X683,X684,X680,X682] : (s(bool,X680) != s(bool,X681) | s(bool,X681) = s(bool,X682) | s(bool,'T_0') = s(bool,X682) | s(bool,X680) = s(bool,X683) | s(bool,X683) = s(bool,X684) | s(bool,'T_0') = s(bool,X684)) )),
  inference(subsumption_resolution,[],[f12805,f427])).
fof(f12805,plain,(
  ( ! [X681,X683,X684,X680,X682] : (s(bool,X680) != s(bool,X681) | s(bool,X681) = s(bool,X682) | s(bool,'T_0') = s(bool,X682) | s(bool,X680) = s(bool,X683) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X683) = s(bool,X684) | s(bool,'T_0') = s(bool,X684)) )),
  inference(superposition,[],[f2082,f1645])).
fof(f16871,plain,(
  ( ! [X670,X673,X675,X671,X672,X674] : (s(X671,f(s(bool,X670))) != s(X671,g(s(bool,X670))) | s(fun(bool,X671),X672) = s(fun(bool,X671),X673) | s(bool,'T_0') = s(bool,sK20(X672,X673,X671,bool)) | s(bool,X670) = s(bool,X674) | s(bool,X674) = s(bool,X675) | s(bool,'T_0') = s(bool,X675)) )),
  inference(subsumption_resolution,[],[f12804,f427])).
fof(f12804,plain,(
  ( ! [X670,X673,X675,X671,X672,X674] : (s(X671,f(s(bool,X670))) != s(X671,g(s(bool,X670))) | s(fun(bool,X671),X672) = s(fun(bool,X671),X673) | s(bool,'T_0') = s(bool,sK20(X672,X673,X671,bool)) | s(bool,X670) = s(bool,X674) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X674) = s(bool,X675) | s(bool,'T_0') = s(bool,X675)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f16870,plain,(
  ( ! [X668,X667,X669] : (s(bool,'T_0') != s(bool,X667) | s(bool,X667) = s(bool,X668) | s(bool,X668) = s(bool,X669) | s(bool,'T_0') = s(bool,X669)) )),
  inference(subsumption_resolution,[],[f12803,f427])).
fof(f12803,plain,(
  ( ! [X668,X667,X669] : (s(bool,'T_0') != s(bool,X667) | s(bool,X667) = s(bool,X668) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X668) = s(bool,X669) | s(bool,'T_0') = s(bool,X669)) )),
  inference(superposition,[],[f427,f1645])).
fof(f12624,plain,(
  ( ! [X1073,X1070,X1074,X1072,X1071,X1069] : (s(X1071,f(s(bool,X1072))) != s(X1071,g(s(bool,X1072))) | s(fun(bool,X1071),X1069) = s(fun(bool,X1071),X1070) | s(bool,X1073) = s(bool,sK20(X1069,X1070,X1071,bool)) | s(bool,'T_0') = s(bool,X1072) | s(bool,X1073) = s(bool,X1074) | s(bool,'T_0') = s(bool,X1074)) )),
  inference(superposition,[],[f298,f1645])).
fof(f16824,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f16823])).
fof(f16823,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f12374,f237])).
fof(f12374,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X21) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f265,f1645])).
fof(f12106,plain,(
  ( ! [X1073,X1070,X1074,X1072,X1071,X1069] : (s(X1071,f(s(bool,X1072))) != s(X1071,g(s(bool,X1072))) | s(fun(bool,X1071),X1069) = s(fun(bool,X1071),X1070) | s(bool,X1072) = s(bool,X1073) | s(bool,'T_0') = s(bool,X1073) | s(bool,X1074) = s(bool,sK20(X1069,X1070,X1071,bool)) | s(bool,'T_0') = s(bool,X1074)) )),
  inference(superposition,[],[f298,f1645])).
fof(f11741,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f1645,f1645])).
fof(f16374,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f16373])).
fof(f16373,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f11715])).
fof(f11715,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1645,f230])).
fof(f16536,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f16535])).
fof(f16535,plain,(
  ( ! [X90,X88,X87,X85,X89,X86,X84] : (s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,X84) = s(bool,X88)) )),
  inference(duplicate_literal_removal,[],[f11651])).
fof(f11651,plain,(
  ( ! [X90,X88,X87,X85,X89,X86,X84] : (s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,X84) = s(bool,X88)) )),
  inference(superposition,[],[f1645,f1645])).
fof(f7582,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP12(X0,X2,'T_0') | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f7581])).
fof(f7581,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X2)) | ~sP12(X0,X2,'T_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f7580])).
fof(f7580,plain,(
  ( ! [X28,X26,X24,X27,X25] : (p(s(bool,X25)) | ~sP12(X26,X25,'T_0') | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f7568,f572])).
fof(f7568,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | p(s(bool,X25)) | ~sP12(X26,X25,'T_0') | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f2102,f524])).
fof(f7579,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X5)) | ~sP12(X6,X5,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f7564,f223])).
fof(f7564,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP12(X6,X5,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2102,f524])).
fof(f4825,plain,(
  ( ! [X17,X18,X16] : (sP1(X16,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f4814,f404])).
fof(f4814,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | sP1(X16,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2087,f230])).
fof(f3202,plain,(
  ( ! [X17,X18,X16] : (sP1(X17,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f3190,f404])).
fof(f3190,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | sP1(X17,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f2086,f230])).
fof(f3123,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2082,f230])).
fof(f1815,plain,(
  ( ! [X130,X128,X131,X129] : (s(X130,f(s(bool,'T_0'))) != s(X130,g(s(bool,'T_0'))) | s(fun(bool,X130),X128) = s(fun(bool,X130),X129) | s(bool,X131) = s(bool,sK20(X128,X129,X130,bool)) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f298,f524])).
fof(f2104,plain,(
  ( ! [X97,X95,X98,X96] : (~sP9(X95,X96,X97) | sP10(X95,X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f1806,f223])).
fof(f1806,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'T_0')) | ~sP9(X95,X96,X97) | sP10(X95,X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f388,f524])).
fof(f2103,plain,(
  ( ! [X94,X92,X93,X91] : (~sP11(X91,X92,X93) | sP12(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f1805,f223])).
fof(f1805,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | ~sP11(X91,X92,X93) | sP12(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f387,f524])).
fof(f2102,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X88)) | p(s(bool,X89)) | ~sP12(X87,X89,X88) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f1804,f223])).
fof(f1804,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X88)) | p(s(bool,X89)) | ~sP12(X87,X89,X88) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f380,f524])).
fof(f2101,plain,(
  ( ! [X85,X83,X86,X84] : (sP12(X83,X84,X85) | ~p(s(bool,X84)) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f1803,f223])).
fof(f1803,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X84)) | sP12(X83,X84,X85) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f379,f524])).
fof(f2100,plain,(
  ( ! [X80,X81,X79,X82] : (sP12(X79,X81,X80) | p(s(bool,X80)) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f1802,f223])).
fof(f1802,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | p(s(bool,X80)) | sP12(X79,X81,X80) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f378,f524])).
fof(f2099,plain,(
  ( ! [X78,X76,X77,X75] : (~sP11(X77,X76,X75) | ~p(s(bool,X77)) | p(s(bool,X76)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f1801,f223])).
fof(f1801,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | ~p(s(bool,X77)) | ~sP11(X77,X76,X75) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f373,f524])).
fof(f2098,plain,(
  ( ! [X74,X72,X71,X73] : (~sP10(X71,X73,X72) | p(s(bool,X73)) | p(s(bool,X72)) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f1800,f223])).
fof(f1800,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | p(s(bool,X73)) | ~sP10(X71,X73,X72) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f363,f524])).
fof(f2097,plain,(
  ( ! [X70,X68,X69,X67] : (sP10(X67,X68,X69) | ~p(s(bool,X68)) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f1799,f223])).
fof(f1799,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | sP10(X67,X68,X69) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f362,f524])).
fof(f2096,plain,(
  ( ! [X66,X64,X65,X63] : (sP10(X63,X65,X64) | ~p(s(bool,X64)) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f1798,f223])).
fof(f1798,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X64)) | sP10(X63,X65,X64) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f361,f524])).
fof(f2095,plain,(
  ( ! [X61,X59,X62,X60] : (~sP9(X59,X60,X61) | p(s(bool,X61)) | p(s(bool,X60)) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f1797,f223])).
fof(f1797,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | p(s(bool,X60)) | p(s(bool,X61)) | ~sP9(X59,X60,X61) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f356,f524])).
fof(f2094,plain,(
  ( ! [X57,X58,X56,X55] : (~sP8(X57,X56,X55) | p(s(bool,X57)) | ~p(s(bool,X56)) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f1796,f223])).
fof(f1796,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP8(X57,X56,X55) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f348,f524])).
fof(f2093,plain,(
  ( ! [X54,X52,X53,X51] : (sP8(X51,X52,X53) | ~p(s(bool,X53)) | ~p(s(bool,X52)) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f1795,f223])).
fof(f1795,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,X52)) | ~p(s(bool,X53)) | sP8(X51,X52,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f345,f524])).
fof(f2092,plain,(
  ( ! [X47,X50,X48,X49] : (~sP7(X48,X47,X49) | p(s(bool,X49)) | ~p(s(bool,X48)) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f1794,f223])).
fof(f1794,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X48)) | p(s(bool,X49)) | ~sP7(X48,X47,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f339,f524])).
fof(f2091,plain,(
  ( ! [X45,X43,X46,X44] : (~sP4(X44,X43,X45) | p(s(bool,X45)) | ~p(s(bool,X44)) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f1793,f223])).
fof(f1793,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X44)) | p(s(bool,X45)) | ~sP4(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f320,f524])).
fof(f2090,plain,(
  ( ! [X39,X41,X42,X40] : (~sP5(X40,X39,X41) | p(s(bool,X41)) | ~p(s(bool,X40)) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f1792,f223])).
fof(f1792,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X40)) | p(s(bool,X41)) | ~sP5(X40,X39,X41) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f316,f524])).
fof(f2089,plain,(
  ( ! [X37,X35,X38,X36] : (~sP4(X37,X35,X36) | ~sP5(X36,X35,X37) | sP6(X36,X37,X35) | ~sP3(X35,X37,X36) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1791,f223])).
fof(f1791,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | sP6(X36,X37,X35) | ~sP5(X36,X35,X37) | ~sP4(X37,X35,X36) | ~sP3(X35,X37,X36) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f313,f524])).
fof(f2088,plain,(
  ( ! [X33,X31,X34,X32] : (sP2(X33,X32,X31) | ~p(s(bool,X32)) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1790,f223])).
fof(f1790,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | sP2(X33,X32,X31) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f301,f524])).
fof(f2087,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f1789,f223])).
fof(f1789,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f293,f524])).
fof(f2086,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f1788,f223])).
fof(f1788,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f290,f524])).
fof(f2085,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1787,f223])).
fof(f1787,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f275,f524])).
fof(f2084,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f1786,f223])).
fof(f1786,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f274,f524])).
fof(f2083,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1785,f223])).
fof(f1785,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f268,f524])).
fof(f2082,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1781,f223])).
fof(f1781,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f241,f524])).
fof(f1747,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,X2)) | s(bool,X1) != s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f237,f524])).
fof(f1704,plain,(
  ( ! [X134,X132,X135,X133] : (s(X134,f(s(bool,X135))) != s(X134,g(s(bool,X135))) | s(fun(bool,X134),X132) = s(fun(bool,X134),X133) | s(bool,'T_0') = s(bool,X135) | s(bool,'T_0') = s(bool,sK20(X132,X133,X134,bool))) )),
  inference(superposition,[],[f298,f524])).
fof(f1645,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f524,f524])).
fof(f990,plain,(
  sP6('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f414,f409,f412,f404,f314])).
fof(f964,plain,(
  sP6('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f416,f411,f408,f223,f313])).
fof(f789,plain,(
  ~sP12('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f783,f368])).
fof(f783,plain,(
  ~sP11('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f223,f404,f223,f373])).
fof(f779,plain,(
  sP12('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f425,f223,f404,f372])).
fof(f753,plain,(
  ~sP10('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f747,f351])).
fof(f747,plain,(
  ~sP9('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f404,f223,f356])).
fof(f743,plain,(
  sP10('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f422,f404,f404,f355])).
fof(f718,plain,(
  ~sP8('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f712,f332])).
fof(f712,plain,(
  ~sP7('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f223,f223,f339])).
fof(f703,plain,(
  sP8('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f417,f223,f223,f335])).
fof(f699,plain,(
  ~sP6('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f694,f309])).
fof(f694,plain,(
  ~sP3('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f404,f404,f324])).
fof(f690,plain,(
  ~sP6('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f684,f310])).
fof(f684,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f223,f223,f320])).
fof(f672,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f223,f223,f316])).
fof(f589,plain,(
  ~sP6('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f223,f427,f330])).
fof(f591,plain,(
  ~sP6('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f223,f427,f330])).
fof(f580,plain,(
  sP6('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f404,f427,f328])).
fof(f581,plain,(
  sP6('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f427,f328])).
fof(f572,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f569,f404])).
fof(f569,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f265,f230])).
fof(f524,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f230,f230])).
fof(f500,plain,(
  ( ! [X0] : (sP12('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f223,f379])).
fof(f493,plain,(
  ( ! [X0] : (sP12('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f404,f223,f378])).
fof(f491,plain,(
  ( ! [X0] : (~sP12('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f404,f367])).
fof(f490,plain,(
  ( ! [X0] : (~sP12('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f404,f404,f366])).
fof(f483,plain,(
  ( ! [X0] : (sP10('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f223,f362])).
fof(f480,plain,(
  ( ! [X0] : (sP10('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f223,f361])).
fof(f477,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f404,f350])).
fof(f473,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f404,f349])).
fof(f472,plain,(
  ( ! [X0] : (sP8('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f404,f404,f344])).
fof(f466,plain,(
  ( ! [X0] : (sP8('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f404,f404,f343])).
fof(f463,plain,(
  ( ! [X0] : (~sP8('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f404,f334])).
fof(f462,plain,(
  ( ! [X0] : (~sP8('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f223,f404,f333])).
fof(f459,plain,(
  ( ! [X0] : (sP2(X0,'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f223,f301])).
fof(f454,plain,(
  ( ! [X0] : (~sP2('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f404,f404,f300])).
fof(f452,plain,(
  ( ! [X0] : (~sP2('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f404,f404,f299])).
fof(f448,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f404,f405])).
fof(f441,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f404,f223,f293])).
fof(f438,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f223,f290])).
fof(f435,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f223,f223,f289])).
fof(f434,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f404,f404,f288])).
fof(f427,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f404,f237])).
fof(f426,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f223,f390])).
fof(f425,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f404,f376])).
fof(f424,plain,(
  ( ! [X0,X1] : (sP11(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f223,f375])).
fof(f423,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f404,f374])).
fof(f422,plain,(
  ( ! [X0,X1] : (sP9('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f404,f359])).
fof(f421,plain,(
  ( ! [X0,X1] : (sP9(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f223,f358])).
fof(f420,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f357])).
fof(f419,plain,(
  ( ! [X0,X1] : (sP7('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f404,f342])).
fof(f418,plain,(
  ( ! [X0,X1] : (sP7(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f404,f341])).
fof(f417,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f340])).
fof(f416,plain,(
  ( ! [X0,X1] : (sP3('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f223,f327])).
fof(f415,plain,(
  ( ! [X0,X1] : (sP3(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f223,f326])).
fof(f414,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f325])).
fof(f413,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f404,f323])).
fof(f412,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f404,f322])).
fof(f411,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f321])).
fof(f410,plain,(
  ( ! [X0,X1] : (sP5('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f404,f319])).
fof(f409,plain,(
  ( ! [X0,X1] : (sP5(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f404,f318])).
fof(f408,plain,(
  ( ! [X0,X1] : (sP5(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f317])).
fof(f407,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f223,f275])).
fof(f406,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f223,f274])).
fof(f377,plain,(
  ( ! [X2,X0,X1] : (sP12(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP12(X2,X0,X1)) & (~sP12(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f216])).
fof(f216,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP12(X2,X0,X1)) & (~sP12(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP12(X2,X0,X1))),
  inference(definition_folding,[],[f121,f144,f143])).
fof(f143,plain,(
  ! [X2,X0,X1] : (sP11(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f144,plain,(
  ! [X2,X0,X1] : (sP12(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP11(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f121,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X20,X21,X22] : ((p(s(bool,X22)) <=> (p(s(bool,X21)) => p(s(bool,X20)))) <=> ((p(s(bool,X22)) | p(s(bool,X21))) & (p(s(bool,X22)) | ~p(s(bool,X20))) & (~p(s(bool,X21)) | p(s(bool,X20)) | ~p(s(bool,X22)))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.sat.sat_27_prove_ltb')).
fof(f378,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP12(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f217])).
fof(f379,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP12(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f217])).
fof(f380,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP12(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f217])).
fof(f373,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP11(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f214])).
fof(f214,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP11(X2,X0,X1)))),
  inference(flattening,[],[f213])).
fof(f213,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP11(X2,X0,X1)))),
  inference(nnf_transformation,[],[f143])).
fof(f374,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f215])).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f215])).
fof(f376,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f215])).
fof(f366,plain,(
  ( ! [X2,X0,X1] : (~sP12(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2] : ((~sP12(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP11(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP11(X0,X1,X2) | sP12(X0,X1,X2)))),
  inference(rectify,[],[f211])).
fof(f211,plain,(
  ! [X2,X0,X1] : ((~sP12(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP11(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP11(X2,X0,X1) | sP12(X2,X0,X1)))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X2,X0,X1] : ((~sP12(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP11(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP11(X2,X0,X1)) | sP12(X2,X0,X1)))),
  inference(nnf_transformation,[],[f144])).
fof(f367,plain,(
  ( ! [X2,X0,X1] : (~sP12(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f212])).
fof(f368,plain,(
  ( ! [X2,X0,X1] : (~sP12(X0,X1,X2) | sP11(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f212])).
fof(f387,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP11(X0,X1,X2) | sP12(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f369])).
fof(f369,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | ~sP11(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f212])).
fof(f370,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | ~sP11(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f212])).
fof(f371,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | ~sP11(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f212])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | ~sP11(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f212])).
fof(f360,plain,(
  ( ! [X2,X0,X1] : (sP10(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP10(X2,X0,X1)) & (~sP10(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f208])).
fof(f208,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP10(X2,X0,X1)) & (~sP10(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP10(X2,X0,X1))),
  inference(definition_folding,[],[f90,f141,f140])).
fof(f140,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f141,plain,(
  ! [X2,X0,X1] : (sP10(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP9(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f90,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X20,X21,X22] : ((p(s(bool,X22)) <=> (p(s(bool,X21)) | p(s(bool,X20)))) <=> ((p(s(bool,X22)) | ~p(s(bool,X21))) & (p(s(bool,X22)) | ~p(s(bool,X20))) & (p(s(bool,X21)) | p(s(bool,X20)) | ~p(s(bool,X22)))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.sat.sat_25_prove_ltb')).
fof(f361,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP10(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f209])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP10(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f209])).
fof(f363,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)) | ~sP10(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f209])).
fof(f356,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f207])).
fof(f207,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f206])).
fof(f206,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f205])).
fof(f205,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f140])).
fof(f357,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f207])).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f207])).
fof(f359,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f207])).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP9(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP9(X0,X1,X2) | sP10(X0,X1,X2)))),
  inference(rectify,[],[f203])).
fof(f203,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP9(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP9(X2,X0,X1) | sP10(X2,X0,X1)))),
  inference(flattening,[],[f202])).
fof(f202,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP9(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP9(X2,X0,X1)) | sP10(X2,X0,X1)))),
  inference(nnf_transformation,[],[f141])).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f204])).
fof(f351,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f204])).
fof(f388,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP9(X0,X1,X2) | sP10(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f352])).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~sP9(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f204])).
fof(f353,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~sP9(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f204])).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~sP9(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f204])).
fof(f355,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~sP9(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f204])).
fof(f343,plain,(
  ( ! [X2,X0,X1] : (sP8(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP8(X2,X0,X1)) & (~sP8(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP8(X2,X0,X1)) & (~sP8(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP8(X2,X0,X1))),
  inference(definition_folding,[],[f88,f138,f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : (sP7(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f138,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (sP7(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f88,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X20,X21,X22] : ((p(s(bool,X22)) <=> (p(s(bool,X21)) & p(s(bool,X20)))) <=> ((p(s(bool,X22)) | ~p(s(bool,X21)) | ~p(s(bool,X20))) & (p(s(bool,X21)) | ~p(s(bool,X22))) & (p(s(bool,X20)) | ~p(s(bool,X22)))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.sat.sat_23_prove_ltb')).
fof(f344,plain,(
  ( ! [X2,X0,X1] : (sP8(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f201])).
fof(f345,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | sP8(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f201])).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP8(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f201])).
fof(f339,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(nnf_transformation,[],[f137])).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f199])).
fof(f341,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f199])).
fof(f342,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f199])).
fof(f332,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | sP7(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | (sP7(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP7(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f196])).
fof(f196,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (sP7(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP7(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (sP7(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP7(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f138])).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f197])).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f197])).
fof(f335,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP7(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f197])).
fof(f389,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0)) | ~sP7(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f338])).
fof(f338,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP7(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f197])).
fof(f328,plain,(
  ( ! [X2,X0,X1] : (sP6(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP6(X2,X1,X0)) & (~sP6(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP6(X2,X1,X0))),
  inference(definition_folding,[],[f86,f135,f134,f133,f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : (sP3(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f133,plain,(
  ! [X1,X0,X2] : (sP4(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f134,plain,(
  ! [X2,X0,X1] : (sP5(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f135,plain,(
  ! [X2,X1,X0] : (sP6(X2,X1,X0) <=> (sP3(X0,X1,X2) & sP4(X1,X0,X2) & sP5(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f86,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X20,X21,X22] : ((p(s(bool,X22)) <=> s(bool,X20) = s(bool,X21)) <=> ((p(s(bool,X22)) | p(s(bool,X21)) | p(s(bool,X20))) & (p(s(bool,X22)) | ~p(s(bool,X20)) | ~p(s(bool,X21))) & (p(s(bool,X21)) | ~p(s(bool,X20)) | ~p(s(bool,X22))) & (p(s(bool,X20)) | ~p(s(bool,X21)) | ~p(s(bool,X22)))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.sat.sat_2|49|_prove_ltb')).
fof(f329,plain,(
  ( ! [X2,X0,X1] : (sP6(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f194])).
fof(f330,plain,(
  ( ! [X2,X0,X1] : (~sP6(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f194])).
fof(f331,plain,(
  ( ! [X2,X0,X1] : (~sP6(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f194])).
fof(f324,plain,(
  ( ! [X2,X0,X1] : (~sP3(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(flattening,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(nnf_transformation,[],[f132])).
fof(f325,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f193])).
fof(f326,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f193])).
fof(f327,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f193])).
fof(f320,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f190])).
fof(f190,plain,(
  ! [X1,X0,X2] : ((~sP4(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP4(X1,X0,X2)))),
  inference(flattening,[],[f189])).
fof(f189,plain,(
  ! [X1,X0,X2] : ((~sP4(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP4(X1,X0,X2)))),
  inference(nnf_transformation,[],[f133])).
fof(f321,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f191])).
fof(f322,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f191])).
fof(f323,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f191])).
fof(f316,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f187])).
fof(f187,plain,(
  ! [X2,X0,X1] : ((~sP5(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP5(X2,X0,X1)))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X2,X0,X1] : ((~sP5(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP5(X2,X0,X1)))),
  inference(nnf_transformation,[],[f134])).
fof(f317,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f188])).
fof(f318,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f188])).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f188])).
fof(f309,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | sP3(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (sP3(X2,X1,X0) & sP4(X1,X2,X0) & sP5(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP3(X2,X1,X0) | ~sP4(X1,X2,X0) | ~sP5(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(rectify,[],[f184])).
fof(f184,plain,(
  ! [X2,X1,X0] : ((~sP6(X2,X1,X0) | (sP3(X0,X1,X2) & sP4(X1,X0,X2) & sP5(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP3(X0,X1,X2) | ~sP4(X1,X0,X2) | ~sP5(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP6(X2,X1,X0)))),
  inference(flattening,[],[f183])).
fof(f183,plain,(
  ! [X2,X1,X0] : ((~sP6(X2,X1,X0) | (sP3(X0,X1,X2) & sP4(X1,X0,X2) & sP5(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP3(X0,X1,X2) | ~sP4(X1,X0,X2) | ~sP5(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP6(X2,X1,X0)))),
  inference(nnf_transformation,[],[f135])).
fof(f310,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | sP4(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f311,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | sP5(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f185])).
fof(f312,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f185])).
fof(f313,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | sP6(X0,X1,X2) | ~sP5(X0,X2,X1) | ~sP4(X1,X2,X0) | ~sP3(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f314,plain,(
  ( ! [X2,X0,X1] : (~sP4(X1,X2,X0) | p(s(bool,X1)) | ~sP5(X0,X2,X1) | sP6(X0,X1,X2) | ~sP3(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f315,plain,(
  ( ! [X2,X0,X1] : (~sP3(X2,X1,X0) | p(s(bool,X0)) | ~sP5(X0,X2,X1) | ~sP4(X1,X2,X0) | sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f185])).
fof(f299,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | ((p(s(bool,X2)) | p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0))))) & ((~p(s(bool,X2)) & ~p(s(bool,X0))) | (~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(rectify,[],[f179])).
fof(f179,plain,(
  ! [X0,X2,X1] : ((~sP2(X0,X2,X1) | ((p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | p(s(bool,X0))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (~p(s(bool,X2)) & ~p(s(bool,X0))) | sP2(X0,X2,X1)))),
  inference(flattening,[],[f178])).
fof(f178,plain,(
  ! [X0,X2,X1] : ((~sP2(X0,X2,X1) | ((p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | p(s(bool,X0))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (~p(s(bool,X2)) & ~p(s(bool,X0)))) | sP2(X0,X2,X1)))),
  inference(nnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X2,X1] : (sP2(X0,X2,X1) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | p(s(bool,X0)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f300,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f180])).
fof(f301,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP2(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f180])).
fof(f390,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(duplicate_literal_removal,[],[f304])).
fof(f304,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f180])).
fof(f298,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.typeSound.typeSound_25_prove_ltb',aHL_EXT)).
fof(f288,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f175])).
fof(f175,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f174])).
fof(f174,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f173])).
fof(f173,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f289,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f175])).
fof(f290,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f175])).
fof(f293,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f175])).
fof(f405,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f273,f404])).
fof(f273,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f274,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f275,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f265,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.bool.IMP_ANTISYM_AX')).
fof(f268,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f107])).
fof(f237,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f238,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f151])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.typeSound.typeSound_25_prove_ltb',aHL_BOOL_CASES)).
fof(f223,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.bool.TRUTH')).
fof(f25146,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(global_subsumption,[],[f402,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f25145,plain,(
  $false | ($spl0 | $spl2 | $spl130)),
  inference(global_subsumption,[],[f17356,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f17356,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl130),
  inference(cnf_transformation,[],[f17356_D])).
fof(f17356_D,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f25144,plain,(
  $false | ($spl0 | $spl2 | $spl133)),
  inference(global_subsumption,[],[f17359,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f17359,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl133),
  inference(cnf_transformation,[],[f17359_D])).
fof(f17359_D,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f25143,plain,(
  $false | ($spl0 | $spl2 | $spl135)),
  inference(global_subsumption,[],[f17362,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f17362,plain,(
  ~sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl135),
  inference(cnf_transformation,[],[f17362_D])).
fof(f17362_D,plain,(
  ~sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl135),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl135])])).
fof(f25142,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342,f24327])).
fof(f25141,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356,f24342])).
fof(f25140,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367,f24356])).
fof(f25139,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399,f24367])).
fof(f25138,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400,f24399])).
fof(f25137,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405,f24400])).
fof(f25136,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406,f24405])).
fof(f25135,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411,f24406])).
fof(f25134,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422,f24411])).
fof(f25133,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424,f24422])).
fof(f25132,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427,f24424])).
fof(f25131,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428,f24427])).
fof(f25130,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436,f24428])).
fof(f25129,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471,f24436])).
fof(f25128,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477,f24471])).
fof(f25127,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508,f24477])).
fof(f25126,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523,f24508])).
fof(f25125,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528,f24523])).
fof(f25124,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596,f24528])).
fof(f25123,plain,(
  $false | ($spl0 | $spl2 | $spl14)),
  inference(global_subsumption,[],[f24568,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24568,plain,(
  ( ! [X0] : (sP2(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0')) ) | ($spl0 | $spl14)),
  inference(unit_resulting_resolution,[],[f396,f2032])).
fof(f25122,plain,(
  $false | ($spl0 | $spl2 | $spl18)),
  inference(global_subsumption,[],[f24569,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24569,plain,(
  ~sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | ($spl0 | $spl18)),
  inference(unit_resulting_resolution,[],[f404,f396,f2039])).
fof(f25121,plain,(
  $false | ($spl0 | $spl2 | $spl20)),
  inference(global_subsumption,[],[f24572,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24572,plain,(
  ~sP4('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f404,f396,f2042])).
fof(f25120,plain,(
  $false | ($spl0 | $spl2 | $spl22)),
  inference(global_subsumption,[],[f24575,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24575,plain,(
  ~sP7('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0','F_0') | ($spl0 | $spl22)),
  inference(unit_resulting_resolution,[],[f404,f396,f2045])).
fof(f25119,plain,(
  $false | ($spl0 | $spl2 | $spl24)),
  inference(global_subsumption,[],[f24578,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24578,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | ($spl0 | $spl24)),
  inference(unit_resulting_resolution,[],[f223,f396,f2048])).
fof(f25118,plain,(
  $false | ($spl0 | $spl2 | $spl24)),
  inference(global_subsumption,[],[f24579,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24579,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl24)),
  inference(unit_resulting_resolution,[],[f396,f396,f2048])).
fof(f25117,plain,(
  $false | ($spl0 | $spl2 | $spl24)),
  inference(global_subsumption,[],[f24581,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24581,plain,(
  sP8('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl24)),
  inference(unit_resulting_resolution,[],[f223,f396,f2048])).
fof(f25116,plain,(
  $false | ($spl0 | $spl2 | $spl24)),
  inference(global_subsumption,[],[f24582,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24582,plain,(
  sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl24)),
  inference(unit_resulting_resolution,[],[f396,f396,f2048])).
fof(f25115,plain,(
  $false | ($spl0 | $spl2 | $spl26)),
  inference(global_subsumption,[],[f24584,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24584,plain,(
  ~sP8('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | ($spl0 | $spl26)),
  inference(unit_resulting_resolution,[],[f404,f396,f2051])).
fof(f25114,plain,(
  $false | ($spl0 | $spl2 | $spl30)),
  inference(global_subsumption,[],[f24585,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24585,plain,(
  ( ! [X0] : (sP10('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | ($spl0 | $spl30)),
  inference(unit_resulting_resolution,[],[f396,f2057])).
fof(f25113,plain,(
  $false | ($spl0 | $spl2 | $spl32)),
  inference(global_subsumption,[],[f24586,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24586,plain,(
  ( ! [X0] : (sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | ($spl0 | $spl32)),
  inference(unit_resulting_resolution,[],[f396,f2060])).
fof(f25112,plain,(
  $false | ($spl0 | $spl2 | $spl36)),
  inference(global_subsumption,[],[f24587,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24587,plain,(
  ~sP11('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'F_0','T_0') | ($spl0 | $spl36)),
  inference(unit_resulting_resolution,[],[f404,f396,f2066])).
fof(f25111,plain,(
  $false | ($spl0 | $spl2 | $spl40)),
  inference(global_subsumption,[],[f24590,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24590,plain,(
  ( ! [X0] : (sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X0)) ) | ($spl0 | $spl40)),
  inference(unit_resulting_resolution,[],[f396,f2072])).
fof(f25110,plain,(
  $false | ($spl0 | $spl2 | $spl42)),
  inference(global_subsumption,[],[f24591,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f24591,plain,(
  ~sP12('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl42)),
  inference(unit_resulting_resolution,[],[f404,f396,f2075])).
fof(f25109,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601,f24596])).
fof(f25108,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610,f24601])).
fof(f25107,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619,f24610])).
fof(f25106,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628,f24619])).
fof(f25105,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629,f24628])).
fof(f25104,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634,f24629])).
fof(f25103,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635,f24634])).
fof(f25102,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640,f24635])).
fof(f25101,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645,f24640])).
fof(f25100,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653,f24645])).
fof(f25099,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661,f24653])).
fof(f25098,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670,f24661])).
fof(f25097,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675,f24670])).
fof(f25096,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824,f24675])).
fof(f25095,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f24306,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24306,plain,(
  ( ! [X41] : (~sP6('T_0','F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f24291])).
fof(f24291,plain,(
  ( ! [X41] : (~sP6('T_0','F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19904,f2802])).
fof(f19904,plain,(
  ( ! [X0] : (~sP6('T_0','F_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19576,f230])).
fof(f19576,plain,(
  ~sP6('T_0','F_0',f(s(bool,'F_0'))) | $spl59),
  inference(unit_resulting_resolution,[],[f223,f2810,f330])).
fof(f25094,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f24256,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24256,plain,(
  ( ! [X41] : (sP6('F_0','F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f24241])).
fof(f24241,plain,(
  ( ! [X41] : (sP6('F_0','F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19881,f2802])).
fof(f19881,plain,(
  ( ! [X0] : (sP6('F_0','F_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19575,f230])).
fof(f19575,plain,(
  sP6('F_0','F_0',f(s(bool,'F_0'))) | $spl59),
  inference(unit_resulting_resolution,[],[f404,f2810,f328])).
fof(f25093,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23694,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f23694,plain,(
  ( ! [X41] : (~sP6('T_0',f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f23679])).
fof(f23679,plain,(
  ( ! [X41] : (~sP6('T_0',f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19860,f2802])).
fof(f19860,plain,(
  ( ! [X0] : (~sP6('T_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19523,f230])).
fof(f19523,plain,(
  ~sP6('T_0',f(s(bool,'F_0')),'F_0') | $spl59),
  inference(unit_resulting_resolution,[],[f223,f2810,f330])).
fof(f25092,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23614,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f23614,plain,(
  ( ! [X41] : (sP6('F_0',f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f23595])).
fof(f23595,plain,(
  ( ! [X41] : (sP6('F_0',f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19829,f2802])).
fof(f19829,plain,(
  ( ! [X0] : (sP6('F_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19522,f230])).
fof(f19522,plain,(
  sP6('F_0',f(s(bool,'F_0')),'F_0') | $spl59),
  inference(unit_resulting_resolution,[],[f404,f2810,f328])).
fof(f25091,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23156,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f23156,plain,(
  ( ! [X41] : (sP1('F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f23137])).
fof(f23137,plain,(
  ( ! [X41] : (sP1('F_0',f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19809,f2802])).
fof(f19809,plain,(
  ( ! [X0] : (sP1('F_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19605,f230])).
fof(f19605,plain,(
  sP1('F_0',f(s(bool,'F_0'))) | $spl59),
  inference(unit_resulting_resolution,[],[f404,f427,f2810,f2087])).
fof(f25090,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23101,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f23101,plain,(
  ( ! [X41] : (sP1(f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f23082])).
fof(f23082,plain,(
  ( ! [X41] : (sP1(f(s(bool,g(s(bool,'F_0')))),'F_0') | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19790,f2802])).
fof(f19790,plain,(
  ( ! [X0] : (sP1(f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19604,f230])).
fof(f19604,plain,(
  sP1(f(s(bool,'F_0')),'F_0') | $spl59),
  inference(unit_resulting_resolution,[],[f404,f427,f2810,f2086])).
fof(f25089,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23034,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f23034,plain,(
  ( ! [X54,X55] : (sP0(f(s(bool,g(s(bool,'F_0')))),X55) | s(bool,'T_0') = s(bool,X54)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f23015])).
fof(f23015,plain,(
  ( ! [X54,X55] : (sP0(f(s(bool,g(s(bool,'F_0')))),X55) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19773,f2802])).
fof(f19773,plain,(
  ( ! [X0,X1] : (sP0(f(s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19603,f230])).
fof(f19603,plain,(
  ( ! [X0] : (sP0(f(s(bool,'F_0')),X0)) ) | $spl59),
  inference(unit_resulting_resolution,[],[f427,f2810,f2085])).
fof(f25088,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f22979,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f22979,plain,(
  ( ! [X54,X55] : (sP0(X55,f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X54)) ) | ($spl48 | $spl59)),
  inference(duplicate_literal_removal,[],[f22960])).
fof(f22960,plain,(
  ( ! [X54,X55] : (sP0(X55,f(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | ($spl48 | $spl59)),
  inference(superposition,[],[f19754,f2802])).
fof(f19754,plain,(
  ( ! [X0,X1] : (sP0(X1,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f19602,f230])).
fof(f19602,plain,(
  ( ! [X0] : (sP0(X0,f(s(bool,'F_0')))) ) | $spl59),
  inference(unit_resulting_resolution,[],[f427,f2810,f2084])).
fof(f25087,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f24939,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24939,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85) | s(bool,X86) = s(bool,g(s(X83,sK20(X84,X85,bool,X83)))) | s(bool,'T_0') = s(bool,X86)) ) | $spl48),
  inference(subsumption_resolution,[],[f22895,f1816])).
fof(f22895,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85) | s(bool,X86) = s(bool,g(s(X83,sK20(X84,X85,bool,X83)))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,f(s(X83,sK20(X84,X85,bool,X83))))) ) | $spl48),
  inference(superposition,[],[f1816,f2802])).
fof(f25086,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f22796,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f22796,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK20(X1,X2,bool,X0)))) | s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl48),
  inference(condensation,[],[f22795])).
fof(f22795,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X81,sK20(X82,X83,bool,X81)))) | s(fun(X81,bool),X82) = s(fun(X81,bool),X83) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(X81,sK20(X82,X83,bool,X81))))) ) | $spl48),
  inference(duplicate_literal_removal,[],[f22751])).
fof(f22751,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X81,sK20(X82,X83,bool,X81)))) | s(fun(X81,bool),X82) = s(fun(X81,bool),X83) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(X81,sK20(X82,X83,bool,X81)))) | s(bool,'T_0') = s(bool,X80)) ) | $spl48),
  inference(superposition,[],[f1705,f2802])).
fof(f25085,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f22352,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f22352,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,X2,bool)) | s(X2,f(s(bool,g(s(bool,'F_0'))))) != s(X2,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1)) ) | $spl48),
  inference(condensation,[],[f22351])).
fof(f22351,plain,(
  ( ! [X80,X83,X81,X82] : (s(X81,f(s(bool,g(s(bool,'F_0'))))) != s(X81,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X81),X82) = s(fun(bool,X81),X83) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,sK20(X82,X83,X81,bool))) ) | $spl48),
  inference(duplicate_literal_removal,[],[f22307])).
fof(f22307,plain,(
  ( ! [X80,X83,X81,X82] : (s(X81,f(s(bool,g(s(bool,'F_0'))))) != s(X81,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X81),X82) = s(fun(bool,X81),X83) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,sK20(X82,X83,X81,bool)) | s(bool,'T_0') = s(bool,X80)) ) | $spl48),
  inference(superposition,[],[f1704,f2802])).
fof(f25084,plain,(
  $false | ($spl0 | $spl2 | $spl48 | $spl56 | $spl59)),
  inference(global_subsumption,[],[f24943,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24943,plain,(
  ( ! [X41] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl56 | $spl59)),
  inference(forward_demodulation,[],[f21089,f19600])).
fof(f19600,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl59),
  inference(unit_resulting_resolution,[],[f223,f427,f2810,f2083])).
fof(f21089,plain,(
  ( ! [X41] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl56)),
  inference(duplicate_literal_removal,[],[f21051])).
fof(f21051,plain,(
  ( ! [X41] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl48 | $spl56)),
  inference(superposition,[],[f2808,f2802])).
fof(f25083,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20867,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20867,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(equality_factoring,[],[f2802])).
fof(f25082,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20992,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20992,plain,(
  ( ! [X127,X128,X129] : (p(s(bool,X127)) | sP1(g(s(bool,'F_0')),X128) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,X129)) ) | $spl48),
  inference(subsumption_resolution,[],[f20864,f237])).
fof(f20864,plain,(
  ( ! [X127,X128,X129] : (p(s(bool,X127)) | sP1(g(s(bool,'F_0')),X128) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,X129) | s(bool,'T_0') = s(bool,X127)) ) | $spl48),
  inference(superposition,[],[f2087,f2802])).
fof(f25081,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20991,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20991,plain,(
  ( ! [X125,X126,X124] : (p(s(bool,X124)) | sP1(X125,g(s(bool,'F_0'))) | s(bool,X125) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) ) | $spl48),
  inference(subsumption_resolution,[],[f20863,f237])).
fof(f20863,plain,(
  ( ! [X125,X126,X124] : (p(s(bool,X124)) | sP1(X125,g(s(bool,'F_0'))) | s(bool,X125) = s(bool,X126) | s(bool,'T_0') = s(bool,X126) | s(bool,'T_0') = s(bool,X124)) ) | $spl48),
  inference(superposition,[],[f2086,f2802])).
fof(f25080,plain,(
  $false | ($spl0 | $spl2 | $spl12 | $spl48)),
  inference(global_subsumption,[],[f24948,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24948,plain,(
  ( ! [X118] : (p(s(bool,X118)) | sP1(g(s(bool,'F_0')),'T_0')) ) | ($spl12 | $spl48)),
  inference(subsumption_resolution,[],[f20860,f237])).
fof(f20860,plain,(
  ( ! [X118] : (p(s(bool,X118)) | sP1(g(s(bool,'F_0')),'T_0') | s(bool,'T_0') = s(bool,X118)) ) | ($spl12 | $spl48)),
  inference(superposition,[],[f2029,f2802])).
fof(f25079,plain,(
  $false | ($spl0 | $spl2 | $spl8 | $spl48)),
  inference(global_subsumption,[],[f24950,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24950,plain,(
  ( ! [X117] : (p(s(bool,X117)) | sP1('T_0',g(s(bool,'F_0')))) ) | ($spl8 | $spl48)),
  inference(subsumption_resolution,[],[f20859,f237])).
fof(f20859,plain,(
  ( ! [X117] : (p(s(bool,X117)) | sP1('T_0',g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X117)) ) | ($spl8 | $spl48)),
  inference(superposition,[],[f2025,f2802])).
fof(f25078,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20990,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20990,plain,(
  ( ! [X116,X114,X115] : (p(s(bool,X114)) | s(bool,X115) != s(bool,g(s(bool,'F_0'))) | s(bool,X115) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) ) | $spl48),
  inference(subsumption_resolution,[],[f20858,f237])).
fof(f20858,plain,(
  ( ! [X116,X114,X115] : (p(s(bool,X114)) | s(bool,X115) != s(bool,g(s(bool,'F_0'))) | s(bool,X115) = s(bool,X116) | s(bool,'T_0') = s(bool,X116) | s(bool,'T_0') = s(bool,X114)) ) | $spl48),
  inference(superposition,[],[f1747,f2802])).
fof(f25077,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20870,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20870,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(condensation,[],[f20869])).
fof(f20869,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,X104) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105) | s(bool,X103) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20855])).
fof(f20855,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,X104) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105) | s(bool,X103) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X102)) ) | $spl48),
  inference(superposition,[],[f1645,f2802])).
fof(f25076,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20872,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20872,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl48),
  inference(condensation,[],[f20871])).
fof(f20871,plain,(
  ( ! [X101,X99,X100,X98] : (s(bool,'T_0') = s(bool,X98) | s(bool,X99) = s(bool,X100) | s(bool,X100) = s(bool,g(s(bool,'F_0'))) | s(bool,X99) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20854])).
fof(f20854,plain,(
  ( ! [X101,X99,X100,X98] : (s(bool,'T_0') = s(bool,X98) | s(bool,X99) = s(bool,X100) | s(bool,X100) = s(bool,g(s(bool,'F_0'))) | s(bool,X99) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,'T_0') = s(bool,X98)) ) | $spl48),
  inference(superposition,[],[f1645,f2802])).
fof(f25075,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20987,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20987,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(condensation,[],[f20986])).
fof(f20986,plain,(
  ( ! [X10,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X10) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(subsumption_resolution,[],[f20822,f237])).
fof(f20822,plain,(
  ( ! [X10,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl48),
  inference(superposition,[],[f265,f2802])).
fof(f25074,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20984,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20984,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(condensation,[],[f20983])).
fof(f20983,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,X8) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(subsumption_resolution,[],[f20821,f237])).
fof(f20821,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,X8) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl48),
  inference(superposition,[],[f265,f2802])).
fof(f25073,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f24957,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24957,plain,(
  ( ! [X6] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(subsumption_resolution,[],[f20820,f237])).
fof(f20820,plain,(
  ( ! [X6] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl48),
  inference(superposition,[],[f242,f2802])).
fof(f25072,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20812,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20812,plain,(
  ( ! [X161,X159,X160] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X159,sK20(X160,X161,bool,X159)))) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,g(s(X159,sK20(X160,X161,bool,X159))))) ) | $spl48),
  inference(superposition,[],[f298,f2802])).
fof(f25071,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20810,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20810,plain,(
  ( ! [X156,X154,X155] : (s(X156,f(s(bool,g(s(bool,'F_0'))))) != s(X156,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X156),X154) = s(fun(bool,X156),X155) | s(bool,'T_0') = s(bool,sK20(X154,X155,X156,bool))) ) | $spl48),
  inference(superposition,[],[f298,f2802])).
fof(f25070,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20808,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20808,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X148))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X149))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X144),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X145),s('type.num.num',X150),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X149),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X148)))) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X144),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X145),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X146),s('type.typeSystem.tenv_val',X147)))) ) | $spl48),
  inference(superposition,[],[f384,f2802])).
fof(f25069,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20807,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20807,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X137),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X138),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X141),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X139))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X142),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X143),s('type.typeSystem.tenv_val',X140)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X137),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X138),s('type.num.num',X142),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X141),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X143)))) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X137),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X138),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X139),s('type.typeSystem.tenv_val',X140)))) ) | $spl48),
  inference(superposition,[],[f383,f2802])).
fof(f25068,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20800,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20800,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X129)) | ~sP12(X130,X129,X128) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,X128)) ) | $spl48),
  inference(superposition,[],[f2102,f2802])).
fof(f25067,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20888,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20888,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'F_0'))))) ) | $spl48),
  inference(condensation,[],[f20887])).
fof(f20887,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20886])).
fof(f20886,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl48),
  inference(condensation,[],[f20797])).
fof(f20797,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X119) = s(bool,X120) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X121) | s(bool,'T_0') = s(bool,X119)) ) | $spl48),
  inference(superposition,[],[f2083,f2802])).
fof(f25066,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20890,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20890,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl48),
  inference(condensation,[],[f20889])).
fof(f20889,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,X109) = s(bool,g(s(bool,'F_0'))) | s(bool,X109) = s(bool,X110) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,X108)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20792])).
fof(f20792,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,X109) = s(bool,g(s(bool,'F_0'))) | s(bool,X109) = s(bool,X110) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) ) | $spl48),
  inference(superposition,[],[f1645,f2802])).
fof(f25065,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20896,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20896,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl48),
  inference(condensation,[],[f20895])).
fof(f20895,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X93) = s(bool,g(s(bool,'F_0'))) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X92) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20788])).
fof(f20788,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X93) = s(bool,g(s(bool,'F_0'))) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X92) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X92)) ) | $spl48),
  inference(superposition,[],[f1645,f2802])).
fof(f25064,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20779,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20779,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,g(s(bool,'F_0')))) | ~sP9(X67,X68,X69) | sP10(X67,X68,X69) | s(bool,'T_0') = s(bool,X67)) ) | $spl48),
  inference(superposition,[],[f388,f2802])).
fof(f25063,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20778,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20778,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,g(s(bool,'F_0')))) | ~sP11(X64,X65,X66) | sP12(X64,X65,X66) | s(bool,'T_0') = s(bool,X64)) ) | $spl48),
  inference(superposition,[],[f387,f2802])).
fof(f25062,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20777,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20777,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X62)) | p(s(bool,X63)) | ~sP12(X61,X63,X62) | s(bool,'T_0') = s(bool,X61)) ) | $spl48),
  inference(superposition,[],[f380,f2802])).
fof(f25061,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20776,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20776,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X59)) | sP12(X58,X59,X60) | s(bool,'T_0') = s(bool,X58)) ) | $spl48),
  inference(superposition,[],[f379,f2802])).
fof(f25060,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20775,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20775,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X56)) | sP12(X55,X57,X56) | s(bool,'T_0') = s(bool,X55)) ) | $spl48),
  inference(superposition,[],[f378,f2802])).
fof(f25059,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20774,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20774,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X53)) | ~p(s(bool,X54)) | ~sP11(X54,X53,X52) | s(bool,'T_0') = s(bool,X52)) ) | $spl48),
  inference(superposition,[],[f373,f2802])).
fof(f25058,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20773,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20773,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X50)) | p(s(bool,X51)) | ~sP10(X49,X51,X50) | s(bool,'T_0') = s(bool,X49)) ) | $spl48),
  inference(superposition,[],[f363,f2802])).
fof(f25057,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20772,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20772,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X47)) | sP10(X46,X47,X48) | s(bool,'T_0') = s(bool,X46)) ) | $spl48),
  inference(superposition,[],[f362,f2802])).
fof(f25056,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20771,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20771,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X44)) | sP10(X43,X45,X44) | s(bool,'T_0') = s(bool,X43)) ) | $spl48),
  inference(superposition,[],[f361,f2802])).
fof(f25055,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20770,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20770,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X41)) | p(s(bool,X42)) | ~sP9(X40,X41,X42) | s(bool,'T_0') = s(bool,X40)) ) | $spl48),
  inference(superposition,[],[f356,f2802])).
fof(f25054,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20769,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20769,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X38)) | p(s(bool,X39)) | ~sP8(X39,X38,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl48),
  inference(superposition,[],[f348,f2802])).
fof(f25053,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20768,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20768,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X35)) | ~p(s(bool,X36)) | sP8(X34,X35,X36) | s(bool,'T_0') = s(bool,X34)) ) | $spl48),
  inference(superposition,[],[f345,f2802])).
fof(f25052,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20767,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20767,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP7(X32,X31,X33) | s(bool,'T_0') = s(bool,X31)) ) | $spl48),
  inference(superposition,[],[f339,f2802])).
fof(f25051,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20766,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20766,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X29)) | p(s(bool,X30)) | ~sP4(X29,X28,X30) | s(bool,'T_0') = s(bool,X28)) ) | $spl48),
  inference(superposition,[],[f320,f2802])).
fof(f25050,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20765,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20765,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X26)) | p(s(bool,X27)) | ~sP5(X26,X25,X27) | s(bool,'T_0') = s(bool,X25)) ) | $spl48),
  inference(superposition,[],[f316,f2802])).
fof(f25049,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20764,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20764,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,g(s(bool,'F_0')))) | sP6(X23,X24,X22) | ~sP5(X23,X22,X24) | ~sP4(X24,X22,X23) | ~sP3(X22,X24,X23) | s(bool,'T_0') = s(bool,X22)) ) | $spl48),
  inference(superposition,[],[f313,f2802])).
fof(f25048,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20763,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20763,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X20)) | sP2(X21,X20,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl48),
  inference(superposition,[],[f301,f2802])).
fof(f25047,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20762,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20762,plain,(
  ( ! [X17,X18] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X18)) | sP1(X18,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl48),
  inference(superposition,[],[f293,f2802])).
fof(f25046,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20761,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20761,plain,(
  ( ! [X15,X16] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,X16)) | sP1(X15,X16) | s(bool,'T_0') = s(bool,X15)) ) | $spl48),
  inference(superposition,[],[f290,f2802])).
fof(f25045,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20760,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20760,plain,(
  ( ! [X14,X13] : (~p(s(bool,g(s(bool,'F_0')))) | sP0(X13,X14) | s(bool,'T_0') = s(bool,X13)) ) | $spl48),
  inference(superposition,[],[f275,f2802])).
fof(f25044,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20759,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20759,plain,(
  ( ! [X12,X11] : (~p(s(bool,g(s(bool,'F_0')))) | sP0(X12,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl48),
  inference(superposition,[],[f274,f2802])).
fof(f25043,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20953,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20953,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'F_0'))))) ) | $spl48),
  inference(condensation,[],[f20952])).
fof(f20952,plain,(
  ( ! [X10,X9] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl48),
  inference(subsumption_resolution,[],[f20758,f572])).
fof(f20758,plain,(
  ( ! [X10,X9] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl48),
  inference(superposition,[],[f268,f2802])).
fof(f25042,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20950,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20950,plain,(
  ( ! [X3] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl48),
  inference(subsumption_resolution,[],[f20754,f230])).
fof(f20754,plain,(
  ( ! [X3] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl48),
  inference(superposition,[],[f241,f2802])).
fof(f25041,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20905,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20905,plain,(
  ( ! [X2] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20753])).
fof(f20753,plain,(
  ( ! [X2] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl48),
  inference(superposition,[],[f238,f2802])).
fof(f25040,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f24991,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24991,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | p(s(bool,X1))) ) | $spl48),
  inference(subsumption_resolution,[],[f20752,f237])).
fof(f20752,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl48),
  inference(superposition,[],[f237,f2802])).
fof(f25039,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20906,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20906,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20751])).
fof(f20751,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(superposition,[],[f230,f2802])).
fof(f25038,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20908,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20908,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(condensation,[],[f20907])).
fof(f20907,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,X33) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20747])).
fof(f20747,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,X33) = s(bool,g(s(bool,'F_0')))) ) | $spl48),
  inference(superposition,[],[f2802,f1645])).
fof(f25037,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20910,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20910,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl48),
  inference(condensation,[],[f20909])).
fof(f20909,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20746])).
fof(f20746,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl48),
  inference(superposition,[],[f2802,f1645])).
fof(f25036,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f24996,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24996,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X47)) ) | $spl48),
  inference(subsumption_resolution,[],[f20717,f427])).
fof(f20717,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X47)) ) | $spl48),
  inference(superposition,[],[f2802,f230])).
fof(f25035,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20925,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20925,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl48),
  inference(condensation,[],[f20924])).
fof(f20924,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20715])).
fof(f20715,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X37)) ) | $spl48),
  inference(superposition,[],[f2802,f1645])).
fof(f25034,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20931,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20931,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl48),
  inference(condensation,[],[f20930])).
fof(f20930,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20711])).
fof(f20711,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X21) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl48),
  inference(superposition,[],[f2802,f1645])).
fof(f25033,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20940,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20940,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(duplicate_literal_removal,[],[f20703])).
fof(f20703,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(superposition,[],[f2802,f230])).
fof(f25032,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f20700,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f20700,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl48),
  inference(unit_resulting_resolution,[],[f427,f2802])).
fof(f25031,plain,(
  $false | ($spl0 | $spl2 | $spl48)),
  inference(global_subsumption,[],[f24738,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f24738,plain,(
  p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl48)),
  inference(superposition,[],[f396,f2802])).
fof(f25030,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004,f24824])).
fof(f25029,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820,f25004])).
fof(f25028,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813,f24820])).
fof(f25027,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810,f24813])).
fof(f25026,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807,f24810])).
fof(f25025,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328,f24807])).
fof(f25024,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24326,f24815,f24338,f24336,f24594,f24332,f24330,f24328])).
fof(f25023,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24326,f24815,f24338,f24336,f24594,f24332,f24330])).
fof(f25022,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24326,f24815,f24338,f24336,f24594,f24332])).
fof(f25021,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24326,f24815,f24338,f24336,f24594])).
fof(f25020,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24326,f24815,f24338,f24336])).
fof(f25019,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336,f24326,f24815,f24338])).
fof(f25018,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336,f24338,f24326,f24815])).
fof(f25017,plain,(
  $false | ($spl0 | $spl2)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336,f24338,f24815,f24326])).
fof(f25016,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336,f24338,f24815])).
fof(f24091,plain,(
  ~sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2102])).
fof(f24083,plain,(
  ( ! [X0] : (sP12('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f427,f427,f403,f2100])).
fof(f24076,plain,(
  ~sP11('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2099])).
fof(f24069,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f427,f427,f403,f2098])).
fof(f24068,plain,(
  ~sP10('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f403,f2098])).
fof(f24061,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f427,f427,f403,f2098])).
fof(f24060,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f403,f2098])).
fof(f24050,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f427,f427,f403,f2095])).
fof(f24049,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f403,f2095])).
fof(f24039,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f427,f427,f403,f2095])).
fof(f24038,plain,(
  ~sP9('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f427,f427,f403,f2095])).
fof(f24036,plain,(
  ~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2094])).
fof(f24029,plain,(
  ~sP7('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2092])).
fof(f24022,plain,(
  ~sP4('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2091])).
fof(f24015,plain,(
  ~sP5('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f427,f427,f403,f2090])).
fof(f24013,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f427,f427,f403,f2087])).
fof(f24011,plain,(
  sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f427,f427,f403,f2086])).
fof(f23979,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f427,f427,f403,f1747])).
fof(f23947,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f427,f403,f572])).
fof(f23927,plain,(
  ~sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f380])).
fof(f23924,plain,(
  ( ! [X0] : (sP12('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f378])).
fof(f23914,plain,(
  ~sP11('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f373])).
fof(f23892,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f403,f363])).
fof(f23891,plain,(
  ~sP10('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f404,f403,f363])).
fof(f23888,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f223,f403,f363])).
fof(f23887,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f223,f403,f363])).
fof(f23866,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f223,f403,f356])).
fof(f23865,plain,(
  ~sP9('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f223,f403,f356])).
fof(f23861,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f403,f356])).
fof(f23860,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f404,f403,f356])).
fof(f23835,plain,(
  ~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f348])).
fof(f23818,plain,(
  ~sP7('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f339])).
fof(f23769,plain,(
  ~sP4('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f320])).
fof(f23764,plain,(
  ~sP5('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f316])).
fof(f23726,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f293])).
fof(f23725,plain,(
  sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f290])).
fof(f23719,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f265])).
fof(f23717,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f265])).
fof(f23716,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f242])).
fof(f23715,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f237])).
fof(f24223,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X17) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl7),
  inference(subsumption_resolution,[],[f24147,f223])).
fof(f24147,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | s(bool,X16) = s(bool,X17) | s(bool,X17) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl7),
  inference(superposition,[],[f403,f1645])).
fof(f24216,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(subsumption_resolution,[],[f24139,f223])).
fof(f24139,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(superposition,[],[f403,f524])).
fof(f23714,plain,(
  ( ! [X0] : (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) ) | ($spl2 | $spl7)),
  inference(unit_resulting_resolution,[],[f398,f403,f386])).
fof(f23721,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f288])).
fof(f23723,plain,(
  ~sP1('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f288])).
fof(f23724,plain,(
  ~sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f288])).
fof(f23727,plain,(
  ( ! [X0] : (~sP2('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'F_0')) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f299])).
fof(f23737,plain,(
  ( ! [X0] : (~sP2('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f299])).
fof(f23738,plain,(
  ( ! [X0] : (~sP2('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f299])).
fof(f23741,plain,(
  ( ! [X0] : (~sP2('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0',X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f300])).
fof(f23751,plain,(
  ( ! [X0] : (~sP2('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f300])).
fof(f23752,plain,(
  ( ! [X0] : (~sP2('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f300])).
fof(f23755,plain,(
  ~sP6('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f223,f403,f312])).
fof(f23758,plain,(
  sP6('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f414,f409,f412,f403,f314])).
fof(f23767,plain,(
  ( ! [X0,X1] : (sP5(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f318])).
fof(f23768,plain,(
  ( ! [X0,X1] : (sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f319])).
fof(f23772,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f322])).
fof(f23773,plain,(
  ( ! [X0,X1] : (sP4('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f323])).
fof(f23774,plain,(
  ~sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f324])).
fof(f23782,plain,(
  ~sP3('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f324])).
fof(f23783,plain,(
  ~sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f403,f404,f403,f324])).
fof(f23790,plain,(
  ~sP3('F_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f324])).
fof(f23791,plain,(
  ~sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f404,f403,f324])).
fof(f23792,plain,(
  ~sP3('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f403,f324])).
fof(f23793,plain,(
  ~sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f403,f324])).
fof(f23798,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f427,f403,f328])).
fof(f23800,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f427,f403,f328])).
fof(f23814,plain,(
  ( ! [X0] : (~sP8('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f333])).
fof(f23816,plain,(
  ( ! [X0] : (~sP8('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f334])).
fof(f23821,plain,(
  ( ! [X0,X1] : (sP7(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f341])).
fof(f23822,plain,(
  ( ! [X0,X1] : (sP7('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f342])).
fof(f23823,plain,(
  ( ! [X0] : (sP8('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f343])).
fof(f23828,plain,(
  ( ! [X0] : (sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f343])).
fof(f23829,plain,(
  ( ! [X0] : (sP8('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f344])).
fof(f23834,plain,(
  ( ! [X0] : (sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f344])).
fof(f23836,plain,(
  ( ! [X0] : (~sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'T_0')) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f349])).
fof(f23837,plain,(
  ( ! [X0] : (~sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0',X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f350])).
fof(f23870,plain,(
  ( ! [X0,X1] : (sP9('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f359])).
fof(f23871,plain,(
  sP10('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f360])).
fof(f23877,plain,(
  sP10('F_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f360])).
fof(f23879,plain,(
  sP10('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f403,f360])).
fof(f23883,plain,(
  sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f404,f403,f360])).
fof(f23884,plain,(
  sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f403,f404,f403,f360])).
fof(f23885,plain,(
  sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f403,f360])).
fof(f23886,plain,(
  sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f403,f360])).
fof(f23895,plain,(
  ( ! [X0] : (~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'F_0')) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f366])).
fof(f23897,plain,(
  ( ! [X0] : (~sP12('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f366])).
fof(f23898,plain,(
  ( ! [X0] : (~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f366])).
fof(f23907,plain,(
  ( ! [X0] : (~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0',X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f223,f403,f367])).
fof(f23917,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f374])).
fof(f23918,plain,(
  ( ! [X0,X1] : (sP11('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f376])).
fof(f23919,plain,(
  sP12('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f223,f403,f377])).
fof(f23922,plain,(
  sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f223,f403,f377])).
fof(f23923,plain,(
  sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl7),
  inference(unit_resulting_resolution,[],[f403,f223,f403,f377])).
fof(f23929,plain,(
  ( ! [X0] : (sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'F_0')) ) | $spl7),
  inference(unit_resulting_resolution,[],[f418,f403,f389])).
fof(f23930,plain,(
  ( ! [X0] : (sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0',X0)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f419,f403,f389])).
fof(f23931,plain,(
  ~sP0('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f405])).
fof(f23939,plain,(
  ~sP0('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f404,f403,f405])).
fof(f23940,plain,(
  ~sP0('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl7),
  inference(unit_resulting_resolution,[],[f403,f403,f405])).
fof(f25015,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336,f24338])).
fof(f25014,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594,f24336])).
fof(f25013,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332,f24594])).
fof(f25012,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330,f24332])).
fof(f25011,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328,f24330])).
fof(f25010,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807,f24328])).
fof(f25009,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810,f24807])).
fof(f25008,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813,f24810])).
fof(f25007,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820,f24813])).
fof(f25006,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004,f24820])).
fof(f25005,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824,f25004])).
fof(f25003,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091,f24824])).
fof(f25002,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24738,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f25001,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20700,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f25000,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20940,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24999,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20931,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24998,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20925,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24997,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24996,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24995,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20910,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24994,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20908,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24993,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20906,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24992,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24991,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24990,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20905,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24989,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20950,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24988,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20953,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24987,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20759,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24986,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20760,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24985,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20761,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24984,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20762,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24983,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20763,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24982,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20764,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24981,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20765,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24980,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20766,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24979,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20767,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24978,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20768,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24977,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20769,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24976,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20770,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24975,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20771,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24974,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20772,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24973,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20773,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24972,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20774,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24971,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20775,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24970,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20776,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24969,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20777,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24968,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20778,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24967,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20779,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24966,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20896,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24965,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20890,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24964,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20888,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24963,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20800,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24962,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20807,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24961,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20808,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24960,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20810,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24959,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20812,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24958,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24957,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24956,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20984,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24955,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20987,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24954,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20872,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24953,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20870,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24952,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20990,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24951,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl8 | $spl48)),
  inference(global_subsumption,[],[f24950,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24949,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl12 | $spl48)),
  inference(global_subsumption,[],[f24948,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24947,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20991,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24946,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20992,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24945,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f20867,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24944,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl56 | $spl59)),
  inference(global_subsumption,[],[f24943,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24942,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f22352,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24941,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f22796,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24940,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24939,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24938,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f22979,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24937,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23034,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24936,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23101,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24935,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23156,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24934,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23614,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24933,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f23694,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24932,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083,f24091])).
fof(f24931,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076,f24083])).
fof(f24930,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069,f24076])).
fof(f24929,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068,f24069])).
fof(f24928,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061,f24068])).
fof(f24927,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060,f24061])).
fof(f24926,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050,f24060])).
fof(f24925,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049,f24050])).
fof(f24924,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039,f24049])).
fof(f24923,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038,f24039])).
fof(f24922,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036,f24038])).
fof(f24921,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029,f24036])).
fof(f24920,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022,f24029])).
fof(f24919,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015,f24022])).
fof(f24918,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013,f24015])).
fof(f24917,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011,f24013])).
fof(f24916,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979,f24011])).
fof(f24915,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl42)),
  inference(global_subsumption,[],[f24009,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24009,plain,(
  ~sP12('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | ($spl7 | $spl42)),
  inference(unit_resulting_resolution,[],[f223,f403,f2075])).
fof(f24914,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl38)),
  inference(global_subsumption,[],[f24008,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24008,plain,(
  ( ! [X0] : (sP12('T_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl7 | $spl38)),
  inference(unit_resulting_resolution,[],[f403,f2069])).
fof(f24913,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl36)),
  inference(global_subsumption,[],[f24006,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24006,plain,(
  ~sP11('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | ($spl7 | $spl36)),
  inference(unit_resulting_resolution,[],[f223,f403,f2066])).
fof(f24912,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl34)),
  inference(global_subsumption,[],[f24003,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24003,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl34)),
  inference(unit_resulting_resolution,[],[f403,f403,f2063])).
fof(f24911,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl34)),
  inference(global_subsumption,[],[f24002,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24002,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | ($spl7 | $spl34)),
  inference(unit_resulting_resolution,[],[f404,f403,f2063])).
fof(f24910,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl34)),
  inference(global_subsumption,[],[f23999,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23999,plain,(
  ~sP10('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl34)),
  inference(unit_resulting_resolution,[],[f403,f403,f2063])).
fof(f24909,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl34)),
  inference(global_subsumption,[],[f23998,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23998,plain,(
  ~sP10('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl34)),
  inference(unit_resulting_resolution,[],[f404,f403,f2063])).
fof(f24908,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl28)),
  inference(global_subsumption,[],[f23995,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23995,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl28)),
  inference(unit_resulting_resolution,[],[f403,f403,f2054])).
fof(f24907,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl28)),
  inference(global_subsumption,[],[f23994,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23994,plain,(
  ~sP9('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl28)),
  inference(unit_resulting_resolution,[],[f404,f403,f2054])).
fof(f24906,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl28)),
  inference(global_subsumption,[],[f23991,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23991,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl28)),
  inference(unit_resulting_resolution,[],[f403,f403,f2054])).
fof(f24905,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl28)),
  inference(global_subsumption,[],[f23990,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23990,plain,(
  ~sP9('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | ($spl7 | $spl28)),
  inference(unit_resulting_resolution,[],[f404,f403,f2054])).
fof(f24904,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl26)),
  inference(global_subsumption,[],[f23989,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23989,plain,(
  ~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','T_0') | ($spl7 | $spl26)),
  inference(unit_resulting_resolution,[],[f223,f403,f2051])).
fof(f24903,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl22)),
  inference(global_subsumption,[],[f23987,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23987,plain,(
  ~sP7('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl22)),
  inference(unit_resulting_resolution,[],[f223,f403,f2045])).
fof(f24902,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl20)),
  inference(global_subsumption,[],[f23985,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23985,plain,(
  ~sP4('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl20)),
  inference(unit_resulting_resolution,[],[f223,f403,f2042])).
fof(f24901,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl18)),
  inference(global_subsumption,[],[f23983,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23983,plain,(
  ~sP5('T_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl18)),
  inference(unit_resulting_resolution,[],[f223,f403,f2039])).
fof(f24900,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl12)),
  inference(global_subsumption,[],[f23982,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23982,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | ($spl7 | $spl12)),
  inference(unit_resulting_resolution,[],[f403,f2029])).
fof(f24899,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl8)),
  inference(global_subsumption,[],[f23981,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f23981,plain,(
  sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl8)),
  inference(unit_resulting_resolution,[],[f403,f2025])).
fof(f24898,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403,f23979])).
fof(f24897,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947,f403])).
fof(f24896,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927,f23947])).
fof(f24895,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924,f23927])).
fof(f24894,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914,f23924])).
fof(f24893,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892,f23914])).
fof(f24892,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891,f23892])).
fof(f24891,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888,f23891])).
fof(f24890,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887,f23888])).
fof(f24889,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866,f23887])).
fof(f24888,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865,f23866])).
fof(f24887,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861,f23865])).
fof(f24886,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860,f23861])).
fof(f24885,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835,f23860])).
fof(f24884,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818,f23835])).
fof(f24883,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769,f23818])).
fof(f24882,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764,f23769])).
fof(f24881,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726,f23764])).
fof(f24880,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725,f23726])).
fof(f24879,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719,f23725])).
fof(f24878,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717,f23719])).
fof(f24877,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716,f23717])).
fof(f24876,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715,f23716])).
fof(f24875,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675,f23715])).
fof(f24874,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48)),
  inference(global_subsumption,[],[f24151,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675])).
fof(f24151,plain,(
  ~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl48)),
  inference(superposition,[],[f403,f2802])).
fof(f24873,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f24256,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675])).
fof(f24872,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl48 | $spl59)),
  inference(global_subsumption,[],[f24306,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675])).
fof(f24871,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670,f24675])).
fof(f24870,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661,f24670])).
fof(f24869,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653,f24661])).
fof(f24868,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645,f24653])).
fof(f24867,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640,f24645])).
fof(f24866,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635,f24640])).
fof(f24865,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634,f24635])).
fof(f24864,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629,f24634])).
fof(f24863,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628,f24629])).
fof(f24862,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619,f24628])).
fof(f24861,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610,f24619])).
fof(f24860,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601,f24610])).
fof(f24859,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596,f24601])).
fof(f24858,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528,f24596])).
fof(f24857,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl42)),
  inference(global_subsumption,[],[f24591,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24856,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl40)),
  inference(global_subsumption,[],[f24590,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24855,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl36)),
  inference(global_subsumption,[],[f24587,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24854,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl32)),
  inference(global_subsumption,[],[f24586,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24853,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl30)),
  inference(global_subsumption,[],[f24585,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24852,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl26)),
  inference(global_subsumption,[],[f24584,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24851,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl24)),
  inference(global_subsumption,[],[f24582,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24850,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl24)),
  inference(global_subsumption,[],[f24581,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24849,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl24)),
  inference(global_subsumption,[],[f24579,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24848,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl24)),
  inference(global_subsumption,[],[f24578,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24847,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl22)),
  inference(global_subsumption,[],[f24575,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24846,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl20)),
  inference(global_subsumption,[],[f24572,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24845,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl18)),
  inference(global_subsumption,[],[f24569,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24844,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl14)),
  inference(global_subsumption,[],[f24568,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24843,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523,f24528])).
fof(f24842,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508,f24523])).
fof(f24841,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477,f24508])).
fof(f24840,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471,f24477])).
fof(f24839,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436,f24471])).
fof(f24838,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428,f24436])).
fof(f24837,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427,f24428])).
fof(f24836,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424,f24427])).
fof(f24835,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422,f24424])).
fof(f24834,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411,f24422])).
fof(f24833,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406,f24411])).
fof(f24832,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405,f24406])).
fof(f24831,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400,f24405])).
fof(f24830,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399,f24400])).
fof(f24829,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367,f24399])).
fof(f24828,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356,f24367])).
fof(f24827,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342,f24356])).
fof(f24826,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327,f24342])).
fof(f24825,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f7579,f7582,f16536,f16374,f11741,f12106,f16824,f16828,f16834,f16836,f12624,f12625,f16856,f16870,f16871,f16872,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f13303,f16949,f16950,f17002,f14283,f16937,f2106,f384,f385,f383,f386,f2105,f16936,f16854,f13305,f12885,f12626,f12108,f3044,f1816,f1705,f1038,f1037,f404,f242,f241,f12886,f13306,f13824,f14244,f13565,f13563,f12627,f22244,f22232,f22257,f22258,f22259,f22260,f22261,f22262,f22263,f22264,f22265,f22266,f22267,f22268,f22269,f22270,f22271,f22272,f22273,f22274,f22275,f22276,f22277,f22278,f22279,f22280,f22388,f22900,f22898,f398,f403,f396,f23662,f23663,f23940,f23939,f23931,f23930,f23929,f23923,f23922,f23919,f23918,f23917,f23907,f23898,f23897,f23895,f23886,f23885,f23884,f23883,f23879,f23877,f23871,f23870,f23837,f23836,f23834,f23829,f23828,f23823,f23822,f23821,f23816,f23814,f23800,f23798,f23793,f23792,f23791,f23790,f23783,f23782,f23774,f23773,f23772,f23768,f23767,f23758,f23755,f23752,f23751,f23741,f23738,f23737,f23727,f23724,f23723,f23721,f23714,f24216,f24223,f24541,f24539,f24537,f24535,f24534,f24533,f24532,f24527,f24519,f24518,f24514,f24513,f24484,f24483,f24482,f24476,f24470,f24469,f24464,f24451,f24442,f24440,f24439,f24435,f24434,f24433,f24432,f24421,f24417,f24416,f24398,f24397,f24395,f24393,f24380,f24379,f24378,f24377,f24373,f24372,f24366,f24362,f24361,f24352,f24351,f24350,f24346,f24345,f24341,f24340,f24339,f24335,f24334,f24329,f24327])).
fof(f3200,plain,(
  ( ! [X9] : (p(s(bool,X9))) ) | $spl66),
  inference(cnf_transformation,[],[f3200_D])).
fof(f3200_D,plain,(
  ( ! [X9] : (p(s(bool,X9))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f2026,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f2026_D])).
fof(f2026_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f24817,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1))) ) | ($spl0 | $spl136)),
  inference(condensation,[],[f24816])).
fof(f24816,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X10)) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl0 | $spl136)),
  inference(subsumption_resolution,[],[f24815,f17364])).
fof(f24814,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24813,f17357])).
fof(f24811,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24810,f17357])).
fof(f24808,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24807,f17357])).
fof(f24805,plain,(
  $false | ($spl0 | $spl2 | $spl7 | $spl55)),
  inference(subsumption_resolution,[],[f24804,f404])).
fof(f24804,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2 | $spl7 | $spl55)),
  inference(forward_demodulation,[],[f24327,f24170])).
fof(f24170,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl55)),
  inference(forward_demodulation,[],[f23948,f19065])).
fof(f19065,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl55),
  inference(unit_resulting_resolution,[],[f223,f427,f2806,f2083])).
fof(f2806,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl55),
  inference(cnf_transformation,[],[f2806_D])).
fof(f2806_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f23948,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl7 | $spl55)),
  inference(unit_resulting_resolution,[],[f2806,f403,f572])).
fof(f24803,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24328,f17357])).
fof(f24802,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24330,f17357])).
fof(f24801,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24332,f17357])).
fof(f24800,plain,(
  $false | ($spl0 | $spl132)),
  inference(subsumption_resolution,[],[f24336,f17360])).
fof(f24799,plain,(
  $false | ($spl0 | $spl134)),
  inference(subsumption_resolution,[],[f24338,f17363])).
fof(f24757,plain,(
  $false | ($spl0 | $spl131)),
  inference(subsumption_resolution,[],[f24594,f17357])).
fof(f24756,plain,(
  $false | ($spl0 | $spl55 | $spl131)),
  inference(subsumption_resolution,[],[f24595,f17357])).
fof(f24595,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | ($spl0 | $spl55)),
  inference(unit_resulting_resolution,[],[f2806,f2806,f396,f2083])).
fof(f23661,plain,(
  $false | ($spl0 | $spl122)),
  inference(subsumption_resolution,[],[f23660,f404])).
fof(f23660,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl122)),
  inference(forward_demodulation,[],[f396,f17320])).
fof(f23655,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f23654,f404])).
fof(f23654,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f23653,f11226])).
fof(f11226,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl1),
  inference(unit_resulting_resolution,[],[f427,f8331])).
fof(f8331,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f8225,f223])).
fof(f8225,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f397,f524])).
fof(f23653,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f23636,f223])).
fof(f23636,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f1181,f813])).
fof(f813,plain,(
  s(bool,'T_0') = s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f223,f400,f268])).
fof(f1181,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X2)))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X2),s('type.typeSystem.tenv_val',sK16))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1148,f223])).
fof(f1148,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X2),s('type.typeSystem.tenv_val',sK16)))))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X2))))) ) | $spl6),
  inference(superposition,[],[f383,f602])).
fof(f602,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f223,f402,f268])).
fof(f21513,plain,(
  ( ! [X10,X9] : (s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X9,X10,bool,fun(bool,bool)))))) ) | $spl200),
  inference(cnf_transformation,[],[f21513_D])).
fof(f21513_D,plain,(
  ( ! [X10,X9] : (s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X9,X10,bool,fun(bool,bool)))))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f22819,plain,(
  ( ! [X76,X75] : (s(bool,X76) != s(bool,f(s(fun(bool,bool),X75))) | s(bool,'T_0') = s(bool,X76)) ) | $spl204),
  inference(cnf_transformation,[],[f22819_D])).
fof(f22819_D,plain,(
  ( ! [X76,X75] : (s(bool,X76) != s(bool,f(s(fun(bool,bool),X75))) | s(bool,'T_0') = s(bool,X76)) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f22775,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,X80) != s(bool,f(s(fun(bool,bool),X79))) | s(fun(fun(bool,bool),bool),X77) = s(fun(fun(bool,bool),bool),X78) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X77,X78,bool,fun(bool,bool)))))) ) | $spl74),
  inference(superposition,[],[f1705,f5365])).
fof(f22774,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,X76) != s(bool,f(s(fun(bool,bool),X75))) | s(fun(fun(bool,bool),bool),X73) = s(fun(fun(bool,bool),bool),X74) | s(bool,'T_0') = s(bool,X76) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X73,X74,bool,fun(bool,bool)))))) ) | $spl74),
  inference(superposition,[],[f1705,f5365])).
fof(f21514,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11)))) ) | $spl202),
  inference(cnf_transformation,[],[f21514_D])).
fof(f21514_D,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f21510,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11))) | s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X9,X10,bool,fun(bool,bool)))))) ) | $spl74),
  inference(superposition,[],[f1038,f5365])).
fof(f21506,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X11))) | s(fun(fun(bool,bool),bool),X9) = s(fun(fun(bool,bool),bool),X10) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK20(X9,X10,bool,fun(bool,bool)))))) ) | $spl74),
  inference(superposition,[],[f1038,f5365])).
fof(f17568,plain,(
  ( ! [X1089,X1090] : (s(bool,X1089) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1090) | s(bool,X1089) = s(bool,X1090)) ) | $spl198),
  inference(cnf_transformation,[],[f17568_D])).
fof(f17568_D,plain,(
  ( ! [X1089,X1090] : (s(bool,X1089) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1090) | s(bool,X1089) = s(bool,X1090)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f2803,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl50),
  inference(cnf_transformation,[],[f2803_D])).
fof(f2803_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2808,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl56),
  inference(cnf_transformation,[],[f2808_D])).
fof(f2808_D,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f12627,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1089) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1086) | s(bool,X1089) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f16855,plain,(
  ( ! [X1075,X1079,X1078,X1076] : (s(fun(bool,bool),X1075) = s(fun(bool,bool),X1076) | s(bool,'T_0') = s(bool,X1079) | s(bool,X1078) = s(bool,X1079) | s(bool,X1078) = s(bool,sK20(X1075,X1076,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X1075,X1076,bool,bool))))) ) | $spl116),
  inference(cnf_transformation,[],[f16855_D])).
fof(f16855_D,plain,(
  ( ! [X1075,X1079,X1078,X1076] : (s(fun(bool,bool),X1075) = s(fun(bool,bool),X1076) | s(bool,'T_0') = s(bool,X1079) | s(bool,X1078) = s(bool,X1079) | s(bool,X1078) = s(bool,sK20(X1075,X1076,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X1075,X1076,bool,bool))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f6951,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(bool,'T_0') = s(bool,X11)) ) | $spl100),
  inference(cnf_transformation,[],[f6951_D])).
fof(f6951_D,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(bool,'T_0') = s(bool,X11)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f13563,plain,(
  ( ! [X1075,X1079,X1077,X1078,X1076] : (s(bool,'F_0') != s(bool,f(s(bool,X1077))) | s(fun(bool,bool),X1075) = s(fun(bool,bool),X1076) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X1075,X1076,bool,bool)))) | s(bool,X1078) = s(bool,sK20(X1075,X1076,bool,bool)) | s(bool,X1078) = s(bool,X1079) | s(bool,'T_0') = s(bool,X1079) | s(bool,'T_0') = s(bool,X1077)) )),
  inference(superposition,[],[f1038,f1645])).
fof(f13565,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1089) = s(bool,g(s(bool,'F_0'))) | s(bool,X1089) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090) | s(bool,'T_0') = s(bool,X1086)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f17567,plain,(
  ( ! [X1062,X1060,X1061] : (s(bool,X1060) = s(bool,X1061) | s(bool,'T_0') = s(bool,X1062) | s(bool,X1060) = s(bool,X1062) | s(bool,X1061) = s(bool,g(s(bool,'F_0')))) ) | $spl196),
  inference(cnf_transformation,[],[f17567_D])).
fof(f17567_D,plain,(
  ( ! [X1062,X1060,X1061] : (s(bool,X1060) = s(bool,X1061) | s(bool,'T_0') = s(bool,X1062) | s(bool,X1060) = s(bool,X1062) | s(bool,X1061) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f2805,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(cnf_transformation,[],[f2805_D])).
fof(f2805_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f14244,plain,(
  ( ! [X1058,X1062,X1060,X1059,X1061] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1058) = s(fun(bool,bool),X1059) | s(bool,'T_0') = s(bool,sK20(X1058,X1059,bool,bool)) | s(bool,X1060) = s(bool,X1061) | s(bool,X1061) = s(bool,X1062) | s(bool,'T_0') = s(bool,X1062) | s(bool,X1060) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1037,f1645])).
fof(f2807,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl54),
  inference(cnf_transformation,[],[f2807_D])).
fof(f2807_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f17566,plain,(
  ( ! [X1000,X1004,X1003] : (s(bool,X1000) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1004) | s(bool,X1003) = s(bool,X1004) | s(bool,X1000) = s(bool,X1003)) ) | $spl194),
  inference(cnf_transformation,[],[f17566_D])).
fof(f17566_D,plain,(
  ( ! [X1000,X1004,X1003] : (s(bool,X1000) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1004) | s(bool,X1003) = s(bool,X1004) | s(bool,X1000) = s(bool,X1003)) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f13824,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1086) = s(bool,X1089) | s(bool,X1089) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1037,f1645])).
fof(f13306,plain,(
  ( ! [X1058,X1062,X1060,X1059,X1061] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1058) = s(fun(bool,bool),X1059) | s(bool,'T_0') = s(bool,sK20(X1058,X1059,bool,bool)) | s(bool,X1060) = s(bool,X1061) | s(bool,X1061) = s(bool,g(s(bool,'F_0'))) | s(bool,X1060) = s(bool,X1062) | s(bool,'T_0') = s(bool,X1062)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f12886,plain,(
  ( ! [X1002,X1000,X1004,X1003,X1001] : (s(bool,X1000) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1001) = s(fun(bool,bool),X1002) | s(bool,'T_0') = s(bool,sK20(X1001,X1002,bool,bool)) | s(bool,X1000) = s(bool,X1003) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X1003) = s(bool,X1004) | s(bool,'T_0') = s(bool,X1004)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f7245,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,'T_0') = s(bool,sK20(X53,X54,bool,bool))) ) | $spl54),
  inference(superposition,[],[f1037,f2807])).
fof(f17320,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl122),
  inference(cnf_transformation,[],[f17320_D])).
fof(f17320_D,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f11488,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f11228])).
fof(f11228,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f8331,f230])).
fof(f11479,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f11240])).
fof(f11240,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f230,f8331])).
fof(f17357,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl131),
  inference(cnf_transformation,[],[f17357_D])).
fof(f17357_D,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl131),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl131])])).
fof(f17415,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | p(s(bool,X1))) ) | $spl1),
  inference(subsumption_resolution,[],[f11241,f237])).
fof(f11241,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl1),
  inference(superposition,[],[f237,f8331])).
fof(f17414,plain,(
  ( ! [X103] : (sP0(X103,g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))))) ) | $spl192),
  inference(cnf_transformation,[],[f17414_D])).
fof(f17414_D,plain,(
  ( ! [X103] : (sP0(X103,g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f11468,plain,(
  ( ! [X103,X102] : (sP0(X103,g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X102)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11284])).
fof(f11284,plain,(
  ( ! [X103,X102] : (sP0(X103,g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7286,f8331])).
fof(f7286,plain,(
  ( ! [X0,X1] : (sP0(X1,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7263,f230])).
fof(f7263,plain,(
  ( ! [X3] : (sP0(X3,g(s(bool,'F_0')))) ) | $spl54),
  inference(subsumption_resolution,[],[f7214,f223])).
fof(f7214,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | sP0(X3,g(s(bool,'F_0')))) ) | $spl54),
  inference(superposition,[],[f274,f2807])).
fof(f17413,plain,(
  ( ! [X105] : (sP0(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X105)) ) | $spl190),
  inference(cnf_transformation,[],[f17413_D])).
fof(f17413_D,plain,(
  ( ! [X105] : (sP0(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X105)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f11467,plain,(
  ( ! [X105,X104] : (sP0(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X105) | s(bool,'T_0') = s(bool,X104)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11285])).
fof(f11285,plain,(
  ( ! [X105,X104] : (sP0(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X105) | s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,X104)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7294,f8331])).
fof(f7294,plain,(
  ( ! [X0,X1] : (sP0(g(s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7264,f230])).
fof(f7264,plain,(
  ( ! [X4] : (sP0(g(s(bool,'F_0')),X4)) ) | $spl54),
  inference(subsumption_resolution,[],[f7215,f223])).
fof(f7215,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0(g(s(bool,'F_0')),X4)) ) | $spl54),
  inference(superposition,[],[f275,f2807])).
fof(f17412,plain,(
  ~sP6('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | $spl189),
  inference(cnf_transformation,[],[f17412_D])).
fof(f17412_D,plain,(
  ~sP6('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') <=> ~$spl189),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl189])])).
fof(f11462,plain,(
  ( ! [X110] : (~sP6('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | s(bool,'T_0') = s(bool,X110)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11290])).
fof(f11290,plain,(
  ( ! [X110] : (~sP6('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,X110)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7393,f8331])).
fof(f7393,plain,(
  ( ! [X0] : (~sP6('F_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7193,f230])).
fof(f7193,plain,(
  ~sP6('F_0',g(s(bool,'F_0')),'T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f404,f2807,f331])).
fof(f17410,plain,(
  sP6('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | $spl186),
  inference(cnf_transformation,[],[f17410_D])).
fof(f17410_D,plain,(
  sP6('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f11461,plain,(
  ( ! [X111] : (sP6('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | s(bool,'T_0') = s(bool,X111)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11291])).
fof(f11291,plain,(
  ( ! [X111] : (sP6('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0') | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7404,f8331])).
fof(f7404,plain,(
  ( ! [X0] : (sP6('T_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7194,f230])).
fof(f7194,plain,(
  sP6('T_0',g(s(bool,'F_0')),'T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f2807,f329])).
fof(f17408,plain,(
  ~sP6('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl185),
  inference(cnf_transformation,[],[f17408_D])).
fof(f17408_D,plain,(
  ~sP6('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl185),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl185])])).
fof(f11460,plain,(
  ( ! [X112] : (~sP6('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X112)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11292])).
fof(f11292,plain,(
  ( ! [X112] : (~sP6('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,X112)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7438,f8331])).
fof(f7438,plain,(
  ( ! [X0] : (~sP6('F_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7195,f230])).
fof(f7195,plain,(
  ~sP6('F_0','T_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f404,f2807,f331])).
fof(f17406,plain,(
  sP6('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl182),
  inference(cnf_transformation,[],[f17406_D])).
fof(f17406_D,plain,(
  sP6('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f11459,plain,(
  ( ! [X113] : (sP6('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11293])).
fof(f11293,plain,(
  ( ! [X113] : (sP6('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7450,f8331])).
fof(f7450,plain,(
  ( ! [X0] : (sP6('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7196,f230])).
fof(f7196,plain,(
  sP6('T_0','T_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f223,f2807,f329])).
fof(f17404,plain,(
  ~sP4(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','F_0') | $spl181),
  inference(cnf_transformation,[],[f17404_D])).
fof(f17404_D,plain,(
  ~sP4(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','F_0') <=> ~$spl181),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl181])])).
fof(f11455,plain,(
  ( ! [X117] : (~sP4(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','F_0') | s(bool,'T_0') = s(bool,X117)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11297])).
fof(f11297,plain,(
  ( ! [X117] : (~sP4(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','F_0') | s(bool,'T_0') = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7543,f8331])).
fof(f7543,plain,(
  ( ! [X0] : (~sP4(g(s(bool,X0)),'T_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7390,f230])).
fof(f7390,plain,(
  ~sP4(g(s(bool,'F_0')),'T_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f416,f410,f7193,f313])).
fof(f17402,plain,(
  sP5('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl178),
  inference(cnf_transformation,[],[f17402_D])).
fof(f17402_D,plain,(
  sP5('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f11454,plain,(
  ( ! [X118] : (sP5('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11298])).
fof(f11298,plain,(
  ( ! [X118] : (sP5('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X118) | s(bool,'T_0') = s(bool,X118)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7596,f8331])).
fof(f7596,plain,(
  ( ! [X0] : (sP5('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7401,f230])).
fof(f7401,plain,(
  sP5('T_0','T_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f7194,f311])).
fof(f17400,plain,(
  ~sP4('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | $spl177),
  inference(cnf_transformation,[],[f17400_D])).
fof(f17400_D,plain,(
  ~sP4('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') <=> ~$spl177),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl177])])).
fof(f11453,plain,(
  ( ! [X119] : (~sP4('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X119)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11299])).
fof(f11299,plain,(
  ( ! [X119] : (~sP4('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f7610,f8331])).
fof(f7610,plain,(
  ( ! [X0] : (~sP4('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f7435,f230])).
fof(f7435,plain,(
  ~sP4('T_0',g(s(bool,'F_0')),'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f404,f415,f410,f7195,f315])).
fof(f17398,plain,(
  sP1(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | $spl174),
  inference(cnf_transformation,[],[f17398_D])).
fof(f17398_D,plain,(
  sP1(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f11445,plain,(
  ( ! [X127] : (sP1(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X127)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11307])).
fof(f11307,plain,(
  ( ! [X127] : (sP1(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8621,f8331])).
fof(f8621,plain,(
  ( ! [X0] : (sP1(g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8613,f230])).
fof(f8613,plain,(
  sP1(g(s(bool,'F_0')),'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f404,f7265])).
fof(f7265,plain,(
  ( ! [X5] : (sP1(g(s(bool,'F_0')),X5) | p(s(bool,X5))) ) | $spl54),
  inference(subsumption_resolution,[],[f7216,f223])).
fof(f7216,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1(g(s(bool,'F_0')),X5)) ) | $spl54),
  inference(superposition,[],[f290,f2807])).
fof(f17396,plain,(
  sP1('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl172),
  inference(cnf_transformation,[],[f17396_D])).
fof(f17396_D,plain,(
  sP1('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f11444,plain,(
  ( ! [X128] : (sP1('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X128)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11308])).
fof(f11308,plain,(
  ( ! [X128] : (sP1('F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8651,f8331])).
fof(f8651,plain,(
  ( ! [X0] : (sP1('F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8643,f230])).
fof(f8643,plain,(
  sP1('F_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f404,f7266])).
fof(f7266,plain,(
  ( ! [X6] : (sP1(X6,g(s(bool,'F_0'))) | p(s(bool,X6))) ) | $spl54),
  inference(subsumption_resolution,[],[f7217,f223])).
fof(f7217,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,g(s(bool,'F_0')))) ) | $spl54),
  inference(superposition,[],[f293,f2807])).
fof(f17394,plain,(
  ( ! [X130] : (sP2(X130,'T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))))) ) | $spl170),
  inference(cnf_transformation,[],[f17394_D])).
fof(f17394_D,plain,(
  ( ! [X130] : (sP2(X130,'T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f11443,plain,(
  ( ! [X130,X129] : (sP2(X130,'T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X129)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11309])).
fof(f11309,plain,(
  ( ! [X130,X129] : (sP2(X130,'T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X129) | s(bool,'T_0') = s(bool,X129)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8777,f8331])).
fof(f8777,plain,(
  ( ! [X0,X1] : (sP2(X1,'T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8737,f230])).
fof(f8737,plain,(
  ( ! [X0] : (sP2(X0,'T_0',g(s(bool,'F_0')))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f223,f7267])).
fof(f7267,plain,(
  ( ! [X8,X7] : (sP2(X8,X7,g(s(bool,'F_0'))) | ~p(s(bool,X7))) ) | $spl54),
  inference(subsumption_resolution,[],[f7218,f223])).
fof(f7218,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | sP2(X8,X7,g(s(bool,'F_0')))) ) | $spl54),
  inference(superposition,[],[f301,f2807])).
fof(f17393,plain,(
  ( ! [X132] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X132,'T_0')) ) | $spl168),
  inference(cnf_transformation,[],[f17393_D])).
fof(f17393_D,plain,(
  ( ! [X132] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X132,'T_0')) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f11442,plain,(
  ( ! [X132,X131] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X132,'T_0') | s(bool,'T_0') = s(bool,X131)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11310])).
fof(f11310,plain,(
  ( ! [X132,X131] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X132,'T_0') | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8813,f8331])).
fof(f8813,plain,(
  ( ! [X0,X1] : (sP10(g(s(bool,X0)),X1,'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8784,f230])).
fof(f8784,plain,(
  ( ! [X0] : (sP10(g(s(bool,'F_0')),X0,'T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f223,f7275])).
fof(f7275,plain,(
  ( ! [X24,X23] : (sP10(g(s(bool,'F_0')),X24,X23) | ~p(s(bool,X23))) ) | $spl54),
  inference(subsumption_resolution,[],[f7226,f223])).
fof(f7226,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP10(g(s(bool,'F_0')),X24,X23)) ) | $spl54),
  inference(superposition,[],[f361,f2807])).
fof(f17392,plain,(
  ( ! [X134] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X134)) ) | $spl166),
  inference(cnf_transformation,[],[f17392_D])).
fof(f17392_D,plain,(
  ( ! [X134] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X134)) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f11441,plain,(
  ( ! [X134,X133] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X134) | s(bool,'T_0') = s(bool,X133)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11311])).
fof(f11311,plain,(
  ( ! [X134,X133] : (sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X134) | s(bool,'T_0') = s(bool,X133) | s(bool,'T_0') = s(bool,X133)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8836,f8331])).
fof(f8836,plain,(
  ( ! [X0,X1] : (sP10(g(s(bool,X0)),'T_0',X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8821,f230])).
fof(f8821,plain,(
  ( ! [X0] : (sP10(g(s(bool,'F_0')),'T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f223,f7276])).
fof(f7276,plain,(
  ( ! [X26,X25] : (sP10(g(s(bool,'F_0')),X25,X26) | ~p(s(bool,X25))) ) | $spl54),
  inference(subsumption_resolution,[],[f7227,f223])).
fof(f7227,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | sP10(g(s(bool,'F_0')),X25,X26)) ) | $spl54),
  inference(superposition,[],[f362,f2807])).
fof(f17391,plain,(
  ( ! [X136] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X136,'F_0')) ) | $spl164),
  inference(cnf_transformation,[],[f17391_D])).
fof(f17391_D,plain,(
  ( ! [X136] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X136,'F_0')) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f11440,plain,(
  ( ! [X136,X135] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X136,'F_0') | s(bool,'T_0') = s(bool,X135)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11312])).
fof(f11312,plain,(
  ( ! [X136,X135] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),X136,'F_0') | s(bool,'T_0') = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8859,f8331])).
fof(f8859,plain,(
  ( ! [X0,X1] : (sP12(g(s(bool,X0)),X1,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8844,f230])).
fof(f8844,plain,(
  ( ! [X0] : (sP12(g(s(bool,'F_0')),X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f404,f7279])).
fof(f7279,plain,(
  ( ! [X31,X32] : (sP12(g(s(bool,'F_0')),X32,X31) | p(s(bool,X31))) ) | $spl54),
  inference(subsumption_resolution,[],[f7230,f223])).
fof(f7230,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP12(g(s(bool,'F_0')),X32,X31)) ) | $spl54),
  inference(superposition,[],[f378,f2807])).
fof(f17390,plain,(
  ( ! [X138] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X138)) ) | $spl162),
  inference(cnf_transformation,[],[f17390_D])).
fof(f17390_D,plain,(
  ( ! [X138] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X138)) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f11439,plain,(
  ( ! [X138,X137] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X138) | s(bool,'T_0') = s(bool,X137)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11313])).
fof(f11313,plain,(
  ( ! [X138,X137] : (sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0',X138) | s(bool,'T_0') = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f8882,f8331])).
fof(f8882,plain,(
  ( ! [X0,X1] : (sP12(g(s(bool,X0)),'T_0',X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f8867,f230])).
fof(f8867,plain,(
  ( ! [X0] : (sP12(g(s(bool,'F_0')),'T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f223,f7280])).
fof(f7280,plain,(
  ( ! [X33,X34] : (sP12(g(s(bool,'F_0')),X33,X34) | ~p(s(bool,X33))) ) | $spl54),
  inference(subsumption_resolution,[],[f7231,f223])).
fof(f7231,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP12(g(s(bool,'F_0')),X33,X34)) ) | $spl54),
  inference(superposition,[],[f379,f2807])).
fof(f17389,plain,(
  ~sP5('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | $spl161),
  inference(cnf_transformation,[],[f17389_D])).
fof(f17389_D,plain,(
  ~sP5('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f11438,plain,(
  ( ! [X139] : (~sP5('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X139)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11314])).
fof(f11314,plain,(
  ( ! [X139] : (~sP5('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10158,f8331])).
fof(f10158,plain,(
  ( ! [X0] : (~sP5('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10139,f230])).
fof(f10139,plain,(
  ~sP5('T_0',g(s(bool,'F_0')),'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f404,f7269])).
fof(f7269,plain,(
  ( ! [X12,X11] : (~sP5(X11,g(s(bool,'F_0')),X12) | p(s(bool,X12)) | ~p(s(bool,X11))) ) | $spl54),
  inference(subsumption_resolution,[],[f7220,f223])).
fof(f7220,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | p(s(bool,X12)) | ~sP5(X11,g(s(bool,'F_0')),X12)) ) | $spl54),
  inference(superposition,[],[f316,f2807])).
fof(f17387,plain,(
  ~sP6('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl159),
  inference(cnf_transformation,[],[f17387_D])).
fof(f17387_D,plain,(
  ~sP6('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl159),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl159])])).
fof(f11437,plain,(
  ( ! [X140] : (~sP6('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X140)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11315])).
fof(f11315,plain,(
  ( ! [X140] : (~sP6('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10173,f8331])).
fof(f10173,plain,(
  ( ! [X0] : (~sP6('T_0','F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10157,f230])).
fof(f10157,plain,(
  ~sP6('T_0','F_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f10139,f311])).
fof(f17385,plain,(
  ~sP7('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | $spl157),
  inference(cnf_transformation,[],[f17385_D])).
fof(f17385_D,plain,(
  ~sP7('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') <=> ~$spl157),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl157])])).
fof(f11436,plain,(
  ( ! [X141] : (~sP7('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X141)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11316])).
fof(f11316,plain,(
  ( ! [X141] : (~sP7('T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0') | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10267,f8331])).
fof(f10267,plain,(
  ( ! [X0] : (~sP7('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10248,f230])).
fof(f10248,plain,(
  ~sP7('T_0',g(s(bool,'F_0')),'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f404,f7271])).
fof(f7271,plain,(
  ( ! [X15,X16] : (~sP7(X15,g(s(bool,'F_0')),X16) | p(s(bool,X16)) | ~p(s(bool,X15))) ) | $spl54),
  inference(subsumption_resolution,[],[f7222,f223])).
fof(f7222,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP7(X15,g(s(bool,'F_0')),X16)) ) | $spl54),
  inference(superposition,[],[f339,f2807])).
fof(f17383,plain,(
  ~sP8('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl155),
  inference(cnf_transformation,[],[f17383_D])).
fof(f17383_D,plain,(
  ~sP8('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f11435,plain,(
  ( ! [X142] : (~sP8('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X142)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11317])).
fof(f11317,plain,(
  ( ! [X142] : (~sP8('F_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,X142)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10280,f8331])).
fof(f10280,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10266,f230])).
fof(f10266,plain,(
  ~sP8('F_0','T_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f10248,f332])).
fof(f17381,plain,(
  sP8(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','T_0') | $spl152),
  inference(cnf_transformation,[],[f17381_D])).
fof(f17381_D,plain,(
  sP8(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','T_0') <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f11434,plain,(
  ( ! [X143] : (sP8(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','T_0') | s(bool,'T_0') = s(bool,X143)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11318])).
fof(f11318,plain,(
  ( ! [X143] : (sP8(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'T_0','T_0') | s(bool,'T_0') = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10349,f8331])).
fof(f10349,plain,(
  ( ! [X0] : (sP8(g(s(bool,X0)),'T_0','T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10336,f230])).
fof(f10336,plain,(
  sP8(g(s(bool,'F_0')),'T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f223,f7272])).
fof(f7272,plain,(
  ( ! [X17,X18] : (sP8(g(s(bool,'F_0')),X17,X18) | ~p(s(bool,X18)) | ~p(s(bool,X17))) ) | $spl54),
  inference(subsumption_resolution,[],[f7223,f223])).
fof(f7223,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | sP8(g(s(bool,'F_0')),X17,X18)) ) | $spl54),
  inference(superposition,[],[f345,f2807])).
fof(f17379,plain,(
  sP7('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl150),
  inference(cnf_transformation,[],[f17379_D])).
fof(f17379_D,plain,(
  sP7('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f11433,plain,(
  ( ! [X144] : (sP7('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X144)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11319])).
fof(f11319,plain,(
  ( ! [X144] : (sP7('T_0','T_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10364,f8331])).
fof(f10364,plain,(
  ( ! [X0] : (sP7('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10348,f230])).
fof(f10348,plain,(
  sP7('T_0','T_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f10336,f332])).
fof(f17377,plain,(
  ~sP9(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | $spl149),
  inference(cnf_transformation,[],[f17377_D])).
fof(f17377_D,plain,(
  ~sP9(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f11432,plain,(
  ( ! [X145] : (~sP9(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | s(bool,'T_0') = s(bool,X145)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11320])).
fof(f11320,plain,(
  ( ! [X145] : (~sP9(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,X145)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10481,f8331])).
fof(f10481,plain,(
  ( ! [X0] : (~sP9(g(s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10459,f230])).
fof(f10459,plain,(
  ~sP9(g(s(bool,'F_0')),'F_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f404,f404,f7274])).
fof(f7274,plain,(
  ( ! [X21,X22] : (~sP9(g(s(bool,'F_0')),X21,X22) | p(s(bool,X22)) | p(s(bool,X21))) ) | $spl54),
  inference(subsumption_resolution,[],[f7225,f223])).
fof(f7225,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP9(g(s(bool,'F_0')),X21,X22)) ) | $spl54),
  inference(superposition,[],[f356,f2807])).
fof(f17375,plain,(
  ~sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | $spl147),
  inference(cnf_transformation,[],[f17375_D])).
fof(f17375_D,plain,(
  ~sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') <=> ~$spl147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl147])])).
fof(f11431,plain,(
  ( ! [X146] : (~sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | s(bool,'T_0') = s(bool,X146)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11321])).
fof(f11321,plain,(
  ( ! [X146] : (~sP10(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','F_0') | s(bool,'T_0') = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10493,f8331])).
fof(f10493,plain,(
  ( ! [X0] : (~sP10(g(s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10480,f230])).
fof(f10480,plain,(
  ~sP10(g(s(bool,'F_0')),'F_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f10459,f351])).
fof(f17373,plain,(
  ~sP11('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl145),
  inference(cnf_transformation,[],[f17373_D])).
fof(f17373_D,plain,(
  ~sP11('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl145),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl145])])).
fof(f11430,plain,(
  ( ! [X147] : (~sP11('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X147)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11322])).
fof(f11322,plain,(
  ( ! [X147] : (~sP11('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10586,f8331])).
fof(f10586,plain,(
  ( ! [X0] : (~sP11('T_0','F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10561,f230])).
fof(f10561,plain,(
  ~sP11('T_0','F_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f404,f223,f7278])).
fof(f7278,plain,(
  ( ! [X30,X29] : (~sP11(X30,X29,g(s(bool,'F_0'))) | ~p(s(bool,X30)) | p(s(bool,X29))) ) | $spl54),
  inference(subsumption_resolution,[],[f7229,f223])).
fof(f7229,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | ~p(s(bool,X30)) | ~sP11(X30,X29,g(s(bool,'F_0')))) ) | $spl54),
  inference(superposition,[],[f373,f2807])).
fof(f17371,plain,(
  ~sP12('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl143),
  inference(cnf_transformation,[],[f17371_D])).
fof(f17371_D,plain,(
  ~sP12('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl143),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl143])])).
fof(f11429,plain,(
  ( ! [X148] : (~sP12('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X148)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11323])).
fof(f11323,plain,(
  ( ! [X148] : (~sP12('T_0','F_0',g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X148) | s(bool,'T_0') = s(bool,X148)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10606,f8331])).
fof(f10606,plain,(
  ( ! [X0] : (~sP12('T_0','F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10585,f230])).
fof(f10585,plain,(
  ~sP12('T_0','F_0',g(s(bool,'F_0'))) | $spl54),
  inference(unit_resulting_resolution,[],[f10561,f368])).
fof(f17369,plain,(
  ~sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | $spl141),
  inference(cnf_transformation,[],[f17369_D])).
fof(f17369_D,plain,(
  ~sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') <=> ~$spl141),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl141])])).
fof(f11428,plain,(
  ( ! [X149] : (~sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | s(bool,'T_0') = s(bool,X149)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11324])).
fof(f11324,plain,(
  ( ! [X149] : (~sP12(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | s(bool,'T_0') = s(bool,X149) | s(bool,'T_0') = s(bool,X149)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10686,f8331])).
fof(f10686,plain,(
  ( ! [X0] : (~sP12(g(s(bool,X0)),'F_0','T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10672,f230])).
fof(f10672,plain,(
  ~sP12(g(s(bool,'F_0')),'F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f404,f7281])).
fof(f7281,plain,(
  ( ! [X35,X36] : (~sP12(g(s(bool,'F_0')),X36,X35) | p(s(bool,X36)) | ~p(s(bool,X35))) ) | $spl54),
  inference(subsumption_resolution,[],[f7232,f223])).
fof(f7232,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | p(s(bool,X36)) | ~sP12(g(s(bool,'F_0')),X36,X35)) ) | $spl54),
  inference(superposition,[],[f380,f2807])).
fof(f17367,plain,(
  ~sP11(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | $spl139),
  inference(cnf_transformation,[],[f17367_D])).
fof(f17367_D,plain,(
  ~sP11(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f11427,plain,(
  ( ! [X150] : (~sP11(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | s(bool,'T_0') = s(bool,X150)) ) | ($spl1 | $spl54)),
  inference(duplicate_literal_removal,[],[f11325])).
fof(f11325,plain,(
  ( ! [X150] : (~sP11(g(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))),'F_0','T_0') | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) ) | ($spl1 | $spl54)),
  inference(superposition,[],[f10702,f8331])).
fof(f10702,plain,(
  ( ! [X0] : (~sP11(g(s(bool,X0)),'F_0','T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl54),
  inference(superposition,[],[f10684,f230])).
fof(f10684,plain,(
  ~sP11(g(s(bool,'F_0')),'F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f223,f404,f10672,f372])).
fof(f17365,plain,(
  ( ! [X12] : (p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f11339,f237])).
fof(f11339,plain,(
  ( ! [X12] : (p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X12)) ) | $spl1),
  inference(superposition,[],[f242,f8331])).
fof(f17364,plain,(
  ( ! [X90,X89] : (s(bool,X89) != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X90) | s(bool,X89) = s(bool,X90)) ) | $spl136),
  inference(cnf_transformation,[],[f17364_D])).
fof(f17364_D,plain,(
  ( ! [X90,X89] : (s(bool,X89) != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X90) | s(bool,X89) = s(bool,X90)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f11575,plain,(
  ( ! [X90,X88,X89] : (p(s(bool,X88)) | s(bool,X89) != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) ) | $spl1),
  inference(subsumption_resolution,[],[f11369,f237])).
fof(f11369,plain,(
  ( ! [X90,X88,X89] : (p(s(bool,X88)) | s(bool,X89) != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,'T_0') = s(bool,X88)) ) | $spl1),
  inference(superposition,[],[f1747,f8331])).
fof(f17363,plain,(
  sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl134),
  inference(cnf_transformation,[],[f17363_D])).
fof(f17363_D,plain,(
  sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f17361,plain,(
  ( ! [X91] : (p(s(bool,X91)) | sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f11370,f237])).
fof(f11370,plain,(
  ( ! [X91] : (p(s(bool,X91)) | sP1('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X91)) ) | ($spl1 | $spl8)),
  inference(superposition,[],[f2025,f8331])).
fof(f17360,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | $spl132),
  inference(cnf_transformation,[],[f17360_D])).
fof(f17360_D,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f17358,plain,(
  ( ! [X92] : (p(s(bool,X92)) | sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0')) ) | ($spl1 | $spl12)),
  inference(subsumption_resolution,[],[f11371,f237])).
fof(f11371,plain,(
  ( ! [X92] : (p(s(bool,X92)) | sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0') | s(bool,'T_0') = s(bool,X92)) ) | ($spl1 | $spl12)),
  inference(superposition,[],[f2029,f8331])).
fof(f17355,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl128),
  inference(cnf_transformation,[],[f17355_D])).
fof(f17355_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f11421,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X0) = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) ) | $spl1),
  inference(equality_factoring,[],[f8331])).
fof(f17351,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | $spl126),
  inference(cnf_transformation,[],[f17351_D])).
fof(f17351_D,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f17354,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl54),
  inference(condensation,[],[f17353])).
fof(f17353,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,'T_0') = s(bool,X1090) | s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1086) = s(bool,X1089) | s(bool,'T_0') = s(bool,X1089)) ) | $spl54),
  inference(duplicate_literal_removal,[],[f17352])).
fof(f17352,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,'T_0') = s(bool,X1090) | s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1086) = s(bool,X1089) | s(bool,'T_0') = s(bool,X1089) | s(bool,'T_0') = s(bool,X1090)) ) | $spl54),
  inference(forward_demodulation,[],[f12109,f2807])).
fof(f12109,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1086) = s(bool,X1089) | s(bool,'T_0') = s(bool,X1089) | s(bool,X1090) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1090)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f17350,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl54),
  inference(condensation,[],[f17349])).
fof(f17349,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,'T_0') = s(bool,X1089) | s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1086) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090)) ) | $spl54),
  inference(duplicate_literal_removal,[],[f17348])).
fof(f17348,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,'T_0') = s(bool,X1089) | s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,'T_0') = s(bool,X1089) | s(bool,X1086) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090)) ) | $spl54),
  inference(forward_demodulation,[],[f12368,f2807])).
fof(f12368,plain,(
  ( ! [X1087,X1089,X1086,X1090,X1088] : (s(bool,X1086) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1087) = s(fun(bool,bool),X1088) | s(bool,'T_0') = s(bool,sK20(X1087,X1088,bool,bool)) | s(bool,X1089) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1089) | s(bool,X1086) = s(bool,X1090) | s(bool,'T_0') = s(bool,X1090)) )),
  inference(superposition,[],[f1037,f1645])).
fof(f17347,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl54),
  inference(condensation,[],[f17346])).
fof(f17346,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl54),
  inference(duplicate_literal_removal,[],[f17345])).
fof(f17345,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl54),
  inference(condensation,[],[f17344])).
fof(f17344,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK20(X0,X1,bool,bool)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl54),
  inference(condensation,[],[f17343])).
fof(f17343,plain,(
  ( ! [X1058,X1062,X1060,X1059,X1061] : (s(bool,'T_0') = s(bool,X1061) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1058) = s(fun(bool,bool),X1059) | s(bool,'T_0') = s(bool,sK20(X1058,X1059,bool,bool)) | s(bool,X1060) = s(bool,X1061) | s(bool,X1060) = s(bool,X1062) | s(bool,'T_0') = s(bool,X1062)) ) | $spl54),
  inference(forward_demodulation,[],[f13306,f2807])).
fof(f17342,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl54),
  inference(condensation,[],[f17341])).
fof(f17341,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl54),
  inference(duplicate_literal_removal,[],[f17340])).
fof(f17340,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl54),
  inference(condensation,[],[f17339])).
fof(f17339,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK20(X0,X1,bool,bool)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl54),
  inference(condensation,[],[f17338])).
fof(f17338,plain,(
  ( ! [X1058,X1062,X1060,X1059,X1061] : (s(bool,'T_0') = s(bool,X1060) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X1058) = s(fun(bool,bool),X1059) | s(bool,'T_0') = s(bool,sK20(X1058,X1059,bool,bool)) | s(bool,X1060) = s(bool,X1061) | s(bool,X1061) = s(bool,X1062) | s(bool,'T_0') = s(bool,X1062)) ) | $spl54),
  inference(forward_demodulation,[],[f14244,f2807])).
fof(f2810,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl59),
  inference(cnf_transformation,[],[f2810_D])).
fof(f2810_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f17142,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl100),
  inference(duplicate_literal_removal,[],[f17081])).
fof(f17081,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl100),
  inference(superposition,[],[f6951,f230])).
fof(f17337,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | $spl125),
  inference(cnf_transformation,[],[f17337_D])).
fof(f17337_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) <=> ~$spl125),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl125])])).
fof(f17125,plain,(
  ( ! [X41] : (s(bool,'F_0') != s(bool,f(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X41)) ) | ($spl1 | $spl100)),
  inference(duplicate_literal_removal,[],[f17094])).
fof(f17094,plain,(
  ( ! [X41] : (s(bool,'F_0') != s(bool,f(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl1 | $spl100)),
  inference(superposition,[],[f6951,f8331])).
fof(f17319,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | $spl120),
  inference(cnf_transformation,[],[f17319_D])).
fof(f17319_D,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f17321,plain,(
  s(bool,'F_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | $spl123),
  inference(cnf_transformation,[],[f17321_D])).
fof(f17321_D,plain,(
  s(bool,'F_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f17122,plain,(
  ( ! [X41] : (s(bool,'F_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | ($spl1 | $spl100)),
  inference(superposition,[],[f6951,f8331])).
fof(f17318,plain,(
  $false | ($spl6 | $spl53 | $spl100)),
  inference(global_subsumption,[],[f17317,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270,f17315])).
fof(f17315,plain,(
  ( ! [X4,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) ) | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17314,f223])).
fof(f17314,plain,(
  ( ! [X4,X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) ) | ($spl53 | $spl100)),
  inference(forward_demodulation,[],[f17313,f17147])).
fof(f17313,plain,(
  ( ! [X6,X4,X2,X0,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) ) | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17259,f223])).
fof(f17259,plain,(
  ( ! [X6,X4,X2,X0,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) ) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f384])).
fof(f17270,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17148,f17147])).
fof(f17148,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f241])).
fof(f17147,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17142,f7122])).
fof(f16875,plain,(
  ( ! [X710,X709,X711] : (s(bool,X709) = s(bool,f(s(bool,X709))) | s(bool,X709) = s(bool,X710) | s(bool,X710) = s(bool,X711) | s(bool,'T_0') = s(bool,X711)) ) | $spl53),
  inference(subsumption_resolution,[],[f12814,f427])).
fof(f12814,plain,(
  ( ! [X710,X709,X711] : (s(bool,X709) = s(bool,f(s(bool,X709))) | s(bool,X709) = s(bool,X710) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X710) = s(bool,X711) | s(bool,'T_0') = s(bool,X711)) ) | $spl53),
  inference(superposition,[],[f7122,f1645])).
fof(f16873,plain,(
  ( ! [X685,X687,X686] : (s(bool,'T_0') != s(bool,f(s(bool,X685))) | s(bool,X685) = s(bool,X686) | s(bool,X686) = s(bool,X687) | s(bool,'T_0') = s(bool,X687)) ) | $spl53),
  inference(subsumption_resolution,[],[f12806,f427])).
fof(f12806,plain,(
  ( ! [X685,X687,X686] : (s(bool,'T_0') != s(bool,f(s(bool,X685))) | s(bool,X685) = s(bool,X686) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X686) = s(bool,X687) | s(bool,'T_0') = s(bool,X687)) ) | $spl53),
  inference(superposition,[],[f2805,f1645])).
fof(f15350,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5('T_0',f(s(bool,X1)),'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15349])).
fof(f15349,plain,(
  ( ! [X329,X331,X328,X330] : (sP5('T_0',f(s(bool,X329)),'F_0') | s(bool,'T_0') = s(bool,X328) | s(bool,X329) = s(bool,X330) | s(bool,X330) = s(bool,X331) | s(bool,'T_0') = s(bool,X331)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12695])).
fof(f12695,plain,(
  ( ! [X329,X331,X328,X330] : (sP5('T_0',f(s(bool,X329)),'F_0') | s(bool,'T_0') = s(bool,X328) | s(bool,X329) = s(bool,X330) | s(bool,'T_0') = s(bool,X328) | s(bool,X330) = s(bool,X331) | s(bool,'T_0') = s(bool,X331)) ) | $spl53),
  inference(superposition,[],[f8597,f1645])).
fof(f15352,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP3(f(s(bool,X1)),'F_0','F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15351])).
fof(f15351,plain,(
  ( ! [X325,X327,X324,X326] : (~sP3(f(s(bool,X325)),'F_0','F_0') | s(bool,'T_0') = s(bool,X324) | s(bool,X325) = s(bool,X326) | s(bool,X326) = s(bool,X327) | s(bool,'T_0') = s(bool,X327)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12694])).
fof(f12694,plain,(
  ( ! [X325,X327,X324,X326] : (~sP3(f(s(bool,X325)),'F_0','F_0') | s(bool,'T_0') = s(bool,X324) | s(bool,X325) = s(bool,X326) | s(bool,'T_0') = s(bool,X324) | s(bool,X326) = s(bool,X327) | s(bool,'T_0') = s(bool,X327)) ) | $spl53),
  inference(superposition,[],[f8585,f1645])).
fof(f15354,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP3('F_0',f(s(bool,X1)),'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15353])).
fof(f15353,plain,(
  ( ! [X321,X323,X320,X322] : (~sP3('F_0',f(s(bool,X321)),'F_0') | s(bool,'T_0') = s(bool,X320) | s(bool,X321) = s(bool,X322) | s(bool,X322) = s(bool,X323) | s(bool,'T_0') = s(bool,X323)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12693])).
fof(f12693,plain,(
  ( ! [X321,X323,X320,X322] : (~sP3('F_0',f(s(bool,X321)),'F_0') | s(bool,'T_0') = s(bool,X320) | s(bool,X321) = s(bool,X322) | s(bool,'T_0') = s(bool,X320) | s(bool,X322) = s(bool,X323) | s(bool,'T_0') = s(bool,X323)) ) | $spl53),
  inference(superposition,[],[f8568,f1645])).
fof(f15356,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6('T_0','F_0',f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15355])).
fof(f15355,plain,(
  ( ! [X316,X318,X317,X319] : (sP6('T_0','F_0',f(s(bool,X317))) | s(bool,'T_0') = s(bool,X316) | s(bool,X317) = s(bool,X318) | s(bool,X318) = s(bool,X319) | s(bool,'T_0') = s(bool,X319)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12692])).
fof(f12692,plain,(
  ( ! [X316,X318,X317,X319] : (sP6('T_0','F_0',f(s(bool,X317))) | s(bool,'T_0') = s(bool,X316) | s(bool,X317) = s(bool,X318) | s(bool,'T_0') = s(bool,X316) | s(bool,X318) = s(bool,X319) | s(bool,'T_0') = s(bool,X319)) ) | $spl53),
  inference(superposition,[],[f8558,f1645])).
fof(f15358,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('F_0','F_0',f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15357])).
fof(f15357,plain,(
  ( ! [X313,X315,X312,X314] : (~sP6('F_0','F_0',f(s(bool,X313))) | s(bool,'T_0') = s(bool,X312) | s(bool,X313) = s(bool,X314) | s(bool,X314) = s(bool,X315) | s(bool,'T_0') = s(bool,X315)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12691])).
fof(f12691,plain,(
  ( ! [X313,X315,X312,X314] : (~sP6('F_0','F_0',f(s(bool,X313))) | s(bool,'T_0') = s(bool,X312) | s(bool,X313) = s(bool,X314) | s(bool,'T_0') = s(bool,X312) | s(bool,X314) = s(bool,X315) | s(bool,'T_0') = s(bool,X315)) ) | $spl53),
  inference(superposition,[],[f8541,f1645])).
fof(f15360,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6('T_0',f(s(bool,X1)),'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15359])).
fof(f15359,plain,(
  ( ! [X308,X310,X309,X311] : (sP6('T_0',f(s(bool,X309)),'F_0') | s(bool,'T_0') = s(bool,X308) | s(bool,X309) = s(bool,X310) | s(bool,X310) = s(bool,X311) | s(bool,'T_0') = s(bool,X311)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12690])).
fof(f12690,plain,(
  ( ! [X308,X310,X309,X311] : (sP6('T_0',f(s(bool,X309)),'F_0') | s(bool,'T_0') = s(bool,X308) | s(bool,X309) = s(bool,X310) | s(bool,'T_0') = s(bool,X308) | s(bool,X310) = s(bool,X311) | s(bool,'T_0') = s(bool,X311)) ) | $spl53),
  inference(superposition,[],[f8530,f1645])).
fof(f15362,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('F_0',f(s(bool,X1)),'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15361])).
fof(f15361,plain,(
  ( ! [X304,X306,X305,X307] : (~sP6('F_0',f(s(bool,X305)),'F_0') | s(bool,'T_0') = s(bool,X304) | s(bool,X305) = s(bool,X306) | s(bool,X306) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12689])).
fof(f12689,plain,(
  ( ! [X304,X306,X305,X307] : (~sP6('F_0',f(s(bool,X305)),'F_0') | s(bool,'T_0') = s(bool,X304) | s(bool,X305) = s(bool,X306) | s(bool,'T_0') = s(bool,X304) | s(bool,X306) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) ) | $spl53),
  inference(superposition,[],[f8509,f1645])).
fof(f15372,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP4('T_0',f(s(bool,X1)),'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15371])).
fof(f15371,plain,(
  ( ! [X285,X287,X284,X286] : (sP4('T_0',f(s(bool,X285)),'F_0') | s(bool,'T_0') = s(bool,X284) | s(bool,X285) = s(bool,X286) | s(bool,X286) = s(bool,X287) | s(bool,'T_0') = s(bool,X287)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12684])).
fof(f12684,plain,(
  ( ! [X285,X287,X284,X286] : (sP4('T_0',f(s(bool,X285)),'F_0') | s(bool,'T_0') = s(bool,X284) | s(bool,X285) = s(bool,X286) | s(bool,'T_0') = s(bool,X284) | s(bool,X286) = s(bool,X287) | s(bool,'T_0') = s(bool,X287)) ) | $spl53),
  inference(superposition,[],[f7532,f1645])).
fof(f15374,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP5('T_0','T_0',f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15373])).
fof(f15373,plain,(
  ( ! [X280,X282,X281,X283] : (~sP5('T_0','T_0',f(s(bool,X281))) | s(bool,'T_0') = s(bool,X280) | s(bool,X281) = s(bool,X282) | s(bool,X282) = s(bool,X283) | s(bool,'T_0') = s(bool,X283)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12683])).
fof(f12683,plain,(
  ( ! [X280,X282,X281,X283] : (~sP5('T_0','T_0',f(s(bool,X281))) | s(bool,'T_0') = s(bool,X280) | s(bool,X281) = s(bool,X282) | s(bool,'T_0') = s(bool,X280) | s(bool,X282) = s(bool,X283) | s(bool,'T_0') = s(bool,X283)) ) | $spl53),
  inference(superposition,[],[f7503,f1645])).
fof(f15376,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP4(f(s(bool,X1)),'T_0','F_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15375])).
fof(f15375,plain,(
  ( ! [X277,X279,X276,X278] : (sP4(f(s(bool,X277)),'T_0','F_0') | s(bool,'T_0') = s(bool,X276) | s(bool,X277) = s(bool,X278) | s(bool,X278) = s(bool,X279) | s(bool,'T_0') = s(bool,X279)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12682])).
fof(f12682,plain,(
  ( ! [X277,X279,X276,X278] : (sP4(f(s(bool,X277)),'T_0','F_0') | s(bool,'T_0') = s(bool,X276) | s(bool,X277) = s(bool,X278) | s(bool,'T_0') = s(bool,X276) | s(bool,X278) = s(bool,X279) | s(bool,'T_0') = s(bool,X279)) ) | $spl53),
  inference(superposition,[],[f7489,f1645])).
fof(f15386,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0','T_0',f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15385])).
fof(f15385,plain,(
  ( ! [X257,X259,X256,X258] : (~sP6('T_0','T_0',f(s(bool,X257))) | s(bool,'T_0') = s(bool,X256) | s(bool,X257) = s(bool,X258) | s(bool,X258) = s(bool,X259) | s(bool,'T_0') = s(bool,X259)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12677])).
fof(f12677,plain,(
  ( ! [X257,X259,X256,X258] : (~sP6('T_0','T_0',f(s(bool,X257))) | s(bool,'T_0') = s(bool,X256) | s(bool,X257) = s(bool,X258) | s(bool,'T_0') = s(bool,X256) | s(bool,X258) = s(bool,X259) | s(bool,'T_0') = s(bool,X259)) ) | $spl53),
  inference(superposition,[],[f7364,f1645])).
fof(f15388,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6('F_0','T_0',f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15387])).
fof(f15387,plain,(
  ( ! [X255,X253,X254,X252] : (sP6('F_0','T_0',f(s(bool,X253))) | s(bool,'T_0') = s(bool,X252) | s(bool,X253) = s(bool,X254) | s(bool,X254) = s(bool,X255) | s(bool,'T_0') = s(bool,X255)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12676])).
fof(f12676,plain,(
  ( ! [X255,X253,X254,X252] : (sP6('F_0','T_0',f(s(bool,X253))) | s(bool,'T_0') = s(bool,X252) | s(bool,X253) = s(bool,X254) | s(bool,'T_0') = s(bool,X252) | s(bool,X254) = s(bool,X255) | s(bool,'T_0') = s(bool,X255)) ) | $spl53),
  inference(superposition,[],[f7353,f1645])).
fof(f15390,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',f(s(bool,X1)),'T_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15389])).
fof(f15389,plain,(
  ( ! [X251,X249,X250,X248] : (~sP6('T_0',f(s(bool,X249)),'T_0') | s(bool,'T_0') = s(bool,X248) | s(bool,X249) = s(bool,X250) | s(bool,X250) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12675])).
fof(f12675,plain,(
  ( ! [X251,X249,X250,X248] : (~sP6('T_0',f(s(bool,X249)),'T_0') | s(bool,'T_0') = s(bool,X248) | s(bool,X249) = s(bool,X250) | s(bool,'T_0') = s(bool,X248) | s(bool,X250) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) ) | $spl53),
  inference(superposition,[],[f7333,f1645])).
fof(f15392,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6('F_0',f(s(bool,X1)),'T_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl53),
  inference(condensation,[],[f15391])).
fof(f15391,plain,(
  ( ! [X246,X244,X247,X245] : (sP6('F_0',f(s(bool,X245)),'T_0') | s(bool,'T_0') = s(bool,X244) | s(bool,X245) = s(bool,X246) | s(bool,X246) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f12674])).
fof(f12674,plain,(
  ( ! [X246,X244,X247,X245] : (sP6('F_0',f(s(bool,X245)),'T_0') | s(bool,'T_0') = s(bool,X244) | s(bool,X245) = s(bool,X246) | s(bool,'T_0') = s(bool,X244) | s(bool,X246) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) ) | $spl53),
  inference(superposition,[],[f7323,f1645])).
fof(f16595,plain,(
  ( ! [X74,X72,X73] : (s(bool,X72) = s(bool,X73) | s(bool,X73) = s(bool,f(s(bool,'F_0'))) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) ) | $spl53),
  inference(subsumption_resolution,[],[f11768,f427])).
fof(f11768,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X72) = s(bool,X73) | s(bool,X73) = s(bool,f(s(bool,'F_0'))) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) ) | $spl53),
  inference(superposition,[],[f1645,f7122])).
fof(f8597,plain,(
  ( ! [X0] : (sP5('T_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8555,f230])).
fof(f8585,plain,(
  ( ! [X0] : (~sP3(f(s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8538,f230])).
fof(f8568,plain,(
  ( ! [X0] : (~sP3('F_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8506,f230])).
fof(f8558,plain,(
  ( ! [X0] : (sP6('T_0','F_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8444,f230])).
fof(f8555,plain,(
  sP5('T_0',f(s(bool,'F_0')),'F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f8444,f311])).
fof(f8541,plain,(
  ( ! [X0] : (~sP6('F_0','F_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8443,f230])).
fof(f8538,plain,(
  ~sP3(f(s(bool,'F_0')),'F_0','F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f404,f413,f410,f8443,f314])).
fof(f8530,plain,(
  ( ! [X0] : (sP6('T_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8439,f230])).
fof(f8509,plain,(
  ( ! [X0] : (~sP6('F_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f8438,f230])).
fof(f8506,plain,(
  ~sP3('F_0',f(s(bool,'F_0')),'F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f404,f412,f410,f8438,f315])).
fof(f8505,plain,(
  ( ! [X54,X53] : (sP1(f(s(bool,'F_0')),X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl53),
  inference(subsumption_resolution,[],[f8495,f404])).
fof(f8495,plain,(
  ( ! [X54,X53] : (p(s(bool,'F_0')) | sP1(f(s(bool,'F_0')),X53) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl53),
  inference(superposition,[],[f2087,f7122])).
fof(f8504,plain,(
  ( ! [X52,X51] : (sP1(X51,f(s(bool,'F_0'))) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) ) | $spl53),
  inference(subsumption_resolution,[],[f8494,f404])).
fof(f8494,plain,(
  ( ! [X52,X51] : (p(s(bool,'F_0')) | sP1(X51,f(s(bool,'F_0'))) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) ) | $spl53),
  inference(superposition,[],[f2086,f7122])).
fof(f8503,plain,(
  ( ! [X47,X46] : (s(bool,X46) != s(bool,f(s(bool,'F_0'))) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) ) | $spl53),
  inference(subsumption_resolution,[],[f8489,f404])).
fof(f8489,plain,(
  ( ! [X47,X46] : (p(s(bool,'F_0')) | s(bool,X46) != s(bool,f(s(bool,'F_0'))) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) ) | $spl53),
  inference(superposition,[],[f1747,f7122])).
fof(f8445,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7122,f230])).
fof(f8438,plain,(
  ~sP6('F_0',f(s(bool,'F_0')),'F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f404,f7122,f331])).
fof(f8439,plain,(
  sP6('T_0',f(s(bool,'F_0')),'F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f223,f7122,f329])).
fof(f8443,plain,(
  ~sP6('F_0','F_0',f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f404,f7122,f331])).
fof(f8444,plain,(
  sP6('T_0','F_0',f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f223,f7122,f329])).
fof(f7532,plain,(
  ( ! [X0] : (sP4('T_0',f(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7351,f230])).
fof(f7503,plain,(
  ( ! [X0] : (~sP5('T_0','T_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7330,f230])).
fof(f7489,plain,(
  ( ! [X0] : (sP4(f(s(bool,X0)),'T_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7321,f230])).
fof(f7364,plain,(
  ( ! [X0] : (~sP6('T_0','T_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7119,f230])).
fof(f7353,plain,(
  ( ! [X0] : (sP6('F_0','T_0',f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7118,f230])).
fof(f7351,plain,(
  sP4('T_0',f(s(bool,'F_0')),'F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f7118,f310])).
fof(f7333,plain,(
  ( ! [X0] : (~sP6('T_0',f(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7056,f230])).
fof(f7330,plain,(
  ~sP5('T_0','T_0',f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f223,f416,f411,f7056,f313])).
fof(f7323,plain,(
  ( ! [X0] : (sP6('F_0',f(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7055,f230])).
fof(f7321,plain,(
  sP4(f(s(bool,'F_0')),'T_0','F_0') | $spl53),
  inference(unit_resulting_resolution,[],[f7055,f310])).
fof(f7138,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(trivial_inequality_removal,[],[f7133])).
fof(f7133,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f2805,f524])).
fof(f7126,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f2805,f230])).
fof(f7055,plain,(
  sP6('F_0',f(s(bool,'F_0')),'T_0') | $spl53),
  inference(unit_resulting_resolution,[],[f404,f2805,f328])).
fof(f7056,plain,(
  ~sP6('T_0',f(s(bool,'F_0')),'T_0') | $spl53),
  inference(unit_resulting_resolution,[],[f223,f2805,f330])).
fof(f7118,plain,(
  sP6('F_0','T_0',f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f404,f2805,f328])).
fof(f7119,plain,(
  ~sP6('T_0','T_0',f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f223,f2805,f330])).
fof(f7122,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f223,f427,f2805,f2083])).
fof(f17317,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) ) | ($spl6 | $spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17262,f223])).
fof(f17262,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) ) | ($spl6 | $spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f1182])).
fof(f1182,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f1149,f223])).
fof(f1149,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))))) ) | $spl6),
  inference(superposition,[],[f384,f602])).
fof(f17316,plain,(
  $false | ($spl53 | $spl100)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270,f17315])).
fof(f17304,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17240,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17240,plain,(
  ~sP11(g(s(bool,'T_0')),'F_0','T_0') | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10684])).
fof(f17303,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17239,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17239,plain,(
  ~sP12(g(s(bool,'T_0')),'F_0','T_0') | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10672])).
fof(f17302,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17238,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17238,plain,(
  ~sP12('T_0','F_0',g(s(bool,'T_0'))) | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10585])).
fof(f17301,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17237,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17237,plain,(
  ~sP11('T_0','F_0',g(s(bool,'T_0'))) | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10561])).
fof(f17300,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17236,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17236,plain,(
  ~sP10(g(s(bool,'T_0')),'F_0','F_0') | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10480])).
fof(f17299,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17235,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17235,plain,(
  ~sP9(g(s(bool,'T_0')),'F_0','F_0') | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10459])).
fof(f17298,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17234,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17234,plain,(
  sP7('T_0','T_0',g(s(bool,'T_0'))) | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10348])).
fof(f17297,plain,(
  $false | ($spl53 | $spl54 | $spl100)),
  inference(global_subsumption,[],[f17233,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17233,plain,(
  sP8(g(s(bool,'T_0')),'T_0','T_0') | ($spl53 | $spl54 | $spl100)),
  inference(backward_demodulation,[],[f17147,f10336])).
fof(f17296,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17212,f4793])).
fof(f4793,plain,(
  ~sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f404,f414,f413,f3058,f314])).
fof(f3058,plain,(
  ~sP6('T_0','F_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f223,f3042,f330])).
fof(f17212,plain,(
  sP5('T_0',f(s(bool,'T_0')),'F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8555])).
fof(f17295,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17211,f3170])).
fof(f3170,plain,(
  sP3(f(s(bool,'T_0')),'F_0','F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f3057,f309])).
fof(f3057,plain,(
  sP6('F_0','F_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f404,f3042,f328])).
fof(f17211,plain,(
  ~sP3(f(s(bool,'T_0')),'F_0','F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8538])).
fof(f17294,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17210,f3112])).
fof(f3112,plain,(
  sP3('F_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f3050,f309])).
fof(f3050,plain,(
  sP6('F_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f404,f3042,f328])).
fof(f17210,plain,(
  ~sP3('F_0',f(s(bool,'T_0')),'F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8506])).
fof(f17293,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17206,f3058])).
fof(f17206,plain,(
  sP6('T_0','F_0',f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8444])).
fof(f17292,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17205,f3057])).
fof(f17205,plain,(
  ~sP6('F_0','F_0',f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8443])).
fof(f17291,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17204,f3051])).
fof(f3051,plain,(
  ~sP6('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f223,f3042,f330])).
fof(f17204,plain,(
  sP6('T_0',f(s(bool,'T_0')),'F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8439])).
fof(f17290,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17203,f3050])).
fof(f17203,plain,(
  ~sP6('F_0',f(s(bool,'T_0')),'F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f8438])).
fof(f17289,plain,(
  $false | ($spl1 | $spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17199,f7869])).
fof(f7869,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0',f(s(bool,'T_0'))) | ($spl1 | $spl63)),
  inference(unit_resulting_resolution,[],[f3060,f397,f331])).
fof(f3060,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f404,f3042,f572])).
fof(f17199,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0',f(s(bool,'T_0'))) | ($spl1 | $spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7863])).
fof(f7863,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),'T_0',f(s(bool,'F_0'))) | ($spl1 | $spl53)),
  inference(unit_resulting_resolution,[],[f2805,f397,f328])).
fof(f17288,plain,(
  $false | ($spl1 | $spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17198,f7864])).
fof(f7864,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),f(s(bool,'T_0')),'T_0') | ($spl1 | $spl63)),
  inference(unit_resulting_resolution,[],[f3060,f397,f331])).
fof(f17198,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),f(s(bool,'T_0')),'T_0') | ($spl1 | $spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7861])).
fof(f7861,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),f(s(bool,'F_0')),'T_0') | ($spl1 | $spl53)),
  inference(unit_resulting_resolution,[],[f2805,f397,f328])).
fof(f17287,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17193,f4985])).
fof(f4985,plain,(
  ~sP4('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f404,f415,f410,f4869,f315])).
fof(f4869,plain,(
  ~sP6('F_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f404,f3060,f331])).
fof(f17193,plain,(
  sP4('T_0',f(s(bool,'T_0')),'F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7351])).
fof(f17286,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17192,f4972])).
fof(f4972,plain,(
  sP5('T_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f4868,f311])).
fof(f4868,plain,(
  sP6('T_0',f(s(bool,'T_0')),'T_0') | $spl63),
  inference(unit_resulting_resolution,[],[f223,f3060,f329])).
fof(f17192,plain,(
  ~sP5('T_0','T_0',f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7330])).
fof(f17285,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17191,f4959])).
fof(f4959,plain,(
  ~sP4(f(s(bool,'T_0')),'T_0','F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f223,f416,f410,f4867,f313])).
fof(f4867,plain,(
  ~sP6('F_0',f(s(bool,'T_0')),'T_0') | $spl63),
  inference(unit_resulting_resolution,[],[f404,f3060,f331])).
fof(f17191,plain,(
  sP4(f(s(bool,'T_0')),'T_0','F_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7321])).
fof(f17279,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17162,f4870])).
fof(f4870,plain,(
  sP6('T_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f223,f3060,f329])).
fof(f17162,plain,(
  ~sP6('T_0','T_0',f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7119])).
fof(f17278,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17161,f4869])).
fof(f17161,plain,(
  sP6('F_0','T_0',f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7118])).
fof(f17277,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17160,f4868])).
fof(f17160,plain,(
  ~sP6('T_0',f(s(bool,'T_0')),'T_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7056])).
fof(f17276,plain,(
  $false | ($spl53 | $spl63 | $spl100)),
  inference(subsumption_resolution,[],[f17159,f4867])).
fof(f17159,plain,(
  sP6('F_0',f(s(bool,'T_0')),'T_0') | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7055])).
fof(f17275,plain,(
  $false | ($spl12 | $spl53 | $spl100)),
  inference(global_subsumption,[],[f17158,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17158,plain,(
  sP1(f(s(bool,'T_0')),'T_0') | ($spl12 | $spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7053])).
fof(f7053,plain,(
  sP1(f(s(bool,'F_0')),'T_0') | ($spl12 | $spl53)),
  inference(unit_resulting_resolution,[],[f2805,f2619])).
fof(f2619,plain,(
  ( ! [X4] : (sP1(X4,'T_0') | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2029,f2618])).
fof(f2618,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1(X4,'T_0') | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f2608,f237])).
fof(f2608,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1(X4,'T_0') | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(superposition,[],[f2029,f524])).
fof(f17274,plain,(
  $false | ($spl8 | $spl53 | $spl100)),
  inference(global_subsumption,[],[f17157,f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17157,plain,(
  sP1('T_0',f(s(bool,'T_0'))) | ($spl8 | $spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f7052])).
fof(f7052,plain,(
  sP1('T_0',f(s(bool,'F_0'))) | ($spl8 | $spl53)),
  inference(unit_resulting_resolution,[],[f2805,f2584])).
fof(f2584,plain,(
  ( ! [X4] : (sP1('T_0',X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl8),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2025,f2583])).
fof(f2583,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1('T_0',X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl8),
  inference(subsumption_resolution,[],[f2573,f237])).
fof(f2573,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | sP1('T_0',X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl8),
  inference(superposition,[],[f2025,f524])).
fof(f17273,plain,(
  $false | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17153,f17147])).
fof(f17153,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f2805])).
fof(f17272,plain,(
  $false | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17150,f223])).
fof(f17150,plain,(
  ~p(s(bool,'T_0')) | ($spl53 | $spl100)),
  inference(backward_demodulation,[],[f17147,f404])).
fof(f17271,plain,(
  $false | ($spl53 | $spl100)),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f230,f238,f237,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1645,f1704,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f1815,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f385,f384,f383,f386,f2105,f2106,f1705,f1816,f1038,f1037,f404,f242,f241,f2797,f2798,f2799,f2800,f2801,f3029,f3030,f3044,f3123,f3198,f3201,f3202,f3203,f4822,f4824,f4825,f4826,f3033,f3032,f3031,f2805,f7122,f7119,f7118,f7056,f7055,f7126,f7138,f7321,f7323,f7330,f7333,f7351,f7353,f7364,f7489,f7503,f7532,f7579,f7582,f8444,f8443,f8439,f8438,f8445,f8503,f8504,f8505,f8506,f8509,f8530,f8538,f8541,f8555,f8558,f8568,f8585,f8597,f16536,f16374,f11741,f16595,f12106,f12108,f16824,f16828,f16834,f16836,f16854,f12624,f12625,f12626,f16856,f15392,f15390,f15388,f15386,f15376,f15374,f15372,f15362,f15360,f15358,f15356,f15354,f15352,f15350,f16870,f16871,f16872,f16873,f16875,f12885,f12888,f16909,f16910,f16911,f16912,f16913,f16914,f16915,f16916,f16917,f16918,f16919,f16920,f16921,f16922,f16923,f16924,f16925,f16926,f16927,f16928,f16929,f16930,f16931,f16932,f16936,f16937,f13303,f13305,f16949,f16950,f17002,f14283,f6951,f17147,f17270])).
fof(f17146,plain,(
  $false | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17077,f7122])).
fof(f17077,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl100),
  inference(unit_resulting_resolution,[],[f427,f6951])).
fof(f17145,plain,(
  $false | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17144,f7122])).
fof(f17144,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl53 | $spl100)),
  inference(forward_demodulation,[],[f17078,f7122])).
fof(f17078,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,f(s(bool,'F_0'))))) | ($spl53 | $spl100)),
  inference(unit_resulting_resolution,[],[f2805,f6951])).
fof(f17143,plain,(
  $false | ($spl53 | $spl100)),
  inference(subsumption_resolution,[],[f17079,f427])).
fof(f17079,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl53 | $spl100)),
  inference(unit_resulting_resolution,[],[f7122,f6951])).
fof(f17080,plain,(
  $false | ($spl53 | $spl100)),
  inference(unit_resulting_resolution,[],[f427,f7122,f6951])).
fof(f16837,plain,(
  ( ! [X218,X216,X215,X213,X217] : (sP1(X213,X215) | s(bool,'T_0') = s(bool,X218) | s(bool,X217) = s(bool,X218) | s(bool,X213) = s(bool,X217) | s(bool,'T_0') = s(bool,X216) | s(bool,X215) = s(bool,X216)) ) | $spl114),
  inference(cnf_transformation,[],[f16837_D])).
fof(f16837_D,plain,(
  ( ! [X218,X216,X215,X213,X217] : (sP1(X213,X215) | s(bool,'T_0') = s(bool,X218) | s(bool,X217) = s(bool,X218) | s(bool,X213) = s(bool,X217) | s(bool,'T_0') = s(bool,X216) | s(bool,X215) = s(bool,X216)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f16950,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (p(s(bool,X214)) | sP1(X213,X215) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(bool,X213) = s(bool,X217) | s(bool,X217) = s(bool,X218) | s(bool,'T_0') = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f13347,f237])).
fof(f13347,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (p(s(bool,X214)) | sP1(X213,X215) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(bool,X213) = s(bool,X217) | s(bool,X217) = s(bool,X218) | s(bool,'T_0') = s(bool,X218) | s(bool,'T_0') = s(bool,X214)) )),
  inference(superposition,[],[f2087,f1645])).
fof(f16835,plain,(
  ( ! [X212,X210,X211,X209,X207] : (sP1(X209,X207) | s(bool,'T_0') = s(bool,X212) | s(bool,X211) = s(bool,X212) | s(bool,X207) = s(bool,X211) | s(bool,'T_0') = s(bool,X210) | s(bool,X209) = s(bool,X210)) ) | $spl112),
  inference(cnf_transformation,[],[f16835_D])).
fof(f16835_D,plain,(
  ( ! [X212,X210,X211,X209,X207] : (sP1(X209,X207) | s(bool,'T_0') = s(bool,X212) | s(bool,X211) = s(bool,X212) | s(bool,X207) = s(bool,X211) | s(bool,'T_0') = s(bool,X210) | s(bool,X209) = s(bool,X210)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f16949,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (p(s(bool,X208)) | sP1(X209,X207) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210) | s(bool,X207) = s(bool,X211) | s(bool,X211) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(subsumption_resolution,[],[f13346,f237])).
fof(f13346,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (p(s(bool,X208)) | sP1(X209,X207) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210) | s(bool,X207) = s(bool,X211) | s(bool,X211) = s(bool,X212) | s(bool,'T_0') = s(bool,X212) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f2086,f1645])).
fof(f16833,plain,(
  ( ! [X194,X192,X195] : (sP1(X192,'T_0') | s(bool,'T_0') = s(bool,X195) | s(bool,X194) = s(bool,X195) | s(bool,X192) = s(bool,X194)) ) | $spl110),
  inference(cnf_transformation,[],[f16833_D])).
fof(f16833_D,plain,(
  ( ! [X194,X192,X195] : (sP1(X192,'T_0') | s(bool,'T_0') = s(bool,X195) | s(bool,X194) = s(bool,X195) | s(bool,X192) = s(bool,X194)) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f16948,plain,(
  ( ! [X194,X192,X195,X193] : (p(s(bool,X193)) | sP1(X192,'T_0') | s(bool,X192) = s(bool,X194) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195)) ) | $spl12),
  inference(subsumption_resolution,[],[f13343,f237])).
fof(f13343,plain,(
  ( ! [X194,X192,X195,X193] : (p(s(bool,X193)) | sP1(X192,'T_0') | s(bool,X192) = s(bool,X194) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195) | s(bool,'T_0') = s(bool,X193)) ) | $spl12),
  inference(superposition,[],[f2029,f1645])).
fof(f16831,plain,(
  ( ! [X191,X190,X188] : (sP1('T_0',X188) | s(bool,'T_0') = s(bool,X191) | s(bool,X190) = s(bool,X191) | s(bool,X188) = s(bool,X190)) ) | $spl108),
  inference(cnf_transformation,[],[f16831_D])).
fof(f16831_D,plain,(
  ( ! [X191,X190,X188] : (sP1('T_0',X188) | s(bool,'T_0') = s(bool,X191) | s(bool,X190) = s(bool,X191) | s(bool,X188) = s(bool,X190)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f16947,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X189)) | sP1('T_0',X188) | s(bool,X188) = s(bool,X190) | s(bool,X190) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) ) | $spl8),
  inference(subsumption_resolution,[],[f13342,f237])).
fof(f13342,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X189)) | sP1('T_0',X188) | s(bool,X188) = s(bool,X190) | s(bool,X190) = s(bool,X191) | s(bool,'T_0') = s(bool,X191) | s(bool,'T_0') = s(bool,X189)) ) | $spl8),
  inference(superposition,[],[f2025,f1645])).
fof(f16857,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) | $spl118),
  inference(cnf_transformation,[],[f16857_D])).
fof(f16857_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f16856,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12629,f237])).
fof(f12629,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f237,f1645])).
fof(f12625,plain,(
  ( ! [X1075,X1079,X1077,X1078,X1076] : (s(bool,'F_0') != s(bool,f(s(bool,X1077))) | s(fun(bool,bool),X1075) = s(fun(bool,bool),X1076) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X1075,X1076,bool,bool)))) | s(bool,X1078) = s(bool,sK20(X1075,X1076,bool,bool)) | s(bool,'T_0') = s(bool,X1077) | s(bool,X1078) = s(bool,X1079) | s(bool,'T_0') = s(bool,X1079)) )),
  inference(superposition,[],[f1038,f1645])).
fof(f16836,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (p(s(bool,X214)) | sP1(X213,X215) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(bool,X213) = s(bool,X217) | s(bool,X217) = s(bool,X218) | s(bool,'T_0') = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f12409,f237])).
fof(f12409,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (p(s(bool,X214)) | sP1(X213,X215) | s(bool,X215) = s(bool,X216) | s(bool,'T_0') = s(bool,X216) | s(bool,X213) = s(bool,X217) | s(bool,'T_0') = s(bool,X214) | s(bool,X217) = s(bool,X218) | s(bool,'T_0') = s(bool,X218)) )),
  inference(superposition,[],[f2087,f1645])).
fof(f16834,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (p(s(bool,X208)) | sP1(X209,X207) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210) | s(bool,X207) = s(bool,X211) | s(bool,X211) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(subsumption_resolution,[],[f12408,f237])).
fof(f12408,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (p(s(bool,X208)) | sP1(X209,X207) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210) | s(bool,X207) = s(bool,X211) | s(bool,'T_0') = s(bool,X208) | s(bool,X211) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f2086,f1645])).
fof(f16832,plain,(
  ( ! [X194,X192,X195,X193] : (p(s(bool,X193)) | sP1(X192,'T_0') | s(bool,X192) = s(bool,X194) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195)) ) | $spl12),
  inference(subsumption_resolution,[],[f12405,f237])).
fof(f12405,plain,(
  ( ! [X194,X192,X195,X193] : (p(s(bool,X193)) | sP1(X192,'T_0') | s(bool,X192) = s(bool,X194) | s(bool,'T_0') = s(bool,X193) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195)) ) | $spl12),
  inference(superposition,[],[f2029,f1645])).
fof(f16830,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X189)) | sP1('T_0',X188) | s(bool,X188) = s(bool,X190) | s(bool,X190) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) ) | $spl8),
  inference(subsumption_resolution,[],[f12404,f237])).
fof(f12404,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X189)) | sP1('T_0',X188) | s(bool,X188) = s(bool,X190) | s(bool,'T_0') = s(bool,X189) | s(bool,X190) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) ) | $spl8),
  inference(superposition,[],[f2025,f1645])).
fof(f16829,plain,(
  ( ! [X187,X185,X182,X186,X184] : (s(bool,X182) != s(bool,X184) | s(bool,'T_0') = s(bool,X187) | s(bool,X186) = s(bool,X187) | s(bool,X182) = s(bool,X186) | s(bool,'T_0') = s(bool,X185) | s(bool,X184) = s(bool,X185)) ) | $spl106),
  inference(cnf_transformation,[],[f16829_D])).
fof(f16829_D,plain,(
  ( ! [X187,X185,X182,X186,X184] : (s(bool,X182) != s(bool,X184) | s(bool,'T_0') = s(bool,X187) | s(bool,X186) = s(bool,X187) | s(bool,X182) = s(bool,X186) | s(bool,'T_0') = s(bool,X185) | s(bool,X184) = s(bool,X185)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f16828,plain,(
  ( ! [X187,X185,X182,X186,X184,X183] : (p(s(bool,X183)) | s(bool,X182) != s(bool,X184) | s(bool,X184) = s(bool,X185) | s(bool,'T_0') = s(bool,X185) | s(bool,X182) = s(bool,X186) | s(bool,X186) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(subsumption_resolution,[],[f12403,f237])).
fof(f12403,plain,(
  ( ! [X187,X185,X182,X186,X184,X183] : (p(s(bool,X183)) | s(bool,X182) != s(bool,X184) | s(bool,X184) = s(bool,X185) | s(bool,'T_0') = s(bool,X185) | s(bool,X182) = s(bool,X186) | s(bool,'T_0') = s(bool,X183) | s(bool,X186) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(superposition,[],[f1747,f1645])).
fof(f11580,plain,(
  ( ! [X103,X102] : (sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X102) | s(bool,'T_0') = s(bool,X103) | s(bool,X102) = s(bool,X103)) ) | $spl104),
  inference(cnf_transformation,[],[f11580_D])).
fof(f11580_D,plain,(
  ( ! [X103,X102] : (sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X102) | s(bool,'T_0') = s(bool,X103) | s(bool,X102) = s(bool,X103)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f11579,plain,(
  ( ! [X103,X101,X102] : (p(s(bool,X101)) | sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X102) | s(bool,X102) = s(bool,X103) | s(bool,'T_0') = s(bool,X103)) ) | $spl1),
  inference(subsumption_resolution,[],[f11375,f237])).
fof(f11375,plain,(
  ( ! [X103,X101,X102] : (p(s(bool,X101)) | sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))),X102) | s(bool,X102) = s(bool,X103) | s(bool,'T_0') = s(bool,X103) | s(bool,'T_0') = s(bool,X101)) ) | $spl1),
  inference(superposition,[],[f2087,f8331])).
fof(f11578,plain,(
  ( ! [X99,X100] : (sP1(X99,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X100) | s(bool,X99) = s(bool,X100)) ) | $spl102),
  inference(cnf_transformation,[],[f11578_D])).
fof(f11578_D,plain,(
  ( ! [X99,X100] : (sP1(X99,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,'T_0') = s(bool,X100) | s(bool,X99) = s(bool,X100)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f11577,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X98)) | sP1(X99,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) ) | $spl1),
  inference(subsumption_resolution,[],[f11374,f237])).
fof(f11374,plain,(
  ( ! [X99,X100,X98] : (p(s(bool,X98)) | sP1(X99,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,'T_0') = s(bool,X98)) ) | $spl1),
  inference(superposition,[],[f2086,f8331])).
fof(f7740,plain,(
  $false | ($spl3 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f7739,f399])).
fof(f7739,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f7733,f223])).
fof(f7733,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | ($spl4 | $spl6)),
  inference(superposition,[],[f1182,f813])).
fof(f6950,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,g(s(bool,sK20(X12,X13,bool,bool)))) | s(bool,'T_0') = s(bool,sK20(X12,X13,bool,bool)) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13)) ) | $spl98),
  inference(cnf_transformation,[],[f6950_D])).
fof(f6950_D,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,g(s(bool,sK20(X12,X13,bool,bool)))) | s(bool,'T_0') = s(bool,sK20(X12,X13,bool,bool)) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f3031,plain,(
  ( ! [X6,X8,X7] : (s(bool,'F_0') != s(bool,f(s(bool,X8))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X6,X7,bool,bool)))) | s(bool,'T_0') = s(bool,sK20(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1038,f524])).
fof(f3032,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X9,X10,bool,bool)))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,sK20(X9,X10,bool,bool))) )),
  inference(superposition,[],[f1038,f524])).
fof(f3033,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X12,X13,bool,bool)))) | s(bool,'T_0') = s(bool,sK20(X12,X13,bool,bool))) )),
  inference(superposition,[],[f1038,f230])).
fof(f6904,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | $spl96),
  inference(cnf_transformation,[],[f6904_D])).
fof(f6904_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f6903,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | ($spl4 | $spl77)),
  inference(subsumption_resolution,[],[f6427,f237])).
fof(f6427,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f237,f5533])).
fof(f5533,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5438,f524])).
fof(f5438,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl4 | $spl77)),
  inference(unit_resulting_resolution,[],[f422,f895,f5367,f2104])).
fof(f895,plain,(
  ( ! [X0] : (~sP10('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f350])).
fof(f6875,plain,(
  ( ! [X41,X42] : (s(bool,'F_0') = s(bool,g(s(bool,sK20(X41,X42,bool,bool)))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42)) ) | $spl88),
  inference(cnf_transformation,[],[f6875_D])).
fof(f6875_D,plain,(
  ( ! [X41,X42] : (s(bool,'F_0') = s(bool,g(s(bool,sK20(X41,X42,bool,bool)))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f6804,plain,(
  ( ! [X285,X287,X286] : (s(bool,'T_0') = s(bool,X287) | s(fun(bool,bool),X285) = s(fun(bool,bool),X286) | s(bool,'F_0') = s(bool,g(s(bool,sK20(X285,X286,bool,bool))))) ) | ($spl4 | $spl50 | $spl77)),
  inference(duplicate_literal_removal,[],[f6421])).
fof(f6421,plain,(
  ( ! [X285,X287,X286] : (s(bool,'T_0') = s(bool,X287) | s(fun(bool,bool),X285) = s(fun(bool,bool),X286) | s(bool,'F_0') = s(bool,g(s(bool,sK20(X285,X286,bool,bool)))) | s(bool,'T_0') = s(bool,X287)) ) | ($spl4 | $spl50 | $spl77)),
  inference(superposition,[],[f2803,f5533])).
fof(f6897,plain,(
  ( ! [X136,X135,X133] : (sP1(X133,X135) | s(bool,'F_0') = s(bool,g(s(bool,X133))) | s(bool,'T_0') = s(bool,X136) | s(bool,X135) = s(bool,X136)) ) | $spl94),
  inference(cnf_transformation,[],[f6897_D])).
fof(f6897_D,plain,(
  ( ! [X136,X135,X133] : (sP1(X133,X135) | s(bool,'F_0') = s(bool,g(s(bool,X133))) | s(bool,'T_0') = s(bool,X136) | s(bool,X135) = s(bool,X136)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f6896,plain,(
  ( ! [X134,X136,X135,X133] : (p(s(bool,X134)) | sP1(X133,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,g(s(bool,X133)))) ) | ($spl4 | $spl77)),
  inference(subsumption_resolution,[],[f6344,f237])).
fof(f6344,plain,(
  ( ! [X134,X136,X135,X133] : (p(s(bool,X134)) | sP1(X133,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,g(s(bool,X133))) | s(bool,'T_0') = s(bool,X134)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f2087,f5533])).
fof(f6895,plain,(
  ( ! [X132,X131,X129] : (sP1(X131,X129) | s(bool,'F_0') = s(bool,g(s(bool,X129))) | s(bool,'T_0') = s(bool,X132) | s(bool,X131) = s(bool,X132)) ) | $spl92),
  inference(cnf_transformation,[],[f6895_D])).
fof(f6895_D,plain,(
  ( ! [X132,X131,X129] : (sP1(X131,X129) | s(bool,'F_0') = s(bool,g(s(bool,X129))) | s(bool,'T_0') = s(bool,X132) | s(bool,X131) = s(bool,X132)) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f6894,plain,(
  ( ! [X132,X130,X131,X129] : (p(s(bool,X130)) | sP1(X131,X129) | s(bool,X131) = s(bool,X132) | s(bool,'T_0') = s(bool,X132) | s(bool,'F_0') = s(bool,g(s(bool,X129)))) ) | ($spl4 | $spl77)),
  inference(subsumption_resolution,[],[f6343,f237])).
fof(f6343,plain,(
  ( ! [X132,X130,X131,X129] : (p(s(bool,X130)) | sP1(X131,X129) | s(bool,X131) = s(bool,X132) | s(bool,'T_0') = s(bool,X132) | s(bool,'F_0') = s(bool,g(s(bool,X129))) | s(bool,'T_0') = s(bool,X130)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f2086,f5533])).
fof(f6889,plain,(
  ( ! [X116,X114,X117] : (s(bool,X114) != s(bool,X116) | s(bool,'F_0') = s(bool,g(s(bool,X114))) | s(bool,'T_0') = s(bool,X117) | s(bool,X116) = s(bool,X117)) ) | $spl90),
  inference(cnf_transformation,[],[f6889_D])).
fof(f6889_D,plain,(
  ( ! [X116,X114,X117] : (s(bool,X114) != s(bool,X116) | s(bool,'F_0') = s(bool,g(s(bool,X114))) | s(bool,'T_0') = s(bool,X117) | s(bool,X116) = s(bool,X117)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f6888,plain,(
  ( ! [X116,X114,X117,X115] : (p(s(bool,X115)) | s(bool,X114) != s(bool,X116) | s(bool,X116) = s(bool,X117) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,g(s(bool,X114)))) ) | ($spl4 | $spl77)),
  inference(subsumption_resolution,[],[f6338,f237])).
fof(f6338,plain,(
  ( ! [X116,X114,X117,X115] : (p(s(bool,X115)) | s(bool,X114) != s(bool,X116) | s(bool,X116) = s(bool,X117) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,g(s(bool,X114))) | s(bool,'T_0') = s(bool,X115)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f1747,f5533])).
fof(f6864,plain,(
  ( ! [X23,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X25)))) ) | $spl78),
  inference(cnf_transformation,[],[f6864_D])).
fof(f6864_D,plain,(
  ( ! [X23,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X25)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f6821,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,'F_0') = s(bool,g(s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,'F_0') = s(bool,g(s(bool,X10)))) ) | ($spl4 | $spl77)),
  inference(duplicate_literal_removal,[],[f6249])).
fof(f6249,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,'F_0') = s(bool,g(s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,'F_0') = s(bool,g(s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f6830,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,X18)))) ) | ($spl4 | $spl77)),
  inference(duplicate_literal_removal,[],[f6224])).
fof(f6224,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f6870,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,g(s(bool,X18)))) ) | $spl86),
  inference(cnf_transformation,[],[f6870_D])).
fof(f6870_D,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,g(s(bool,X18)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f6835,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl77)),
  inference(duplicate_literal_removal,[],[f6218])).
fof(f6218,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f230])).
fof(f6836,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,g(s(bool,sK20(X41,X42,bool,bool)))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42)) ) | ($spl4 | $spl50 | $spl77)),
  inference(duplicate_literal_removal,[],[f6217])).
fof(f6217,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,g(s(bool,sK20(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42)) ) | ($spl4 | $spl50 | $spl77)),
  inference(superposition,[],[f5533,f2803])).
fof(f6846,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X20))) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,X20) = s(bool,X22)) ) | ($spl4 | $spl77)),
  inference(duplicate_literal_removal,[],[f6207])).
fof(f6207,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,X20) = s(bool,X22)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f6869,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,X19) | s(bool,'T_0') = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X19)) ) | $spl84),
  inference(cnf_transformation,[],[f6869_D])).
fof(f6869_D,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,X19) | s(bool,'T_0') = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X19)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f6198,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,X17) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,g(s(bool,X17)))) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f6865,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,X38) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) ) | $spl80),
  inference(cnf_transformation,[],[f6865_D])).
fof(f6865_D,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,X38) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f6867,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl82),
  inference(cnf_transformation,[],[f6867_D])).
fof(f6867_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f6189,plain,(
  ( ! [X37,X38,X36] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X37) = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f6856,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X23) = s(bool,X25)) ) | ($spl4 | $spl77)),
  inference(duplicate_literal_removal,[],[f6183])).
fof(f6183,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X23) = s(bool,X25)) ) | ($spl4 | $spl77)),
  inference(superposition,[],[f5533,f5533])).
fof(f5365,plain,(
  ( ! [X130,X129] : (s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | $spl74),
  inference(cnf_transformation,[],[f5365_D])).
fof(f5365_D,plain,(
  ( ! [X130,X129] : (s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f5367,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl77),
  inference(cnf_transformation,[],[f5367_D])).
fof(f5367_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f5364,plain,(
  ( ! [X130,X129] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | ($spl50 | $spl63)),
  inference(forward_demodulation,[],[f5329,f3060])).
fof(f5329,plain,(
  ( ! [X130,X129] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f5328])).
fof(f5328,plain,(
  ( ! [X130,X129] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | $spl50),
  inference(superposition,[],[f298,f2803])).
fof(f4827,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl72),
  inference(cnf_transformation,[],[f4827_D])).
fof(f4827_D,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f4826,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f4817,f237])).
fof(f4817,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f2087,f230])).
fof(f4823,plain,(
  ( ! [X10,X8,X11] : (sP1(X8,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) | $spl70),
  inference(cnf_transformation,[],[f4823_D])).
fof(f4823_D,plain,(
  ( ! [X10,X8,X11] : (sP1(X8,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f4824,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X12,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f4813,f237])).
fof(f4813,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X12,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2087,f524])).
fof(f4822,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X8,X10) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f4812,f237])).
fof(f4812,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X8,X10) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2087,f524])).
fof(f4790,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3208,f3216])).
fof(f3216,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f3200,f268])).
fof(f3208,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f241])).
fof(f4789,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3211,f223])).
fof(f3211,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f427,f3200,f268])).
fof(f4788,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3217,f223])).
fof(f3217,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f427,f3200,f268])).
fof(f4787,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3226,f223])).
fof(f3226,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f441,f3200,f289])).
fof(f4786,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3227,f3200])).
fof(f3227,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f611,f3200,f289])).
fof(f611,plain,(
  sP1('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f293])).
fof(f4785,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3228,f3200])).
fof(f3228,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f822,f3200,f289])).
fof(f822,plain,(
  sP1('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f293])).
fof(f4784,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3235,f223])).
fof(f3235,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f438,f3200,f289])).
fof(f4783,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3239,f3200])).
fof(f3239,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f610,f3200,f289])).
fof(f610,plain,(
  sP1('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f290])).
fof(f4782,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3240,f3200])).
fof(f3240,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f821,f3200,f289])).
fof(f821,plain,(
  sP1('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f290])).
fof(f4781,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3266,f3200])).
fof(f3266,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f454,f3200,f301])).
fof(f4780,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3271,f3200])).
fof(f3271,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f452,f3200,f301])).
fof(f4779,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3278,f223])).
fof(f3278,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f581,f404,f3200,f312])).
fof(f4778,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f3279,f3200])).
fof(f3279,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f3050,f404,f3200,f312])).
fof(f4777,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3280,f3200])).
fof(f3280,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1032,f404,f3200,f312])).
fof(f1032,plain,(
  sP6('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f404,f412,f410,f621,f315])).
fof(f621,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f326])).
fof(f4776,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3281,f3200])).
fof(f3281,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1376,f404,f3200,f312])).
fof(f1376,plain,(
  sP6('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f404,f412,f410,f852,f315])).
fof(f852,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f326])).
fof(f4775,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3336,f223])).
fof(f3336,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f990,f404,f3200,f312])).
fof(f4774,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3341,f3200])).
fof(f3341,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1025,f404,f3200,f312])).
fof(f1025,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f404,f413,f409,f620,f314])).
fof(f620,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f325])).
fof(f4773,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3342,f3200])).
fof(f3342,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1364,f404,f3200,f312])).
fof(f1364,plain,(
  sP6('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f404,f413,f409,f851,f314])).
fof(f851,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f325])).
fof(f4772,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3362,f3579])).
fof(f3579,plain,(
  ( ! [X0] : (~sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f427,f3200,f330])).
fof(f3362,plain,(
  ( ! [X0] : (sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f415,f412,f408,f3200,f313])).
fof(f4771,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3407,f3579])).
fof(f3407,plain,(
  ( ! [X0] : (sP6(X0,'T_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f415,f412,f409,f3200,f313])).
fof(f4770,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3411,f591])).
fof(f3411,plain,(
  sP6('T_0','T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f415,f411,f409,f3200,f313])).
fof(f4769,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3413,f831])).
fof(f831,plain,(
  ~sP6('T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f312])).
fof(f3413,plain,(
  sP6('T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f411,f409,f3200,f313])).
fof(f4768,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3415,f623])).
fof(f623,plain,(
  ~sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f427,f402,f330])).
fof(f3415,plain,(
  sP6('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0','F_0') | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f619,f409,f3200,f313])).
fof(f619,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f321])).
fof(f4767,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3419,f854])).
fof(f854,plain,(
  ~sP6('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0','F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f427,f400,f330])).
fof(f3419,plain,(
  sP6('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0','F_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f850,f409,f3200,f313])).
fof(f850,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f321])).
fof(f4766,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3421,f832])).
fof(f832,plain,(
  ~sP6('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f400,f404,f400,f312])).
fof(f3421,plain,(
  sP6('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f850,f409,f3200,f313])).
fof(f4765,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3431,f3496])).
fof(f3496,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f317])).
fof(f3431,plain,(
  ~sP5('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f415,f412,f591,f3200,f313])).
fof(f4764,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3432,f3528])).
fof(f3528,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f321])).
fof(f3432,plain,(
  ~sP4('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f415,f409,f591,f3200,f313])).
fof(f4763,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3433,f3534])).
fof(f3534,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f327])).
fof(f3433,plain,(
  ~sP3('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f412,f409,f591,f3200,f313])).
fof(f4762,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f3438,f3496])).
fof(f3438,plain,(
  ~sP5('T_0','F_0',f(s(bool,'T_0'))) | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f414,f412,f3051,f3200,f313])).
fof(f4761,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f3439,f3528])).
fof(f3439,plain,(
  ~sP4(f(s(bool,'T_0')),'F_0','T_0') | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f414,f409,f3051,f3200,f313])).
fof(f4760,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f3440,f3534])).
fof(f3440,plain,(
  ~sP3('F_0',f(s(bool,'T_0')),'T_0') | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f412,f409,f3051,f3200,f313])).
fof(f4759,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3442,f3496])).
fof(f3442,plain,(
  ~sP5('T_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f412,f831,f3200,f313])).
fof(f4758,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3443,f3528])).
fof(f3443,plain,(
  ~sP4('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','T_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f409,f831,f3200,f313])).
fof(f4757,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3444,f3534])).
fof(f3444,plain,(
  ~sP3('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f412,f409,f831,f3200,f313])).
fof(f4756,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3452,f3496])).
fof(f3452,plain,(
  ~sP5('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','T_0') | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f412,f623,f3200,f313])).
fof(f4755,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3453,f3528])).
fof(f3453,plain,(
  ~sP4('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f409,f623,f3200,f313])).
fof(f4754,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3454,f3534])).
fof(f3454,plain,(
  ~sP3('F_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f412,f409,f623,f3200,f313])).
fof(f4753,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3457,f3496])).
fof(f3457,plain,(
  ~sP5('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','T_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f412,f854,f3200,f313])).
fof(f4752,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3458,f3528])).
fof(f3458,plain,(
  ~sP4('T_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f409,f854,f3200,f313])).
fof(f4751,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3459,f3534])).
fof(f3459,plain,(
  ~sP3('F_0','T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f412,f409,f854,f3200,f313])).
fof(f4750,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3462,f3496])).
fof(f3462,plain,(
  ~sP5('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f412,f832,f3200,f313])).
fof(f4749,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3463,f3528])).
fof(f3463,plain,(
  ~sP4('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f409,f832,f3200,f313])).
fof(f4748,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3464,f3534])).
fof(f3464,plain,(
  ~sP3('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f412,f409,f832,f3200,f313])).
fof(f4747,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3467,f3200])).
fof(f3467,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f410,f404,f3200,f316])).
fof(f4746,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3479,f3496])).
fof(f3479,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f316])).
fof(f4745,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3481,f3200])).
fof(f3481,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f409,f404,f3200,f316])).
fof(f4744,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3487,f3496])).
fof(f3487,plain,(
  ( ! [X0] : (~sP5('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f223,f3200,f316])).
fof(f4743,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3494,f3496])).
fof(f3494,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f316])).
fof(f4742,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3499,f3200])).
fof(f3499,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f413,f404,f3200,f320])).
fof(f4741,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3511,f3528])).
fof(f3511,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f320])).
fof(f4740,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3513,f3200])).
fof(f3513,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f412,f404,f3200,f320])).
fof(f4739,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3519,f3528])).
fof(f3519,plain,(
  ( ! [X0] : (~sP4('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f223,f3200,f320])).
fof(f4738,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3526,f3528])).
fof(f3526,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f320])).
fof(f4733,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3543,f602])).
fof(f3543,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1145,f3200,f329])).
fof(f1145,plain,(
  ~sP6('F_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f602,f331])).
fof(f4732,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3544,f813])).
fof(f3544,plain,(
  s(bool,'T_0') != s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1353,f3200,f329])).
fof(f1353,plain,(
  ~sP6('F_0','T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f846,f310])).
fof(f846,plain,(
  ~sP4('T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f320])).
fof(f4731,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3546,f602])).
fof(f3546,plain,(
  s(bool,'T_0') != s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1143,f3200,f329])).
fof(f1143,plain,(
  ~sP6('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | $spl6),
  inference(unit_resulting_resolution,[],[f404,f602,f331])).
fof(f4730,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3547,f813])).
fof(f3547,plain,(
  s(bool,'T_0') != s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1348,f3200,f329])).
fof(f1348,plain,(
  ~sP6('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0') | $spl4),
  inference(unit_resulting_resolution,[],[f842,f310])).
fof(f842,plain,(
  ~sP4('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0','F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f320])).
fof(f4728,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3567,f427])).
fof(f3567,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f581,f3200,f330])).
fof(f4727,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3568,f427])).
fof(f3568,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f580,f3200,f330])).
fof(f4726,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f4725,f427])).
fof(f4725,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl63 | $spl66)),
  inference(forward_demodulation,[],[f3569,f3060])).
fof(f3569,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f3057,f3200,f330])).
fof(f4724,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4723,f427])).
fof(f4723,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl6 | $spl66)),
  inference(forward_demodulation,[],[f3570,f602])).
fof(f3570,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1040,f3200,f330])).
fof(f1040,plain,(
  sP6('F_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f413,f410,f622,f314])).
fof(f622,plain,(
  ( ! [X0,X1] : (sP3('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f327])).
fof(f4722,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4721,f427])).
fof(f4721,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl66)),
  inference(forward_demodulation,[],[f3571,f813])).
fof(f3571,plain,(
  s(bool,'F_0') = s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1388,f3200,f330])).
fof(f1388,plain,(
  sP6('F_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f413,f410,f853,f314])).
fof(f853,plain,(
  ( ! [X0,X1] : (sP3('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0,X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f327])).
fof(f4720,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f4719,f427])).
fof(f4719,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl63 | $spl66)),
  inference(forward_demodulation,[],[f3572,f3060])).
fof(f3572,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f3050,f3200,f330])).
fof(f4718,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4717,f427])).
fof(f4717,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl6 | $spl66)),
  inference(forward_demodulation,[],[f3573,f602])).
fof(f3573,plain,(
  s(bool,'F_0') = s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1032,f3200,f330])).
fof(f4716,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4715,f427])).
fof(f4715,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl66)),
  inference(forward_demodulation,[],[f3574,f813])).
fof(f3574,plain,(
  s(bool,'F_0') = s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1376,f3200,f330])).
fof(f4714,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3594,f3848])).
fof(f3848,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f3200,f3200,f345])).
fof(f3594,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f333])).
fof(f4713,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3607,f3848])).
fof(f3607,plain,(
  ( ! [X0,X1] : (~sP8(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f334])).
fof(f4712,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3610,f3200])).
fof(f3610,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f419,f463,f3200,f335])).
fof(f4711,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3611,f3200])).
fof(f3611,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f417,f463,f3200,f335])).
fof(f4710,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3614,f3200])).
fof(f3614,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f626,f3200,f335])).
fof(f626,plain,(
  ( ! [X0] : (~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0',X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f334])).
fof(f4709,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3615,f3200])).
fof(f3615,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f627,f626,f3200,f335])).
fof(f627,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f340])).
fof(f4708,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3618,f3200])).
fof(f3618,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f857,f3200,f335])).
fof(f857,plain,(
  ( ! [X0] : (~sP8('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0',X0)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f334])).
fof(f4707,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3619,f3200])).
fof(f3619,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f872,f857,f3200,f335])).
fof(f872,plain,(
  ( ! [X0,X1] : (sP7(X0,X1,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f340])).
fof(f4706,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3625,f3732])).
fof(f3732,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f340])).
fof(f3625,plain,(
  ~sP7('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f335])).
fof(f4705,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3629,f3732])).
fof(f3629,plain,(
  ~sP7('F_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f223,f3200,f335])).
fof(f4704,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3631,f3732])).
fof(f3631,plain,(
  ~sP7('F_0','T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f223,f3200,f335])).
fof(f4703,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3638,f3732])).
fof(f3638,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f335])).
fof(f4702,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3640,f3732])).
fof(f3640,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f335])).
fof(f4701,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3647,f3732])).
fof(f3647,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f335])).
fof(f625,plain,(
  ( ! [X0] : (~sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'F_0')) ) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f333])).
fof(f4700,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3649,f3732])).
fof(f3649,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f335])).
fof(f4699,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3651,f3732])).
fof(f3651,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f335])).
fof(f856,plain,(
  ( ! [X0] : (~sP8('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f333])).
fof(f4698,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3653,f3732])).
fof(f3653,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f335])).
fof(f4697,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3655,f3200])).
fof(f3655,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f418,f462,f3200,f335])).
fof(f4696,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3656,f3200])).
fof(f3656,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f417,f462,f3200,f335])).
fof(f4695,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3659,f3200])).
fof(f3659,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f625,f3200,f335])).
fof(f4694,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3660,f3200])).
fof(f3660,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f627,f625,f3200,f335])).
fof(f4693,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3663,f3200])).
fof(f3663,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f856,f3200,f335])).
fof(f4692,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3664,f3200])).
fof(f3664,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f872,f856,f3200,f335])).
fof(f4691,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3671,f3732])).
fof(f3671,plain,(
  ~sP7('T_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f462,f223,f3200,f335])).
fof(f4690,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3676,f3732])).
fof(f3676,plain,(
  ~sP7('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f223,f3200,f335])).
fof(f4689,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3678,f3732])).
fof(f3678,plain,(
  ~sP7('T_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f223,f3200,f335])).
fof(f4688,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3685,f3732])).
fof(f3685,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f335])).
fof(f4687,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3687,f3732])).
fof(f3687,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f335])).
fof(f4686,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3694,f3732])).
fof(f3694,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f335])).
fof(f4685,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3696,f3732])).
fof(f3696,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f335])).
fof(f4684,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3698,f3732])).
fof(f3698,plain,(
  ( ! [X0] : (~sP7(X0,'F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f335])).
fof(f4683,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3700,f3732])).
fof(f3700,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f335])).
fof(f4682,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3703,f3200])).
fof(f3703,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f419,f404,f3200,f339])).
fof(f4681,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3715,f3732])).
fof(f3715,plain,(
  ( ! [X0,X1] : (~sP7(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f339])).
fof(f4680,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3717,f3200])).
fof(f3717,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f418,f404,f3200,f339])).
fof(f4679,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3723,f3732])).
fof(f3723,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f223,f3200,f339])).
fof(f4678,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3730,f3732])).
fof(f3730,plain,(
  ( ! [X0,X1] : (~sP7(X0,X1,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f3200,f339])).
fof(f4677,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3734,f223])).
fof(f3734,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f345])).
fof(f4676,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3737,f3200])).
fof(f3737,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f223,f3200,f345])).
fof(f4675,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3738,f3200])).
fof(f3738,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f223,f3200,f345])).
fof(f4674,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3739,f223])).
fof(f3739,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f345])).
fof(f4673,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3740,f223])).
fof(f3740,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f345])).
fof(f4672,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3746,f3200])).
fof(f3746,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f345])).
fof(f4671,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3747,f3200])).
fof(f3747,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f345])).
fof(f4670,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3748,f3200])).
fof(f3748,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f345])).
fof(f4669,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3749,f3200])).
fof(f3749,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f345])).
fof(f4668,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3751,f3200])).
fof(f3751,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f345])).
fof(f4667,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3757,f3200])).
fof(f3757,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f345])).
fof(f4666,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3758,f223])).
fof(f3758,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f3200,f3200,f345])).
fof(f4665,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3759,f223])).
fof(f3759,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f887,f3200,f3200,f345])).
fof(f887,plain,(
  ~sP8('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0') | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f348])).
fof(f4664,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3760,f3200])).
fof(f3760,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f890,f3200,f3200,f345])).
fof(f890,plain,(
  ~sP8('F_0','T_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f348])).
fof(f4663,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3761,f3200])).
fof(f3761,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f891,f3200,f3200,f345])).
fof(f891,plain,(
  ~sP8('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f404,f400,f348])).
fof(f4662,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3762,f3200])).
fof(f3762,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2925,f3200,f3200,f345])).
fof(f2925,plain,(
  ~sP8('F_0','T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f2914,f332])).
fof(f2914,plain,(
  ~sP7('T_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f223,f404,f1195])).
fof(f1195,plain,(
  ( ! [X21,X22] : (~sP7(X21,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X22) | p(s(bool,X22)) | ~p(s(bool,X21))) ) | $spl6),
  inference(subsumption_resolution,[],[f1166,f223])).
fof(f1166,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X21)) | p(s(bool,X22)) | ~sP7(X21,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X22)) ) | $spl6),
  inference(superposition,[],[f339,f602])).
fof(f4661,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3764,f3200])).
fof(f3764,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f345])).
fof(f4660,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3766,f3200])).
fof(f3766,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f345])).
fof(f4659,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3771,f3200])).
fof(f3771,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f223,f3200,f345])).
fof(f4658,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3773,f3200])).
fof(f3773,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f345])).
fof(f4657,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3775,f223])).
fof(f3775,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f3200,f3200,f345])).
fof(f4656,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3776,f3200])).
fof(f3776,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f887,f3200,f3200,f345])).
fof(f4655,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3777,f223])).
fof(f3777,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f890,f3200,f3200,f345])).
fof(f4654,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3778,f3200])).
fof(f3778,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f891,f3200,f3200,f345])).
fof(f4653,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3779,f223])).
fof(f3779,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2925,f3200,f3200,f345])).
fof(f4652,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3780,f3200])).
fof(f3780,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f345])).
fof(f4651,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3782,f3200])).
fof(f3782,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f345])).
fof(f4650,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3784,f223])).
fof(f3784,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f223,f3200,f345])).
fof(f4649,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3788,f3200])).
fof(f3788,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f223,f3200,f345])).
fof(f4648,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3789,f3200])).
fof(f3789,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f223,f3200,f345])).
fof(f4647,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3794,f223])).
fof(f3794,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f345])).
fof(f4646,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3795,f223])).
fof(f3795,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f345])).
fof(f4645,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3801,f3200])).
fof(f3801,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f345])).
fof(f4644,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3802,f3200])).
fof(f3802,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f345])).
fof(f4643,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3803,f3200])).
fof(f3803,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f345])).
fof(f4642,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3804,f3200])).
fof(f3804,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f345])).
fof(f4641,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3810,f223])).
fof(f3810,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f223,f3200,f345])).
fof(f4640,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3811,f3200])).
fof(f3811,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f887,f223,f3200,f345])).
fof(f4639,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3814,f3200])).
fof(f3814,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f345])).
fof(f4638,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3816,f223])).
fof(f3816,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f3200,f3200,f345])).
fof(f4637,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3817,f3200])).
fof(f3817,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f887,f3200,f3200,f345])).
fof(f4636,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3818,f223])).
fof(f3818,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f890,f3200,f3200,f345])).
fof(f4635,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3819,f3200])).
fof(f3819,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f891,f3200,f3200,f345])).
fof(f4634,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3820,f223])).
fof(f3820,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2925,f3200,f3200,f345])).
fof(f4633,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3821,f3200])).
fof(f3821,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f3200,f345])).
fof(f4632,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3823,f3200])).
fof(f3823,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f856,f3200,f3200,f345])).
fof(f4631,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3826,f223])).
fof(f3826,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f223,f3200,f345])).
fof(f4630,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3827,f3200])).
fof(f3827,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f890,f223,f3200,f345])).
fof(f4629,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3828,f3200])).
fof(f3828,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2925,f223,f3200,f345])).
fof(f4628,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3836,f3200])).
fof(f3836,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f463,f3200,f3200,f345])).
fof(f4627,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3837,f223])).
fof(f3837,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f718,f3200,f3200,f345])).
fof(f4626,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3838,f223])).
fof(f3838,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f887,f3200,f3200,f345])).
fof(f4625,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3839,f3200])).
fof(f3839,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f890,f3200,f3200,f345])).
fof(f4624,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3840,f3200])).
fof(f3840,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f891,f3200,f3200,f345])).
fof(f4623,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3841,f3200])).
fof(f3841,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2925,f3200,f3200,f345])).
fof(f4622,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3843,f3200])).
fof(f3843,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f3200,f345])).
fof(f4621,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3845,f3200])).
fof(f3845,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f857,f3200,f3200,f345])).
fof(f4620,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3851,f3200])).
fof(f3851,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f472,f404,f3200,f348])).
fof(f4619,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3873,f3200])).
fof(f3873,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f466,f404,f3200,f348])).
fof(f4618,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3911,f4398])).
fof(f4398,plain,(
  ( ! [X0,X1] : (sP10('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f422,f3200,f388])).
fof(f3911,plain,(
  ( ! [X0,X1] : (~sP10('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f349])).
fof(f4617,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3928,f4398])).
fof(f3928,plain,(
  ( ! [X0,X1] : (~sP10('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f350])).
fof(f4616,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3953,f4008])).
fof(f4008,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f358])).
fof(f3953,plain,(
  ~sP9('F_0','T_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f477,f404,f3200,f353])).
fof(f4615,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3955,f4008])).
fof(f3955,plain,(
  ~sP9('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0') | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f630,f404,f3200,f353])).
fof(f630,plain,(
  ( ! [X0] : (~sP10('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f350])).
fof(f4614,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3957,f4008])).
fof(f3957,plain,(
  ~sP9('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f895,f404,f3200,f353])).
fof(f4613,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f3983,f4008])).
fof(f3983,plain,(
  ~sP9('F_0','F_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f473,f404,f3200,f354])).
fof(f4612,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f3984,f4008])).
fof(f3984,plain,(
  ~sP9('F_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f404,f3200,f354])).
fof(f628,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f349])).
fof(f4611,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f3985,f4008])).
fof(f3985,plain,(
  ~sP9('F_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f404,f3200,f354])).
fof(f893,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f349])).
fof(f4610,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4004,f4008])).
fof(f4004,plain,(
  ( ! [X0] : (~sP9(X0,'F_0','F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f404,f3200,f356])).
fof(f4609,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4010,f223])).
fof(f4010,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f361])).
fof(f4608,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4017,f3200])).
fof(f4017,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2956,f3200,f361])).
fof(f2956,plain,(
  ~sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f2942,f351])).
fof(f2942,plain,(
  ~sP9('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f404,f404,f1198])).
fof(f1198,plain,(
  ( ! [X28,X27] : (~sP9('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X27,X28) | p(s(bool,X28)) | p(s(bool,X27))) ) | $spl6),
  inference(subsumption_resolution,[],[f1169,f223])).
fof(f1169,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | p(s(bool,X28)) | ~sP9('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X27,X28)) ) | $spl6),
  inference(superposition,[],[f356,f602])).
fof(f4607,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4018,f3200])).
fof(f4018,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f914,f3200,f361])).
fof(f914,plain,(
  ~sP10('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','F_0') | $spl4),
  inference(unit_resulting_resolution,[],[f404,f404,f400,f363])).
fof(f4606,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4024,f223])).
fof(f4024,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f473,f3200,f361])).
fof(f4605,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4025,f3200])).
fof(f4025,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f3200,f361])).
fof(f4604,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4026,f3200])).
fof(f4026,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f3200,f361])).
fof(f4603,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4027,f3200])).
fof(f4027,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f477,f3200,f361])).
fof(f4602,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4028,f3200])).
fof(f4028,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f630,f3200,f361])).
fof(f4601,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4029,f3200])).
fof(f4029,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f895,f3200,f361])).
fof(f4600,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4036,f223])).
fof(f4036,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f362])).
fof(f4599,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4043,f3200])).
fof(f4043,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2956,f3200,f362])).
fof(f4598,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4044,f3200])).
fof(f4044,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f914,f3200,f362])).
fof(f4597,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4050,f3200])).
fof(f4050,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f473,f3200,f362])).
fof(f4596,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4051,f3200])).
fof(f4051,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f3200,f362])).
fof(f4595,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4052,f3200])).
fof(f4052,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f3200,f362])).
fof(f4594,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4053,f223])).
fof(f4053,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f477,f3200,f362])).
fof(f4593,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4054,f3200])).
fof(f4054,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f630,f3200,f362])).
fof(f4592,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4055,f3200])).
fof(f4055,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f895,f3200,f362])).
fof(f4591,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4092,f4375])).
fof(f4375,plain,(
  ( ! [X0,X1] : (sP12('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f425,f3200,f387])).
fof(f4092,plain,(
  ( ! [X0,X1] : (~sP12('F_0',X0,X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200,f367])).
fof(f4590,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4095,f3200])).
fof(f4095,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f425,f491,f3200,f370])).
fof(f4589,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4096,f3200])).
fof(f4096,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f424,f491,f3200,f370])).
fof(f4588,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4098,f3200])).
fof(f4098,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f644,f3200,f370])).
fof(f644,plain,(
  ( ! [X0] : (~sP12('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f402,f367])).
fof(f4587,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4099,f3200])).
fof(f4099,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f646,f644,f3200,f370])).
fof(f646,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f375])).
fof(f4586,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4101,f3200])).
fof(f4101,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f915,f3200,f370])).
fof(f915,plain,(
  ( ! [X0] : (~sP12('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f400,f367])).
fof(f4585,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4102,f3200])).
fof(f4102,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f935,f915,f3200,f370])).
fof(f935,plain,(
  ( ! [X0,X1] : (sP11(X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f375])).
fof(f4584,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4109,f4248])).
fof(f4248,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f375])).
fof(f4109,plain,(
  ~sP11('F_0','T_0','T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f491,f223,f3200,f370])).
fof(f4583,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4111,f4248])).
fof(f4111,plain,(
  ~sP11('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'T_0') | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f223,f3200,f370])).
fof(f4582,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4113,f4248])).
fof(f4113,plain,(
  ~sP11('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'T_0') | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f223,f3200,f370])).
fof(f4581,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4125,f4248])).
fof(f4125,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f490,f3200,f3200,f370])).
fof(f4580,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4127,f4248])).
fof(f4127,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f491,f3200,f3200,f370])).
fof(f4579,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4129,f4248])).
fof(f4129,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f3200,f3200,f370])).
fof(f4578,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4131,f4248])).
fof(f4131,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f3200,f3200,f370])).
fof(f4577,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4157,f4248])).
fof(f4157,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f490,f3200,f3200,f370])).
fof(f4576,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4158,f4248])).
fof(f4158,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f491,f3200,f3200,f370])).
fof(f4575,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4159,f4248])).
fof(f4159,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f3200,f3200,f370])).
fof(f4574,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4160,f4248])).
fof(f4160,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f3200,f3200,f370])).
fof(f4573,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4188,f4248])).
fof(f4188,plain,(
  ~sP11('F_0','F_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f490,f404,f3200,f371])).
fof(f4572,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4210,f4248])).
fof(f4210,plain,(
  ~sP11('F_0','F_0','F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f490,f404,f3200,f372])).
fof(f4571,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4228,f3200])).
fof(f4228,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f425,f404,f3200,f373])).
fof(f4570,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4231,f4248])).
fof(f4231,plain,(
  ( ! [X0,X1] : (~sP11(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f404,f3200,f373])).
fof(f4569,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4242,f3200])).
fof(f4242,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f423,f404,f3200,f373])).
fof(f4568,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4244,f4248])).
fof(f4244,plain,(
  ( ! [X0] : (~sP11('T_0','F_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f223,f404,f3200,f373])).
fof(f4567,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4246,f4248])).
fof(f4246,plain,(
  ( ! [X0,X1] : (~sP11(X0,'F_0',X1)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f404,f3200,f373])).
fof(f4566,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4275,f223])).
fof(f4275,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f789,f3200,f379])).
fof(f4565,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4276,f223])).
fof(f4276,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f944,f3200,f379])).
fof(f944,plain,(
  ~sP12('T_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f380])).
fof(f4564,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4277,f223])).
fof(f4277,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2986,f3200,f379])).
fof(f2986,plain,(
  ~sP12('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f2976,f368])).
fof(f2976,plain,(
  ~sP11('T_0','F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | $spl6),
  inference(unit_resulting_resolution,[],[f404,f223,f1202])).
fof(f1202,plain,(
  ( ! [X35,X36] : (~sP11(X36,X35,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ~p(s(bool,X36)) | p(s(bool,X35))) ) | $spl6),
  inference(subsumption_resolution,[],[f1173,f223])).
fof(f1173,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | p(s(bool,X35)) | ~p(s(bool,X36)) | ~sP11(X36,X35,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(superposition,[],[f373,f602])).
fof(f4563,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4282,f3200])).
fof(f4282,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f3003,f3200,f379])).
fof(f3003,plain,(
  ~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),'F_0','T_0') | $spl6),
  inference(unit_resulting_resolution,[],[f223,f404,f1205])).
fof(f1205,plain,(
  ( ! [X41,X42] : (~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X42,X41) | p(s(bool,X42)) | ~p(s(bool,X41))) ) | $spl6),
  inference(subsumption_resolution,[],[f1176,f223])).
fof(f1176,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | ~p(s(bool,X41)) | p(s(bool,X42)) | ~sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X42,X41)) ) | $spl6),
  inference(superposition,[],[f380,f602])).
fof(f4562,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4283,f3200])).
fof(f4283,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f947,f3200,f379])).
fof(f947,plain,(
  ~sP12('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','T_0') | $spl4),
  inference(unit_resulting_resolution,[],[f223,f404,f400,f380])).
fof(f4561,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4284,f3200])).
fof(f4284,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f948,f3200,f379])).
fof(f948,plain,(
  ~sP12('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),'F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f404,f400,f380])).
fof(f4560,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4292,f3200])).
fof(f4292,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl66),
  inference(unit_resulting_resolution,[],[f490,f3200,f379])).
fof(f4559,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4293,f223])).
fof(f4293,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f491,f3200,f379])).
fof(f4558,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4294,f3200])).
fof(f4294,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f3200,f379])).
fof(f4557,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4295,f3200])).
fof(f4295,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f3200,f379])).
fof(f4556,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4303,f223])).
fof(f4303,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f493,f404,f3200,f380])).
fof(f4555,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4306,f3200])).
fof(f4306,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f653,f404,f3200,f380])).
fof(f653,plain,(
  ( ! [X0] : (sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0,'F_0')) ) | $spl6),
  inference(unit_resulting_resolution,[],[f423,f402,f387])).
fof(f4554,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4307,f3200])).
fof(f4307,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f949,f404,f3200,f380])).
fof(f949,plain,(
  ( ! [X0] : (sP12('const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f423,f400,f387])).
fof(f4553,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4329,f223])).
fof(f4329,plain,(
  ~p(s(bool,'T_0')) | $spl66),
  inference(unit_resulting_resolution,[],[f779,f404,f3200,f380])).
fof(f4552,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4330,f3200])).
fof(f4330,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f936,f404,f3200,f380])).
fof(f936,plain,(
  sP12('F_0','F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) | $spl4),
  inference(unit_resulting_resolution,[],[f404,f404,f400,f377])).
fof(f4551,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4360,f423])).
fof(f4360,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f490,f3200,f387])).
fof(f4550,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4361,f424])).
fof(f4361,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f491,f3200,f387])).
fof(f4549,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4362,f646])).
fof(f4362,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f3200,f387])).
fof(f4548,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4363,f935])).
fof(f4363,plain,(
  ( ! [X0] : (~sP11('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f3200,f387])).
fof(f4547,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4378,f420])).
fof(f4378,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'T_0')) ) | $spl66),
  inference(unit_resulting_resolution,[],[f473,f3200,f388])).
fof(f4546,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4379,f632])).
fof(f632,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f357])).
fof(f4379,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f3200,f388])).
fof(f4545,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4380,f902])).
fof(f902,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f357])).
fof(f4380,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f3200,f388])).
fof(f4544,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4381,f421])).
fof(f4381,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) ) | $spl66),
  inference(unit_resulting_resolution,[],[f477,f3200,f388])).
fof(f4543,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4382,f633])).
fof(f633,plain,(
  ( ! [X0,X1] : (sP9(X0,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f402,f358])).
fof(f4382,plain,(
  ( ! [X0] : (~sP9('F_0','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X0)) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f630,f3200,f388])).
fof(f4542,plain,(
  $false | ($spl4 | $spl66)),
  inference(subsumption_resolution,[],[f4383,f903])).
fof(f903,plain,(
  ( ! [X0,X1] : (sP9(X0,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f400,f358])).
fof(f4383,plain,(
  ( ! [X0] : (~sP9('F_0','const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)),X0)) ) | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f895,f3200,f388])).
fof(f4541,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4426,f3200])).
fof(f4426,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f626,f3200,f1196])).
fof(f1196,plain,(
  ( ! [X24,X23] : (sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X23,X24) | ~p(s(bool,X24)) | ~p(s(bool,X23))) ) | $spl6),
  inference(subsumption_resolution,[],[f1167,f223])).
fof(f1167,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | ~p(s(bool,X24)) | sP8('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X23,X24)) ) | $spl6),
  inference(superposition,[],[f345,f602])).
fof(f4540,plain,(
  $false | ($spl6 | $spl66)),
  inference(subsumption_resolution,[],[f4430,f3200])).
fof(f4430,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f625,f3200,f1196])).
fof(f4539,plain,(
  $false | ($spl24 | $spl66)),
  inference(subsumption_resolution,[],[f4475,f3200])).
fof(f4475,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f463,f3200,f2048])).
fof(f4538,plain,(
  $false | ($spl24 | $spl66)),
  inference(subsumption_resolution,[],[f4480,f3200])).
fof(f4480,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f462,f3200,f2048])).
fof(f4537,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f4513,f3200])).
fof(f4513,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f399,f3200,f384])).
fof(f4536,plain,(
  $false | ($spl3 | $spl66)),
  inference(subsumption_resolution,[],[f4517,f3200])).
fof(f4517,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.typeSystem.tenv_val',X3))))) ) | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f399,f3200,f384])).
fof(f4519,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f399,f3200,f3200,f384])).
fof(f4515,plain,(
  $false | ($spl3 | $spl66)),
  inference(unit_resulting_resolution,[],[f399,f3200,f3200,f384])).
fof(f4511,plain,(
  $false | ($spl42 | $spl66)),
  inference(unit_resulting_resolution,[],[f493,f404,f3200,f2075])).
fof(f4505,plain,(
  $false | ($spl40 | $spl66)),
  inference(unit_resulting_resolution,[],[f789,f3200,f2072])).
fof(f4503,plain,(
  $false | ($spl36 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f404,f3200,f2066])).
fof(f4497,plain,(
  $false | ($spl32 | $spl66)),
  inference(unit_resulting_resolution,[],[f753,f3200,f2060])).
fof(f4495,plain,(
  $false | ($spl30 | $spl66)),
  inference(unit_resulting_resolution,[],[f753,f3200,f2057])).
fof(f4493,plain,(
  $false | ($spl26 | $spl66)),
  inference(unit_resulting_resolution,[],[f472,f404,f3200,f2051])).
fof(f4485,plain,(
  $false | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f2048])).
fof(f4483,plain,(
  $false | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f462,f223,f3200,f2048])).
fof(f4479,plain,(
  $false | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f2048])).
fof(f4477,plain,(
  $false | ($spl24 | $spl66)),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f2048])).
fof(f4473,plain,(
  $false | ($spl22 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f404,f3200,f2045])).
fof(f4467,plain,(
  $false | ($spl20 | $spl66)),
  inference(unit_resulting_resolution,[],[f413,f404,f3200,f2042])).
fof(f4461,plain,(
  $false | ($spl18 | $spl66)),
  inference(unit_resulting_resolution,[],[f410,f404,f3200,f2039])).
fof(f4455,plain,(
  $false | ($spl14 | $spl66)),
  inference(unit_resulting_resolution,[],[f454,f3200,f2032])).
fof(f4451,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f653,f3200,f1205])).
fof(f4448,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f3003,f3200,f1204])).
fof(f1204,plain,(
  ( ! [X39,X40] : (sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X39,X40) | ~p(s(bool,X39))) ) | $spl6),
  inference(subsumption_resolution,[],[f1175,f223])).
fof(f1175,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP12('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X39,X40)) ) | $spl6),
  inference(superposition,[],[f379,f602])).
fof(f4446,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f425,f3200,f1202])).
fof(f4440,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2956,f3200,f1200])).
fof(f1200,plain,(
  ( ! [X31,X32] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X31,X32) | ~p(s(bool,X31))) ) | $spl6),
  inference(subsumption_resolution,[],[f1171,f223])).
fof(f1171,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X31)) | sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X31,X32)) ) | $spl6),
  inference(superposition,[],[f362,f602])).
fof(f4438,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f2956,f3200,f1199])).
fof(f1199,plain,(
  ( ! [X30,X29] : (sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X30,X29) | ~p(s(bool,X29))) ) | $spl6),
  inference(subsumption_resolution,[],[f1170,f223])).
fof(f1170,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | sP10('const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X30,X29)) ) | $spl6),
  inference(superposition,[],[f361,f602])).
fof(f4436,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f472,f3200,f1197])).
fof(f1197,plain,(
  ( ! [X26,X25] : (~sP8(X26,X25,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | p(s(bool,X26)) | ~p(s(bool,X25))) ) | $spl6),
  inference(subsumption_resolution,[],[f1168,f223])).
fof(f1168,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | p(s(bool,X26)) | ~sP8(X26,X25,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(superposition,[],[f348,f602])).
fof(f4433,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f3200,f626,f3200,f1196])).
fof(f4431,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f223,f625,f3200,f1196])).
fof(f4427,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f223,f626,f3200,f1196])).
fof(f4425,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f3200,f625,f3200,f1196])).
fof(f4421,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f419,f3200,f1195])).
fof(f4415,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f413,f3200,f1194])).
fof(f1194,plain,(
  ( ! [X19,X20] : (~sP4(X19,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X20) | p(s(bool,X20)) | ~p(s(bool,X19))) ) | $spl6),
  inference(subsumption_resolution,[],[f1165,f223])).
fof(f1165,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | p(s(bool,X20)) | ~sP4(X19,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X20)) ) | $spl6),
  inference(superposition,[],[f320,f602])).
fof(f4409,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f404,f410,f3200,f1193])).
fof(f1193,plain,(
  ( ! [X17,X18] : (~sP5(X17,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X18) | p(s(bool,X18)) | ~p(s(bool,X17))) ) | $spl6),
  inference(subsumption_resolution,[],[f1164,f223])).
fof(f1164,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | p(s(bool,X18)) | ~sP5(X17,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)),X18)) ) | $spl6),
  inference(superposition,[],[f316,f602])).
fof(f4403,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f454,f3200,f1190])).
fof(f1190,plain,(
  ( ! [X14,X13] : (sP2(X14,X13,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16))) | ~p(s(bool,X13))) ) | $spl6),
  inference(subsumption_resolution,[],[f1162,f223])).
fof(f1162,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | sP2(X14,X13,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) ) | $spl6),
  inference(superposition,[],[f301,f602])).
fof(f4401,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f452,f3200,f390])).
fof(f4399,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f473,f422,f3200,f388])).
fof(f4397,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f895,f903,f3200,f388])).
fof(f4395,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f630,f633,f3200,f388])).
fof(f4393,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f477,f421,f3200,f388])).
fof(f4391,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f902,f3200,f388])).
fof(f4389,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f632,f3200,f388])).
fof(f4387,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f473,f420,f3200,f388])).
fof(f4376,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f425,f3200,f387])).
fof(f4374,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f935,f3200,f387])).
fof(f4372,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f646,f3200,f387])).
fof(f4370,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f491,f424,f3200,f387])).
fof(f4368,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f423,f3200,f387])).
fof(f4356,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f493,f404,f3200,f3200,f380])).
fof(f4342,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f779,f404,f223,f3200,f380])).
fof(f4327,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f493,f404,f3200,f3200,f380])).
fof(f4313,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f493,f404,f223,f3200,f380])).
fof(f4302,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f789,f3200,f3200,f379])).
fof(f4300,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f491,f223,f3200,f379])).
fof(f4288,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f789,f3200,f3200,f379])).
fof(f4286,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f789,f223,f3200,f379])).
fof(f4274,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f404,f3200,f378])).
fof(f4262,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f404,f404,f3200,f377])).
fof(f4249,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f783,f3200,f375])).
fof(f4247,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f423,f3200,f404,f3200,f373])).
fof(f4245,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f423,f223,f404,f3200,f373])).
fof(f4232,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f423,f3200,f404,f3200,f373])).
fof(f4230,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f425,f223,f404,f3200,f373])).
fof(f4217,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f425,f404,f3200,f372])).
fof(f4215,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f423,f404,f3200,f372])).
fof(f4195,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f425,f404,f3200,f371])).
fof(f4193,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f423,f404,f3200,f371])).
fof(f4173,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f425,f3200,f3200,f370])).
fof(f4171,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f915,f935,f3200,f3200,f370])).
fof(f4169,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f644,f646,f3200,f3200,f370])).
fof(f4167,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f491,f424,f3200,f3200,f370])).
fof(f4165,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f490,f423,f3200,f3200,f370])).
fof(f4132,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f915,f3200,f3200,f370])).
fof(f4130,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f644,f3200,f3200,f370])).
fof(f4128,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f425,f491,f3200,f3200,f370])).
fof(f4126,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f425,f490,f3200,f3200,f370])).
fof(f4114,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f915,f223,f3200,f370])).
fof(f4112,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f425,f644,f223,f3200,f370])).
fof(f4110,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f425,f491,f223,f3200,f370])).
fof(f4093,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f779,f404,f3200,f367])).
fof(f4079,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f743,f404,f404,f3200,f363])).
fof(f4061,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f3200,f362])).
fof(f4059,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f477,f223,f3200,f362])).
fof(f4048,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f3200,f362])).
fof(f4046,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f223,f3200,f362])).
fof(f4035,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f3200,f361])).
fof(f4033,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f473,f223,f3200,f361])).
fof(f4022,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f3200,f3200,f361])).
fof(f4020,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f753,f223,f3200,f361])).
fof(f4009,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f747,f3200,f358])).
fof(f4007,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f747,f3200,f357])).
fof(f4005,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f422,f404,f404,f3200,f356])).
fof(f3995,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f473,f422,f404,f3200,f354])).
fof(f3993,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f893,f902,f404,f3200,f354])).
fof(f3991,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f628,f632,f404,f3200,f354])).
fof(f3989,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f473,f420,f404,f3200,f354])).
fof(f3958,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f422,f895,f404,f3200,f353])).
fof(f3956,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f422,f630,f404,f3200,f353])).
fof(f3954,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f422,f477,f404,f3200,f353])).
fof(f3929,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f743,f404,f3200,f350])).
fof(f3912,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f743,f404,f3200,f349])).
fof(f3895,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f466,f404,f3200,f3200,f348])).
fof(f3882,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f466,f404,f223,f3200,f348])).
fof(f3872,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f466,f404,f3200,f3200,f348])).
fof(f3859,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f472,f404,f223,f3200,f348])).
fof(f3849,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f3200,f345])).
fof(f3847,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f3200,f345])).
fof(f3834,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f223,f3200,f345])).
fof(f3832,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f718,f223,f223,f3200,f345])).
fof(f3808,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f3200,f345])).
fof(f3806,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f223,f3200,f3200,f345])).
fof(f3793,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f223,f3200,f345])).
fof(f3791,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f223,f223,f3200,f345])).
fof(f3770,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f3200,f3200,f345])).
fof(f3768,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f3200,f3200,f345])).
fof(f3755,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f462,f3200,f223,f3200,f345])).
fof(f3753,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f463,f223,f223,f3200,f345])).
fof(f3733,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f712,f3200,f340])).
fof(f3731,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f404,f3200,f3200,f339])).
fof(f3724,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f404,f223,f3200,f339])).
fof(f3716,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f404,f3200,f3200,f339])).
fof(f3709,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f419,f404,f223,f3200,f339])).
fof(f3701,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f857,f3200,f3200,f335])).
fof(f3699,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f856,f3200,f3200,f335])).
fof(f3697,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f626,f3200,f3200,f335])).
fof(f3695,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f625,f3200,f3200,f335])).
fof(f3688,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f419,f463,f3200,f3200,f335])).
fof(f3686,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f462,f3200,f3200,f335])).
fof(f3679,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f856,f223,f3200,f335])).
fof(f3677,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f625,f223,f3200,f335])).
fof(f3672,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f462,f223,f3200,f335])).
fof(f3654,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f857,f3200,f3200,f335])).
fof(f3652,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f856,f3200,f3200,f335])).
fof(f3650,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f626,f3200,f3200,f335])).
fof(f3648,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f418,f625,f3200,f3200,f335])).
fof(f3641,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f419,f463,f3200,f3200,f335])).
fof(f3639,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f418,f462,f3200,f3200,f335])).
fof(f3632,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f857,f223,f3200,f335])).
fof(f3630,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f419,f626,f223,f3200,f335])).
fof(f3626,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f419,f463,f223,f3200,f335])).
fof(f3608,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f472,f404,f3200,f334])).
fof(f3595,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f466,f404,f3200,f333])).
fof(f3582,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f580,f427,f3200,f330])).
fof(f3580,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f581,f427,f3200,f330])).
fof(f3560,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1353,f813,f3200,f329])).
fof(f3558,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1145,f602,f3200,f329])).
fof(f3556,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f1348,f813,f3200,f329])).
fof(f3554,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f1143,f602,f3200,f329])).
fof(f4535,plain,(
  $false | $spl66),
  inference(trivial_inequality_removal,[],[f3545])).
fof(f3545,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl66),
  inference(unit_resulting_resolution,[],[f699,f3200,f329])).
fof(f4534,plain,(
  $false | $spl66),
  inference(trivial_inequality_removal,[],[f3542])).
fof(f3542,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl66),
  inference(unit_resulting_resolution,[],[f690,f3200,f329])).
fof(f3535,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f694,f3200,f327])).
fof(f3533,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f694,f3200,f326])).
fof(f3531,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f694,f3200,f325])).
fof(f3529,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f684,f3200,f321])).
fof(f3527,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f412,f404,f3200,f3200,f320])).
fof(f3520,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f412,f404,f223,f3200,f320])).
fof(f3512,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f412,f404,f3200,f3200,f320])).
fof(f3505,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f413,f404,f223,f3200,f320])).
fof(f3497,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f672,f3200,f317])).
fof(f3495,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f409,f404,f3200,f3200,f316])).
fof(f3488,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f409,f404,f223,f3200,f316])).
fof(f3480,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f409,f404,f3200,f3200,f316])).
fof(f3473,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f410,f404,f223,f3200,f316])).
fof(f3465,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f412,f409,f832,f3200,f313])).
fof(f3460,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f412,f409,f854,f3200,f313])).
fof(f3455,plain,(
  $false | ($spl6 | $spl66)),
  inference(unit_resulting_resolution,[],[f415,f412,f409,f623,f3200,f313])).
fof(f3445,plain,(
  $false | ($spl4 | $spl66)),
  inference(unit_resulting_resolution,[],[f852,f412,f409,f831,f3200,f313])).
fof(f3441,plain,(
  $false | ($spl63 | $spl66)),
  inference(unit_resulting_resolution,[],[f414,f412,f409,f3051,f3200,f313])).
fof(f3434,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f415,f412,f409,f591,f3200,f313])).
fof(f3346,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f990,f3200,f404,f3200,f312])).
fof(f3344,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f990,f223,f404,f3200,f312])).
fof(f3311,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f990,f404,f3200,f3200,f312])).
fof(f3291,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f581,f404,f223,f3200,f312])).
fof(f3276,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f452,f3200,f3200,f301])).
fof(f3274,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f452,f223,f3200,f301])).
fof(f3270,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f452,f3200,f3200,f301])).
fof(f3268,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f454,f223,f3200,f301])).
fof(f3264,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f434,f404,f3200,f293])).
fof(f3254,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f434,f404,f3200,f290])).
fof(f3244,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f438,f3200,f3200,f289])).
fof(f3242,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f438,f223,f3200,f289])).
fof(f3234,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f438,f3200,f3200,f289])).
fof(f3232,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f441,f223,f3200,f289])).
fof(f3224,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f448,f3200,f275])).
fof(f3222,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f448,f3200,f274])).
fof(f3220,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f427,f3200,f268])).
fof(f3218,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f223,f427,f3200,f268])).
fof(f3214,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f3200,f427,f3200,f268])).
fof(f3212,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f223,f427,f3200,f268])).
fof(f3207,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f427,f3200,f238])).
fof(f3205,plain,(
  $false | $spl66),
  inference(unit_resulting_resolution,[],[f404,f3200])).
fof(f3204,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl68),
  inference(cnf_transformation,[],[f3204_D])).
fof(f3204_D,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f3203,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f3193,f237])).
fof(f3193,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f2086,f230])).
fof(f3199,plain,(
  ( ! [X10,X8,X11] : (sP1(X10,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) | $spl64),
  inference(cnf_transformation,[],[f3199_D])).
fof(f3199_D,plain,(
  ( ! [X10,X8,X11] : (sP1(X10,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f3201,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X14,X12) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f3189,f237])).
fof(f3189,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X14,X12) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2086,f524])).
fof(f3198,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X10,X8) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f3188,f237])).
fof(f3188,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X10,X8) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2086,f524])).
fof(f3040,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X0,X1,bool,bool))))) ) | $spl60),
  inference(cnf_transformation,[],[f3040_D])).
fof(f3040_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X0,X1,bool,bool))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f3042,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(cnf_transformation,[],[f3042_D])).
fof(f3042_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f3030,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X3,X4,bool,bool)))) | s(bool,X5) = s(bool,sK20(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1038,f524])).
fof(f3029,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK20(X0,X1,bool,bool)))) | s(bool,X2) = s(bool,sK20(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1038,f524])).
fof(f2801,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK20(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1037,f230])).
fof(f2800,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK20(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1037,f524])).
fof(f2799,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK20(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1037,f524])).
fof(f2802,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl48),
  inference(cnf_transformation,[],[f2802_D])).
fof(f2802_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f2798,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,sK20(X3,X4,bool,bool)) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1037,f524])).
fof(f2797,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK20(X0,X1,bool,bool)) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1037,f524])).
fof(f2180,plain,(
  $false | ($spl6 | $spl10)),
  inference(global_subsumption,[],[f2179,f222,f221,f220,f219,f218,f223,f404,f230,f238,f237,f242,f241,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f384,f383,f386,f385,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1037,f1038,f1645,f1704,f1705,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f2105,f2106,f1815,f1816,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2026,f2168,f2175])).
fof(f2175,plain,(
  ( ! [X4,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) ) | $spl10),
  inference(subsumption_resolution,[],[f2174,f223])).
fof(f2174,plain,(
  ( ! [X4,X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) ) | $spl10),
  inference(forward_demodulation,[],[f2173,f2026])).
fof(f2173,plain,(
  ( ! [X6,X4,X2,X0,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) ) | $spl10),
  inference(subsumption_resolution,[],[f2161,f223])).
fof(f2161,plain,(
  ( ! [X6,X4,X2,X0,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))) ) | $spl10),
  inference(backward_demodulation,[],[f2026,f384])).
fof(f2168,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f2150,f2026])).
fof(f2150,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl10),
  inference(backward_demodulation,[],[f2026,f241])).
fof(f2179,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f2164,f223])).
fof(f2164,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) ) | ($spl6 | $spl10)),
  inference(backward_demodulation,[],[f2026,f1182])).
fof(f2176,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f404,f230,f238,f237,f242,f241,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f384,f383,f386,f385,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1037,f1038,f1645,f1704,f1705,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f2105,f2106,f1815,f1816,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2026,f2168,f2175])).
fof(f2170,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f2152,f223])).
fof(f2152,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(backward_demodulation,[],[f2026,f404])).
fof(f2169,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f222,f221,f220,f219,f218,f223,f404,f230,f238,f237,f242,f241,f268,f265,f275,f274,f405,f293,f290,f289,f288,f298,f390,f301,f300,f299,f315,f314,f313,f312,f311,f310,f309,f319,f318,f317,f316,f323,f322,f321,f320,f327,f326,f325,f324,f331,f330,f329,f328,f389,f335,f334,f333,f332,f342,f341,f340,f339,f348,f345,f344,f343,f355,f354,f353,f388,f351,f350,f349,f359,f358,f357,f356,f363,f362,f361,f360,f372,f371,f370,f387,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f384,f383,f386,f385,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f434,f435,f438,f441,f448,f452,f454,f459,f462,f463,f466,f472,f473,f477,f480,f483,f490,f491,f493,f500,f524,f572,f581,f580,f591,f589,f672,f684,f690,f694,f699,f703,f712,f718,f743,f747,f753,f779,f783,f789,f964,f990,f1037,f1038,f1645,f1704,f1705,f1747,f2024,f2028,f2031,f2035,f2038,f2041,f2044,f2047,f2050,f2053,f2056,f2059,f2062,f2065,f2068,f2071,f2074,f2077,f2080,f2082,f2083,f2084,f2085,f2086,f2087,f2088,f2089,f2090,f2091,f2092,f2093,f2094,f2095,f2096,f2097,f2098,f2099,f2100,f2101,f2102,f2103,f2104,f2105,f2106,f1815,f1816,f2112,f2114,f2116,f2119,f2121,f2123,f2125,f2127,f2129,f2131,f2133,f2135,f2137,f2139,f2141,f2143,f2145,f2147,f2149,f2026,f2168])).
fof(f2081,plain,(
  ( ! [X2,X1] : (sP10('T_0',X1,X2) | ~sP9('T_0',X1,X2)) ) | $spl46),
  inference(cnf_transformation,[],[f2081_D])).
fof(f2081_D,plain,(
  ( ! [X2,X1] : (sP10('T_0',X1,X2) | ~sP9('T_0',X1,X2)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2149,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP9('T_0',X1,X2) | sP10('T_0',X1,X2)) )),
  inference(condensation,[],[f2148])).
fof(f2148,plain,(
  ( ! [X101,X99,X102,X100] : (~sP9('T_0',X100,X101) | sP10('T_0',X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f1846,f572])).
fof(f1846,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,X99)) | ~sP9('T_0',X100,X101) | sP10('T_0',X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f388,f524])).
fof(f2078,plain,(
  ( ! [X2,X1] : (sP12('T_0',X1,X2) | ~sP11('T_0',X1,X2)) ) | $spl44),
  inference(cnf_transformation,[],[f2078_D])).
fof(f2078_D,plain,(
  ( ! [X2,X1] : (sP12('T_0',X1,X2) | ~sP11('T_0',X1,X2)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2147,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP11('T_0',X1,X2) | sP12('T_0',X1,X2)) )),
  inference(condensation,[],[f2146])).
fof(f2146,plain,(
  ( ! [X97,X95,X98,X96] : (~sP11('T_0',X96,X97) | sP12('T_0',X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f1845,f572])).
fof(f1845,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,X95)) | ~sP11('T_0',X96,X97) | sP12('T_0',X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f387,f524])).
fof(f2075,plain,(
  ( ! [X2,X1] : (~sP12('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl42),
  inference(cnf_transformation,[],[f2075_D])).
fof(f2075_D,plain,(
  ( ! [X2,X1] : (~sP12('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2145,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP12('T_0',X2,X1)) )),
  inference(condensation,[],[f2144])).
fof(f2144,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP12('T_0',X93,X92) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f1844,f572])).
fof(f1844,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X91)) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP12('T_0',X93,X92) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f380,f524])).
fof(f2072,plain,(
  ( ! [X2,X1] : (sP12('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl40),
  inference(cnf_transformation,[],[f2072_D])).
fof(f2072_D,plain,(
  ( ! [X2,X1] : (sP12('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2143,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP12('T_0',X1,X2)) )),
  inference(condensation,[],[f2142])).
fof(f2142,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X88)) | sP12('T_0',X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f1843,f572])).
fof(f1843,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X87)) | ~p(s(bool,X88)) | sP12('T_0',X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f379,f524])).
fof(f2069,plain,(
  ( ! [X2,X1] : (sP12('T_0',X2,X1) | p(s(bool,X1))) ) | $spl38),
  inference(cnf_transformation,[],[f2069_D])).
fof(f2069_D,plain,(
  ( ! [X2,X1] : (sP12('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2141,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP12('T_0',X2,X1)) )),
  inference(condensation,[],[f2140])).
fof(f2140,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,X84)) | sP12('T_0',X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f1842,f572])).
fof(f1842,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,X83)) | p(s(bool,X84)) | sP12('T_0',X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f378,f524])).
fof(f2066,plain,(
  ( ! [X2,X1] : (~sP11(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl36),
  inference(cnf_transformation,[],[f2066_D])).
fof(f2066_D,plain,(
  ( ! [X2,X1] : (~sP11(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2139,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP11(X2,X1,'T_0')) )),
  inference(condensation,[],[f2138])).
fof(f2138,plain,(
  ( ! [X80,X81,X79,X82] : (p(s(bool,X80)) | ~p(s(bool,X81)) | ~sP11(X81,X80,'T_0') | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f1841,f572])).
fof(f1841,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,X79)) | p(s(bool,X80)) | ~p(s(bool,X81)) | ~sP11(X81,X80,'T_0') | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f373,f524])).
fof(f2063,plain,(
  ( ! [X2,X1] : (~sP10('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f2063_D])).
fof(f2063_D,plain,(
  ( ! [X2,X1] : (~sP10('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2137,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP10('T_0',X2,X1)) )),
  inference(condensation,[],[f2136])).
fof(f2136,plain,(
  ( ! [X78,X76,X77,X75] : (p(s(bool,X76)) | p(s(bool,X77)) | ~sP10('T_0',X77,X76) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f1840,f572])).
fof(f1840,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,X75)) | p(s(bool,X76)) | p(s(bool,X77)) | ~sP10('T_0',X77,X76) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f363,f524])).
fof(f2060,plain,(
  ( ! [X2,X1] : (sP10('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f2060_D])).
fof(f2060_D,plain,(
  ( ! [X2,X1] : (sP10('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2135,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP10('T_0',X1,X2)) )),
  inference(condensation,[],[f2134])).
fof(f2134,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X72)) | sP10('T_0',X72,X73) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f1839,f572])).
fof(f1839,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X71)) | ~p(s(bool,X72)) | sP10('T_0',X72,X73) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f362,f524])).
fof(f2057,plain,(
  ( ! [X2,X1] : (sP10('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f2057_D])).
fof(f2057_D,plain,(
  ( ! [X2,X1] : (sP10('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2133,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP10('T_0',X2,X1)) )),
  inference(condensation,[],[f2132])).
fof(f2132,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X68)) | sP10('T_0',X69,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f1838,f572])).
fof(f1838,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X67)) | ~p(s(bool,X68)) | sP10('T_0',X69,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f361,f524])).
fof(f2054,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl28),
  inference(cnf_transformation,[],[f2054_D])).
fof(f2054_D,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2131,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2130])).
fof(f2130,plain,(
  ( ! [X66,X64,X65,X63] : (p(s(bool,X64)) | p(s(bool,X65)) | ~sP9('T_0',X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f1837,f572])).
fof(f1837,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,X63)) | p(s(bool,X64)) | p(s(bool,X65)) | ~sP9('T_0',X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f356,f524])).
fof(f2051,plain,(
  ( ! [X2,X1] : (~sP8(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl26),
  inference(cnf_transformation,[],[f2051_D])).
fof(f2051_D,plain,(
  ( ! [X2,X1] : (~sP8(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2129,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP8(X2,X1,'T_0')) )),
  inference(condensation,[],[f2128])).
fof(f2128,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X60)) | p(s(bool,X61)) | ~sP8(X61,X60,'T_0') | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f1836,f572])).
fof(f1836,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X59)) | ~p(s(bool,X60)) | p(s(bool,X61)) | ~sP8(X61,X60,'T_0') | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f348,f524])).
fof(f2048,plain,(
  ( ! [X2,X1] : (sP8('T_0',X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2))) ) | $spl24),
  inference(cnf_transformation,[],[f2048_D])).
fof(f2048_D,plain,(
  ( ! [X2,X1] : (sP8('T_0',X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2127,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2126])).
fof(f2126,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X56)) | ~p(s(bool,X57)) | sP8('T_0',X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f1835,f572])).
fof(f1835,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X55)) | ~p(s(bool,X56)) | ~p(s(bool,X57)) | sP8('T_0',X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f345,f524])).
fof(f2045,plain,(
  ( ! [X2,X1] : (~sP7(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl22),
  inference(cnf_transformation,[],[f2045_D])).
fof(f2045_D,plain,(
  ( ! [X2,X1] : (~sP7(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2125,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X1,'T_0',X2)) )),
  inference(condensation,[],[f2124])).
fof(f2124,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X52)) | p(s(bool,X53)) | ~sP7(X52,'T_0',X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f1834,f572])).
fof(f1834,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X51)) | ~p(s(bool,X52)) | p(s(bool,X53)) | ~sP7(X52,'T_0',X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f339,f524])).
fof(f2042,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl20),
  inference(cnf_transformation,[],[f2042_D])).
fof(f2042_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2123,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2122])).
fof(f2122,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | p(s(bool,X49)) | ~sP4(X48,'T_0',X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f1833,f572])).
fof(f1833,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X47)) | ~p(s(bool,X48)) | p(s(bool,X49)) | ~sP4(X48,'T_0',X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f320,f524])).
fof(f2039,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl18),
  inference(cnf_transformation,[],[f2039_D])).
fof(f2039_D,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2121,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP5(X1,'T_0',X2)) )),
  inference(condensation,[],[f2120])).
fof(f2120,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X44)) | p(s(bool,X45)) | ~sP5(X44,'T_0',X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f1832,f572])).
fof(f1832,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X43)) | ~p(s(bool,X44)) | p(s(bool,X45)) | ~sP5(X44,'T_0',X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f316,f524])).
fof(f2036,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1) | sP6(X1,X2,'T_0')) ) | $spl16),
  inference(cnf_transformation,[],[f2036_D])).
fof(f2036_D,plain,(
  ( ! [X2,X1] : (~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1) | sP6(X1,X2,'T_0')) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2119,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6(X1,X2,'T_0') | ~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2118,f416])).
fof(f2118,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6(X1,X2,'T_0') | ~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1) | ~sP3('T_0',X2,X1)) )),
  inference(condensation,[],[f2117])).
fof(f2117,plain,(
  ( ! [X39,X41,X42,X40] : (sP6(X40,X41,'T_0') | ~sP5(X40,'T_0',X41) | ~sP4(X41,'T_0',X40) | ~sP3('T_0',X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f1831,f572])).
fof(f1831,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X39)) | sP6(X40,X41,'T_0') | ~sP5(X40,'T_0',X41) | ~sP4(X41,'T_0',X40) | ~sP3('T_0',X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f313,f524])).
fof(f2032,plain,(
  ( ! [X2,X1] : (sP2(X2,X1,'T_0') | ~p(s(bool,X1))) ) | $spl14),
  inference(cnf_transformation,[],[f2032_D])).
fof(f2032_D,plain,(
  ( ! [X2,X1] : (sP2(X2,X1,'T_0') | ~p(s(bool,X1))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2116,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP2(X2,X1,'T_0')) )),
  inference(condensation,[],[f2115])).
fof(f2115,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | sP2(X37,X36,'T_0') | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1830,f572])).
fof(f1830,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X35)) | ~p(s(bool,X36)) | sP2(X37,X36,'T_0') | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f301,f524])).
fof(f2029,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl12),
  inference(cnf_transformation,[],[f2029_D])).
fof(f2029_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2114,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2113])).
fof(f2113,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,X33)) | sP1(X33,'T_0') | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1829,f572])).
fof(f1829,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | sP1(X33,'T_0') | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f293,f524])).
fof(f2025,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl8),
  inference(cnf_transformation,[],[f2025_D])).
fof(f2025_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2112,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2111])).
fof(f2111,plain,(
  ( ! [X30,X31,X29] : (p(s(bool,X30)) | sP1('T_0',X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f1828,f572])).
fof(f1828,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,X29)) | p(s(bool,X30)) | sP1('T_0',X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f290,f524])).
fof(f2080,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP9('T_0',X1,X2) | sP10('T_0',X1,X2)) )),
  inference(condensation,[],[f2079])).
fof(f2079,plain,(
  ( ! [X101,X99,X102,X100] : (~sP9('T_0',X100,X101) | sP10('T_0',X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f1776,f572])).
fof(f1776,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,X99)) | ~sP9('T_0',X100,X101) | sP10('T_0',X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f388,f524])).
fof(f2077,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP11('T_0',X1,X2) | sP12('T_0',X1,X2)) )),
  inference(condensation,[],[f2076])).
fof(f2076,plain,(
  ( ! [X97,X95,X98,X96] : (~sP11('T_0',X96,X97) | sP12('T_0',X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f1775,f572])).
fof(f1775,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,X95)) | ~sP11('T_0',X96,X97) | sP12('T_0',X96,X97) | s(bool,X95) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f387,f524])).
fof(f2074,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP12('T_0',X2,X1)) )),
  inference(condensation,[],[f2073])).
fof(f2073,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP12('T_0',X93,X92) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f1774,f572])).
fof(f1774,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X91)) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP12('T_0',X93,X92) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f380,f524])).
fof(f2071,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP12('T_0',X1,X2)) )),
  inference(condensation,[],[f2070])).
fof(f2070,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X88)) | sP12('T_0',X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f1773,f572])).
fof(f1773,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X87)) | ~p(s(bool,X88)) | sP12('T_0',X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f379,f524])).
fof(f2068,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP12('T_0',X2,X1)) )),
  inference(condensation,[],[f2067])).
fof(f2067,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,X84)) | sP12('T_0',X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f1772,f572])).
fof(f1772,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,X83)) | p(s(bool,X84)) | sP12('T_0',X85,X84) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f378,f524])).
fof(f2065,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP11(X2,X1,'T_0')) )),
  inference(condensation,[],[f2064])).
fof(f2064,plain,(
  ( ! [X80,X81,X79,X82] : (p(s(bool,X80)) | ~p(s(bool,X81)) | ~sP11(X81,X80,'T_0') | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f1771,f572])).
fof(f1771,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,X79)) | p(s(bool,X80)) | ~p(s(bool,X81)) | ~sP11(X81,X80,'T_0') | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f373,f524])).
fof(f2062,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP10('T_0',X2,X1)) )),
  inference(condensation,[],[f2061])).
fof(f2061,plain,(
  ( ! [X78,X76,X77,X75] : (p(s(bool,X76)) | p(s(bool,X77)) | ~sP10('T_0',X77,X76) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f1770,f572])).
fof(f1770,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,X75)) | p(s(bool,X76)) | p(s(bool,X77)) | ~sP10('T_0',X77,X76) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f363,f524])).
fof(f2059,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP10('T_0',X1,X2)) )),
  inference(condensation,[],[f2058])).
fof(f2058,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X72)) | sP10('T_0',X72,X73) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f1769,f572])).
fof(f1769,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X71)) | ~p(s(bool,X72)) | sP10('T_0',X72,X73) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f362,f524])).
fof(f2056,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP10('T_0',X2,X1)) )),
  inference(condensation,[],[f2055])).
fof(f2055,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X68)) | sP10('T_0',X69,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f1768,f572])).
fof(f1768,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X67)) | ~p(s(bool,X68)) | sP10('T_0',X69,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f361,f524])).
fof(f2053,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2052])).
fof(f2052,plain,(
  ( ! [X66,X64,X65,X63] : (p(s(bool,X64)) | p(s(bool,X65)) | ~sP9('T_0',X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f1767,f572])).
fof(f1767,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,X63)) | p(s(bool,X64)) | p(s(bool,X65)) | ~sP9('T_0',X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f356,f524])).
fof(f2050,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP8(X2,X1,'T_0')) )),
  inference(condensation,[],[f2049])).
fof(f2049,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X60)) | p(s(bool,X61)) | ~sP8(X61,X60,'T_0') | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f1766,f572])).
fof(f1766,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X59)) | ~p(s(bool,X60)) | p(s(bool,X61)) | ~sP8(X61,X60,'T_0') | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f348,f524])).
fof(f2047,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2046])).
fof(f2046,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X56)) | ~p(s(bool,X57)) | sP8('T_0',X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f1765,f572])).
fof(f1765,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X55)) | ~p(s(bool,X56)) | ~p(s(bool,X57)) | sP8('T_0',X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f345,f524])).
fof(f2044,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X1,'T_0',X2)) )),
  inference(condensation,[],[f2043])).
fof(f2043,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X52)) | p(s(bool,X53)) | ~sP7(X52,'T_0',X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f1764,f572])).
fof(f1764,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X51)) | ~p(s(bool,X52)) | p(s(bool,X53)) | ~sP7(X52,'T_0',X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f339,f524])).
fof(f2041,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2040])).
fof(f2040,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | p(s(bool,X49)) | ~sP4(X48,'T_0',X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f1763,f572])).
fof(f1763,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X47)) | ~p(s(bool,X48)) | p(s(bool,X49)) | ~sP4(X48,'T_0',X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f320,f524])).
fof(f2038,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP5(X1,'T_0',X2)) )),
  inference(condensation,[],[f2037])).
fof(f2037,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X44)) | p(s(bool,X45)) | ~sP5(X44,'T_0',X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f1762,f572])).
fof(f1762,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X43)) | ~p(s(bool,X44)) | p(s(bool,X45)) | ~sP5(X44,'T_0',X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f316,f524])).
fof(f2035,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6(X1,X2,'T_0') | ~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2034,f416])).
fof(f2034,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP6(X1,X2,'T_0') | ~sP5(X1,'T_0',X2) | ~sP4(X2,'T_0',X1) | ~sP3('T_0',X2,X1)) )),
  inference(condensation,[],[f2033])).
fof(f2033,plain,(
  ( ! [X39,X41,X42,X40] : (sP6(X40,X41,'T_0') | ~sP5(X40,'T_0',X41) | ~sP4(X41,'T_0',X40) | ~sP3('T_0',X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f1761,f572])).
fof(f1761,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X39)) | sP6(X40,X41,'T_0') | ~sP5(X40,'T_0',X41) | ~sP4(X41,'T_0',X40) | ~sP3('T_0',X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f313,f524])).
fof(f2031,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP2(X2,X1,'T_0')) )),
  inference(condensation,[],[f2030])).
fof(f2030,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | sP2(X37,X36,'T_0') | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1760,f572])).
fof(f1760,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X35)) | ~p(s(bool,X36)) | sP2(X37,X36,'T_0') | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f301,f524])).
fof(f2028,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2027])).
fof(f2027,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,X33)) | sP1(X33,'T_0') | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1759,f572])).
fof(f1759,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | sP1(X33,'T_0') | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f293,f524])).
fof(f2024,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2023])).
fof(f2023,plain,(
  ( ! [X30,X31,X29] : (p(s(bool,X30)) | sP1('T_0',X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f1758,f572])).
fof(f1758,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,X29)) | p(s(bool,X30)) | sP1('T_0',X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f290,f524])).
fof(f396,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) | $spl0),
  inference(cnf_transformation,[],[f396_D])).
fof(f396_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f400,plain,(
  p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | $spl4),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f218,plain,(
  p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15)))) | (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))))) & (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f147])).
fof(f147,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) | (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))))) & (~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) | (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))))) & ((~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) | (~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3)))))))),
  inference(nnf_transformation,[],[f95])).
fof(f95,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) <~> (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4),s('type.typeSystem.tenv_val',X3)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2)))) <=> (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.num.num',X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.typeSystem.tenv_val',X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10),s('type.typeSystem.tenv_val',X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8)))) <=> (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7),s('type.typeSystem.tenv_val',X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10),s('type.typeSystem.tenv_val',X9)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8)))) <=> (p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.num.num',X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) & p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7),s('type.typeSystem.tenv_val',X9))))))),
  file('thm.typeSound.typeSound_25_prove_ltb','thm.typeSound.typeSound_25_prove_ltb')).
fof(f398,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | $spl2),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f219,plain,(
  p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15)))),
  inference(cnf_transformation,[],[f148])).
fof(f402,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | $spl6),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f220,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))),
  inference(cnf_transformation,[],[f148])).
fof(f221,plain,(
  p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15)))),
  inference(cnf_transformation,[],[f148])).
fof(f397,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) | $spl1),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f399,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | $spl3),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f401,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | $spl5),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f403,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | $spl7),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f222,plain,(
  ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14),s('type.typeSystem.tenv_val',sK16)))) | ~p(s(bool,'const.typeSound.type_env2_5'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15))) | ~p(s(bool,'const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK13),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK14))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num',sK18),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK17),s('type.typeSystem.tenv_val',sK16))))))),
  inference(cnf_transformation,[],[f148])).
% SZS output end Proof for thm.typeSound
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 857
% Passive clauses: 2113
% Generated clauses: 25013
% Final active clauses: 389
% Final passive clauses: 477
% Input formulas: 38
% Initial clauses: 169
% 
% Duplicate literals: 1804
% Trivial inequalities: 75
% Fw subsumption resolutions: 1101
% Fw demodulations: 2032
% Bw demodulations: 143
% Condensations: 2378
% Global subsumptions: 337
% 
% Simple tautologies: 113
% Equational tautologies: 446
% Forward subsumptions: 13716
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 8292
% Factoring: 1
% Forward superposition: 3812
% Backward superposition: 3686
% Self superposition: 137
% Equality factoring: 122
% Equality resolution: 4
% 
% Split clauses: 142
% Split components: 297
% SAT solver clauses: 3534
% SAT solver unit clauses: 287
% SAT solver binary clauses: 1122
% 
% Sat splits: 142
% Sat splitting refutations: 798
% 
% Memory used [KB]: 13432
% Time elapsed: 1.334 s
% ------------------------------
% ------------------------------
% Success in time 2.632 s
