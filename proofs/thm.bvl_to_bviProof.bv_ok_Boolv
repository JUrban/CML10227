Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f1489,plain,(
  $false),
  inference(subsumption_resolution,[],[f1488,f50])).
fof(f50,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv',aHL_TRUTH)).
fof(f1488,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f49,f1381])).
fof(f1381,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X3),X4),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X5)))))) )),
  inference(superposition,[],[f1343,f62])).
fof(f62,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X18,X19] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X6),X18),s('type.bvlSem.v',X19))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X6),X18))),s('type.bvlSem.v',X19)))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv','ARITY_1_2_const.bvl_to_bviProof.bv_ok')).
fof(f1343,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X1),X2))),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0)))))) )),
  inference(forward_demodulation,[],[f1309,f58])).
fof(f58,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X15] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X6,bool),X15),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv','thm.list.EVERY_DEF|split|0')).
fof(f1309,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X1),X2))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X1),X2))),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0)))))) )),
  inference(superposition,[],[f64,f56])).
fof(f56,plain,(
  ( ! [X0] : (s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X0))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X0))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X8))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X8))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv','thm.bvlSem.Boolv_def')).
fof(f64,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.list.list'('type.bvlSem.v'),X1))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X1)))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.list.list'('type.bvlSem.v'),X1))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X1)))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2,X3] : s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.list.list'('type.bvlSem.v'),X1))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X10,X11,X7] : s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X6),X7))),s('type.list.list'('type.bvlSem.v'),X10))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X6),X7))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X11),s('type.list.list'('type.bvlSem.v'),X10)))))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv','thm.bvl_to_bviProof.bv_ok_def|split|1')).
fof(f49,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',sK0),sK1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK2))))))),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',sK0),sK1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2] : ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X2))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X2))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ! [X1,X2] : p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X6),X7),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X6),X7),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X8))))))),
  file('thm.bvl_to_bviProof.bv_ok_Boolv','thm.bvl_to_bviProof.bv_ok_Boolv')).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 226
% Generated clauses: 1412
% Final active clauses: 23
% Final passive clauses: 87
% Input formulas: 18
% Initial clauses: 20
% 
% Duplicate literals: 161
% Trivial inequalities: 22
% Fw subsumption resolutions: 64
% Fw demodulations: 94
% Bw demodulations: 11
% 
% Simple tautologies: 32
% Equational tautologies: 17
% Forward subsumptions: 705
% 
% Binary resolution: 18
% Forward superposition: 535
% Backward superposition: 343
% Self superposition: 54
% Equality factoring: 40
% Equality resolution: 1
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 72
% SAT solver unit clauses: 3
% SAT solver binary clauses: 16
% 
% Sat splits: 36
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 72
% TWLsolver calls for satisfiability: 16
% 
% Memory used [KB]: 1535
% Time elapsed: 0.027 s
% ------------------------------
% ------------------------------
% Success in time 0.029 s
