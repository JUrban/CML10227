Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labProps
% (93585)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 228
% Passive clauses: 3623
% Generated clauses: 24894
% Final active clauses: 198
% Final passive clauses: 3180
% Input formulas: 517
% Initial clauses: 616
% 
% Duplicate literals: 660
% Trivial inequalities: 590
% Fw subsumption resolutions: 2076
% Fw demodulations: 3726
% Bw demodulations: 30
% 
% Simple tautologies: 487
% Equational tautologies: 44
% Forward subsumptions: 13481
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 218
% Factoring: 1
% Forward superposition: 8250
% Backward superposition: 8407
% Self superposition: 161
% Equality factoring: 75
% Equality resolution: 37
% 
% Split clauses: 103
% Split components: 206
% SAT solver clauses: 301
% SAT solver unit clauses: 15
% SAT solver binary clauses: 85
% 
% Sat splits: 103
% 
% TWLsolver clauses: 301
% TWLsolver calls for satisfiability: 64
% 
% Memory used [KB]: 14967
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labProps
% (93608)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 201
% Passive clauses: 1794
% Generated clauses: 21614
% Final active clauses: 151
% Final passive clauses: 1173
% Input formulas: 517
% Initial clauses: 616
% 
% Duplicate literals: 647
% Trivial inequalities: 474
% Fw subsumption resolutions: 1106
% Fw demodulations: 2528
% Bw demodulations: 439
% Condensations: 857
% Global subsumptions: 13
% 
% Simple tautologies: 346
% Equational tautologies: 42
% Forward subsumptions: 11331
% Bw demodulations to eq. taut.: 30
% 
% Binary resolution: 172
% Factoring: 1
% Forward superposition: 6083
% Backward superposition: 6492
% Self superposition: 143
% Equality factoring: 71
% Equality resolution: 26
% 
% Split clauses: 34
% Split components: 68
% SAT solver clauses: 3028
% SAT solver unit clauses: 1086
% SAT solver binary clauses: 88
% SAT solver learnt clauses: 26
% 
% Sat splits: 34
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2976
% TWLsolver calls for satisfiability: 2029
% 
% Memory used [KB]: 20468
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.labProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labProps
% SZS output start Proof for thm.labProps
fof(f265822,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f265785])).
fof(f265785,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2)))))))))))),
  inference(backward_demodulation,[],[f265781,f78491])).
fof(f78491,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))))))),
  inference(unit_resulting_resolution,[],[f19880,f1719])).
fof(f1719,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f1527])).
fof(f1527,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f690])).
fof(f690,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f350])).
fof(f350,axiom,(
  ! [X31,X83] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83))) <=> s('type.num.num',X31) = s('type.num.num',X83))),
  file('thm.labProps.arith_upd_consts|split|1','thm.numeral.numeral_distrib|split|19')).
fof(f19880,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))))),
  inference(unit_resulting_resolution,[],[f5487,f1719])).
fof(f5487,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))),
  inference(unit_resulting_resolution,[],[f5038,f1719])).
fof(f5038,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))),
  inference(unit_resulting_resolution,[],[f1551,f1719])).
fof(f1551,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))),
  inference(cnf_transformation,[],[f1484])).
fof(f1484,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f1472])).
fof(f1472,plain,(
  ? [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ~! [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X9),s('type.labSem.state'(X6,X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X9),s('type.labSem.state'(X6,X7),X8)))))),
  file('thm.labProps.arith_upd_consts|split|1','thm.labProps.arith_upd_consts|split|1')).
fof(f265781,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3)))))) )),
  inference(forward_demodulation,[],[f265588,f1753])).
fof(f1753,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f739])).
fof(f739,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f738])).
fof(f738,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6,X7] : ! [X25,X45] : s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X25))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.asm_inst_2'(s('type.asm.inst'(X6),X45),s('type.labSem.state'(X6,X7),X25)))))),
  file('thm.labProps.arith_upd_consts|split|1','thm.labSem.asm_inst_consts|split|4')).
fof(f265588,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))))) )),
  inference(unit_resulting_resolution,[],[f1827,f1938])).
fof(f1938,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f1537])).
fof(f1537,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f1536])).
fof(f1536,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & ((s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f1089])).
fof(f1089,plain,(
  ! [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f1088])).
fof(f1088,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6,X18] : ! [X20,X19] : (s('type.labSem.state'(X6,X18),X19) = s('type.labSem.state'(X6,X18),X20) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X18),X20))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X18),X19))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.ffi.ffi_state'(X18),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.ffi.ffi_state'(X18),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X18),X20))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X18),X19))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X18),X20)))))),
  file('thm.labProps.arith_upd_consts|split|1','thm.labSem.state_component_equality')).
fof(f1827,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f887])).
fof(f887,plain,(
  ! [X0,X1,X2,X3] : s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f886])).
fof(f886,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X18] : ! [X8,X25] : s('type.labSem.state'(X6,X18),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X8),s('type.labSem.state'(X6,X18),X25))) = s('type.labSem.state'(X6,X18),'const.labSem.asm_inst_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),X8))),s('type.labSem.state'(X6,X18),X25)))),
  file('thm.labProps.arith_upd_consts|split|1','thm.labSem.asm_inst_def|split|2')).
% SZS output end Proof for thm.labProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1061
% Passive clauses: 9902
% Generated clauses: 269307
% Final active clauses: 452
% Final passive clauses: 3383
% Input formulas: 517
% Initial clauses: 616
% 
% Duplicate literals: 4331
% Trivial inequalities: 1793
% Fw subsumption resolutions: 10496
% Fw demodulations: 61617
% Bw demodulations: 5669
% Condensations: 3901
% Global subsumptions: 375
% 
% Simple tautologies: 892
% Equational tautologies: 792
% Forward subsumptions: 173049
% Fw demodulations to eq. taut.: 914
% Bw demodulations to eq. taut.: 273
% 
% Unit resulting resolution: 22761
% Factoring: 1
% Forward superposition: 82380
% Backward superposition: 69089
% Self superposition: 470
% Equality factoring: 191
% Equality resolution: 48
% 
% Split clauses: 60
% Split components: 120
% SAT solver clauses: 11346
% SAT solver unit clauses: 3285
% SAT solver binary clauses: 4445
% 
% Sat splits: 60
% Sat splitting refutations: 947
% 
% Memory used [KB]: 120253
% Time elapsed: 7.477 s
% ------------------------------
% ------------------------------
% Success in time 8.84 s
