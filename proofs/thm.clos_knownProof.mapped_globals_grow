Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (78419)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 79
% Passive clauses: 2776
% Generated clauses: 8956
% Final active clauses: 77
% Final passive clauses: 2562
% Input formulas: 17
% Initial clauses: 36
% 
% Duplicate literals: 487
% Trivial inequalities: 148
% Fw subsumption resolutions: 1419
% Fw demodulations: 192
% Bw demodulations: 2
% 
% Simple tautologies: 249
% Equational tautologies: 72
% Forward subsumptions: 2852
% 
% Binary resolution: 360
% Factoring: 3
% Forward superposition: 2815
% Backward superposition: 3017
% Self superposition: 198
% Equality factoring: 170
% Equality resolution: 18
% 
% Split clauses: 285
% Split components: 592
% SAT solver clauses: 850
% SAT solver unit clauses: 92
% SAT solver binary clauses: 387
% 
% Sat splits: 285
% 
% TWLsolver clauses: 850
% TWLsolver calls for satisfiability: 139
% 
% Memory used [KB]: 4477
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f5800,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5799,f71,f110,f127,f130,f68,f104,f78,f114,f5573,f5576,f67,f106,f5293,f5298,f87,f120])).
fof(f120,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6))))))) ) | $spl26),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f87,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6)))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4)))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6)))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4)))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6)))))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4)))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6)))))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4)))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X6)))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X21,X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),X21) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9)))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X9))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X11)))))))),
  file('thm.clos_knownProof.mapped_globals_grow','thm.clos_knownProof.clos_knownProof_|49|99_prove_ltb|split|0')).
fof(f5298,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X2))))))) ) | $spl472),
  inference(cnf_transformation,[],[f5298_D])).
fof(f5298_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X2))))))) ) <=> ~$spl472),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl472])])).
fof(f5293,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X2))))))) ) | $spl26),
  inference(equality_resolution,[],[f120])).
fof(f106,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | $spl2),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f67,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) & ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5)))))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5)))))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X5)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X9))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X9))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X11)))))))),
  file('thm.clos_knownProof.mapped_globals_grow','thm.clos_knownProof.mapped_globals_grow')).
fof(f5576,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),X1))))))) ) | $spl484),
  inference(cnf_transformation,[],[f5576_D])).
fof(f5576_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),X1))))))) ) <=> ~$spl484),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl484])])).
fof(f5573,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),X1))))))) ) | ($spl2 | $spl472)),
  inference(superposition,[],[f5298,f106])).
fof(f114,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f78,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.clos_knownProof.mapped_globals_grow','thm.bool.EQ_CLAUSES|split|2')).
fof(f104,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5)))))) | $spl1),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f68,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5))))))),
  inference(cnf_transformation,[],[f53])).
fof(f130,plain,(
  s(bool,'F_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5))))) | $spl34),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  s(bool,'F_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f127,plain,(
  s(bool,'F_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5))))) | ($spl1 | $spl14)),
  inference(resolution,[],[f114,f104])).
fof(f110,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f110_D])).
fof(f110_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f71,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.mapped_globals_grow',aHL_FALSITY)).
fof(f5799,plain,(
  $false | ($spl7 | $spl34 | $spl484)),
  inference(subsumption_resolution,[],[f5798,f110])).
fof(f5798,plain,(
  p(s(bool,'F_0')) | ($spl34 | $spl484)),
  inference(forward_demodulation,[],[f5796,f130])).
fof(f5796,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK3))),s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK5)))))) | $spl484),
  inference(equality_resolution,[],[f5576])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 260
% Generated clauses: 5719
% Final active clauses: 69
% Final passive clauses: 157
% Input formulas: 17
% Initial clauses: 36
% 
% Duplicate literals: 182
% Trivial inequalities: 184
% Fw subsumption resolutions: 502
% Fw demodulations: 1104
% Bw demodulations: 16
% Condensations: 221
% 
% Simple tautologies: 99
% Equational tautologies: 24
% Forward subsumptions: 2652
% Bw demodulations to eq. taut.: 7
% 
% Binary resolution: 84
% Factoring: 1
% Forward superposition: 1320
% Backward superposition: 1630
% Self superposition: 74
% Equality factoring: 45
% Equality resolution: 16
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 509
% SAT solver unit clauses: 29
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 5
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 507
% TWLsolver calls for satisfiability: 191
% 
% Memory used [KB]: 4349
% Time elapsed: 0.160 s
% ------------------------------
% ------------------------------
% Success in time 0.791 s
