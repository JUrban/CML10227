Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f2083,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2069,f92,f143])).
fof(f143,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f92,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ',aHL_TRUTH)).
fof(f2069,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f2068,f91])).
fof(f91,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) & s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) & s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num',X8)))) => s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num',X8)))) => s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.misc.LASTN_LENGTH_LESS_EQ')).
fof(f2068,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) | $spl0),
  inference(forward_demodulation,[],[f2055,f119])).
fof(f119,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X17] : s('type.list.list'(X6),X17) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X17)))))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.list.REVERSE_REVERSE')).
fof(f2055,plain,(
  s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))) | $spl0),
  inference(superposition,[],[f119,f1739])).
fof(f1739,plain,(
  s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl0),
  inference(subsumption_resolution,[],[f1712,f143])).
fof(f1712,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f1535,f162])).
fof(f162,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))),
  inference(resolution,[],[f90,f97])).
fof(f97,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.bool.EQ_CLAUSES|split|1')).
fof(f90,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f67])).
fof(f1535,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X2),s('type.list.list'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f243,f504])).
fof(f504,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(X3),'const.list.REVERSE_1'(s('type.list.list'(X3),'const.rich_list.LASTN_2'(s('type.num.num',X4),s('type.list.list'(X3),X5))))) = s('type.list.list'(X3),'const.list.TAKE_2'(s('type.num.num',X4),s('type.list.list'(X3),'const.list.REVERSE_1'(s('type.list.list'(X3),X5)))))) )),
  inference(superposition,[],[f119,f123])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X8,X7] : s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7)))))))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.rich_list.LASTN_def')).
fof(f243,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(superposition,[],[f124,f120])).
fof(f120,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X17] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X17)))))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.list.LENGTH_REVERSE')).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X17,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X17))),s('type.num.num',X8)))) => s('type.list.list'(X6),X17) = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X17))))),
  file('thm.misc.LASTN_LENGTH_LESS_EQ','thm.list.TAKE_LENGTH_TOO_LONG')).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 71
% Passive clauses: 331
% Generated clauses: 1937
% Final active clauses: 63
% Final passive clauses: 192
% Input formulas: 23
% Initial clauses: 52
% 
% Duplicate literals: 122
% Trivial inequalities: 72
% Fw subsumption resolutions: 270
% Fw demodulations: 121
% Bw demodulations: 4
% 
% Simple tautologies: 112
% Equational tautologies: 16
% Forward subsumptions: 762
% 
% Binary resolution: 109
% Forward superposition: 654
% Backward superposition: 407
% Self superposition: 33
% Equality factoring: 28
% Equality resolution: 20
% 
% Split clauses: 102
% Split components: 212
% SAT solver clauses: 200
% SAT solver unit clauses: 9
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 1
% 
% Sat splits: 102
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 198
% TWLsolver calls for satisfiability: 66
% 
% Memory used [KB]: 1663
% Time elapsed: 0.059 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
