Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_numberProof
% (33894)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 89
% Passive clauses: 1762
% Generated clauses: 11678
% Final active clauses: 78
% Final passive clauses: 1503
% Input formulas: 20
% Initial clauses: 84
% 
% Duplicate literals: 773
% Trivial inequalities: 155
% Fw subsumption resolutions: 2062
% Fw demodulations: 210
% Bw demodulations: 5
% 
% Simple tautologies: 274
% Equational tautologies: 119
% Forward subsumptions: 4714
% 
% Binary resolution: 142
% Factoring: 2
% Forward superposition: 3447
% Backward superposition: 3940
% Self superposition: 401
% Equality factoring: 356
% Equality resolution: 15
% 
% Split clauses: 557
% Split components: 1120
% SAT solver clauses: 1664
% SAT solver unit clauses: 7
% SAT solver binary clauses: 173
% 
% Sat splits: 557
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1659
% TWLsolver calls for satisfiability: 153
% 
% Memory used [KB]: 5500
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_numberProof
% (33914)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 61
% Passive clauses: 238
% Generated clauses: 6081
% Final active clauses: 55
% Final passive clauses: 155
% Input formulas: 20
% Initial clauses: 84
% 
% Duplicate literals: 919
% Trivial inequalities: 79
% Fw subsumption resolutions: 345
% Fw demodulations: 157
% Bw demodulations: 24
% Condensations: 1555
% Global subsumptions: 4
% 
% Simple tautologies: 141
% Equational tautologies: 54
% Forward subsumptions: 2166
% 
% Binary resolution: 62
% Factoring: 1
% Forward superposition: 1070
% Backward superposition: 1213
% Self superposition: 187
% Equality factoring: 172
% Equality resolution: 13
% 
% Split clauses: 45
% Split components: 90
% SAT solver clauses: 573
% SAT solver unit clauses: 80
% SAT solver binary clauses: 58
% SAT solver learnt clauses: 8
% 
% Sat splits: 45
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 557
% TWLsolver calls for satisfiability: 1214
% 
% Memory used [KB]: 4861
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_numberProof
% (33946)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 159
% Passive clauses: 615
% Generated clauses: 45002
% Final active clauses: 116
% Final passive clauses: 297
% Input formulas: 20
% Initial clauses: 84
% 
% Duplicate literals: 4471
% Trivial inequalities: 349
% Fw subsumption resolutions: 4270
% Fw demodulations: 2040
% Bw demodulations: 120
% Condensations: 10485
% Global subsumptions: 60
% 
% Simple tautologies: 547
% Equational tautologies: 537
% Forward subsumptions: 19822
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 1877
% Factoring: 2
% Forward superposition: 9614
% Backward superposition: 11504
% Self superposition: 735
% Equality factoring: 600
% Equality resolution: 44
% 
% Split clauses: 112
% Split components: 228
% SAT solver clauses: 959
% SAT solver unit clauses: 17
% SAT solver binary clauses: 132
% 
% Sat splits: 112
% Sat splitting refutations: 58
% 
% Memory used [KB]: 24434
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 30 next slice time: 30
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_numberProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_numberProof
% SZS output start Proof for thm.clos_numberProof
fof(f11330,plain,(
  $false),
  inference(subsumption_resolution,[],[f11305,f127])).
fof(f127,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_numberProof.v_rel_rules|split|0',aHL_FALSITY)).
fof(f11305,plain,(
  p(s(bool,'F_0'))),
  inference(superposition,[],[f11276,f185])).
fof(f185,plain,(
  s(bool,'F_0') = s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4)))))),
  inference(subsumption_resolution,[],[f177,f128])).
fof(f128,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_numberProof.v_rel_rules|split|0','thm.bool.TRUTH')).
fof(f177,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4)))))),
  inference(superposition,[],[f89,f168])).
fof(f168,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_numberProof.v_rel_rules|split|0',aHL_BOOL_CASES)).
fof(f89,plain,(
  ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))))))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f40])).
fof(f40,plain,(
  ? [X0] : ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))))))),
  file('thm.clos_numberProof.v_rel_rules|split|0','thm.clos_numberProof.v_rel_rules|split|0')).
fof(f11276,plain,(
  ( ! [X0] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))))))) )),
  inference(equality_resolution,[],[f11237])).
fof(f11237,plain,(
  ( ! [X0,X1] : (s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s('type.closSem.v',X0))))) )),
  inference(equality_resolution,[],[f3307])).
fof(f3307,plain,(
  ( ! [X2,X0,X1] : (s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X2))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X2))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))) )),
  inference(resolution,[],[f3293,f138])).
fof(f138,plain,(
  ( ! [X2,X0,X5,X1] : (sP3(X0,X1,X2) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK7(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK7(X2,X1,X0))))) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK8(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK8(X2,X1,X0))))) | sP2(X0,X1,X2) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK9(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK9(X2,X1,X0))))) | sP0(X0,X1,X2) | sP1(X0,X1,X2)) & ((! [X5] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5)))) & ! [X4] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))) & ~sP2(X0,X1,X2) & ! [X3] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3)))) & ~sP0(X0,X1,X2) & ~sP1(X0,X1,X2)) | sP3(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9])],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | ? [X8] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8)))) | ? [X7] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7)))) | sP2(X0,X1,X2) | ? [X6] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X6))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X6)))) | sP0(X0,X1,X2) | sP1(X0,X1,X2)) & ((! [X5] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5)))) & ! [X4] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))) & ~sP2(X0,X1,X2) & ! [X3] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3)))) & ~sP0(X0,X1,X2) & ~sP1(X0,X1,X2)) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f74])).
fof(f74,plain,(
  ! [X2,X4,X3] : ((~sP3(X2,X4,X3) | ? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3)) & ((! [X30] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) & ! [X29] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) & ~sP2(X2,X4,X3) & ! [X25] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) & ~sP0(X2,X4,X3) & ~sP1(X2,X4,X3)) | sP3(X2,X4,X3)))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X2,X4,X3] : ((~sP3(X2,X4,X3) | (? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3))) & ((! [X30] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) & ! [X29] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) & ~sP2(X2,X4,X3) & ! [X25] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) & ~sP0(X2,X4,X3) & ~sP1(X2,X4,X3)) | sP3(X2,X4,X3)))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X2,X4,X3] : (sP3(X2,X4,X3) <=> (? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f3293,plain,(
  ( ! [X0,X1] : (~sP3(sK35(X1,X0),X1,X0) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))) )),
  inference(duplicate_literal_removal,[],[f3126])).
fof(f3126,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ~sP3(sK35(X1,X0),X1,X0) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))) )),
  inference(resolution,[],[f164,f165])).
fof(f165,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK35(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X5] : ((sP3(X5,sK34(X5,X1,X0),sK33(X5,X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',sK33(X5,X1,X0)))),s('type.closSem.v',sK34(X5,X1,X0)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & ((! [X3,X4] : (~sP3(sK35(X1,X0),X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK35(X1,X0)),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK35(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK33,sK34,sK35])],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X5] : (? [X6,X7] : (sP3(X5,X7,X6) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X6))),s('type.closSem.v',X7))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2] : (! [X3,X4] : (~sP3(X2,X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X2] : (? [X3,X4] : (sP3(X2,X4,X3) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2] : (! [X3,X4] : (~sP3(X2,X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (? [X3,X4] : (sP3(X2,X4,X3) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(definition_folding,[],[f54,f58,f57,f56,f55])).
fof(f55,plain,(
  ! [X2,X4,X3] : (sP0(X2,X4,X3) <=> ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f56,plain,(
  ! [X2,X4,X3] : (sP1(X2,X4,X3) <=> ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f57,plain,(
  ! [X2,X4,X3] : (sP2(X2,X4,X3) <=> ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f54,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (? [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(ennf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (! [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (! [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X5,X18] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X5),s('type.closSem.v',X18)))) <=> ! [X19] : (! [X20,X21] : ((? [X6] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) | ? [X15] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15)))) | ? [X9,X22,X23] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X22))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.list.list'('type.closSem.v'),X22),s('type.list.list'('type.closSem.v'),X23))))) | ? [X24] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X24))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X24)))) | ? [X25,X26,X27,X28,X29,X30,X31,X32,X33,X34] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X33),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X29),s('type.num.num',X32),s('type.closLang.exp',X27))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X34),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X30),s('type.num.num',X32),s('type.closLang.exp',X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X26)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X27),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X28) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X31),s('type.closLang.exp',X27)))))) | ? [X25,X26,X29,X30,X35,X36,X37,X31,X33,X34] : (s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X33),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35),s('type.num.num',X37))) & s('type.closSem.v',X21) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X34),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36),s('type.num.num',X37))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X26)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X31),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.closSem.v',X20))),s('type.closSem.v',X21))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X19),s('type.closSem.v',X5))),s('type.closSem.v',X18))))))),
  file('thm.clos_numberProof.v_rel_rules|split|0','thm.clos_numberProof.v_rel_def')).
fof(f164,plain,(
  ( ! [X4,X0,X3,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK35(X1,X0)),s('type.closSem.v',X3))),s('type.closSem.v',X4)))) | ~sP3(sK35(X1,X0),X4,X3)) )),
  inference(cnf_transformation,[],[f88])).
% SZS output end Proof for thm.clos_numberProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 185
% Passive clauses: 3327
% Generated clauses: 10960
% Final active clauses: 144
% Final passive clauses: 2885
% Input formulas: 20
% Initial clauses: 80
% 
% Selected by SInE selection: 17
% SInE iterations: 1
% 
% Duplicate literals: 553
% Trivial inequalities: 218
% Fw subsumption resolutions: 1699
% Fw demodulations: 308
% Bw demodulations: 30
% 
% Simple tautologies: 435
% Equational tautologies: 49
% Forward subsumptions: 4167
% 
% Binary resolution: 1637
% Factoring: 3
% Forward superposition: 4489
% Backward superposition: 1637
% Self superposition: 98
% Equality factoring: 94
% Equality resolution: 37
% 
% Split clauses: 375
% Split components: 750
% SAT solver clauses: 394
% SAT solver unit clauses: 16
% SAT solver binary clauses: 123
% 
% Sat splits: 375
% Sat splitting refutations: 17
% 
% Memory used [KB]: 7164
% Time elapsed: 0.472 s
% ------------------------------
% ------------------------------
% Success in time 12.403 s
