Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.conProps
% (82979)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 151
% Passive clauses: 2758
% Generated clauses: 20958
% Final active clauses: 144
% Final passive clauses: 2429
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 962
% Trivial inequalities: 211
% Fw subsumption resolutions: 2282
% Fw demodulations: 3293
% Bw demodulations: 6
% 
% Simple tautologies: 367
% Equational tautologies: 26
% Forward subsumptions: 10142
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 151
% Forward superposition: 8479
% Backward superposition: 5144
% Self superposition: 180
% Equality factoring: 49
% Equality resolution: 37
% 
% Split clauses: 477
% Split components: 966
% SAT solver clauses: 1089
% SAT solver unit clauses: 16
% SAT solver binary clauses: 215
% 
% Sat splits: 477
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1087
% TWLsolver calls for satisfiability: 172
% 
% Memory used [KB]: 17654
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.conProps
% (83087)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 112
% Passive clauses: 1281
% Generated clauses: 14874
% Final active clauses: 105
% Final passive clauses: 1136
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 681
% Trivial inequalities: 118
% Fw subsumption resolutions: 804
% Fw demodulations: 1799
% Bw demodulations: 30
% Condensations: 1116
% 
% Simple tautologies: 198
% Equational tautologies: 26
% Forward subsumptions: 6982
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 44
% Forward superposition: 5540
% Backward superposition: 3256
% Self superposition: 164
% Equality factoring: 49
% Equality resolution: 28
% 
% Split clauses: 67
% Split components: 142
% SAT solver clauses: 1891
% SAT solver unit clauses: 48
% SAT solver binary clauses: 46
% 
% Sat splits: 67
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1891
% TWLsolver calls for satisfiability: 189
% 
% Memory used [KB]: 20980
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 137 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.conProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conProps
% SZS output start Proof for thm.conProps
fof(f5894,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5891])).
fof(f5891,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0)))) )),
  inference(backward_demodulation,[],[f5855,f5279])).
fof(f5279,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0)))) )),
  inference(unit_resulting_resolution,[],[f76,f91])).
fof(f91,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) & (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X15,X16,X17] : (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X16),s('type.list.list'(X6),X15))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X17),s('type.list.list'(X6),X15))) <=> s('type.list.list'(X6),X16) = s('type.list.list'(X6),X17))),
  file('thm.conProps.build_rec_env_merge','thm.list.APPEND_|49||49||split|1')).
fof(f76,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2)))),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f67])).
fof(f67,plain,(
  ? [X0,X1,X2] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X1,X3,X4] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X1,X3,X4] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))),
  file('thm.conProps.build_rec_env_merge','thm.conProps.build_rec_env_merge')).
fof(f5855,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) )),
  inference(superposition,[],[f96,f98])).
fof(f98,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7,X13,X14] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.conLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7)))),
  file('thm.conProps.build_rec_env_merge','thm.conSem.build_rec_env_def')).
fof(f96,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X12] : ! [X10,X7,X9,X8] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X12),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12)),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X12),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'_dst_x0x1_2'(s(fun(fun(X6,fun(X12,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.pair.prod'(X6,X12),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X6,fun(X12,'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X8))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X12),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X12),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X6,fun(X12,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),fun('type.pair.prod'(X6,X12),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X6,fun(X12,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.conSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.conSem.v'),'const.conSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X8))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X12))),X7)))),
  file('thm.conProps.build_rec_env_merge','thm.conProps.conProps_4_prove_ltb')).
% SZS output end Proof for thm.conProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 545
% Generated clauses: 5814
% Final active clauses: 55
% Final passive clauses: 402
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 293
% Trivial inequalities: 77
% Fw subsumption resolutions: 233
% Fw demodulations: 471
% Bw demodulations: 82
% Condensations: 599
% Global subsumptions: 3
% 
% Simple tautologies: 126
% Equational tautologies: 114
% Forward subsumptions: 3284
% Fw demodulations to eq. taut.: 20
% Bw demodulations to eq. taut.: 5
% 
% Unit resulting resolution: 490
% Forward superposition: 2026
% Backward superposition: 1241
% Self superposition: 120
% Equality factoring: 46
% Equality resolution: 20
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 570
% SAT solver unit clauses: 132
% SAT solver binary clauses: 174
% 
% Sat splits: 6
% Sat splitting refutations: 8
% 
% Memory used [KB]: 9083
% Time elapsed: 0.451 s
% ------------------------------
% ------------------------------
% Success in time 1.76 s
