Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f12189,plain,(
  $false),
  inference(equality_resolution,[],[f1797])).
fof(f1797,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X0),s('type.wordSem.state'(sK2,sK3),X1))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),sK67(sK8,sK6,'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.wordSem.state'(sK2,sK3),sK5)),sK4,sK3,sK2)),s('type.wordSem.state'(sK2,sK3),sK68(sK8,sK6,'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.wordSem.state'(sK2,sK3),sK5)),sK4,sK3,sK2))))) )),
  inference(superposition,[],[f85,f123])).
fof(f123,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK67(X5,X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK68(X5,X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X5),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),X3)))))))))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK67(X5,X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK68(X5,X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X5),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),X3)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK67,sK68])],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ? [X6,X7] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X6),s('type.wordSem.state'(X0,X1),X7))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X5),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),X3)))))))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : ? [X6,X7] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X6),s('type.wordSem.state'(X0,X1),X7))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X5),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),X3)))))))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7] : ! [X8,X9,X10,X12] : ? [X13,X14] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X13),s('type.wordSem.state'(X6,X7),X14))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X10),s('type.wordSem.state'(X6,X7),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X6)),X12),s('type.wordSem.state'(X6,X7),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X6,X7),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X6,X7),X9)))))))))))),
  file('thm.wordProps.wordProps_79_prove_ltb','thm.wordProps.wordProps_56_prove_ltb')).
fof(f85,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X7),s('type.wordSem.state'(sK2,sK3),X8))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK6),s('type.wordSem.state'(sK2,sK3),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(sK2)),sK8),s('type.wordSem.state'(sK2,sK3),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(sK2)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(sK2,sK3),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.wordSem.state'(sK2,sK3),sK5)))))))))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X7,X8] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X7),s('type.wordSem.state'(sK2,sK3),X8))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK6),s('type.wordSem.state'(sK2,sK3),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(sK2)),sK8),s('type.wordSem.state'(sK2,sK3),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(sK2)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(sK2,sK3),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.wordSem.state'(sK2,sK3),sK5)))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ! [X7,X8] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X7),s('type.wordSem.state'(X0,X1),X8))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X6),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ? [X7,X8] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X7),s('type.wordSem.state'(X0,X1),X8))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X6),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6] : ? [X7,X8] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X7),s('type.wordSem.state'(X0,X1),X8))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X6),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12] : ? [X13,X14] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X13),s('type.wordSem.state'(X6,X7),X14))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X10),s('type.wordSem.state'(X6,X7),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X6)),X12),s('type.wordSem.state'(X6,X7),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X6,X7),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X11))),s('type.wordSem.state'(X6,X7),X9)))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12] : ? [X13,X14] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X13),s('type.wordSem.state'(X6,X7),X14))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X10),s('type.wordSem.state'(X6,X7),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X6)),X12),s('type.wordSem.state'(X6,X7),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'),s('type.wordSem.state'(X6,X7),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X11))),s('type.wordSem.state'(X6,X7),X9)))))))))))))),
  file('thm.wordProps.wordProps_79_prove_ltb','thm.wordProps.wordProps_79_prove_ltb')).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 144
% Passive clauses: 984
% Generated clauses: 11888
% Final active clauses: 142
% Final passive clauses: 718
% Input formulas: 21
% Initial clauses: 42
% 
% Duplicate literals: 548
% Trivial inequalities: 642
% Fw subsumption resolutions: 1505
% Fw demodulations: 1510
% Bw demodulations: 2
% 
% Simple tautologies: 312
% Equational tautologies: 23
% Forward subsumptions: 5814
% 
% Binary resolution: 69
% Forward superposition: 4354
% Backward superposition: 2978
% Self superposition: 78
% Equality factoring: 56
% Equality resolution: 31
% 
% Split clauses: 266
% Split components: 545
% SAT solver clauses: 673
% SAT solver unit clauses: 17
% SAT solver binary clauses: 132
% 
% Sat splits: 266
% 
% TWLsolver clauses: 671
% TWLsolver calls for satisfiability: 97
% 
% Memory used [KB]: 6652
% Time elapsed: 0.367 s
% ------------------------------
% ------------------------------
% Success in time 0.381 s
