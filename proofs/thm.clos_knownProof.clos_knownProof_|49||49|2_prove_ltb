Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (117398)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 787
% Passive clauses: 8052
% Generated clauses: 19344
% Final active clauses: 734
% Final passive clauses: 6892
% Input formulas: 69
% Initial clauses: 197
% 
% Duplicate literals: 346
% Trivial inequalities: 36
% Fw subsumption resolutions: 1594
% Fw demodulations: 853
% Bw demodulations: 50
% 
% Simple tautologies: 255
% Equational tautologies: 52
% Forward subsumptions: 7850
% 
% Binary resolution: 7947
% Factoring: 1128
% Forward superposition: 2611
% Backward superposition: 4270
% Self superposition: 75
% Equality factoring: 26
% Equality resolution: 15
% 
% Split clauses: 372
% Split components: 745
% SAT solver clauses: 586
% SAT solver unit clauses: 7
% SAT solver binary clauses: 74
% 
% Sat splits: 372
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 584
% TWLsolver calls for satisfiability: 369
% 
% Memory used [KB]: 16758
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f7459,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7458,f4519,f4557,f313,f519,f502,f654])).
fof(f654,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) | $spl240),
  inference(cnf_transformation,[],[f654_D])).
fof(f654_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f502,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK43,sK44])],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6,X7,X26,X8] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.clos_known.val_approx'),X26),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))),
  file('thm.clos_knownProof.clos_knownProof_|49||49|2_prove_ltb','thm.clos_knownProof.clos_knownProof_38_prove_ltb')).
fof(f519,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),sK14))),s('type.list.list'('type.clos_known.val_approx'),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK15)))) ) | $spl0),
  inference(cnf_transformation,[],[f519_D])).
fof(f519_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),sK14))),s('type.list.list'('type.clos_known.val_approx'),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK15)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f313,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),sK14))),s('type.list.list'('type.clos_known.val_approx'),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK15)))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),sK14))),s('type.list.list'('type.clos_known.val_approx'),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK15)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16])],[f171])).
fof(f171,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))),
  file('thm.clos_knownProof.clos_knownProof_|49||49|2_prove_ltb','thm.clos_knownProof.clos_knownProof_|49||49|2_prove_ltb')).
fof(f4557,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(sK15,sK16,sK14,sK13)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(sK15,sK16,sK14,sK13))))) ) | $spl1956),
  inference(cnf_transformation,[],[f4557_D])).
fof(f4557_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(sK15,sK16,sK14,sK13)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(sK15,sK16,sK14,sK13))))) ) <=> ~$spl1956),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1956])])).
fof(f4519,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK43(sK15,sK16,sK14,sK13)),s('type.sptree.spt'('type.clos_known.val_approx'),sK44(sK15,sK16,sK14,sK13))))) ) | ($spl0 | $spl240)),
  inference(superposition,[],[f519,f654])).
fof(f7458,plain,(
  $false | $spl1956),
  inference(equality_resolution,[],[f4557])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 335
% Passive clauses: 1635
% Generated clauses: 7138
% Final active clauses: 335
% Final passive clauses: 1254
% Input formulas: 69
% Initial clauses: 197
% 
% Duplicate literals: 100
% Trivial inequalities: 2
% Fw subsumption resolutions: 387
% Fw demodulations: 190
% Bw demodulations: 46
% Condensations: 117
% Global subsumptions: 13
% 
% Simple tautologies: 191
% Equational tautologies: 7
% Forward subsumptions: 2504
% 
% Binary resolution: 1666
% Factoring: 303
% Forward superposition: 975
% Backward superposition: 1441
% Self superposition: 52
% Equality factoring: 2
% Equality resolution: 7
% 
% SAT solver clauses: 2228
% SAT solver unit clauses: 240
% SAT solver binary clauses: 75
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2175
% TWLsolver calls for satisfiability: 1765
% 
% Memory used [KB]: 24178
% Time elapsed: 0.580 s
% ------------------------------
% ------------------------------
% Success in time 1.221 s
