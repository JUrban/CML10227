Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exhProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exhProps
% SZS output start Proof for thm.exhProps
fof(f4618,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f4617])).
fof(f4617,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3)))),
  inference(superposition,[],[f28,f2920])).
fof(f2920,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f2906,f33])).
fof(f33,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X13] : ! [X14] : s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X13),X14)))),
  file('thm.exhProps.pmatch_nil|split|1','thm.list.TAKE_|48|')).
fof(f2906,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0)))))))) )),
  inference(superposition,[],[f37,f32])).
fof(f32,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13] : ! [X14] : s('type.list.list'(X13),X14) = s('type.list.list'(X13),'const.list.DROP_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X13),X14)))),
  file('thm.exhProps.pmatch_nil|split|1','thm.list.DROP_|48|')).
fof(f37,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.DROP_2'(s('type.num.num',X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num',X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)))))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.DROP_2'(s('type.num.num',X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num',X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7,X8,X6,X9,X12] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.DROP_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))))),
  file('thm.exhProps.pmatch_nil|split|1','thm.exhProps.pmatch_append|split|1')).
fof(f28,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK1),s('type.list.list'('type.exhLang.pat'),sK2),s('type.list.list'('type.exhSem.v'),sK0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1,X2,X3] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X1),s('type.list.list'('type.exhLang.pat'),X2),s('type.list.list'('type.exhSem.v'),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X7),s('type.list.list'('type.exhLang.pat'),X8),s('type.list.list'('type.exhSem.v'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))))),
  file('thm.exhProps.pmatch_nil|split|1','thm.exhProps.pmatch_nil|split|1')).
% SZS output end Proof for thm.exhProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 786
% Generated clauses: 4409
% Final active clauses: 38
% Final passive clauses: 690
% Input formulas: 10
% Initial clauses: 10
% 
% Duplicate literals: 448
% Trivial inequalities: 53
% Fw subsumption resolutions: 460
% Fw demodulations: 25
% 
% Simple tautologies: 138
% Equational tautologies: 81
% Forward subsumptions: 1735
% 
% Binary resolution: 16
% Forward superposition: 1683
% Backward superposition: 1238
% Self superposition: 233
% Equality factoring: 206
% Equality resolution: 4
% 
% Split clauses: 266
% Split components: 535
% SAT solver clauses: 717
% SAT solver unit clauses: 242
% SAT solver binary clauses: 228
% 
% Sat splits: 266
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 715
% TWLsolver calls for satisfiability: 32
% 
% Memory used [KB]: 2558
% Time elapsed: 0.149 s
% ------------------------------
% ------------------------------
% Success in time 0.16 s
