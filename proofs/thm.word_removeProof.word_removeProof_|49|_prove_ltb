Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.word_removeProof
% (33989)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 866
% Passive clauses: 7201
% Generated clauses: 25152
% Final active clauses: 859
% Final passive clauses: 6063
% Input formulas: 515
% Initial clauses: 746
% 
% Duplicate literals: 192
% Trivial inequalities: 15
% Fw subsumption resolutions: 1093
% Fw demodulations: 3427
% Bw demodulations: 6
% 
% Simple tautologies: 286
% Equational tautologies: 33
% Forward subsumptions: 12608
% 
% Binary resolution: 5464
% Factoring: 834
% Forward superposition: 4981
% Backward superposition: 8233
% Self superposition: 42
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 415
% Split components: 832
% SAT solver clauses: 578
% SAT solver unit clauses: 11
% SAT solver binary clauses: 74
% 
% Sat splits: 415
% 
% TWLsolver clauses: 578
% TWLsolver calls for satisfiability: 349
% 
% Memory used [KB]: 15735
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.word_removeProof
% (34004)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Passive clauses: 597
% Generated clauses: 3104
% Final passive clauses: 569
% Input formulas: 515
% Initial clauses: 746
% 
% Duplicate literals: 7
% Trivial inequalities: 1
% Fw subsumption resolutions: 5
% Fw demodulations: 1617
% Bw demodulations: 28
% Condensations: 21
% Global subsumptions: 24
% 
% Simple tautologies: 80
% Equational tautologies: 3
% Forward subsumptions: 4
% 
% SAT solver clauses: 1513
% SAT solver unit clauses: 1180
% SAT solver binary clauses: 124
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% TWLsolver clauses: 1417
% TWLsolver calls for satisfiability: 11639
% 
% Memory used [KB]: 16758
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.word_removeProof
% (34031)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 875
% Passive clauses: 5299
% Generated clauses: 243818
% Final active clauses: 739
% Final passive clauses: 2147
% Input formulas: 515
% Initial clauses: 746
% Discarded non-redundant clauses: 126966
% 
% Duplicate literals: 11
% Trivial inequalities: 5
% Fw subsumption resolutions: 210
% Fw demodulations: 49847
% Bw demodulations: 169
% Condensations: 24
% 
% Simple tautologies: 138
% Equational tautologies: 52
% Forward subsumptions: 25688
% Fw demodulations to eq. taut.: 43326
% Bw demodulations to eq. taut.: 46
% 
% Unit resulting resolution: 168663
% Factoring: 1
% Forward superposition: 9361
% Backward superposition: 14626
% Self superposition: 56
% Equality factoring: 2
% Equality resolution: 21
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 5657
% SAT solver unit clauses: 2446
% SAT solver binary clauses: 2656
% 
% Sat splits: 5
% Sat splitting refutations: 346
% 
% Memory used [KB]: 174879
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.word_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.word_removeProof
% SZS output start Proof for thm.word_removeProof
fof(f11171,plain,(
  $false),
  inference(subsumption_resolution,[],[f10784,f766])).
fof(f766,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f570])).
fof(f570,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f569])).
fof(f569,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f118])).
fof(f118,axiom,(
  ! [X6,X12] : ! [X8,X23] : s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X12),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X12),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X23),s('type.wordSem.state'(X6,X12),X8)))))),
  file('thm.word_removeProof.word_removeProof_|49|_prove_ltb','thm.wordSem.wordSem_77_prove_ltb')).
fof(f10784,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(superposition,[],[f1317,f791])).
fof(f791,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X3),s('type.wordSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f620])).
fof(f620,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f619])).
fof(f619,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f116])).
fof(f116,axiom,(
  ! [X6,X12] : ! [X8,X23] : s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X12),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X12),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6)))),X23),s('type.wordSem.state'(X6,X12),X8)))))),
  file('thm.word_removeProof.word_removeProof_|49|_prove_ltb','thm.wordSem.wordSem_78_prove_ltb')).
fof(f1317,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),sK2)))))))),
  inference(equality_resolution,[],[f869])).
fof(f869,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,X0),X1))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,X0),X1))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),sK2)))))))) )),
  inference(superposition,[],[f860,f849])).
fof(f849,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X0),X4))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X2),X5))) | s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),X4))) != s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X2),X5)))) )),
  inference(cnf_transformation,[],[f727])).
fof(f727,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),X4))) != s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X2),X5))) | s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X0),X4))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X2),X5))))),
  inference(ennf_transformation,[],[f705])).
fof(f705,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),X4))) = s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X2),X5))) => s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X0),X4))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X2),X5))))),
  inference(flattening,[],[f704])).
fof(f704,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : (s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),X4))) = s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X2),X5))) => s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X0),X4))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X1))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X3),s('type.wordSem.state'(X1,X2),X5))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7,X6,X52] : ! [X9,X8,X56] : (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X52),X56))) => s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X9),s('type.wordSem.state'(X6,X7),X8))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X9),s('type.wordSem.state'(X6,X52),X56))))),
  file('thm.word_removeProof.word_removeProof_|49|_prove_ltb','thm.wordProps.wordProps_|49|54_prove_ltb')).
fof(f860,plain,(
  s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),sK2)))))))),
  inference(forward_demodulation,[],[f739,f749])).
fof(f749,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f536])).
fof(f536,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f535])).
fof(f535,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),X4),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X12] : ! [X8,X106,X23] : s('type.wordSem.state'(X6,X12),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6)))),X23),s('type.wordSem.state'(X6,X12),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X106),s('type.wordSem.state'(X6,X12),X8))))) = s('type.wordSem.state'(X6,X12),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),X106),s('type.wordSem.state'(X6,X12),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6)))),X23),s('type.wordSem.state'(X6,X12),X8)))))),
  file('thm.word_removeProof.word_removeProof_|49|_prove_ltb','thm.wordSem.wordSem_3|48|8_prove_ltb')).
fof(f739,plain,(
  s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),sK3))),s('type.wordSem.state'(sK0,sK1),sK2)))))))),
  inference(cnf_transformation,[],[f728])).
fof(f728,plain,(
  s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.option.option'('type.list.list'('type.wordSem.word_loc'(sK0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),sK4),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),sK3))),s('type.wordSem.state'(sK0,sK1),sK2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f726])).
fof(f726,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2))) != s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X3))),s('type.wordSem.state'(X0,X1),X2)))))))),
  inference(ennf_transformation,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X3))),s('type.wordSem.state'(X0,X1),X2)))))))),
  inference(flattening,[],[f517])).
fof(f517,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X0))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X3))),s('type.wordSem.state'(X0,X1),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X10),s('type.wordSem.state'(X6,X7),X8))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X10),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X9))),s('type.wordSem.state'(X6,X7),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X10),s('type.wordSem.state'(X6,X7),X8))) = s('type.option.option'('type.list.list'('type.wordSem.word_loc'(X6))),'const.wordSem.get_vars_2'(s('type.list.list'('type.num.num'),X10),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6)))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X9))),s('type.wordSem.state'(X6,X7),X8)))))))),
  file('thm.word_removeProof.word_removeProof_|49|_prove_ltb','thm.word_removeProof.word_removeProof_|49|_prove_ltb')).
% SZS output end Proof for thm.word_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 162
% Passive clauses: 451
% Generated clauses: 10313
% Final active clauses: 161
% Final passive clauses: 389
% Input formulas: 515
% Initial clauses: 121
% 
% Selected by SInE selection: 105
% SInE iterations: 1
% 
% Fw subsumption resolutions: 32
% Fw demodulations: 6661
% 
% Simple tautologies: 2
% Equational tautologies: 2
% Forward subsumptions: 3169
% 
% Forward superposition: 3612
% Equality resolution: 2
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 10
% SAT solver unit clauses: 1
% SAT solver binary clauses: 8
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% Memory used [KB]: 24306
% Time elapsed: 2.344 s
% ------------------------------
% ------------------------------
% Success in time 14.16 s
