Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.HoodMelvilleQueue
% (120398)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 103
% Passive clauses: 2847
% Generated clauses: 17792
% Final active clauses: 101
% Final passive clauses: 2647
% Input formulas: 37
% Initial clauses: 61
% 
% Duplicate literals: 358
% Trivial inequalities: 195
% Fw subsumption resolutions: 2258
% Fw demodulations: 2742
% Bw demodulations: 2
% 
% Simple tautologies: 193
% Equational tautologies: 54
% Forward subsumptions: 8866
% 
% Binary resolution: 186
% Factoring: 1
% Forward superposition: 6207
% Backward superposition: 5349
% Self superposition: 285
% Equality factoring: 137
% Equality resolution: 32
% 
% Split clauses: 198
% Split components: 397
% SAT solver clauses: 376
% SAT solver unit clauses: 14
% SAT solver binary clauses: 85
% 
% Sat splits: 198
% 
% TWLsolver clauses: 376
% TWLsolver calls for satisfiability: 90
% 
% Memory used [KB]: 16247
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.HoodMelvilleQueue
% (120431)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 96
% Passive clauses: 870
% Generated clauses: 10035
% Final active clauses: 96
% Final passive clauses: 773
% Input formulas: 37
% Initial clauses: 61
% 
% Duplicate literals: 321
% Trivial inequalities: 87
% Fw subsumption resolutions: 342
% Fw demodulations: 638
% Bw demodulations: 1
% Condensations: 726
% Global subsumptions: 4
% 
% Simple tautologies: 114
% Equational tautologies: 40
% Forward subsumptions: 5544
% 
% Binary resolution: 96
% Factoring: 2
% Forward superposition: 4154
% Backward superposition: 2628
% Self superposition: 150
% Equality factoring: 72
% Equality resolution: 16
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 1423
% SAT solver unit clauses: 82
% SAT solver binary clauses: 40
% SAT solver learnt clauses: 8
% 
% Sat splits: 18
% 
% TWLsolver clauses: 1407
% TWLsolver calls for satisfiability: 301
% 
% Memory used [KB]: 18805
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.HoodMelvilleQueue
% (120462)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 68
% Passive clauses: 479
% Generated clauses: 5606
% Final active clauses: 62
% Final passive clauses: 370
% Input formulas: 37
% Initial clauses: 61
% 
% Duplicate literals: 274
% Trivial inequalities: 46
% Fw subsumption resolutions: 259
% Fw demodulations: 426
% Bw demodulations: 34
% Condensations: 487
% Global subsumptions: 1
% 
% Simple tautologies: 92
% Equational tautologies: 60
% Forward subsumptions: 3465
% Bw demodulations to eq. taut.: 8
% 
% Unit resulting resolution: 152
% Factoring: 1
% Forward superposition: 2196
% Backward superposition: 1438
% Self superposition: 107
% Equality factoring: 68
% Equality resolution: 15
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 514
% SAT solver unit clauses: 36
% SAT solver binary clauses: 232
% 
% Sat splits: 11
% Sat splitting refutations: 10
% 
% Memory used [KB]: 172321
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 29 next slice time: 29
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.HoodMelvilleQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.HoodMelvilleQueue
% SZS output start Proof for thm.HoodMelvilleQueue
fof(f20305,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f973,f980,f979,f1171,f1178,f1177,f2453,f2461,f3522,f3527,f2460,f3981,f3984,f3982,f6020,f6027,f7805,f6028,f7811,f8002,f8009,f8008,f12788,f12791,f12792,f12795,f12796,f12798,f12799,f12801,f12813,f12816,f12817,f12820,f12821,f12823,f12824,f12826,f12828,f12829,f12830,f12831,f12832,f12833,f12834,f12835,f12836,f12838,f12840,f12841,f12842,f12843,f12844,f12845,f12846,f12848,f12850,f12851,f12852,f12853,f12854,f12855,f12860,f12861,f12863,f12865,f12864,f12866,f12862,f12867,f12868,f12871,f12873,f12875,f12877,f12880,f12883,f12885,f12888,f12890,f12892,f12894,f12895,f12897,f12898,f12899,f12901,f12904,f12906,f12908,f12910,f12912,f12914,f12916,f12918,f12919,f12878,f12920,f12921,f12922,f12923,f12924,f12926,f12903,f12927,f12928,f12929,f12930,f12886,f12931,f12932,f12934,f12881,f12935,f12936,f12937,f12938,f12939,f12940,f12941,f12911,f12942,f12913,f12943,f12915,f12944,f12917,f12945,f12947,f12933,f12948,f12949,f12869,f12950,f12925,f12946,f12968,f12969,f12970,f12971,f12789,f12972,f12973,f12974,f12975,f12793,f12976,f12977,f12978,f12979,f12980,f12981,f12837,f12982,f12983,f12797,f12984,f12985,f12986,f12987,f12988,f12814,f12989,f12847,f12990,f12818,f12991,f12800,f12997,f12998,f12999,f13002,f13000,f13003,f13004,f13005,f13006,f13007,f13009,f12902,f13010,f12905,f13011,f12907,f13012,f12909,f13013,f13015,f13017,f13018,f13019,f13020,f13022,f13024,f13026,f13028,f13008,f13029,f13016,f13030,f13032,f13033,f13034,f13035,f13037,f13038,f13039,f13040,f13014,f13041,f13031,f13042,f13043,f13036,f17274,f17276,f17277,f17279,f17280,f17282,f17283,f17285,f17297,f17299,f17300,f17302,f17303,f17304,f17305,f17306,f17308,f17309,f17310,f17311,f17312,f17313,f17314,f17315,f17316,f17318,f17319,f17320,f17321,f17322,f17323,f17324,f17325,f17327,f17328,f17329,f17330,f17331,f17332,f17333,f17338,f17339,f17341,f17343,f17342,f17344,f17340,f17345,f17346,f17349,f17351,f17353,f17355,f17356,f17357,f17358,f17359,f17360,f17361,f17362,f17363,f17364,f17366,f17367,f17368,f17369,f17370,f17371,f17372,f17373,f17375,f17376,f17377,f17378,f17379,f17380,f17381,f17383,f17384,f17386,f17387,f17389,f17390,f17392,f17348,f17393,f17394,f17396,f17397,f17398,f17399,f17400,f17401,f17402,f17403,f17404,f17405,f17406,f17407,f17382,f17408,f17409,f17410,f17411,f17412,f12900,f17395,f17413,f12884,f17414,f17391,f17415,f12896,f17385,f17416,f12879,f17388,f17417,f17365,f17418,f17419,f17374,f17420,f17438,f17439,f12815,f17440,f17441,f17275,f17442,f17443,f12819,f17444,f17445,f17278,f17446,f17447,f17448,f17449,f17450,f17451,f17452,f17453,f17454,f17455,f17456,f17457,f17458,f17459,f17326,f17460,f17461,f17284,f17467,f13001,f17469,f17470,f17471,f17468,f17472,f12870,f17474,f12872,f17475,f12874,f17476,f12876,f17477,f17479,f17480,f17481,f17482,f17483,f17484,f17485,f17486,f12887,f17488,f12889,f17489,f12891,f17490,f12893,f17491,f13021,f17493,f13023,f17494,f13025,f17495,f13027,f17496,f17497,f17498,f17499,f17500,f17501,f17502,f17503,f17504,f17473,f17505,f17347,f17506,f17350,f17507,f17352,f17508,f17354,f17509,f17478,f17510,f17487,f17511,f12882,f17492,f17563,f17684,f17685,f17686,f17687,f17694,f17696,f17697,f17699,f17805,f17807,f17826,f17850,f17859,f17860,f17916,f17919,f17910,f17909,f17921,f17922,f17880,f17881,f17923,f17917,f17924,f17925,f17926,f17927,f12849,f17906,f17905,f17928,f17915,f17903,f17918,f17930,f17317,f17931,f18084,f18085,f18087,f18088,f18090,f17281,f18091,f18121,f18157,f12822,f18164,f18166,f18175,f18176,f18198,f18197,f12825,f18205,f18165,f18206,f18167,f18216,f18213,f18212,f18254,f18255,f18275,f18256,f18257,f18277,f18258,f18274,f18259,f18260,f18276,f18261,f18281,f18262,f18283,f18623,f18625,f18771,f18772,f18773,f18774,f18857,f18626,f18858,f18624,f19029,f19030,f19031,f19032,f19083,f19085,f19135,f19086,f19136,f19084,f19174,f19175,f19176,f19177,f19217,f19218,f17301,f19219,f19220,f19259,f19260,f19261,f19262,f19302,f19303,f19304,f19305,f19342,f19343,f17298,f19344,f12790,f19345,f19673,f19739,f20068,f18282,f20091,f19838,f20116,f20092,f19937,f18279,f20105,f20299,f20301,f20300,f20304,f12839,f12794])).
fof(f12794,plain,(
  ( ! [X20] : (~p(s(bool,X20))) ) | $spl34),
  inference(cnf_transformation,[],[f12794_D])).
fof(f12794_D,plain,(
  ( ! [X20] : (~p(s(bool,X20))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f12839,plain,(
  ( ! [X72] : (s(bool,'F_0') != s(bool,X72)) ) | $spl54),
  inference(cnf_transformation,[],[f12839_D])).
fof(f12839_D,plain,(
  ( ! [X72] : (s(bool,'F_0') != s(bool,X72)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f20304,plain,(
  ( ! [X152,X155] : (s(bool,'F_0') != s(bool,X155) | ~p(s(bool,X152))) )),
  inference(forward_demodulation,[],[f20303,f109])).
fof(f109,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,X2) = s(X1,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'),s(X1,X2),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),X1))))),X3),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),X1))),X4),s(fun('type.list.list'(X0),X1),X5)))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X1,X2) = s(X1,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'),s(X1,X2),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),X1))))),X3),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),X1))),X4),s(fun('type.list.list'(X0),X1),X5)))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X1,X2) = s(X1,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'),s(X1,X2),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),X1))))),X3),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),X1))),X4),s(fun('type.list.list'(X0),X1),X5)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6,X24] : ! [X42,X23,X43,X44] : s(X24,X42) = s(X24,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'),s(X24,X42),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),X24))))),X23),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),X24))),X43),s(fun('type.list.list'(X6),X24),X44)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.HoodMelvilleQueue.status_case_def|split|0')).
fof(f20303,plain,(
  ( ! [X156,X152,X151,X157,X155] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X155),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X151),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X156),s(fun('type.list.list'(sK0),bool),X157))) | ~p(s(bool,X152))) )),
  inference(forward_demodulation,[],[f20302,f84])).
fof(f84,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f67])).
fof(f67,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(X0),X4),s('type.list.list'(X0),X3),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(X0),X4),s('type.list.list'(X0),X3),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ~s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(X0),X4),s('type.list.list'(X0),X3),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ~s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X11),s('type.list.list'(X6),X10),s('type.list.list'(X6),X9),s('type.list.list'(X6),X8),s('type.list.list'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ~s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X11),s('type.list.list'(X6),X10),s('type.list.list'(X6),X9),s('type.list.list'(X6),X8),s('type.list.list'(X6),X7)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.HoodMelvilleQueue.status_distinct|split|0')).
fof(f20302,plain,(
  ( ! [X156,X152,X151,X157,X155] : (~p(s(bool,X152)) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))),s(bool,X155),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X151),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X156),s(fun('type.list.list'(sK0),bool),X157)))) )),
  inference(forward_demodulation,[],[f20275,f109])).
fof(f20275,plain,(
  ( ! [X156,X154,X152,X151,X157,X155,X153] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X152),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X151),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X153),s(fun('type.list.list'(sK0),bool),X154)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))),s(bool,X155),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X151),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X156),s(fun('type.list.list'(sK0),bool),X157)))) )),
  inference(superposition,[],[f17874,f161])).
fof(f161,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(X0,X1),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))))),X2),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))),X3),s(fun('type.list.list'(sK0),X0),X4))) = s(X0,happ(s(fun('type.list.list'(sK0),X0),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))))),X2),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f100,f84])).
fof(f100,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s(X0,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2),s('type.list.list'(X1),X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6))),s(X0,X7),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),X9),s(fun('type.list.list'(X1),X0),X10))) = s(X0,happ(s(fun('type.list.list'(X1),X0),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),X0)),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0)))),happ(s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s('type.num.num',X2))),s('type.list.list'(X1),X3))),s('type.list.list'(X1),X4))),s('type.list.list'(X1),X5))),s('type.list.list'(X1),X6)))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : s(X0,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2),s('type.list.list'(X1),X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6))),s(X0,X7),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),X9),s(fun('type.list.list'(X1),X0),X10))) = s(X0,happ(s(fun('type.list.list'(X1),X0),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),X0)),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0)))),happ(s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s('type.num.num',X2))),s('type.list.list'(X1),X3))),s('type.list.list'(X1),X4))),s('type.list.list'(X1),X5))),s('type.list.list'(X1),X6)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s(X0,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2),s('type.list.list'(X1),X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6))),s(X0,X7),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),X9),s(fun('type.list.list'(X1),X0),X10))) = s(X0,happ(s(fun('type.list.list'(X1),X0),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),X0)),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))),happ(s(fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0)))),happ(s(fun('type.num.num',fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),fun('type.list.list'(X1),X0))))),X8),s('type.num.num',X2))),s('type.list.list'(X1),X3))),s('type.list.list'(X1),X4))),s('type.list.list'(X1),X5))),s('type.list.list'(X1),X6)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X24,X6] : ! [X11,X10,X9,X8,X7,X42,X23,X43,X44] : s(X24,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X11),s('type.list.list'(X6),X10),s('type.list.list'(X6),X9),s('type.list.list'(X6),X8),s('type.list.list'(X6),X7))),s(X24,X42),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),X24))))),X23),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),X24))),X43),s(fun('type.list.list'(X6),X24),X44))) = s(X24,happ(s(fun('type.list.list'(X6),X24),happ(s(fun('type.list.list'(X6),fun('type.list.list'(X6),X24)),happ(s(fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),X24))),happ(s(fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),X24)))),happ(s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),X24))))),X23),s('type.num.num',X11))),s('type.list.list'(X6),X10))),s('type.list.list'(X6),X9))),s('type.list.list'(X6),X8))),s('type.list.list'(X6),X7)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.HoodMelvilleQueue.status_case_def|split|1')).
fof(f17874,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun('type.list.list'(X16),bool),happ(s(fun('type.list.list'(X16),fun('type.list.list'(X16),bool)),happ(s(fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),bool))),happ(s(fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),bool))))),X23),s('type.num.num',X17))),s('type.list.list'(X16),X18))),s('type.list.list'(X16),X19))),s('type.list.list'(X16),X20))),s('type.list.list'(X16),X21)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X16),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X17),s('type.list.list'(X16),X18),s('type.list.list'(X16),X19),s('type.list.list'(X16),X20),s('type.list.list'(X16),X21))),s(bool,X22),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),bool))))),X23),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),bool))),X24),s(fun('type.list.list'(X16),bool),X25)))) )),
  inference(superposition,[],[f91,f100])).
fof(f91,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X38] : (s(bool,'F_0') = s(bool,X38) <=> ~p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.EQ_CLAUSES|split|2')).
fof(f20300,plain,(
  ( ! [X125,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X116),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X118),s('type.list.list'(X116),X119),s('type.list.list'(X116),X120),s('type.list.list'(X116),X121),s('type.list.list'(X116),X122))),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),X125),s(fun('type.list.list'(X116),bool),X126))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X116),bool),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),bool)),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s('type.num.num',X118))),s('type.list.list'(X116),X119))),s('type.list.list'(X116),X120))),s('type.list.list'(X116),X121))),s('type.list.list'(X116),X122)))) ) | $spl360),
  inference(cnf_transformation,[],[f20300_D])).
fof(f20300_D,plain,(
  ( ! [X125,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X116),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X118),s('type.list.list'(X116),X119),s('type.list.list'(X116),X120),s('type.list.list'(X116),X121),s('type.list.list'(X116),X122))),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),X125),s(fun('type.list.list'(X116),bool),X126))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X116),bool),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),bool)),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s('type.num.num',X118))),s('type.list.list'(X116),X119))),s('type.list.list'(X116),X120))),s('type.list.list'(X116),X121))),s('type.list.list'(X116),X122)))) ) <=> ~$spl360),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl360])])).
fof(f20301,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X135,X133,X131,X129,X137] : (~p(s(bool,X134)) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X127),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X129),s('type.list.list'(X127),X130),s('type.list.list'(X127),X131),s('type.list.list'(X127),X132),s('type.list.list'(X127),X133))),s(bool,X135),s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))))),X128),s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),bool))),X136),s(fun('type.list.list'(X127),bool),X137))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X127),bool),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),bool)),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))))),X128),s('type.num.num',X129))),s('type.list.list'(X127),X130))),s('type.list.list'(X127),X131))),s('type.list.list'(X127),X132))),s('type.list.list'(X127),X133)))) )),
  inference(subsumption_resolution,[],[f20273,f91])).
fof(f20273,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X135,X133,X131,X129,X137] : (~p(s(bool,X134)) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X127),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X129),s('type.list.list'(X127),X130),s('type.list.list'(X127),X131),s('type.list.list'(X127),X132),s('type.list.list'(X127),X133))),s(bool,X135),s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))))),X128),s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),bool))),X136),s(fun('type.list.list'(X127),bool),X137))) | s(bool,'F_0') = s(bool,X134) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X127),bool),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),bool)),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))),happ(s(fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),fun('type.list.list'(X127),bool))))),X128),s('type.num.num',X129))),s('type.list.list'(X127),X130))),s('type.list.list'(X127),X131))),s('type.list.list'(X127),X132))),s('type.list.list'(X127),X133)))) )),
  inference(superposition,[],[f17874,f19180])).
fof(f19180,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,X7) | s(bool,'F_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X7)) )),
  inference(resolution,[],[f17958,f92])).
fof(f92,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f72])).
fof(f17958,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) )),
  inference(resolution,[],[f92,f88])).
fof(f88,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X40,X41] : ((p(s(bool,X40)) => p(s(bool,X41))) => ((p(s(bool,X41)) => p(s(bool,X40))) => s(bool,X40) = s(bool,X41)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.IMP_ANTISYM_AX')).
fof(f20299,plain,(
  ( ! [X125,X123,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (~p(s(bool,X123)) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X116),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X118),s('type.list.list'(X116),X119),s('type.list.list'(X116),X120),s('type.list.list'(X116),X121),s('type.list.list'(X116),X122))),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),X125),s(fun('type.list.list'(X116),bool),X126))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X116),bool),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),bool)),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s('type.num.num',X118))),s('type.list.list'(X116),X119))),s('type.list.list'(X116),X120))),s('type.list.list'(X116),X121))),s('type.list.list'(X116),X122)))) )),
  inference(subsumption_resolution,[],[f20272,f91])).
fof(f20272,plain,(
  ( ! [X125,X123,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (~p(s(bool,X123)) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(X116),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X118),s('type.list.list'(X116),X119),s('type.list.list'(X116),X120),s('type.list.list'(X116),X121),s('type.list.list'(X116),X122))),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),X125),s(fun('type.list.list'(X116),bool),X126))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(X116),bool),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),bool)),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))),happ(s(fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),fun('type.list.list'(X116),bool))))),X117),s('type.num.num',X118))),s('type.list.list'(X116),X119))),s('type.list.list'(X116),X120))),s('type.list.list'(X116),X121))),s('type.list.list'(X116),X122))) | s(bool,'F_0') = s(bool,X123)) )),
  inference(superposition,[],[f17874,f19180])).
fof(f20105,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) = s(bool,happ(s(fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X108),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)))),X109),s('type.HoodMelvilleQueue.status'(X108),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),'const.HoodMelvilleQueue.Finished_0'))) | s(bool,'F_0') = s(bool,X110)) ) | $spl358),
  inference(cnf_transformation,[],[f20105_D])).
fof(f20105_D,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) = s(bool,happ(s(fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X108),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)))),X109),s('type.HoodMelvilleQueue.status'(X108),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),'const.HoodMelvilleQueue.Finished_0'))) | s(bool,'F_0') = s(bool,X110)) ) <=> ~$spl358),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl358])])).
fof(f18279,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | $spl310),
  inference(cnf_transformation,[],[f18279_D])).
fof(f18279_D,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f19937,plain,(
  ( ! [X109,X110,X108] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | s(bool,X110) = s(bool,happ(s(fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X108),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)))),X109),s('type.HoodMelvilleQueue.status'(X108),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),'const.HoodMelvilleQueue.Finished_0'))) | s(bool,'F_0') = s(bool,X110)) )),
  inference(superposition,[],[f110,f19180])).
fof(f110,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X45] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X45),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.HoodMelvilleQueue.datatype_status')).
fof(f20092,plain,(
  ( ! [X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') = s(bool,X98) | s(bool,X96) = s(bool,X98)) ) | $spl356),
  inference(cnf_transformation,[],[f20092_D])).
fof(f20092_D,plain,(
  ( ! [X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') = s(bool,X98) | s(bool,X96) = s(bool,X98)) ) <=> ~$spl356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl356])])).
fof(f20116,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') != s(bool,X97) | s(bool,X96) = s(bool,X98) | s(bool,'F_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f19885,f17855])).
fof(f17855,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,X4) | s(bool,'T_0') != s(bool,X4)) )),
  inference(resolution,[],[f91,f95])).
fof(f95,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X38] : (s(bool,'T_0') = s(bool,X38) <=> p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.EQ_CLAUSES|split|0')).
fof(f19885,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') != s(bool,X97) | s(bool,'T_0') = s(bool,X97) | s(bool,X96) = s(bool,X98) | s(bool,'F_0') = s(bool,X98)) )),
  inference(superposition,[],[f18440,f19180])).
fof(f18440,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f17855,f99])).
fof(f99,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0',aHL_BOOL_CASES)).
fof(f19838,plain,(
  ( ! [X109,X110,X108] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | s(bool,X110) = s(bool,happ(s(fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X108),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),fun(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),fun(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),bool)))),X109),s('type.HoodMelvilleQueue.status'(X108),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X108),fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X108),'type.HoodMelvilleQueue.status'(X108)),'const.HoodMelvilleQueue.Finished_0'))) | s(bool,'F_0') = s(bool,X110)) )),
  inference(superposition,[],[f110,f19180])).
fof(f20091,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') != s(bool,X97) | s(bool,X96) = s(bool,X98) | s(bool,'F_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f19786,f17855])).
fof(f19786,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'F_0') != s(bool,X97) | s(bool,'T_0') = s(bool,X97) | s(bool,X96) = s(bool,X98) | s(bool,'F_0') = s(bool,X98)) )),
  inference(superposition,[],[f18440,f19180])).
fof(f18282,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) ) | $spl314),
  inference(cnf_transformation,[],[f18282_D])).
fof(f18282_D,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f20068,plain,(
  ( ! [X133] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X133)))) | s(bool,'F_0') = s(bool,X133)) ) | $spl354),
  inference(cnf_transformation,[],[f20068_D])).
fof(f20068_D,plain,(
  ( ! [X133] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X133)))) | s(bool,'F_0') = s(bool,X133)) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f19739,plain,(
  ( ! [X132,X133,X131] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X133)))) | s(bool,'F_0') = s(bool,X133) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X131),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool)))),X132),s('type.HoodMelvilleQueue.status'(X131),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),'const.HoodMelvilleQueue.Finished_0')))) )),
  inference(superposition,[],[f110,f19180])).
fof(f19673,plain,(
  ( ! [X132,X133,X131] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X133)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X131),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),fun(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),fun(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),bool)))),X132),s('type.HoodMelvilleQueue.status'(X131),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X131),fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X131),'type.HoodMelvilleQueue.status'(X131)),'const.HoodMelvilleQueue.Finished_0'))) | s(bool,'F_0') = s(bool,X133)) )),
  inference(superposition,[],[f110,f19180])).
fof(f19345,plain,(
  ( ! [X69,X65] : (s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) | $spl352),
  inference(cnf_transformation,[],[f19345_D])).
fof(f19345_D,plain,(
  ( ! [X69,X65] : (s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) <=> ~$spl352),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl352])])).
fof(f12790,plain,(
  ( ! [X10] : (p(s(bool,X10))) ) | $spl30),
  inference(cnf_transformation,[],[f12790_D])).
fof(f12790_D,plain,(
  ( ! [X10] : (p(s(bool,X10))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f19344,plain,(
  ( ! [X66,X69,X65] : (p(s(bool,X66)) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) | $spl296),
  inference(forward_demodulation,[],[f19335,f109])).
fof(f19335,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) | $spl296),
  inference(superposition,[],[f18732,f161])).
fof(f18732,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl296),
  inference(resolution,[],[f17923,f92])).
fof(f17298,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl184),
  inference(cnf_transformation,[],[f17298_D])).
fof(f17298_D,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f19343,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'F_0') = s(bool,X53)) ) | $spl350),
  inference(cnf_transformation,[],[f19343_D])).
fof(f19343_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'F_0') = s(bool,X53)) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f19342,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) != s(bool,X53) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,X53)) ) | $spl296),
  inference(forward_demodulation,[],[f19333,f109])).
fof(f19333,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52))) | s(bool,'F_0') = s(bool,X53)) ) | $spl296),
  inference(superposition,[],[f18732,f161])).
fof(f19305,plain,(
  ( ! [X69,X65] : (s(bool,'T_0') != s(bool,X69) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl348),
  inference(cnf_transformation,[],[f19305_D])).
fof(f19305_D,plain,(
  ( ! [X69,X65] : (s(bool,'T_0') != s(bool,X69) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f19304,plain,(
  ( ! [X66,X69,X65] : (p(s(bool,X66)) | s(bool,'T_0') != s(bool,X69) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f19292,f109])).
fof(f19292,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,'T_0') != s(bool,X69) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f18439,f161])).
fof(f18439,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X1) | s(bool,X0) != s(bool,X1)) )),
  inference(superposition,[],[f17855,f92])).
fof(f19303,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'T_0') != s(bool,X53)) ) | $spl346),
  inference(cnf_transformation,[],[f19303_D])).
fof(f19303_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'T_0') != s(bool,X53)) ) <=> ~$spl346),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl346])])).
fof(f19302,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) != s(bool,X53) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,X53)) )),
  inference(forward_demodulation,[],[f19290,f109])).
fof(f19290,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,X53) | s(bool,X53) != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52)))) )),
  inference(superposition,[],[f18439,f161])).
fof(f19262,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) ) | $spl344),
  inference(cnf_transformation,[],[f19262_D])).
fof(f19262_D,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f19261,plain,(
  ( ! [X66,X69,X65] : (p(s(bool,X66)) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(forward_demodulation,[],[f19250,f109])).
fof(f19250,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f17967,f161])).
fof(f17967,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f92,f99])).
fof(f19260,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl342),
  inference(cnf_transformation,[],[f19260_D])).
fof(f19260_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f19259,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) = s(bool,X53) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(forward_demodulation,[],[f19248,f109])).
fof(f19248,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f17967,f161])).
fof(f19220,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) | $spl340),
  inference(cnf_transformation,[],[f19220_D])).
fof(f19220_D,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f19219,plain,(
  ( ! [X66,X69,X65] : (~p(s(bool,X66)) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) )),
  inference(forward_demodulation,[],[f19208,f109])).
fof(f19208,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') = s(bool,X69)) )),
  inference(superposition,[],[f17958,f161])).
fof(f17301,plain,(
  ( ! [X26] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl186),
  inference(cnf_transformation,[],[f17301_D])).
fof(f17301_D,plain,(
  ( ! [X26] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f19218,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53) | s(bool,'F_0') = s(bool,X53)) ) | $spl338),
  inference(cnf_transformation,[],[f19218_D])).
fof(f19218_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53) | s(bool,'F_0') = s(bool,X53)) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f19217,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) = s(bool,X53) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(forward_demodulation,[],[f19206,f109])).
fof(f19206,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f17958,f161])).
fof(f19177,plain,(
  ( ! [X69,X65] : (s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) ) | $spl336),
  inference(cnf_transformation,[],[f19177_D])).
fof(f19177_D,plain,(
  ( ! [X69,X65] : (s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f19176,plain,(
  ( ! [X66,X69,X65] : (~p(s(bool,X66)) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(forward_demodulation,[],[f19167,f109])).
fof(f19167,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f17879,f161])).
fof(f17879,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f91,f99])).
fof(f19175,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl334),
  inference(cnf_transformation,[],[f19175_D])).
fof(f19175_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) != s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f19174,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) != s(bool,X53) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(forward_demodulation,[],[f19165,f109])).
fof(f19165,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f17879,f161])).
fof(f19084,plain,(
  ( ! [X34] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl330),
  inference(cnf_transformation,[],[f19084_D])).
fof(f19084_D,plain,(
  ( ! [X34] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) <=> ~$spl330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl330])])).
fof(f19136,plain,(
  ( ! [X47,X48] : (~p(s(bool,X48)) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl313),
  inference(forward_demodulation,[],[f19119,f109])).
fof(f19119,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50)))) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl313),
  inference(superposition,[],[f18865,f161])).
fof(f18865,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X1))))) ) | $spl313),
  inference(superposition,[],[f18280,f98])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X38] : (s(bool,'T_0') = s(bool,X38) <=> p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.EQ_CLAUSES|split|1')).
fof(f18280,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | $spl313),
  inference(cnf_transformation,[],[f18280_D])).
fof(f18280_D,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) <=> ~$spl313),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl313])])).
fof(f19086,plain,(
  ( ! [X48] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48))))) ) | $spl332),
  inference(cnf_transformation,[],[f19086_D])).
fof(f19086_D,plain,(
  ( ! [X48] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48))))) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f19135,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X33)))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl313),
  inference(forward_demodulation,[],[f19117,f109])).
fof(f19117,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36))))))) ) | $spl313),
  inference(superposition,[],[f18865,f161])).
fof(f19085,plain,(
  ( ! [X47,X48] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48)))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl311),
  inference(forward_demodulation,[],[f19060,f109])).
fof(f19060,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50)))))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl311),
  inference(superposition,[],[f18633,f161])).
fof(f18633,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,X0)))) | p(s(bool,X0))) ) | $spl311),
  inference(superposition,[],[f18278,f92])).
fof(f18278,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | $spl311),
  inference(cnf_transformation,[],[f18278_D])).
fof(f18278_D,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) <=> ~$spl311),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl311])])).
fof(f19083,plain,(
  ( ! [X33,X34] : (p(s(bool,X33)) | ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl311),
  inference(forward_demodulation,[],[f19058,f109])).
fof(f19058,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36))))) ) | $spl311),
  inference(superposition,[],[f18633,f161])).
fof(f19032,plain,(
  ( ! [X71,X67] : (s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') != s(bool,X71)) ) | $spl328),
  inference(cnf_transformation,[],[f19032_D])).
fof(f19032_D,plain,(
  ( ! [X71,X67] : (s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') != s(bool,X71)) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f19031,plain,(
  ( ! [X68,X71,X67] : (p(s(bool,X68)) | s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') != s(bool,X71)) )),
  inference(forward_demodulation,[],[f19020,f109])).
fof(f19020,plain,(
  ( ! [X70,X68,X71,X69,X67] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X68),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X69),s(fun('type.list.list'(sK0),bool),X70)))) | s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s(bool,'F_0') != s(bool,X71)) )),
  inference(superposition,[],[f17853,f161])).
fof(f17853,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') != s(bool,X0)) )),
  inference(resolution,[],[f91,f85])).
fof(f85,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f69])).
fof(f19030,plain,(
  ( ! [X55,X51] : (s(bool,X51) = s(bool,X55) | s(bool,'F_0') != s(bool,X55)) ) | $spl326),
  inference(cnf_transformation,[],[f19030_D])).
fof(f19030_D,plain,(
  ( ! [X55,X51] : (s(bool,X51) = s(bool,X55) | s(bool,'F_0') != s(bool,X55)) ) <=> ~$spl326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl326])])).
fof(f19029,plain,(
  ( ! [X52,X55,X51] : (s(bool,X51) = s(bool,X55) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,X55)) )),
  inference(forward_demodulation,[],[f19018,f109])).
fof(f19018,plain,(
  ( ! [X54,X52,X55,X53,X51] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X55) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X51),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X53),s(fun('type.list.list'(sK0),bool),X54))) | s(bool,'F_0') != s(bool,X55)) )),
  inference(superposition,[],[f17853,f161])).
fof(f18624,plain,(
  ( ! [X34] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl318),
  inference(cnf_transformation,[],[f18624_D])).
fof(f18624_D,plain,(
  ( ! [X34] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f18858,plain,(
  ( ! [X47,X48] : (~p(s(bool,X48)) | p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl312),
  inference(forward_demodulation,[],[f18838,f109])).
fof(f18838,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50)))) | p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl312),
  inference(superposition,[],[f18325,f161])).
fof(f18325,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | p(s(bool,'const.bool.DATATYPE_1'(s(bool,X1))))) ) | $spl312),
  inference(superposition,[],[f18281,f98])).
fof(f18626,plain,(
  ( ! [X48] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48))))) ) | $spl320),
  inference(cnf_transformation,[],[f18626_D])).
fof(f18626_D,plain,(
  ( ! [X48] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48))))) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f18857,plain,(
  ( ! [X33,X34] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X33)))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl312),
  inference(forward_demodulation,[],[f18836,f109])).
fof(f18836,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,'const.bool.DATATYPE_1'(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36))))))) ) | $spl312),
  inference(superposition,[],[f18325,f161])).
fof(f18774,plain,(
  ( ! [X71,X67] : (p(s(bool,X71)) | s(bool,X71) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl324),
  inference(cnf_transformation,[],[f18774_D])).
fof(f18774_D,plain,(
  ( ! [X71,X67] : (p(s(bool,X71)) | s(bool,X71) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f18773,plain,(
  ( ! [X68,X71,X67] : (~p(s(bool,X68)) | p(s(bool,X71)) | s(bool,X71) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl296),
  inference(forward_demodulation,[],[f18761,f109])).
fof(f18761,plain,(
  ( ! [X70,X68,X71,X69,X67] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X68),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X69),s(fun('type.list.list'(sK0),bool),X70)))) | p(s(bool,X71)) | s(bool,X71) != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl296),
  inference(superposition,[],[f17923,f161])).
fof(f18772,plain,(
  ( ! [X55,X51] : (s(bool,X51) != s(bool,X55) | p(s(bool,X55))) ) | $spl322),
  inference(cnf_transformation,[],[f18772_D])).
fof(f18772_D,plain,(
  ( ! [X55,X51] : (s(bool,X51) != s(bool,X55) | p(s(bool,X55))) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f18771,plain,(
  ( ! [X52,X55,X51] : (s(bool,X51) != s(bool,X55) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X55))) ) | $spl296),
  inference(forward_demodulation,[],[f18759,f109])).
fof(f18759,plain,(
  ( ! [X54,X52,X55,X53,X51] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X55)) | s(bool,X55) != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X51),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X52),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X53),s(fun('type.list.list'(sK0),bool),X54)))) ) | $spl296),
  inference(superposition,[],[f17923,f161])).
fof(f18625,plain,(
  ( ! [X47,X48] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X48)))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl310),
  inference(forward_demodulation,[],[f18597,f109])).
fof(f18597,plain,(
  ( ! [X47,X50,X48,X49] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50)))))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl310),
  inference(superposition,[],[f18292,f161])).
fof(f18292,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X0)))) | p(s(bool,X0))) ) | $spl310),
  inference(superposition,[],[f18279,f92])).
fof(f18623,plain,(
  ( ! [X33,X34] : (p(s(bool,X33)) | p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))))) ) | $spl310),
  inference(forward_demodulation,[],[f18595,f109])).
fof(f18595,plain,(
  ( ! [X35,X33,X36,X34] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36))))) ) | $spl310),
  inference(superposition,[],[f18292,f161])).
fof(f18283,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) ) | $spl316),
  inference(cnf_transformation,[],[f18283_D])).
fof(f18283_D,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f18262,plain,(
  ( ! [X21,X20] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) )),
  inference(superposition,[],[f110,f99])).
fof(f18281,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | $spl312),
  inference(cnf_transformation,[],[f18281_D])).
fof(f18281_D,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f18261,plain,(
  ( ! [X19,X18] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) )),
  inference(superposition,[],[f110,f99])).
fof(f18276,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))) ) | $spl306),
  inference(cnf_transformation,[],[f18276_D])).
fof(f18276_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))) ) <=> ~$spl306),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl306])])).
fof(f18260,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X16),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool)))),X17),s('type.HoodMelvilleQueue.status'(X16),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f110,f98])).
fof(f18259,plain,(
  ( ! [X14,X15] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X14),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool)))),X15),s('type.HoodMelvilleQueue.status'(X14),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f110,f96])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f74])).
fof(f18274,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) ) | $spl302),
  inference(cnf_transformation,[],[f18274_D])).
fof(f18274_D,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) ) <=> ~$spl302),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl302])])).
fof(f18258,plain,(
  ( ! [X12,X13] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X12),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool)))),X13),s('type.HoodMelvilleQueue.status'(X12),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f110,f92])).
fof(f18277,plain,(
  ( ! [X8] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,X8))) ) | $spl308),
  inference(cnf_transformation,[],[f18277_D])).
fof(f18277_D,plain,(
  ( ! [X8] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,X8))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f18257,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X11)))) | ~p(s(bool,X11)) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X9),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool)))),X10),s('type.HoodMelvilleQueue.status'(X9),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f110,f88])).
fof(f18256,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0')))) | ~p(s(bool,X8))) )),
  inference(superposition,[],[f110,f88])).
fof(f18275,plain,(
  ( ! [X2] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2))) ) | $spl304),
  inference(cnf_transformation,[],[f18275_D])).
fof(f18275_D,plain,(
  ( ! [X2] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f18255,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X3),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool)))),X4),s('type.HoodMelvilleQueue.status'(X3),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),'const.HoodMelvilleQueue.Finished_0')))) | p(s(bool,X5))) )),
  inference(superposition,[],[f110,f85])).
fof(f18254,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f110,f85])).
fof(f18212,plain,(
  $false | $spl34),
  inference(resolution,[],[f12794,f121])).
fof(f121,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0',aHL_TRUTH)).
fof(f18213,plain,(
  $false | $spl34),
  inference(resolution,[],[f12794,f120])).
fof(f120,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f28])).
fof(f28,axiom,(
  p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.TRUTH')).
fof(f18216,plain,(
  $false | $spl34),
  inference(resolution,[],[f12794,f123])).
fof(f123,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f89])).
fof(f89,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X25] : (s(X6,X25) = s(X6,X25) <=> p(s(bool,'T_0')))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.REFL_CLAUSE')).
fof(f18167,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl300),
  inference(cnf_transformation,[],[f18167_D])).
fof(f18167_D,plain,(
  ( ! [X69,X65] : (s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f18206,plain,(
  ( ! [X66,X69,X65] : (~p(s(bool,X66)) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl46),
  inference(forward_demodulation,[],[f18196,f109])).
fof(f18196,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl46),
  inference(superposition,[],[f12819,f161])).
fof(f18165,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53)) ) | $spl298),
  inference(cnf_transformation,[],[f18165_D])).
fof(f18165_D,plain,(
  ( ! [X53,X49] : (s(bool,X49) = s(bool,X53)) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f18205,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) = s(bool,X53) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl46),
  inference(forward_demodulation,[],[f18194,f109])).
fof(f18194,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52)))) ) | $spl46),
  inference(superposition,[],[f12819,f161])).
fof(f12825,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,X45)) ) | $spl50),
  inference(cnf_transformation,[],[f12825_D])).
fof(f12825_D,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,X45)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f18197,plain,(
  ( ! [X30,X31] : (~p(s(bool,X30)) | s(bool,'T_0') = s(bool,X31)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f18191])).
fof(f18191,plain,(
  ( ! [X30,X31] : (~p(s(bool,X30)) | s(bool,'T_0') = s(bool,X31) | ~p(s(bool,X30))) ) | $spl46),
  inference(superposition,[],[f12819,f96])).
fof(f18198,plain,(
  ( ! [X28,X29] : (~p(s(bool,X28)) | s(bool,'T_0') = s(bool,X29)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f18190])).
fof(f18190,plain,(
  ( ! [X28,X29] : (~p(s(bool,X28)) | s(bool,'T_0') = s(bool,X29) | ~p(s(bool,X28))) ) | $spl46),
  inference(superposition,[],[f12819,f98])).
fof(f18176,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,X16) | ~p(s(bool,X17))) ) | $spl46),
  inference(resolution,[],[f12819,f113])).
fof(f113,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((~p(s(bool,X0)) | ~p(s(bool,'T_0')) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,X0)) & p(s(bool,'T_0')))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : (((~p(s(bool,X0)) | ~p(s(bool,'T_0'))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,X0)) & p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : ((p(s(bool,X0)) & p(s(bool,'T_0'))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X38] : ((p(s(bool,X38)) & p(s(bool,'T_0'))) <=> p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.AND_CLAUSES|split|1')).
fof(f18175,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,X14) | ~p(s(bool,X15))) ) | $spl46),
  inference(resolution,[],[f12819,f118])).
fof(f118,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : ((~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'T_0')) & p(s(bool,X0)))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0] : (((~p(s(bool,'T_0')) | ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'T_0')) & p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : ((p(s(bool,'T_0')) & p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X38] : ((p(s(bool,'T_0')) & p(s(bool,X38))) <=> p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.AND_CLAUSES|split|0')).
fof(f18166,plain,(
  ( ! [X66,X69,X65] : (p(s(bool,X66)) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl42),
  inference(forward_demodulation,[],[f18156,f109])).
fof(f18156,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X67),s(fun('type.list.list'(sK0),bool),X68)))) | s(bool,X69) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X65),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl42),
  inference(superposition,[],[f12815,f161])).
fof(f18164,plain,(
  ( ! [X50,X53,X49] : (s(bool,X49) = s(bool,X53) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl42),
  inference(forward_demodulation,[],[f18154,f109])).
fof(f18154,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X53) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X50),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X51),s(fun('type.list.list'(sK0),bool),X52)))) ) | $spl42),
  inference(superposition,[],[f12815,f161])).
fof(f12822,plain,(
  ( ! [X37] : (s(bool,'F_0') = s(bool,X37)) ) | $spl48),
  inference(cnf_transformation,[],[f12822_D])).
fof(f12822_D,plain,(
  ( ! [X37] : (s(bool,'F_0') = s(bool,X37)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f18157,plain,(
  ( ! [X23,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,X23)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f18147])).
fof(f18147,plain,(
  ( ! [X23,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,X23) | p(s(bool,X22))) ) | $spl42),
  inference(superposition,[],[f12815,f92])).
fof(f18121,plain,(
  $false | $spl58),
  inference(equality_resolution,[],[f12849])).
fof(f18091,plain,(
  ( ! [X80,X81] : (s(bool,'F_0') = s(bool,X81) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X80),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f18068,f109])).
fof(f18068,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X81),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X80),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X82),s(fun('type.list.list'(sK0),bool),X83))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X80),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f92])).
fof(f17281,plain,(
  ( ! [X31] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl180),
  inference(cnf_transformation,[],[f17281_D])).
fof(f17281_D,plain,(
  ( ! [X31] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f18090,plain,(
  ( ! [X66,X67] : (p(s(bool,X66)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f18066,f109])).
fof(f18066,plain,(
  ( ! [X68,X66,X69,X67] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X67),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X68),s(fun('type.list.list'(sK0),bool),X69))))) )),
  inference(superposition,[],[f161,f92])).
fof(f18088,plain,(
  ( ! [X47,X48] : (p(s(bool,X48)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f18007,f109])).
fof(f18007,plain,(
  ( ! [X47,X50,X48,X49] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f92,f161])).
fof(f18087,plain,(
  ( ! [X33,X34] : (s(bool,'F_0') = s(bool,X33) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f18005,f109])).
fof(f18005,plain,(
  ( ! [X35,X33,X36,X34] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36)))) )),
  inference(superposition,[],[f92,f161])).
fof(f18085,plain,(
  ( ! [X47,X48] : (s(bool,'F_0') = s(bool,X48) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f17988,f109])).
fof(f17988,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X49),s(fun('type.list.list'(sK0),bool),X50))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X47),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f92,f161])).
fof(f18084,plain,(
  ( ! [X33,X34] : (p(s(bool,X33)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17986,f109])).
fof(f17986,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36))))) )),
  inference(superposition,[],[f92,f161])).
fof(f17931,plain,(
  ( ! [X45,X46] : (s(bool,'F_0') != s(bool,X46) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f17901,f109])).
fof(f17901,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X46),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X47),s(fun('type.list.list'(sK0),bool),X48))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f91,f161])).
fof(f17317,plain,(
  ( ! [X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl188),
  inference(cnf_transformation,[],[f17317_D])).
fof(f17317_D,plain,(
  ( ! [X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f17930,plain,(
  ( ! [X31,X32] : (~p(s(bool,X31)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17899,f109])).
fof(f17899,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X33),s(fun('type.list.list'(sK0),bool),X34))))) )),
  inference(superposition,[],[f91,f161])).
fof(f17918,plain,(
  ~p(s(bool,'F_0')) | $spl295),
  inference(cnf_transformation,[],[f17918_D])).
fof(f17918_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl295])])).
fof(f17903,plain,(
  ( ! [X12] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X12)) )),
  inference(trivial_inequality_removal,[],[f17896])).
fof(f17896,plain,(
  ( ! [X12] : (s(bool,X12) != s(bool,X12) | ~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f91,f99])).
fof(f17915,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl293),
  inference(cnf_transformation,[],[f17915_D])).
fof(f17915_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl293),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl293])])).
fof(f17928,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X10))) )),
  inference(subsumption_resolution,[],[f17894,f91])).
fof(f17894,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X10)) | s(bool,'F_0') = s(bool,X10)) )),
  inference(superposition,[],[f91,f99])).
fof(f17905,plain,(
  ( ! [X9] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X9))) )),
  inference(duplicate_literal_removal,[],[f17893])).
fof(f17893,plain,(
  ( ! [X9] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X9)) | ~p(s(bool,X9))) )),
  inference(superposition,[],[f91,f98])).
fof(f17906,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X8))) )),
  inference(duplicate_literal_removal,[],[f17892])).
fof(f17892,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X8)) | ~p(s(bool,X8))) )),
  inference(superposition,[],[f91,f96])).
fof(f12849,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,X104)) ) | $spl58),
  inference(cnf_transformation,[],[f12849_D])).
fof(f12849_D,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,X104)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f17927,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,X11) | ~p(s(bool,'F_0'))) )),
  inference(subsumption_resolution,[],[f17885,f95])).
fof(f17885,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,X11) | ~p(s(bool,X11)) | ~p(s(bool,'F_0'))) )),
  inference(superposition,[],[f91,f98])).
fof(f17926,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,X10) | ~p(s(bool,'F_0'))) )),
  inference(subsumption_resolution,[],[f17884,f95])).
fof(f17884,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,X10) | ~p(s(bool,X10)) | ~p(s(bool,'F_0'))) )),
  inference(superposition,[],[f91,f96])).
fof(f17925,plain,(
  ( ! [X8,X9] : (~p(s(bool,X9)) | ~p(s(bool,X8)) | ~p(s(bool,'F_0'))) )),
  inference(subsumption_resolution,[],[f17883,f88])).
fof(f17883,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,X9) | ~p(s(bool,X9)) | ~p(s(bool,X8)) | ~p(s(bool,'F_0'))) )),
  inference(superposition,[],[f91,f88])).
fof(f17924,plain,(
  ( ! [X6,X7] : (~p(s(bool,X7)) | ~p(s(bool,'F_0')) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f17882,f88])).
fof(f17882,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | ~p(s(bool,X7)) | ~p(s(bool,'F_0')) | ~p(s(bool,X6))) )),
  inference(superposition,[],[f91,f88])).
fof(f17917,plain,(
  p(s(bool,'F_0')) | $spl294),
  inference(cnf_transformation,[],[f17917_D])).
fof(f17917_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f17923,plain,(
  ( ! [X2,X3] : (~p(s(bool,X3)) | p(s(bool,X2)) | s(bool,X2) != s(bool,X3)) ) | $spl296),
  inference(cnf_transformation,[],[f17923_D])).
fof(f17923_D,plain,(
  ( ! [X2,X3] : (~p(s(bool,X3)) | p(s(bool,X2)) | s(bool,X2) != s(bool,X3)) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f17881,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | ~p(s(bool,X5)) | p(s(bool,'F_0')) | p(s(bool,X4))) )),
  inference(superposition,[],[f91,f85])).
fof(f17880,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,X3) | ~p(s(bool,X3)) | p(s(bool,X2)) | p(s(bool,'F_0'))) )),
  inference(superposition,[],[f91,f85])).
fof(f17922,plain,(
  ( ! [X45,X46] : (~p(s(bool,X46)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17878,f109])).
fof(f17878,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X46),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X47),s(fun('type.list.list'(sK0),bool),X48)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X45),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f91,f161])).
fof(f17921,plain,(
  ( ! [X31,X32] : (s(bool,'F_0') != s(bool,X31) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f17876,f109])).
fof(f17876,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X32),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X33),s(fun('type.list.list'(sK0),bool),X34)))) )),
  inference(superposition,[],[f91,f161])).
fof(f17909,plain,(
  ( ! [X15] : (~p(s(bool,X15)) | s(bool,'T_0') != s(bool,'F_0')) )),
  inference(duplicate_literal_removal,[],[f17873])).
fof(f17873,plain,(
  ( ! [X15] : (~p(s(bool,X15)) | s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X15))) )),
  inference(superposition,[],[f91,f96])).
fof(f17910,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'T_0') != s(bool,'F_0')) )),
  inference(duplicate_literal_removal,[],[f17872])).
fof(f17872,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X14))) )),
  inference(superposition,[],[f91,f98])).
fof(f17919,plain,(
  ( ! [X13] : (~p(s(bool,X13)) | s(bool,'T_0') != s(bool,'F_0')) )),
  inference(subsumption_resolution,[],[f17871,f91])).
fof(f17871,plain,(
  ( ! [X13] : (~p(s(bool,X13)) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f91,f99])).
fof(f17916,plain,(
  ( ! [X11] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f17869,f99])).
fof(f17869,plain,(
  ( ! [X11] : (~p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f91,f99])).
fof(f17860,plain,(
  ( ! [X7] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X7))) )),
  inference(resolution,[],[f91,f113])).
fof(f17859,plain,(
  ( ! [X6] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X6))) )),
  inference(resolution,[],[f91,f118])).
fof(f17850,plain,(
  $false | $spl54),
  inference(equality_resolution,[],[f12839])).
fof(f17826,plain,(
  $false | ($spl30 | $spl186)),
  inference(subsumption_resolution,[],[f17301,f12790])).
fof(f17807,plain,(
  $false | $spl50),
  inference(subsumption_resolution,[],[f17806,f12825])).
fof(f17806,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0)) ) | $spl50),
  inference(subsumption_resolution,[],[f17704,f97])).
fof(f97,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f75])).
fof(f17704,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl50),
  inference(backward_demodulation,[],[f12825,f91])).
fof(f17805,plain,(
  $false | $spl50),
  inference(subsumption_resolution,[],[f17804,f12825])).
fof(f17804,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0)) ) | $spl50),
  inference(subsumption_resolution,[],[f17702,f97])).
fof(f17702,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl50),
  inference(backward_demodulation,[],[f12825,f93])).
fof(f93,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X38] : (s(bool,'F_0') = s(bool,X38) <=> ~p(s(bool,X38)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.bool.EQ_CLAUSES|split|3')).
fof(f17699,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17698,f12822])).
fof(f17698,plain,(
  ( ! [X21] : (s(bool,'F_0') != s(bool,X21)) ) | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17639,f12790])).
fof(f17639,plain,(
  ( ! [X21] : (~p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X21)) ) | $spl48),
  inference(superposition,[],[f93,f12822])).
fof(f17697,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17666,f12790])).
fof(f17666,plain,(
  ( ! [X20] : (~p(s(bool,X20))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f17638])).
fof(f17638,plain,(
  ( ! [X20] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,X20))) ) | $spl48),
  inference(superposition,[],[f93,f12822])).
fof(f17696,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17695,f12822])).
fof(f17695,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,X17)) ) | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17636,f12790])).
fof(f17636,plain,(
  ( ! [X17] : (~p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X17)) ) | $spl48),
  inference(superposition,[],[f91,f12822])).
fof(f17694,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17667,f12790])).
fof(f17667,plain,(
  ( ! [X16] : (~p(s(bool,X16))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f17635])).
fof(f17635,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,X16))) ) | $spl48),
  inference(superposition,[],[f91,f12822])).
fof(f17687,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17668,f12790])).
fof(f17668,plain,(
  ( ! [X31] : (~p(s(bool,X31))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f17610])).
fof(f17610,plain,(
  ( ! [X31] : (~p(s(bool,X31)) | s(bool,'F_0') != s(bool,'F_0')) ) | $spl48),
  inference(superposition,[],[f93,f12822])).
fof(f17686,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17669,f12790])).
fof(f17669,plain,(
  ~p(s(bool,'F_0')) | $spl48),
  inference(trivial_inequality_removal,[],[f17609])).
fof(f17609,plain,(
  ( ! [X30] : (s(bool,X30) != s(bool,X30) | ~p(s(bool,'F_0'))) ) | $spl48),
  inference(superposition,[],[f93,f12822])).
fof(f17685,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17670,f12790])).
fof(f17670,plain,(
  ( ! [X27] : (~p(s(bool,X27))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f17607])).
fof(f17607,plain,(
  ( ! [X27] : (~p(s(bool,X27)) | s(bool,'F_0') != s(bool,'F_0')) ) | $spl48),
  inference(superposition,[],[f91,f12822])).
fof(f17684,plain,(
  $false | ($spl30 | $spl48)),
  inference(subsumption_resolution,[],[f17671,f12790])).
fof(f17671,plain,(
  ~p(s(bool,'F_0')) | $spl48),
  inference(trivial_inequality_removal,[],[f17606])).
fof(f17606,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,X26) | ~p(s(bool,'F_0'))) ) | $spl48),
  inference(superposition,[],[f91,f12822])).
fof(f17563,plain,(
  $false | ($spl30 | $spl34)),
  inference(subsumption_resolution,[],[f12794,f12790])).
fof(f17492,plain,(
  ( ! [X2437] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2437),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl282),
  inference(cnf_transformation,[],[f17492_D])).
fof(f17492_D,plain,(
  ( ! [X2437] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2437),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f12882,plain,(
  ( ! [X1824,X1831,X1829,X1830,X1828] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1828),s('type.list.list'(sK0),X1824),s('type.list.list'(sK0),X1829),s('type.list.list'(sK0),X1830),s('type.list.list'(sK0),X1831)))) ) | $spl86),
  inference(cnf_transformation,[],[f12882_D])).
fof(f12882_D,plain,(
  ( ! [X1824,X1831,X1829,X1830,X1828] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1828),s('type.list.list'(sK0),X1824),s('type.list.list'(sK0),X1829),s('type.list.list'(sK0),X1830),s('type.list.list'(sK0),X1831)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f17511,plain,(
  ( ! [X4306,X4312,X4311,X4307,X4313,X4310] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4310),s('type.list.list'(sK0),X4311),s('type.list.list'(sK0),X4312),s('type.list.list'(sK0),X4313),s('type.list.list'(sK0),X4307))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4306),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f17188,f109])).
fof(f17188,plain,(
  ( ! [X4308,X4306,X4312,X4311,X4309,X4307,X4313,X4310] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4310),s('type.list.list'(sK0),X4311),s('type.list.list'(sK0),X4312),s('type.list.list'(sK0),X4313),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4307),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4306),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4308),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4309))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4306),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f16026,f161])).
fof(f16026,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X4)))) )),
  inference(superposition,[],[f157,f84])).
fof(f157,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X54)))) )),
  inference(superposition,[],[f84,f105])).
fof(f105,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X5) = s('type.list.list'(X0),X10) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) | (s('type.num.num',X1) = s('type.num.num',X6) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X7) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),X8) & s('type.list.list'(X0),X4) = s('type.list.list'(X0),X9) & s('type.list.list'(X0),X5) = s('type.list.list'(X0),X10))) & (s('type.num.num',X1) != s('type.num.num',X6) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X7) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),X8) | s('type.list.list'(X0),X4) != s('type.list.list'(X0),X9) | s('type.list.list'(X0),X5) != s('type.list.list'(X0),X10) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) | (s('type.num.num',X1) = s('type.num.num',X6) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X7) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),X8) & s('type.list.list'(X0),X4) = s('type.list.list'(X0),X9) & s('type.list.list'(X0),X5) = s('type.list.list'(X0),X10))) & ((s('type.num.num',X1) != s('type.num.num',X6) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X7) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),X8) | s('type.list.list'(X0),X4) != s('type.list.list'(X0),X9) | s('type.list.list'(X0),X5) != s('type.list.list'(X0),X10)) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) <=> (s('type.num.num',X1) = s('type.num.num',X6) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X7) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),X8) & s('type.list.list'(X0),X4) = s('type.list.list'(X0),X9) & s('type.list.list'(X0),X5) = s('type.list.list'(X0),X10)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) <=> (s('type.num.num',X1) = s('type.num.num',X6) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X7) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),X8) & s('type.list.list'(X0),X4) = s('type.list.list'(X0),X9) & s('type.list.list'(X0),X5) = s('type.list.list'(X0),X10)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X11,X10,X9,X8,X7,X17,X18,X19,X20,X21] : (s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X11),s('type.list.list'(X6),X10),s('type.list.list'(X6),X9),s('type.list.list'(X6),X8),s('type.list.list'(X6),X7))) = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X17),s('type.list.list'(X6),X18),s('type.list.list'(X6),X19),s('type.list.list'(X6),X20),s('type.list.list'(X6),X21))) <=> (s('type.num.num',X11) = s('type.num.num',X17) & s('type.list.list'(X6),X10) = s('type.list.list'(X6),X18) & s('type.list.list'(X6),X9) = s('type.list.list'(X6),X19) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X20) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),X21)))),
  file('thm.HoodMelvilleQueue.status_distinct|split|0','thm.HoodMelvilleQueue.status_|49||49||split|0')).
fof(f17487,plain,(
  ( ! [X2101] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl280),
  inference(cnf_transformation,[],[f17487_D])).
fof(f17487_D,plain,(
  ( ! [X2101] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f17510,plain,(
  ( ! [X4270,X4266,X4272,X4271,X4267,X4273] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4270),s('type.list.list'(sK0),X4271),s('type.list.list'(sK0),X4272),s('type.list.list'(sK0),X4267),s('type.list.list'(sK0),X4273))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4266),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17183,f109])).
fof(f17183,plain,(
  ( ! [X4270,X4268,X4266,X4272,X4271,X4269,X4267,X4273] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4270),s('type.list.list'(sK0),X4271),s('type.list.list'(sK0),X4272),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4267),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4266),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4268),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4269))),s('type.list.list'(sK0),X4273))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4266),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f15439,f161])).
fof(f15439,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f147,f84])).
fof(f147,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f104])).
fof(f104,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X4) = s('type.list.list'(X0),X9) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f17478,plain,(
  ( ! [X1765] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1765),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl270),
  inference(cnf_transformation,[],[f17478_D])).
fof(f17478_D,plain,(
  ( ! [X1765] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1765),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f17509,plain,(
  ( ! [X3864,X3863,X3859,X3865,X3862,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3862),s('type.list.list'(sK0),X3863),s('type.list.list'(sK0),X3859),s('type.list.list'(sK0),X3864),s('type.list.list'(sK0),X3865))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17141,f109])).
fof(f17141,plain,(
  ( ! [X3864,X3863,X3861,X3859,X3865,X3862,X3860,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3862),s('type.list.list'(sK0),X3863),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3859),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3860),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3861))),s('type.list.list'(sK0),X3864),s('type.list.list'(sK0),X3865))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f7589,f161])).
fof(f7589,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f137,f84])).
fof(f137,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f103])).
fof(f103,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),X8) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f17354,plain,(
  ( ! [X1676,X1681,X1683,X1685,X1679,X1680,X1682,X1684,X1686] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),X1681),s('type.list.list'(sK0),X1682),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1676),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl210),
  inference(cnf_transformation,[],[f17354_D])).
fof(f17354_D,plain,(
  ( ! [X1676,X1681,X1683,X1685,X1679,X1680,X1682,X1684,X1686] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),X1681),s('type.list.list'(sK0),X1682),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1676),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f17508,plain,(
  ( ! [X3290,X3288,X3294,X3292,X3281,X3287,X3285,X3291,X3289,X3295,X3293,X3280,X3286,X3284] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3284),s('type.list.list'(sK0),X3285),s('type.list.list'(sK0),X3281),s('type.list.list'(sK0),X3286),s('type.list.list'(sK0),X3287))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3288),s('type.list.list'(sK0),X3289),s('type.list.list'(sK0),X3290),s('type.list.list'(sK0),X3291),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3292),s('type.list.list'(sK0),X3293),s('type.list.list'(sK0),X3294),s('type.list.list'(sK0),X3295),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3280),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl2),
  inference(forward_demodulation,[],[f17080,f109])).
fof(f17080,plain,(
  ( ! [X3290,X3288,X3294,X3292,X3283,X3281,X3287,X3285,X3291,X3289,X3295,X3293,X3282,X3280,X3286,X3284] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3284),s('type.list.list'(sK0),X3285),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3281),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3280),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3282),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3283))),s('type.list.list'(sK0),X3286),s('type.list.list'(sK0),X3287))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3288),s('type.list.list'(sK0),X3289),s('type.list.list'(sK0),X3290),s('type.list.list'(sK0),X3291),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3292),s('type.list.list'(sK0),X3293),s('type.list.list'(sK0),X3294),s('type.list.list'(sK0),X3295),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3280),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl2),
  inference(superposition,[],[f1005,f161])).
fof(f1005,plain,(
  ( ! [X80,X90,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X79),s('type.list.list'(sK0),X80),s('type.list.list'(sK0),X78),s('type.list.list'(sK0),X81),s('type.list.list'(sK0),X82))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X83),s('type.list.list'(sK0),X84),s('type.list.list'(sK0),X85),s('type.list.list'(sK0),X86),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X87),s('type.list.list'(sK0),X88),s('type.list.list'(sK0),X89),s('type.list.list'(sK0),X90),s('type.list.list'(sK0),X78)))) ) | $spl2),
  inference(superposition,[],[f980,f105])).
fof(f17352,plain,(
  ( ! [X1600,X1602,X1592,X1596,X1598,X1601,X1595,X1597,X1599] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1595),s('type.list.list'(sK0),X1596),s('type.list.list'(sK0),X1597),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1598))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1599),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1601),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1592),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1602)))) ) | $spl208),
  inference(cnf_transformation,[],[f17352_D])).
fof(f17352_D,plain,(
  ( ! [X1600,X1602,X1592,X1596,X1598,X1601,X1595,X1597,X1599] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1595),s('type.list.list'(sK0),X1596),s('type.list.list'(sK0),X1597),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1598))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1599),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1601),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1592),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1602)))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f17507,plain,(
  ( ! [X3169,X3175,X3173,X3179,X3177,X3183,X3181,X3168,X3174,X3172,X3178,X3176,X3182,X3180] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3172),s('type.list.list'(sK0),X3173),s('type.list.list'(sK0),X3169),s('type.list.list'(sK0),X3174),s('type.list.list'(sK0),X3175))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3176),s('type.list.list'(sK0),X3177),s('type.list.list'(sK0),X3178),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3179))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3180),s('type.list.list'(sK0),X3181),s('type.list.list'(sK0),X3182),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3168),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3183)))) ) | $spl2),
  inference(forward_demodulation,[],[f17073,f109])).
fof(f17073,plain,(
  ( ! [X3171,X3169,X3175,X3173,X3179,X3177,X3183,X3181,X3170,X3168,X3174,X3172,X3178,X3176,X3182,X3180] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3172),s('type.list.list'(sK0),X3173),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3169),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3168),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3170),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3171))),s('type.list.list'(sK0),X3174),s('type.list.list'(sK0),X3175))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3176),s('type.list.list'(sK0),X3177),s('type.list.list'(sK0),X3178),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3179))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3180),s('type.list.list'(sK0),X3181),s('type.list.list'(sK0),X3182),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3168),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3183)))) ) | $spl2),
  inference(superposition,[],[f1003,f161])).
fof(f1003,plain,(
  ( ! [X61,X59,X57,X64,X54,X52,X62,X60,X58,X56,X55,X53,X63] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X53),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),X52),s('type.list.list'(sK0),X55),s('type.list.list'(sK0),X56))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),X59),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X60))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X63),s('type.list.list'(sK0),X52),s('type.list.list'(sK0),X64)))) ) | $spl2),
  inference(superposition,[],[f980,f104])).
fof(f17350,plain,(
  ( ! [X1513,X1515,X1517,X1511,X1512,X1514,X1516,X1518,X1508] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1513),s('type.list.list'(sK0),X1514))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1515),s('type.list.list'(sK0),X1516),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1508),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1517),s('type.list.list'(sK0),X1518)))) ) | $spl206),
  inference(cnf_transformation,[],[f17350_D])).
fof(f17350_D,plain,(
  ( ! [X1513,X1515,X1517,X1511,X1512,X1514,X1516,X1518,X1508] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1513),s('type.list.list'(sK0),X1514))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1515),s('type.list.list'(sK0),X1516),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1508),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1517),s('type.list.list'(sK0),X1518)))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f17506,plain,(
  ( ! [X3105,X3111,X3109,X3115,X3113,X3119,X3117,X3104,X3110,X3108,X3114,X3112,X3118,X3116] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3108),s('type.list.list'(sK0),X3109),s('type.list.list'(sK0),X3105),s('type.list.list'(sK0),X3110),s('type.list.list'(sK0),X3111))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3112),s('type.list.list'(sK0),X3113),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3114),s('type.list.list'(sK0),X3115))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3116),s('type.list.list'(sK0),X3117),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3104),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3118),s('type.list.list'(sK0),X3119)))) ) | $spl2),
  inference(forward_demodulation,[],[f17069,f109])).
fof(f17069,plain,(
  ( ! [X3107,X3105,X3111,X3109,X3115,X3113,X3119,X3117,X3106,X3104,X3110,X3108,X3114,X3112,X3118,X3116] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3108),s('type.list.list'(sK0),X3109),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3105),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3104),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3106),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3107))),s('type.list.list'(sK0),X3110),s('type.list.list'(sK0),X3111))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3112),s('type.list.list'(sK0),X3113),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3114),s('type.list.list'(sK0),X3115))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3116),s('type.list.list'(sK0),X3117),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3104),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3118),s('type.list.list'(sK0),X3119)))) ) | $spl2),
  inference(superposition,[],[f1001,f161])).
fof(f1001,plain,(
  ( ! [X30,X28,X26,X37,X35,X33,X31,X29,X27,X38,X36,X34,X32] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X27),s('type.list.list'(sK0),X28),s('type.list.list'(sK0),X26),s('type.list.list'(sK0),X29),s('type.list.list'(sK0),X30))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X31),s('type.list.list'(sK0),X32),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X33),s('type.list.list'(sK0),X34))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X35),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X26),s('type.list.list'(sK0),X37),s('type.list.list'(sK0),X38)))) ) | $spl2),
  inference(superposition,[],[f980,f103])).
fof(f17347,plain,(
  ( ! [X1434,X1428,X1430,X1424,X1433,X1427,X1429,X1431,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1427),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1428),s('type.list.list'(sK0),X1429),s('type.list.list'(sK0),X1430))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1431),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1424),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1432),s('type.list.list'(sK0),X1433),s('type.list.list'(sK0),X1434)))) ) | $spl202),
  inference(cnf_transformation,[],[f17347_D])).
fof(f17347_D,plain,(
  ( ! [X1434,X1428,X1430,X1424,X1433,X1427,X1429,X1431,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1427),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1428),s('type.list.list'(sK0),X1429),s('type.list.list'(sK0),X1430))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1431),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1424),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1432),s('type.list.list'(sK0),X1433),s('type.list.list'(sK0),X1434)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f17505,plain,(
  ( ! [X3041,X3047,X3045,X3051,X3049,X3055,X3053,X3040,X3046,X3044,X3050,X3048,X3054,X3052] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3044),s('type.list.list'(sK0),X3045),s('type.list.list'(sK0),X3041),s('type.list.list'(sK0),X3046),s('type.list.list'(sK0),X3047))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3048),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3049),s('type.list.list'(sK0),X3050),s('type.list.list'(sK0),X3051))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3052),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3053),s('type.list.list'(sK0),X3054),s('type.list.list'(sK0),X3055)))) ) | $spl2),
  inference(forward_demodulation,[],[f17065,f109])).
fof(f17065,plain,(
  ( ! [X3043,X3041,X3047,X3045,X3051,X3049,X3055,X3053,X3042,X3040,X3046,X3044,X3050,X3048,X3054,X3052] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3044),s('type.list.list'(sK0),X3045),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3041),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3042),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3043))),s('type.list.list'(sK0),X3046),s('type.list.list'(sK0),X3047))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3048),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3049),s('type.list.list'(sK0),X3050),s('type.list.list'(sK0),X3051))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3052),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3053),s('type.list.list'(sK0),X3054),s('type.list.list'(sK0),X3055)))) ) | $spl2),
  inference(superposition,[],[f999,f161])).
fof(f999,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X9),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X10),s('type.list.list'(sK0),X11),s('type.list.list'(sK0),X12)))) ) | $spl2),
  inference(superposition,[],[f980,f102])).
fof(f102,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),X7) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f17473,plain,(
  ( ! [X1429] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1429),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl268),
  inference(cnf_transformation,[],[f17473_D])).
fof(f17473_D,plain,(
  ( ! [X1429] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1429),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f17504,plain,(
  ( ! [X3012,X3018,X3016,X3011,X3015,X3017] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3015),s('type.list.list'(sK0),X3012),s('type.list.list'(sK0),X3016),s('type.list.list'(sK0),X3017),s('type.list.list'(sK0),X3018))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3011),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17061,f109])).
fof(f17061,plain,(
  ( ! [X3014,X3012,X3018,X3016,X3011,X3015,X3013,X3017] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3015),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3012),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3011),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3013),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3014))),s('type.list.list'(sK0),X3016),s('type.list.list'(sK0),X3017),s('type.list.list'(sK0),X3018))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3011),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f757,f161])).
fof(f757,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f127,f84])).
fof(f127,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f102])).
fof(f17503,plain,(
  ( ! [X2917] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2917),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl290),
  inference(cnf_transformation,[],[f17503_D])).
fof(f17503_D,plain,(
  ( ! [X2917] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2917),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f17502,plain,(
  ( ! [X2917,X2923,X2921,X2918,X2922,X2924] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2921),s('type.list.list'(sK0),X2922),s('type.list.list'(sK0),X2923),s('type.list.list'(sK0),X2924),s('type.list.list'(sK0),X2918))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2917),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17048,f109])).
fof(f17048,plain,(
  ( ! [X2919,X2917,X2923,X2921,X2918,X2922,X2920,X2924] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2921),s('type.list.list'(sK0),X2922),s('type.list.list'(sK0),X2923),s('type.list.list'(sK0),X2924),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2918),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2917),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2919),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2920))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2917),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f170,f161])).
fof(f170,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X45),s('type.list.list'(sK0),X46),s('type.list.list'(sK0),X47),s('type.list.list'(sK0),X48),s('type.list.list'(sK0),X49))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),X49)) )),
  inference(superposition,[],[f105,f84])).
fof(f17501,plain,(
  ( ! [X2877] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl288),
  inference(cnf_transformation,[],[f17501_D])).
fof(f17501_D,plain,(
  ( ! [X2877] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f17500,plain,(
  ( ! [X2877,X2882,X2884,X2878,X2883,X2881] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2881),s('type.list.list'(sK0),X2882),s('type.list.list'(sK0),X2883),s('type.list.list'(sK0),X2878),s('type.list.list'(sK0),X2884))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17043,f109])).
fof(f17043,plain,(
  ( ! [X2877,X2882,X2880,X2884,X2878,X2883,X2881,X2879] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2881),s('type.list.list'(sK0),X2882),s('type.list.list'(sK0),X2883),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2878),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2877),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2879),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2880))),s('type.list.list'(sK0),X2884))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f168,f161])).
fof(f168,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X35),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),X38)) )),
  inference(superposition,[],[f104,f84])).
fof(f17499,plain,(
  ( ! [X2845] : (s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2845),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl286),
  inference(cnf_transformation,[],[f17499_D])).
fof(f17499_D,plain,(
  ( ! [X2845] : (s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2845),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f17498,plain,(
  ( ! [X2851,X2849,X2850,X2845,X2852,X2846] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2849),s('type.list.list'(sK0),X2850),s('type.list.list'(sK0),X2846),s('type.list.list'(sK0),X2851),s('type.list.list'(sK0),X2852))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2845),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17039,f109])).
fof(f17039,plain,(
  ( ! [X2851,X2849,X2847,X2850,X2845,X2848,X2852,X2846] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2849),s('type.list.list'(sK0),X2850),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2846),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2845),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2847),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2848))),s('type.list.list'(sK0),X2851),s('type.list.list'(sK0),X2852))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2845),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f166,f161])).
fof(f166,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X25),s('type.list.list'(sK0),X26),s('type.list.list'(sK0),X27),s('type.list.list'(sK0),X28),s('type.list.list'(sK0),X29))) | s('type.list.list'(sK0),sK3) = s('type.list.list'(sK0),X27)) )),
  inference(superposition,[],[f103,f84])).
fof(f17497,plain,(
  ( ! [X2805] : (s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2805),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl284),
  inference(cnf_transformation,[],[f17497_D])).
fof(f17497_D,plain,(
  ( ! [X2805] : (s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2805),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f17496,plain,(
  ( ! [X2809,X2811,X2806,X2812,X2810,X2805] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2809),s('type.list.list'(sK0),X2806),s('type.list.list'(sK0),X2810),s('type.list.list'(sK0),X2811),s('type.list.list'(sK0),X2812))) | s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2805),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f17034,f109])).
fof(f17034,plain,(
  ( ! [X2809,X2811,X2806,X2812,X2808,X2810,X2805,X2807] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2809),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2806),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2805),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2807),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2808))),s('type.list.list'(sK0),X2810),s('type.list.list'(sK0),X2811),s('type.list.list'(sK0),X2812))) | s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2805),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f164,f161])).
fof(f164,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X15),s('type.list.list'(sK0),X16),s('type.list.list'(sK0),X17),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X19))) | s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),X16)) )),
  inference(superposition,[],[f102,f84])).
fof(f13027,plain,(
  ( ! [X2954,X2952,X2958,X2956,X2949,X2955,X2953,X2959,X2957] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),X2954),s('type.list.list'(sK0),X2955),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2956),s('type.list.list'(sK0),X2957),s('type.list.list'(sK0),X2958),s('type.list.list'(sK0),X2959),s('type.list.list'(sK0),X2949)))) ) | $spl170),
  inference(cnf_transformation,[],[f13027_D])).
fof(f13027_D,plain,(
  ( ! [X2954,X2952,X2958,X2956,X2949,X2955,X2953,X2959,X2957] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),X2954),s('type.list.list'(sK0),X2955),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2956),s('type.list.list'(sK0),X2957),s('type.list.list'(sK0),X2958),s('type.list.list'(sK0),X2959),s('type.list.list'(sK0),X2949)))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f17495,plain,(
  ( ! [X2693,X2695,X2689,X2697,X2699,X2694,X2690,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2697),s('type.list.list'(sK0),X2698),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),X2690))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2689),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f17023,f109])).
fof(f17023,plain,(
  ( ! [X2693,X2695,X2689,X2691,X2697,X2699,X2692,X2694,X2690,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2697),s('type.list.list'(sK0),X2698),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2690),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2689),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2691),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2692))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2689),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f157,f161])).
fof(f13025,plain,(
  ( ! [X2870,X2868,X2874,X2872,X2865,X2871,X2869,X2875,X2873] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2868),s('type.list.list'(sK0),X2869),s('type.list.list'(sK0),X2870),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2871))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2872),s('type.list.list'(sK0),X2873),s('type.list.list'(sK0),X2874),s('type.list.list'(sK0),X2865),s('type.list.list'(sK0),X2875)))) ) | $spl168),
  inference(cnf_transformation,[],[f13025_D])).
fof(f13025_D,plain,(
  ( ! [X2870,X2868,X2874,X2872,X2865,X2871,X2869,X2875,X2873] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2868),s('type.list.list'(sK0),X2869),s('type.list.list'(sK0),X2870),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2871))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2872),s('type.list.list'(sK0),X2873),s('type.list.list'(sK0),X2874),s('type.list.list'(sK0),X2865),s('type.list.list'(sK0),X2875)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f17494,plain,(
  ( ! [X2606,X2612,X2614,X2610,X2616,X2605,X2613,X2615,X2609,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2609),s('type.list.list'(sK0),X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2612))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2613),s('type.list.list'(sK0),X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),X2606),s('type.list.list'(sK0),X2616))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2605),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f17016,f109])).
fof(f17016,plain,(
  ( ! [X2606,X2612,X2614,X2608,X2610,X2616,X2605,X2607,X2613,X2615,X2609,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2609),s('type.list.list'(sK0),X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2612))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2613),s('type.list.list'(sK0),X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2606),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2605),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2607),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2608))),s('type.list.list'(sK0),X2616))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2605),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f155,f161])).
fof(f155,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X36)))) )),
  inference(superposition,[],[f84,f104])).
fof(f13023,plain,(
  ( ! [X2788,X2790,X2784,X2786,X2781,X2789,X2791,X2785,X2787] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2784),s('type.list.list'(sK0),X2785),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2786),s('type.list.list'(sK0),X2787))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2788),s('type.list.list'(sK0),X2789),s('type.list.list'(sK0),X2781),s('type.list.list'(sK0),X2790),s('type.list.list'(sK0),X2791)))) ) | $spl166),
  inference(cnf_transformation,[],[f13023_D])).
fof(f13023_D,plain,(
  ( ! [X2788,X2790,X2784,X2786,X2781,X2789,X2791,X2785,X2787] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2784),s('type.list.list'(sK0),X2785),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2786),s('type.list.list'(sK0),X2787))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2788),s('type.list.list'(sK0),X2789),s('type.list.list'(sK0),X2781),s('type.list.list'(sK0),X2790),s('type.list.list'(sK0),X2791)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f17493,plain,(
  ( ! [X2531,X2526,X2522,X2532,X2528,X2530,X2525,X2527,X2521,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2525),s('type.list.list'(sK0),X2526),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2529),s('type.list.list'(sK0),X2530),s('type.list.list'(sK0),X2522),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2521),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f17009,f109])).
fof(f17009,plain,(
  ( ! [X2524,X2526,X2531,X2522,X2532,X2528,X2530,X2525,X2527,X2521,X2523,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2525),s('type.list.list'(sK0),X2526),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2529),s('type.list.list'(sK0),X2530),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2522),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2521),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2523),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2524))),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2521),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f153,f161])).
fof(f153,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X18)))) )),
  inference(superposition,[],[f84,f103])).
fof(f13021,plain,(
  ( ! [X2704,X2706,X2701,X2703,X2697,X2705,X2707,X2700,X2702] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2700),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2701),s('type.list.list'(sK0),X2702),s('type.list.list'(sK0),X2703))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2704),s('type.list.list'(sK0),X2697),s('type.list.list'(sK0),X2705),s('type.list.list'(sK0),X2706),s('type.list.list'(sK0),X2707)))) ) | $spl164),
  inference(cnf_transformation,[],[f13021_D])).
fof(f13021_D,plain,(
  ( ! [X2704,X2706,X2701,X2703,X2697,X2705,X2707,X2700,X2702] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2700),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2701),s('type.list.list'(sK0),X2702),s('type.list.list'(sK0),X2703))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2704),s('type.list.list'(sK0),X2697),s('type.list.list'(sK0),X2705),s('type.list.list'(sK0),X2706),s('type.list.list'(sK0),X2707)))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f17491,plain,(
  ( ! [X2448,X2445,X2447,X2441,X2443,X2437,X2444,X2446,X2442,X2438] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2441),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),X2444))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2445),s('type.list.list'(sK0),X2438),s('type.list.list'(sK0),X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),X2448))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2437),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f17002,f109])).
fof(f17002,plain,(
  ( ! [X2448,X2445,X2447,X2441,X2443,X2437,X2439,X2444,X2446,X2440,X2442,X2438] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2441),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),X2444))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2445),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2438),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2437),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2439),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2440))),s('type.list.list'(sK0),X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),X2448))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2437),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f151,f161])).
fof(f151,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X0)))) )),
  inference(superposition,[],[f84,f102])).
fof(f12893,plain,(
  ( ! [X1932,X1930,X1928,X1926,X1931,X1929,X1927,X1925,X1921] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1925),s('type.list.list'(sK0),X1926),s('type.list.list'(sK0),X1927),s('type.list.list'(sK0),X1928),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1929),s('type.list.list'(sK0),X1930),s('type.list.list'(sK0),X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1921)))) ) | $spl98),
  inference(cnf_transformation,[],[f12893_D])).
fof(f12893_D,plain,(
  ( ! [X1932,X1930,X1928,X1926,X1931,X1929,X1927,X1925,X1921] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1925),s('type.list.list'(sK0),X1926),s('type.list.list'(sK0),X1927),s('type.list.list'(sK0),X1928),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1929),s('type.list.list'(sK0),X1930),s('type.list.list'(sK0),X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1921)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f17490,plain,(
  ( ! [X2361,X2363,X2357,X2359,X2353,X2364,X2360,X2362,X2358,X2354] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2361),s('type.list.list'(sK0),X2362),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),X2354))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2353),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16995,f109])).
fof(f16995,plain,(
  ( ! [X2361,X2363,X2357,X2359,X2353,X2355,X2364,X2360,X2362,X2356,X2358,X2354] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2361),s('type.list.list'(sK0),X2362),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2354),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2353),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2355),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2356))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2353),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f149,f161])).
fof(f149,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f105])).
fof(f12891,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1909,X1920,X1918,X1916,X1914] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1913),s('type.list.list'(sK0),X1914),s('type.list.list'(sK0),X1915),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1916))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1917),s('type.list.list'(sK0),X1918),s('type.list.list'(sK0),X1919),s('type.list.list'(sK0),X1909),s('type.list.list'(sK0),X1920)))) ) | $spl96),
  inference(cnf_transformation,[],[f12891_D])).
fof(f12891_D,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1909,X1920,X1918,X1916,X1914] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1913),s('type.list.list'(sK0),X1914),s('type.list.list'(sK0),X1915),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1916))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1917),s('type.list.list'(sK0),X1918),s('type.list.list'(sK0),X1919),s('type.list.list'(sK0),X1909),s('type.list.list'(sK0),X1920)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f17489,plain,(
  ( ! [X2276,X2274,X2270,X2279,X2277,X2275,X2273,X2269,X2280,X2278] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2273),s('type.list.list'(sK0),X2274),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2276))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2277),s('type.list.list'(sK0),X2278),s('type.list.list'(sK0),X2279),s('type.list.list'(sK0),X2270),s('type.list.list'(sK0),X2280))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16988,f109])).
fof(f16988,plain,(
  ( ! [X2276,X2274,X2270,X2272,X2279,X2277,X2275,X2273,X2269,X2271,X2280,X2278] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2273),s('type.list.list'(sK0),X2274),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2276))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2277),s('type.list.list'(sK0),X2278),s('type.list.list'(sK0),X2279),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2270),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2271),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2272))),s('type.list.list'(sK0),X2280))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f147,f161])).
fof(f12889,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1897,X1908,X1906,X1904,X1902] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1901),s('type.list.list'(sK0),X1902),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1903),s('type.list.list'(sK0),X1904))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1905),s('type.list.list'(sK0),X1906),s('type.list.list'(sK0),X1897),s('type.list.list'(sK0),X1907),s('type.list.list'(sK0),X1908)))) ) | $spl94),
  inference(cnf_transformation,[],[f12889_D])).
fof(f12889_D,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1897,X1908,X1906,X1904,X1902] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1901),s('type.list.list'(sK0),X1902),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1903),s('type.list.list'(sK0),X1904))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1905),s('type.list.list'(sK0),X1906),s('type.list.list'(sK0),X1897),s('type.list.list'(sK0),X1907),s('type.list.list'(sK0),X1908)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f17488,plain,(
  ( ! [X2196,X2194,X2192,X2190,X2186,X2195,X2193,X2191,X2189,X2185] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2189),s('type.list.list'(sK0),X2190),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2191),s('type.list.list'(sK0),X2192))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2193),s('type.list.list'(sK0),X2194),s('type.list.list'(sK0),X2186),s('type.list.list'(sK0),X2195),s('type.list.list'(sK0),X2196))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2185),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16981,f109])).
fof(f16981,plain,(
  ( ! [X2196,X2194,X2192,X2190,X2188,X2186,X2195,X2193,X2191,X2189,X2187,X2185] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2189),s('type.list.list'(sK0),X2190),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2191),s('type.list.list'(sK0),X2192))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2193),s('type.list.list'(sK0),X2194),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2186),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2185),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2187),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2188))),s('type.list.list'(sK0),X2195),s('type.list.list'(sK0),X2196))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2185),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f145,f161])).
fof(f145,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f103])).
fof(f12887,plain,(
  ( ! [X1895,X1893,X1891,X1889,X1885,X1896,X1894,X1892,X1890] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1889),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1890),s('type.list.list'(sK0),X1891),s('type.list.list'(sK0),X1892))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1893),s('type.list.list'(sK0),X1885),s('type.list.list'(sK0),X1894),s('type.list.list'(sK0),X1895),s('type.list.list'(sK0),X1896)))) ) | $spl92),
  inference(cnf_transformation,[],[f12887_D])).
fof(f12887_D,plain,(
  ( ! [X1895,X1893,X1891,X1889,X1885,X1896,X1894,X1892,X1890] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1889),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1890),s('type.list.list'(sK0),X1891),s('type.list.list'(sK0),X1892))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1893),s('type.list.list'(sK0),X1885),s('type.list.list'(sK0),X1894),s('type.list.list'(sK0),X1895),s('type.list.list'(sK0),X1896)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f17486,plain,(
  ( ! [X2109,X2107,X2105,X2101,X2110,X2108,X2106,X2112,X2102,X2111] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2105),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2106),s('type.list.list'(sK0),X2107),s('type.list.list'(sK0),X2108))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2109),s('type.list.list'(sK0),X2102),s('type.list.list'(sK0),X2110),s('type.list.list'(sK0),X2111),s('type.list.list'(sK0),X2112))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16974,f109])).
fof(f16974,plain,(
  ( ! [X2109,X2107,X2105,X2103,X2101,X2110,X2108,X2106,X2104,X2102,X2112,X2111] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2105),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2106),s('type.list.list'(sK0),X2107),s('type.list.list'(sK0),X2108))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2109),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2102),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2101),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2103),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2104))),s('type.list.list'(sK0),X2110),s('type.list.list'(sK0),X2111),s('type.list.list'(sK0),X2112))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f143,f161])).
fof(f143,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f102])).
fof(f17485,plain,(
  ( ! [X2018,X2027,X2025,X2023,X2021,X2028,X2026,X2024,X2022] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),X2023),s('type.list.list'(sK0),X2024),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2025),s('type.list.list'(sK0),X2026),s('type.list.list'(sK0),X2027),s('type.list.list'(sK0),X2028),s('type.list.list'(sK0),X2018)))) ) | $spl278),
  inference(cnf_transformation,[],[f17485_D])).
fof(f17485_D,plain,(
  ( ! [X2018,X2027,X2025,X2023,X2021,X2028,X2026,X2024,X2022] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),X2023),s('type.list.list'(sK0),X2024),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2025),s('type.list.list'(sK0),X2026),s('type.list.list'(sK0),X2027),s('type.list.list'(sK0),X2028),s('type.list.list'(sK0),X2018)))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f17484,plain,(
  ( ! [X2018,X2027,X2025,X2023,X2021,X2017,X2028,X2026,X2024,X2022] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),X2023),s('type.list.list'(sK0),X2024),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2025),s('type.list.list'(sK0),X2026),s('type.list.list'(sK0),X2027),s('type.list.list'(sK0),X2028),s('type.list.list'(sK0),X2018))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2017),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16967,f109])).
fof(f16967,plain,(
  ( ! [X2018,X2027,X2025,X2023,X2021,X2019,X2017,X2028,X2026,X2024,X2022,X2020] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),X2023),s('type.list.list'(sK0),X2024),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2025),s('type.list.list'(sK0),X2026),s('type.list.list'(sK0),X2027),s('type.list.list'(sK0),X2028),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2018),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2017),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2019),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2020))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2017),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f141,f161])).
fof(f141,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f105])).
fof(f17483,plain,(
  ( ! [X1944,X1942,X1940,X1938,X1934,X1943,X1941,X1939,X1937] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1937),s('type.list.list'(sK0),X1938),s('type.list.list'(sK0),X1939),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1940))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1941),s('type.list.list'(sK0),X1942),s('type.list.list'(sK0),X1943),s('type.list.list'(sK0),X1934),s('type.list.list'(sK0),X1944)))) ) | $spl276),
  inference(cnf_transformation,[],[f17483_D])).
fof(f17483_D,plain,(
  ( ! [X1944,X1942,X1940,X1938,X1934,X1943,X1941,X1939,X1937] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1937),s('type.list.list'(sK0),X1938),s('type.list.list'(sK0),X1939),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1940))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1941),s('type.list.list'(sK0),X1942),s('type.list.list'(sK0),X1943),s('type.list.list'(sK0),X1934),s('type.list.list'(sK0),X1944)))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f17482,plain,(
  ( ! [X1944,X1942,X1940,X1938,X1934,X1943,X1941,X1939,X1937,X1933] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1937),s('type.list.list'(sK0),X1938),s('type.list.list'(sK0),X1939),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1940))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1941),s('type.list.list'(sK0),X1942),s('type.list.list'(sK0),X1943),s('type.list.list'(sK0),X1934),s('type.list.list'(sK0),X1944))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1933),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16960,f109])).
fof(f16960,plain,(
  ( ! [X1944,X1942,X1940,X1938,X1936,X1934,X1943,X1941,X1939,X1937,X1935,X1933] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1937),s('type.list.list'(sK0),X1938),s('type.list.list'(sK0),X1939),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1940))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1941),s('type.list.list'(sK0),X1942),s('type.list.list'(sK0),X1943),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1934),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1933),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1935),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1936))),s('type.list.list'(sK0),X1944))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1933),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f139,f161])).
fof(f139,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f104])).
fof(f17481,plain,(
  ( ! [X1857,X1855,X1853,X1860,X1858,X1856,X1854,X1850,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1853),s('type.list.list'(sK0),X1854),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1855),s('type.list.list'(sK0),X1856))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1857),s('type.list.list'(sK0),X1858),s('type.list.list'(sK0),X1850),s('type.list.list'(sK0),X1859),s('type.list.list'(sK0),X1860)))) ) | $spl274),
  inference(cnf_transformation,[],[f17481_D])).
fof(f17481_D,plain,(
  ( ! [X1857,X1855,X1853,X1860,X1858,X1856,X1854,X1850,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1853),s('type.list.list'(sK0),X1854),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1855),s('type.list.list'(sK0),X1856))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1857),s('type.list.list'(sK0),X1858),s('type.list.list'(sK0),X1850),s('type.list.list'(sK0),X1859),s('type.list.list'(sK0),X1860)))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f17480,plain,(
  ( ! [X1857,X1855,X1853,X1849,X1860,X1858,X1856,X1854,X1850,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1853),s('type.list.list'(sK0),X1854),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1855),s('type.list.list'(sK0),X1856))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1857),s('type.list.list'(sK0),X1858),s('type.list.list'(sK0),X1850),s('type.list.list'(sK0),X1859),s('type.list.list'(sK0),X1860))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1849),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16953,f109])).
fof(f16953,plain,(
  ( ! [X1857,X1855,X1853,X1851,X1849,X1860,X1858,X1856,X1854,X1852,X1850,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1853),s('type.list.list'(sK0),X1854),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1855),s('type.list.list'(sK0),X1856))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1857),s('type.list.list'(sK0),X1858),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1850),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1849),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1851),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1852))),s('type.list.list'(sK0),X1859),s('type.list.list'(sK0),X1860))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1849),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f137,f161])).
fof(f17479,plain,(
  ( ! [X1769,X1771,X1773,X1775,X1776,X1766,X1770,X1772,X1774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1769),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1770),s('type.list.list'(sK0),X1771),s('type.list.list'(sK0),X1772))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1773),s('type.list.list'(sK0),X1766),s('type.list.list'(sK0),X1774),s('type.list.list'(sK0),X1775),s('type.list.list'(sK0),X1776)))) ) | $spl272),
  inference(cnf_transformation,[],[f17479_D])).
fof(f17479_D,plain,(
  ( ! [X1769,X1771,X1773,X1775,X1776,X1766,X1770,X1772,X1774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1769),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1770),s('type.list.list'(sK0),X1771),s('type.list.list'(sK0),X1772))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1773),s('type.list.list'(sK0),X1766),s('type.list.list'(sK0),X1774),s('type.list.list'(sK0),X1775),s('type.list.list'(sK0),X1776)))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f17477,plain,(
  ( ! [X1765,X1769,X1771,X1773,X1775,X1776,X1766,X1770,X1772,X1774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1769),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1770),s('type.list.list'(sK0),X1771),s('type.list.list'(sK0),X1772))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1773),s('type.list.list'(sK0),X1766),s('type.list.list'(sK0),X1774),s('type.list.list'(sK0),X1775),s('type.list.list'(sK0),X1776))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1765),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16946,f109])).
fof(f16946,plain,(
  ( ! [X1765,X1767,X1769,X1771,X1773,X1775,X1776,X1766,X1768,X1770,X1772,X1774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1769),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1770),s('type.list.list'(sK0),X1771),s('type.list.list'(sK0),X1772))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1773),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1766),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1765),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1767),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1768))),s('type.list.list'(sK0),X1774),s('type.list.list'(sK0),X1775),s('type.list.list'(sK0),X1776))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1765),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f135,f161])).
fof(f135,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f102])).
fof(f12876,plain,(
  ( ! [X1787,X1789,X1791,X1776,X1784,X1786,X1788,X1790,X1785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1784),s('type.list.list'(sK0),X1785),s('type.list.list'(sK0),X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1788),s('type.list.list'(sK0),X1789),s('type.list.list'(sK0),X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),X1776)))) ) | $spl78),
  inference(cnf_transformation,[],[f12876_D])).
fof(f12876_D,plain,(
  ( ! [X1787,X1789,X1791,X1776,X1784,X1786,X1788,X1790,X1785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1784),s('type.list.list'(sK0),X1785),s('type.list.list'(sK0),X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1788),s('type.list.list'(sK0),X1789),s('type.list.list'(sK0),X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),X1776)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f17476,plain,(
  ( ! [X1692,X1681,X1685,X1687,X1689,X1691,X1682,X1686,X1688,X1690] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),X1687),s('type.list.list'(sK0),X1688),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1689),s('type.list.list'(sK0),X1690),s('type.list.list'(sK0),X1691),s('type.list.list'(sK0),X1692),s('type.list.list'(sK0),X1682))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1681),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16939,f109])).
fof(f16939,plain,(
  ( ! [X1692,X1681,X1683,X1685,X1687,X1689,X1691,X1682,X1684,X1686,X1688,X1690] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),X1687),s('type.list.list'(sK0),X1688),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1689),s('type.list.list'(sK0),X1690),s('type.list.list'(sK0),X1691),s('type.list.list'(sK0),X1692),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1682),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1681),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1683),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1684))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1681),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f133,f161])).
fof(f133,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f105])).
fof(f12874,plain,(
  ( ! [X1664,X1672,X1674,X1676,X1678,X1673,X1675,X1677,X1679] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1672),s('type.list.list'(sK0),X1673),s('type.list.list'(sK0),X1674),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1676),s('type.list.list'(sK0),X1677),s('type.list.list'(sK0),X1678),s('type.list.list'(sK0),X1664),s('type.list.list'(sK0),X1679)))) ) | $spl76),
  inference(cnf_transformation,[],[f12874_D])).
fof(f12874_D,plain,(
  ( ! [X1664,X1672,X1674,X1676,X1678,X1673,X1675,X1677,X1679] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1672),s('type.list.list'(sK0),X1673),s('type.list.list'(sK0),X1674),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1676),s('type.list.list'(sK0),X1677),s('type.list.list'(sK0),X1678),s('type.list.list'(sK0),X1664),s('type.list.list'(sK0),X1679)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f17475,plain,(
  ( ! [X1602,X1604,X1606,X1608,X1598,X1601,X1603,X1605,X1607,X1597] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1601),s('type.list.list'(sK0),X1602),s('type.list.list'(sK0),X1603),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1604))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1605),s('type.list.list'(sK0),X1606),s('type.list.list'(sK0),X1607),s('type.list.list'(sK0),X1598),s('type.list.list'(sK0),X1608))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1597),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16932,f109])).
fof(f16932,plain,(
  ( ! [X1600,X1602,X1604,X1606,X1608,X1598,X1601,X1603,X1605,X1607,X1597,X1599] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1601),s('type.list.list'(sK0),X1602),s('type.list.list'(sK0),X1603),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1604))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1605),s('type.list.list'(sK0),X1606),s('type.list.list'(sK0),X1607),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1598),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1597),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1599),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1600))),s('type.list.list'(sK0),X1608))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1597),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f131,f161])).
fof(f131,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f104])).
fof(f12872,plain,(
  ( ! [X1600,X1608,X1610,X1612,X1614,X1609,X1611,X1613,X1615] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1608),s('type.list.list'(sK0),X1609),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1610),s('type.list.list'(sK0),X1611))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1612),s('type.list.list'(sK0),X1613),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1614),s('type.list.list'(sK0),X1615)))) ) | $spl74),
  inference(cnf_transformation,[],[f12872_D])).
fof(f12872_D,plain,(
  ( ! [X1600,X1608,X1610,X1612,X1614,X1609,X1611,X1613,X1615] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1608),s('type.list.list'(sK0),X1609),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1610),s('type.list.list'(sK0),X1611))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1612),s('type.list.list'(sK0),X1613),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1614),s('type.list.list'(sK0),X1615)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f17474,plain,(
  ( ! [X1521,X1523,X1513,X1517,X1519,X1520,X1522,X1524,X1514,X1518] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1517),s('type.list.list'(sK0),X1518),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1519),s('type.list.list'(sK0),X1520))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1521),s('type.list.list'(sK0),X1522),s('type.list.list'(sK0),X1514),s('type.list.list'(sK0),X1523),s('type.list.list'(sK0),X1524))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1513),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16925,f109])).
fof(f16925,plain,(
  ( ! [X1521,X1523,X1513,X1515,X1517,X1519,X1520,X1522,X1524,X1514,X1516,X1518] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1517),s('type.list.list'(sK0),X1518),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1519),s('type.list.list'(sK0),X1520))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1521),s('type.list.list'(sK0),X1522),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1514),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1513),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1515),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1516))),s('type.list.list'(sK0),X1523),s('type.list.list'(sK0),X1524))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1513),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f129,f161])).
fof(f129,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f103])).
fof(f12870,plain,(
  ( ! [X1544,X1546,X1548,X1536,X1550,X1545,X1547,X1549,X1551] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1544),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1545),s('type.list.list'(sK0),X1546),s('type.list.list'(sK0),X1547))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1548),s('type.list.list'(sK0),X1536),s('type.list.list'(sK0),X1549),s('type.list.list'(sK0),X1550),s('type.list.list'(sK0),X1551)))) ) | $spl72),
  inference(cnf_transformation,[],[f12870_D])).
fof(f12870_D,plain,(
  ( ! [X1544,X1546,X1548,X1536,X1550,X1545,X1547,X1549,X1551] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1544),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1545),s('type.list.list'(sK0),X1546),s('type.list.list'(sK0),X1547))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1548),s('type.list.list'(sK0),X1536),s('type.list.list'(sK0),X1549),s('type.list.list'(sK0),X1550),s('type.list.list'(sK0),X1551)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f17472,plain,(
  ( ! [X1434,X1436,X1430,X1438,X1433,X1435,X1437,X1439,X1429,X1440] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1433),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1434),s('type.list.list'(sK0),X1435),s('type.list.list'(sK0),X1436))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1437),s('type.list.list'(sK0),X1430),s('type.list.list'(sK0),X1438),s('type.list.list'(sK0),X1439),s('type.list.list'(sK0),X1440))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1429),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16918,f109])).
fof(f16918,plain,(
  ( ! [X1434,X1436,X1430,X1438,X1433,X1435,X1437,X1429,X1431,X1439,X1440,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1433),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1434),s('type.list.list'(sK0),X1435),s('type.list.list'(sK0),X1436))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1437),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1430),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1429),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1431),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1432))),s('type.list.list'(sK0),X1438),s('type.list.list'(sK0),X1439),s('type.list.list'(sK0),X1440))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1429),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f127,f161])).
fof(f17468,plain,(
  ( ! [X500] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl264),
  inference(cnf_transformation,[],[f17468_D])).
fof(f17468_D,plain,(
  ( ! [X500] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f17471,plain,(
  ( ! [X945,X951,X949,X952,X946,X950] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X946),s('type.list.list'(sK0),X949),s('type.list.list'(sK0),X950),s('type.list.list'(sK0),X951),s('type.list.list'(sK0),X952))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X945),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16871,f109])).
fof(f16871,plain,(
  ( ! [X947,X945,X951,X949,X952,X946,X950,X948] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X946),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X945),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X947),s(fun('type.list.list'(sK0),'type.num.num'),X948))),s('type.list.list'(sK0),X949),s('type.list.list'(sK0),X950),s('type.list.list'(sK0),X951),s('type.list.list'(sK0),X952))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X945),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f592,f161])).
fof(f592,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X30),s('type.list.list'(sK0),X31),s('type.list.list'(sK0),X32),s('type.list.list'(sK0),X33),s('type.list.list'(sK0),X34))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X30),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f125,f84])).
fof(f125,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X1),X6),s('type.list.list'(X1),X7),s('type.list.list'(X1),X8),s('type.list.list'(X1),X9))) != s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(X1),X2),s('type.list.list'(X1),X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f84,f101])).
fof(f101,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X1) = s('type.num.num',X6) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f17470,plain,(
  ( ! [X905] : (s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X905),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl266),
  inference(cnf_transformation,[],[f17470_D])).
fof(f17470_D,plain,(
  ( ! [X905] : (s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X905),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f17469,plain,(
  ( ! [X912,X905,X911,X909,X906,X910] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X906),s('type.list.list'(sK0),X909),s('type.list.list'(sK0),X910),s('type.list.list'(sK0),X911),s('type.list.list'(sK0),X912))) | s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X905),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16866,f109])).
fof(f16866,plain,(
  ( ! [X912,X907,X905,X911,X909,X906,X910,X908] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X906),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X905),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X907),s(fun('type.list.list'(sK0),'type.num.num'),X908))),s('type.list.list'(sK0),X909),s('type.list.list'(sK0),X910),s('type.list.list'(sK0),X911),s('type.list.list'(sK0),X912))) | s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X905),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f162,f161])).
fof(f162,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8),s('type.list.list'(sK0),X9))) | s('type.num.num',sK5) = s('type.num.num',X5)) )),
  inference(superposition,[],[f101,f84])).
fof(f13001,plain,(
  ( ! [X825,X831,X829,X821,X826,X824,X830,X828,X832,X827] : (s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X824),X825),s('type.list.list'(X824),X826),s('type.list.list'(X824),X827),s('type.list.list'(X824),X828))) != s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X821),s('type.list.list'(X824),X829),s('type.list.list'(X824),X830),s('type.list.list'(X824),X831),s('type.list.list'(X824),X832)))) ) | $spl152),
  inference(cnf_transformation,[],[f13001_D])).
fof(f13001_D,plain,(
  ( ! [X825,X831,X829,X821,X826,X824,X830,X828,X832,X827] : (s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X824),X825),s('type.list.list'(X824),X826),s('type.list.list'(X824),X827),s('type.list.list'(X824),X828))) != s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X821),s('type.list.list'(X824),X829),s('type.list.list'(X824),X830),s('type.list.list'(X824),X831),s('type.list.list'(X824),X832)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f17467,plain,(
  ( ! [X509,X511,X505,X507,X500,X512,X508,X510,X504,X506,X501] : (s('type.HoodMelvilleQueue.status'(X504),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X504),X505),s('type.list.list'(X504),X506),s('type.list.list'(X504),X507),s('type.list.list'(X504),X508))) != s('type.HoodMelvilleQueue.status'(X504),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X501),s('type.list.list'(X504),X509),s('type.list.list'(X504),X510),s('type.list.list'(X504),X511),s('type.list.list'(X504),X512))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16832,f109])).
fof(f16832,plain,(
  ( ! [X509,X511,X505,X507,X500,X502,X512,X508,X510,X504,X506,X501,X503] : (s('type.HoodMelvilleQueue.status'(X504),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X504),X505),s('type.list.list'(X504),X506),s('type.list.list'(X504),X507),s('type.list.list'(X504),X508))) != s('type.HoodMelvilleQueue.status'(X504),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X501),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X502),s(fun('type.list.list'(sK0),'type.num.num'),X503))),s('type.list.list'(X504),X509),s('type.list.list'(X504),X510),s('type.list.list'(X504),X511),s('type.list.list'(X504),X512))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f125,f161])).
fof(f17284,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl182),
  inference(cnf_transformation,[],[f17284_D])).
fof(f17284_D,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f17461,plain,(
  ( ! [X132,X131] : (~p(s(bool,X132)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16798,f109])).
fof(f16798,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X132),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X133),s(fun('type.list.list'(sK0),bool),X134)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f98,f161])).
fof(f17460,plain,(
  ( ! [X127,X128] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16797,f109])).
fof(f16797,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X128),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X129),s(fun('type.list.list'(sK0),bool),X130))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f98,f161])).
fof(f17326,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl190),
  inference(cnf_transformation,[],[f17326_D])).
fof(f17326_D,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f17459,plain,(
  ( ! [X123,X124] : (p(s(bool,X124)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16796,f109])).
fof(f16796,plain,(
  ( ! [X125,X123,X126,X124] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X125),s(fun('type.list.list'(sK0),bool),X126)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f97,f161])).
fof(f17458,plain,(
  ( ! [X120,X119] : (s(bool,'T_0') != s(bool,X120) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16795,f109])).
fof(f16795,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X120),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X121),s(fun('type.list.list'(sK0),bool),X122))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f97,f161])).
fof(f17457,plain,(
  ( ! [X116,X115] : (~p(s(bool,X116)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16794,f109])).
fof(f16794,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X116),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X117),s(fun('type.list.list'(sK0),bool),X118)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f96,f161])).
fof(f17456,plain,(
  ( ! [X111,X112] : (s(bool,'T_0') = s(bool,X112) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16793,f109])).
fof(f16793,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X112),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X113),s(fun('type.list.list'(sK0),bool),X114))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f96,f161])).
fof(f17455,plain,(
  ( ! [X107,X108] : (p(s(bool,X108)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16792,f109])).
fof(f16792,plain,(
  ( ! [X109,X107,X110,X108] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X108),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X109),s(fun('type.list.list'(sK0),bool),X110)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f95,f161])).
fof(f17454,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,X104) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16791,f109])).
fof(f16791,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X104),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X105),s(fun('type.list.list'(sK0),bool),X106))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f95,f161])).
fof(f17453,plain,(
  ( ! [X99,X100] : (p(s(bool,X100)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16790,f109])).
fof(f16790,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X100),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X101),s(fun('type.list.list'(sK0),bool),X102)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f94,f161])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f73])).
fof(f17452,plain,(
  ( ! [X95,X96] : (s(bool,'F_0') = s(bool,X96) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16789,f109])).
fof(f16789,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X96),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X97),s(fun('type.list.list'(sK0),bool),X98))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f94,f161])).
fof(f17451,plain,(
  ( ! [X92,X91] : (~p(s(bool,X92)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16788,f109])).
fof(f16788,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X92),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X93),s(fun('type.list.list'(sK0),bool),X94)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f93,f161])).
fof(f17450,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X88) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16787,f109])).
fof(f16787,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X88),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X89),s(fun('type.list.list'(sK0),bool),X90))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f93,f161])).
fof(f17449,plain,(
  ( ! [X83,X84] : (p(s(bool,X84)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16786,f109])).
fof(f16786,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X84),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X85),s(fun('type.list.list'(sK0),bool),X86)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f92,f161])).
fof(f17448,plain,(
  ( ! [X80,X79] : (s(bool,'F_0') = s(bool,X80) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16785,f109])).
fof(f16785,plain,(
  ( ! [X80,X81,X79,X82] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X80),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X81),s(fun('type.list.list'(sK0),bool),X82))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f92,f161])).
fof(f17447,plain,(
  ( ! [X76,X75] : (~p(s(bool,X76)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16784,f109])).
fof(f16784,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X76),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X77),s(fun('type.list.list'(sK0),bool),X78)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f91,f161])).
fof(f17446,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') != s(bool,X72) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16783,f109])).
fof(f16783,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X72),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X73),s(fun('type.list.list'(sK0),bool),X74))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f91,f161])).
fof(f17278,plain,(
  ( ! [X24,X21] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) ) | $spl178),
  inference(cnf_transformation,[],[f17278_D])).
fof(f17278_D,plain,(
  ( ! [X24,X21] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f17445,plain,(
  ( ! [X70,X66,X67] : (~p(s(bool,X67)) | s(bool,X70) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X70))) )),
  inference(forward_demodulation,[],[f16782,f109])).
fof(f16782,plain,(
  ( ! [X70,X68,X66,X69,X67] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X67),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X68),s(fun('type.list.list'(sK0),bool),X69)))) | s(bool,X70) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X70))) )),
  inference(superposition,[],[f88,f161])).
fof(f17444,plain,(
  ( ! [X61,X62,X65] : (~p(s(bool,X62)) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X65))) )),
  inference(forward_demodulation,[],[f16781,f109])).
fof(f16781,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X62),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X63),s(fun('type.list.list'(sK0),bool),X64)))) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X65))) )),
  inference(superposition,[],[f88,f161])).
fof(f12819,plain,(
  ( ! [X28,X27] : (~p(s(bool,X27)) | s(bool,X27) = s(bool,X28)) ) | $spl46),
  inference(cnf_transformation,[],[f12819_D])).
fof(f12819_D,plain,(
  ( ! [X28,X27] : (~p(s(bool,X27)) | s(bool,X27) = s(bool,X28)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f17443,plain,(
  ( ! [X57,X60,X56] : (s(bool,X57) = s(bool,X60) | ~p(s(bool,X60)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16780,f109])).
fof(f16780,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X60) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X57),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X58),s(fun('type.list.list'(sK0),bool),X59))) | ~p(s(bool,X60)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f88,f161])).
fof(f17442,plain,(
  ( ! [X52,X55,X51] : (s(bool,X52) = s(bool,X55) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X55))) )),
  inference(forward_demodulation,[],[f16779,f109])).
fof(f16779,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X55) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X52),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X53),s(fun('type.list.list'(sK0),bool),X54))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X55))) )),
  inference(superposition,[],[f88,f161])).
fof(f17275,plain,(
  ( ! [X14,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) ) | $spl176),
  inference(cnf_transformation,[],[f17275_D])).
fof(f17275_D,plain,(
  ( ! [X14,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f17441,plain,(
  ( ! [X47,X50,X46] : (p(s(bool,X47)) | s(bool,X50) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X50))) )),
  inference(forward_demodulation,[],[f16778,f109])).
fof(f16778,plain,(
  ( ! [X47,X50,X48,X46,X49] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X48),s(fun('type.list.list'(sK0),bool),X49)))) | s(bool,X50) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X50))) )),
  inference(superposition,[],[f85,f161])).
fof(f17440,plain,(
  ( ! [X45,X41,X42] : (p(s(bool,X42)) | s(bool,X45) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X45))) )),
  inference(forward_demodulation,[],[f16777,f109])).
fof(f16777,plain,(
  ( ! [X45,X43,X41,X44,X42] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X42),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X43),s(fun('type.list.list'(sK0),bool),X44)))) | s(bool,X45) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X45))) )),
  inference(superposition,[],[f85,f161])).
fof(f12815,plain,(
  ( ! [X17,X18] : (p(s(bool,X17)) | s(bool,X17) = s(bool,X18)) ) | $spl42),
  inference(cnf_transformation,[],[f12815_D])).
fof(f12815_D,plain,(
  ( ! [X17,X18] : (p(s(bool,X17)) | s(bool,X17) = s(bool,X18)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f17439,plain,(
  ( ! [X37,X36,X40] : (s(bool,X37) = s(bool,X40) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X40))) )),
  inference(forward_demodulation,[],[f16776,f109])).
fof(f16776,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,X40) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X37),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X38),s(fun('type.list.list'(sK0),bool),X39))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X40))) )),
  inference(superposition,[],[f85,f161])).
fof(f17438,plain,(
  ( ! [X35,X31,X32] : (s(bool,X32) = s(bool,X35) | p(s(bool,X35)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16775,f109])).
fof(f16775,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X35) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X32),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X33),s(fun('type.list.list'(sK0),bool),X34))) | p(s(bool,X35)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f85,f161])).
fof(f17420,plain,(
  ( ! [X4306,X4304,X4301,X4307,X4305] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4304),s('type.list.list'(sK0),X4305),s('type.list.list'(sK0),X4306),s('type.list.list'(sK0),X4307),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4301),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl262),
  inference(cnf_transformation,[],[f17420_D])).
fof(f17420_D,plain,(
  ( ! [X4306,X4304,X4301,X4307,X4305] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4304),s('type.list.list'(sK0),X4305),s('type.list.list'(sK0),X4306),s('type.list.list'(sK0),X4307),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4301),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f17374,plain,(
  ( ! [X2431] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2431)))) ) | $spl232),
  inference(cnf_transformation,[],[f17374_D])).
fof(f17374_D,plain,(
  ( ! [X2431] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2431)))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f17419,plain,(
  ( ! [X4306,X4304,X4301,X4307,X4305,X4300] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X4300))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4304),s('type.list.list'(sK0),X4305),s('type.list.list'(sK0),X4306),s('type.list.list'(sK0),X4307),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4301),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f16686,f109])).
fof(f16686,plain,(
  ( ! [X4306,X4304,X4303,X4301,X4307,X4305,X4302,X4300] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4304),s('type.list.list'(sK0),X4305),s('type.list.list'(sK0),X4306),s('type.list.list'(sK0),X4307),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4301),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4300),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4301),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4302),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4303)))))) )),
  inference(superposition,[],[f16026,f161])).
fof(f17418,plain,(
  ( ! [X4266,X4264,X4261,X4267,X4265] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4264),s('type.list.list'(sK0),X4265),s('type.list.list'(sK0),X4266),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4261),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X4267)))) ) | $spl260),
  inference(cnf_transformation,[],[f17418_D])).
fof(f17418_D,plain,(
  ( ! [X4266,X4264,X4261,X4267,X4265] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4264),s('type.list.list'(sK0),X4265),s('type.list.list'(sK0),X4266),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4261),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X4267)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f17365,plain,(
  ( ! [X2095] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2095),s('type.list.list'(sK0),sK1)))) ) | $spl222),
  inference(cnf_transformation,[],[f17365_D])).
fof(f17365_D,plain,(
  ( ! [X2095] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2095),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f17417,plain,(
  ( ! [X4260,X4266,X4264,X4261,X4267,X4265] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X4260),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4264),s('type.list.list'(sK0),X4265),s('type.list.list'(sK0),X4266),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4261),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X4267)))) )),
  inference(forward_demodulation,[],[f16681,f109])).
fof(f16681,plain,(
  ( ! [X4262,X4260,X4266,X4264,X4263,X4261,X4267,X4265] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4264),s('type.list.list'(sK0),X4265),s('type.list.list'(sK0),X4266),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4261),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X4267))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4260),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4261),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4262),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4263))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f15439,f161])).
fof(f17388,plain,(
  ( ! [X2941] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2941),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl248),
  inference(cnf_transformation,[],[f17388_D])).
fof(f17388_D,plain,(
  ( ! [X2941] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2941),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f12879,plain,(
  ( ! [X1802,X1800,X1798,X1796,X1792,X1801,X1799,X1797] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1802),s('type.list.list'(sK0),X1801),s('type.list.list'(sK0),X1792),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),X1799))) | s('type.list.list'(sK0),X1800) != s('type.list.list'(sK0),X1801) | s('type.list.list'(sK0),X1798) != s('type.list.list'(sK0),X1799) | s('type.list.list'(sK0),X1796) != s('type.list.list'(sK0),X1797)) ) | $spl82),
  inference(cnf_transformation,[],[f12879_D])).
fof(f12879_D,plain,(
  ( ! [X1802,X1800,X1798,X1796,X1792,X1801,X1799,X1797] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1802),s('type.list.list'(sK0),X1801),s('type.list.list'(sK0),X1792),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),X1799))) | s('type.list.list'(sK0),X1800) != s('type.list.list'(sK0),X1801) | s('type.list.list'(sK0),X1798) != s('type.list.list'(sK0),X1799) | s('type.list.list'(sK0),X1796) != s('type.list.list'(sK0),X1797)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f17416,plain,(
  ( ! [X4250,X4248,X4247,X4245,X4241,X4251,X4249,X4246,X4242] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4251),s('type.list.list'(sK0),X4250),s('type.list.list'(sK0),X4241),s('type.list.list'(sK0),X4246),s('type.list.list'(sK0),X4248))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4242),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X4245) != s('type.list.list'(sK0),X4246) | s('type.list.list'(sK0),X4247) != s('type.list.list'(sK0),X4248) | s('type.list.list'(sK0),X4249) != s('type.list.list'(sK0),X4250)) ) | $spl20),
  inference(forward_demodulation,[],[f16679,f109])).
fof(f16679,plain,(
  ( ! [X4250,X4248,X4247,X4245,X4243,X4241,X4251,X4249,X4246,X4244,X4242] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4242),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X4245) != s('type.list.list'(sK0),X4246) | s('type.list.list'(sK0),X4247) != s('type.list.list'(sK0),X4248) | s('type.list.list'(sK0),X4249) != s('type.list.list'(sK0),X4250) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4251),s('type.list.list'(sK0),X4250),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4241),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4242),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4243),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4244))),s('type.list.list'(sK0),X4246),s('type.list.list'(sK0),X4248)))) ) | $spl20),
  inference(superposition,[],[f15366,f161])).
fof(f15366,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X1)))) ) | $spl20),
  inference(equality_resolution,[],[f15350])).
fof(f15350,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl20),
  inference(superposition,[],[f15301,f106])).
fof(f106,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(X0),X2),s('type.list.list'(X0),X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) | s('type.list.list'(X0),X5) != s('type.list.list'(X0),X10) | s('type.list.list'(X0),X4) != s('type.list.list'(X0),X9) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),X8) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X7) | s('type.num.num',X1) != s('type.num.num',X6)) )),
  inference(cnf_transformation,[],[f77])).
fof(f15301,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3)))) ) | $spl20),
  inference(subsumption_resolution,[],[f15296,f6028])).
fof(f15296,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f145,f84])).
fof(f17385,plain,(
  ( ! [X2935] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2935),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl244),
  inference(cnf_transformation,[],[f17385_D])).
fof(f17385_D,plain,(
  ( ! [X2935] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2935),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f12896,plain,(
  ( ! [X2276,X2274,X2272,X2268,X2277,X2275,X2273,X2278] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2278),s('type.list.list'(sK0),X2277),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),X2268))) | s('type.list.list'(sK0),X2276) != s('type.list.list'(sK0),X2277) | s('type.list.list'(sK0),X2274) != s('type.list.list'(sK0),X2275) | s('type.list.list'(sK0),X2272) != s('type.list.list'(sK0),X2273)) ) | $spl100),
  inference(cnf_transformation,[],[f12896_D])).
fof(f12896_D,plain,(
  ( ! [X2276,X2274,X2272,X2268,X2277,X2275,X2273,X2278] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2278),s('type.list.list'(sK0),X2277),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),X2268))) | s('type.list.list'(sK0),X2276) != s('type.list.list'(sK0),X2277) | s('type.list.list'(sK0),X2274) != s('type.list.list'(sK0),X2275) | s('type.list.list'(sK0),X2272) != s('type.list.list'(sK0),X2273)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f17415,plain,(
  ( ! [X4219,X4217,X4214,X4210,X4218,X4216,X4215,X4213,X4209] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4219),s('type.list.list'(sK0),X4218),s('type.list.list'(sK0),X4216),s('type.list.list'(sK0),X4214),s('type.list.list'(sK0),X4209))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4210),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X4213) != s('type.list.list'(sK0),X4214) | s('type.list.list'(sK0),X4215) != s('type.list.list'(sK0),X4216) | s('type.list.list'(sK0),X4217) != s('type.list.list'(sK0),X4218)) ) | $spl26),
  inference(forward_demodulation,[],[f16675,f109])).
fof(f16675,plain,(
  ( ! [X4219,X4217,X4214,X4212,X4210,X4218,X4216,X4215,X4213,X4211,X4209] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4210),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X4213) != s('type.list.list'(sK0),X4214) | s('type.list.list'(sK0),X4215) != s('type.list.list'(sK0),X4216) | s('type.list.list'(sK0),X4217) != s('type.list.list'(sK0),X4218) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4219),s('type.list.list'(sK0),X4218),s('type.list.list'(sK0),X4216),s('type.list.list'(sK0),X4214),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4209),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4210),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4211),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4212)))))) ) | $spl26),
  inference(superposition,[],[f14214,f161])).
fof(f14214,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X0)))) ) | $spl26),
  inference(equality_resolution,[],[f13261])).
fof(f13261,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl26),
  inference(superposition,[],[f8009,f106])).
fof(f17391,plain,(
  ( ! [X2946] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2946),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl252),
  inference(cnf_transformation,[],[f17391_D])).
fof(f17391_D,plain,(
  ( ! [X2946] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2946),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f17414,plain,(
  ( ! [X4186,X4184,X4181,X4187,X4185,X4180] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4184),s('type.list.list'(sK0),X4185),s('type.list.list'(sK0),X4180),s('type.list.list'(sK0),X4186),s('type.list.list'(sK0),X4187))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4181),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl25),
  inference(forward_demodulation,[],[f16671,f109])).
fof(f16671,plain,(
  ( ! [X4186,X4184,X4183,X4181,X4187,X4185,X4182,X4180] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4181),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4184),s('type.list.list'(sK0),X4185),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X4180),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X4181),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X4182),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X4183))),s('type.list.list'(sK0),X4186),s('type.list.list'(sK0),X4187)))) ) | $spl25),
  inference(superposition,[],[f13208,f161])).
fof(f13208,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) | $spl25),
  inference(subsumption_resolution,[],[f13207,f162])).
fof(f13207,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl25),
  inference(subsumption_resolution,[],[f13206,f164])).
fof(f13206,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl25),
  inference(subsumption_resolution,[],[f13205,f168])).
fof(f13205,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl25),
  inference(subsumption_resolution,[],[f13203,f170])).
fof(f13203,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl25),
  inference(superposition,[],[f8007,f106])).
fof(f8007,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl25),
  inference(cnf_transformation,[],[f8007_D])).
fof(f8007_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f12884,plain,(
  ( ! [X1857,X1853,X1862,X1860,X1858,X1863,X1861,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1863),s('type.list.list'(sK0),X1862),s('type.list.list'(sK0),X1860),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1858))) | s('type.list.list'(sK0),X1861) != s('type.list.list'(sK0),X1862) | s('type.list.list'(sK0),X1859) != s('type.list.list'(sK0),X1860) | s('type.list.list'(sK0),X1857) != s('type.list.list'(sK0),X1858)) ) | $spl88),
  inference(cnf_transformation,[],[f12884_D])).
fof(f12884_D,plain,(
  ( ! [X1857,X1853,X1862,X1860,X1858,X1863,X1861,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1863),s('type.list.list'(sK0),X1862),s('type.list.list'(sK0),X1860),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1858))) | s('type.list.list'(sK0),X1861) != s('type.list.list'(sK0),X1862) | s('type.list.list'(sK0),X1859) != s('type.list.list'(sK0),X1860) | s('type.list.list'(sK0),X1857) != s('type.list.list'(sK0),X1858)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f17413,plain,(
  ( ! [X3889,X3884,X3894,X3892,X3890,X3888,X3885,X3893,X3891] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3894),s('type.list.list'(sK0),X3893),s('type.list.list'(sK0),X3891),s('type.list.list'(sK0),X3884),s('type.list.list'(sK0),X3889))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3885),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3888) != s('type.list.list'(sK0),X3889) | s('type.list.list'(sK0),X3890) != s('type.list.list'(sK0),X3891) | s('type.list.list'(sK0),X3892) != s('type.list.list'(sK0),X3893)) ) | $spl20),
  inference(forward_demodulation,[],[f16643,f109])).
fof(f16643,plain,(
  ( ! [X3889,X3886,X3884,X3894,X3892,X3890,X3888,X3887,X3885,X3893,X3891] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3885),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3888) != s('type.list.list'(sK0),X3889) | s('type.list.list'(sK0),X3890) != s('type.list.list'(sK0),X3891) | s('type.list.list'(sK0),X3892) != s('type.list.list'(sK0),X3893) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3894),s('type.list.list'(sK0),X3893),s('type.list.list'(sK0),X3891),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3884),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3885),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3886),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3887))),s('type.list.list'(sK0),X3889)))) ) | $spl20),
  inference(superposition,[],[f7876,f161])).
fof(f7876,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X1)))) ) | $spl20),
  inference(equality_resolution,[],[f7860])).
fof(f7860,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl20),
  inference(superposition,[],[f6028,f106])).
fof(f17395,plain,(
  ( ! [X3038,X3041,X3035,X3039,X3040] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3038),s('type.list.list'(sK0),X3039),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3035),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3040),s('type.list.list'(sK0),X3041)))) ) | $spl256),
  inference(cnf_transformation,[],[f17395_D])).
fof(f17395_D,plain,(
  ( ! [X3038,X3041,X3035,X3039,X3040] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3038),s('type.list.list'(sK0),X3039),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3035),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3040),s('type.list.list'(sK0),X3041)))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f12900,plain,(
  ( ! [X2301] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2301),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl102),
  inference(cnf_transformation,[],[f12900_D])).
fof(f12900_D,plain,(
  ( ! [X2301] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2301),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f17412,plain,(
  ( ! [X3856,X3853,X3859,X3857,X3852,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3852),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859)))) )),
  inference(forward_demodulation,[],[f16639,f109])).
fof(f16639,plain,(
  ( ! [X3856,X3855,X3853,X3859,X3857,X3854,X3852,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3852),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3854),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3855))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f7589,f161])).
fof(f17411,plain,(
  ( ! [X3847,X3845,X3841,X3851,X3849,X3846,X3850,X3848] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3851),s('type.list.list'(sK0),X3841),s('type.list.list'(sK0),X3848),s('type.list.list'(sK0),X3846),s('type.list.list'(sK0),X3850))) | s('type.list.list'(sK0),X3849) != s('type.list.list'(sK0),X3850) | s('type.list.list'(sK0),X3847) != s('type.list.list'(sK0),X3848) | s('type.list.list'(sK0),X3845) != s('type.list.list'(sK0),X3846)) ) | $spl258),
  inference(cnf_transformation,[],[f17411_D])).
fof(f17411_D,plain,(
  ( ! [X3847,X3845,X3841,X3851,X3849,X3846,X3850,X3848] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3851),s('type.list.list'(sK0),X3841),s('type.list.list'(sK0),X3848),s('type.list.list'(sK0),X3846),s('type.list.list'(sK0),X3850))) | s('type.list.list'(sK0),X3849) != s('type.list.list'(sK0),X3850) | s('type.list.list'(sK0),X3847) != s('type.list.list'(sK0),X3848) | s('type.list.list'(sK0),X3845) != s('type.list.list'(sK0),X3846)) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f17410,plain,(
  ( ! [X3847,X3845,X3841,X3851,X3849,X3846,X3842,X3850,X3848] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3851),s('type.list.list'(sK0),X3841),s('type.list.list'(sK0),X3848),s('type.list.list'(sK0),X3846),s('type.list.list'(sK0),X3850))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3842),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3845) != s('type.list.list'(sK0),X3846) | s('type.list.list'(sK0),X3847) != s('type.list.list'(sK0),X3848) | s('type.list.list'(sK0),X3849) != s('type.list.list'(sK0),X3850)) ) | $spl2),
  inference(forward_demodulation,[],[f16638,f109])).
fof(f16638,plain,(
  ( ! [X3847,X3845,X3843,X3841,X3851,X3849,X3846,X3844,X3842,X3850,X3848] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3842),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3845) != s('type.list.list'(sK0),X3846) | s('type.list.list'(sK0),X3847) != s('type.list.list'(sK0),X3848) | s('type.list.list'(sK0),X3849) != s('type.list.list'(sK0),X3850) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3851),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3841),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3842),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3843),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3844))),s('type.list.list'(sK0),X3848),s('type.list.list'(sK0),X3846),s('type.list.list'(sK0),X3850)))) ) | $spl2),
  inference(superposition,[],[f7516,f161])).
fof(f7516,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),X5) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X1)))) ) | $spl2),
  inference(equality_resolution,[],[f7500])).
fof(f7500,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl2),
  inference(superposition,[],[f7451,f106])).
fof(f7451,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(subsumption_resolution,[],[f7446,f980])).
fof(f7446,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f135,f84])).
fof(f17409,plain,(
  ( ! [X3817,X3819,X3809,X3813,X3815,X3816,X3818,X3810,X3814] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3819),s('type.list.list'(sK0),X3818),s('type.list.list'(sK0),X3816),s('type.list.list'(sK0),X3814),s('type.list.list'(sK0),X3809))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3810),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3813) != s('type.list.list'(sK0),X3814) | s('type.list.list'(sK0),X3815) != s('type.list.list'(sK0),X3816) | s('type.list.list'(sK0),X3817) != s('type.list.list'(sK0),X3818)) ) | $spl17),
  inference(forward_demodulation,[],[f16634,f109])).
fof(f16634,plain,(
  ( ! [X3817,X3819,X3809,X3811,X3813,X3815,X3816,X3818,X3810,X3812,X3814] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3810),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3813) != s('type.list.list'(sK0),X3814) | s('type.list.list'(sK0),X3815) != s('type.list.list'(sK0),X3816) | s('type.list.list'(sK0),X3817) != s('type.list.list'(sK0),X3818) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3819),s('type.list.list'(sK0),X3818),s('type.list.list'(sK0),X3816),s('type.list.list'(sK0),X3814),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3809),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3810),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3811),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3812)))))) ) | $spl17),
  inference(superposition,[],[f7108,f161])).
fof(f7108,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X0)))) ) | $spl17),
  inference(equality_resolution,[],[f6426])).
fof(f6426,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl17),
  inference(superposition,[],[f6066,f106])).
fof(f6066,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),sK2)))) ) | $spl17),
  inference(superposition,[],[f4494,f84])).
fof(f4494,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),sK1)))) ) | $spl17),
  inference(equality_resolution,[],[f3992])).
fof(f3992,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X54) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54)))) ) | $spl17),
  inference(superposition,[],[f3984,f105])).
fof(f17408,plain,(
  ( ! [X3802,X3804,X3798,X3806,X3803,X3805,X3807,X3799,X3808] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3808),s('type.list.list'(sK0),X3807),s('type.list.list'(sK0),X3805),s('type.list.list'(sK0),X3798),s('type.list.list'(sK0),X3803))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3799),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3802) != s('type.list.list'(sK0),X3803) | s('type.list.list'(sK0),X3804) != s('type.list.list'(sK0),X3805) | s('type.list.list'(sK0),X3806) != s('type.list.list'(sK0),X3807)) ) | $spl17),
  inference(forward_demodulation,[],[f16633,f109])).
fof(f16633,plain,(
  ( ! [X3800,X3802,X3804,X3806,X3798,X3801,X3803,X3805,X3799,X3807,X3808] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3799),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3802) != s('type.list.list'(sK0),X3803) | s('type.list.list'(sK0),X3804) != s('type.list.list'(sK0),X3805) | s('type.list.list'(sK0),X3806) != s('type.list.list'(sK0),X3807) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3808),s('type.list.list'(sK0),X3807),s('type.list.list'(sK0),X3805),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3798),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3799),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3800),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3801))),s('type.list.list'(sK0),X3803)))) ) | $spl17),
  inference(superposition,[],[f6963,f161])).
fof(f6963,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X1)))) ) | $spl17),
  inference(equality_resolution,[],[f6376])).
fof(f6376,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl17),
  inference(superposition,[],[f6065,f106])).
fof(f6065,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3)))) ) | $spl17),
  inference(superposition,[],[f4362,f84])).
fof(f4362,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X7)))) ) | $spl17),
  inference(equality_resolution,[],[f3990])).
fof(f3990,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X36) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44)))) ) | $spl17),
  inference(superposition,[],[f3984,f104])).
fof(f17382,plain,(
  ( ! [X2928] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl240),
  inference(cnf_transformation,[],[f17382_D])).
fof(f17382_D,plain,(
  ( ! [X2928] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f17407,plain,(
  ( ! [X3794,X3796,X3792,X3788,X3795,X3797,X3793,X3787,X3791] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3797),s('type.list.list'(sK0),X3796),s('type.list.list'(sK0),X3794),s('type.list.list'(sK0),X3792),s('type.list.list'(sK0),X3787))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3788),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3791) != s('type.list.list'(sK0),X3792) | s('type.list.list'(sK0),X3793) != s('type.list.list'(sK0),X3794) | s('type.list.list'(sK0),X3795) != s('type.list.list'(sK0),X3796)) ) | $spl12),
  inference(forward_demodulation,[],[f16632,f109])).
fof(f16632,plain,(
  ( ! [X3794,X3796,X3792,X3788,X3790,X3795,X3797,X3793,X3787,X3789,X3791] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3788),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3791) != s('type.list.list'(sK0),X3792) | s('type.list.list'(sK0),X3793) != s('type.list.list'(sK0),X3794) | s('type.list.list'(sK0),X3795) != s('type.list.list'(sK0),X3796) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3797),s('type.list.list'(sK0),X3796),s('type.list.list'(sK0),X3794),s('type.list.list'(sK0),X3792),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3787),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3788),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3789),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3790)))))) ) | $spl12),
  inference(superposition,[],[f6924,f161])).
fof(f6924,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X0)))) ) | $spl12),
  inference(equality_resolution,[],[f6290])).
fof(f6290,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl12),
  inference(superposition,[],[f3527,f106])).
fof(f17406,plain,(
  ( ! [X3763,X3765,X3759,X3762,X3764,X3758] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3762),s('type.list.list'(sK0),X3758),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),X3764),s('type.list.list'(sK0),X3765))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3759),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl9),
  inference(forward_demodulation,[],[f16628,f109])).
fof(f16628,plain,(
  ( ! [X3761,X3763,X3765,X3759,X3760,X3762,X3764,X3758] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3759),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3762),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3758),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3759),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3760),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3761))),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),X3764),s('type.list.list'(sK0),X3765)))) ) | $spl9),
  inference(superposition,[],[f6323,f161])).
fof(f6323,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) | $spl9),
  inference(subsumption_resolution,[],[f6322,f162])).
fof(f6322,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f6321,f166])).
fof(f6321,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f6320,f168])).
fof(f6320,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f6318,f170])).
fof(f6318,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl9),
  inference(superposition,[],[f2459,f106])).
fof(f2459,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl9),
  inference(cnf_transformation,[],[f2459_D])).
fof(f2459_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f17405,plain,(
  ( ! [X3424,X3426,X3428,X3430,X3419,X3423,X3425,X3427,X3429,X3420] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3423),s('type.list.list'(sK0),X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3427),s('type.list.list'(sK0),X3428),s('type.list.list'(sK0),X3429),s('type.list.list'(sK0),X3430),s('type.list.list'(sK0),X3419))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3420),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl17),
  inference(forward_demodulation,[],[f16594,f109])).
fof(f16594,plain,(
  ( ! [X3424,X3426,X3428,X3430,X3419,X3421,X3423,X3425,X3427,X3429,X3420,X3422] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3420),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3423),s('type.list.list'(sK0),X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3427),s('type.list.list'(sK0),X3428),s('type.list.list'(sK0),X3429),s('type.list.list'(sK0),X3430),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3419),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3420),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3421),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3422)))))) ) | $spl17),
  inference(superposition,[],[f3992,f161])).
fof(f17404,plain,(
  ( ! [X3407,X3411,X3413,X3415,X3417,X3408,X3412,X3414,X3416,X3418] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3411),s('type.list.list'(sK0),X3412),s('type.list.list'(sK0),X3413),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3414))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3415),s('type.list.list'(sK0),X3416),s('type.list.list'(sK0),X3417),s('type.list.list'(sK0),X3407),s('type.list.list'(sK0),X3418))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3408),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl17),
  inference(forward_demodulation,[],[f16593,f109])).
fof(f16593,plain,(
  ( ! [X3407,X3409,X3411,X3413,X3415,X3417,X3408,X3410,X3412,X3414,X3416,X3418] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3408),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3411),s('type.list.list'(sK0),X3412),s('type.list.list'(sK0),X3413),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3414))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3415),s('type.list.list'(sK0),X3416),s('type.list.list'(sK0),X3417),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3407),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3408),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3409),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3410))),s('type.list.list'(sK0),X3418)))) ) | $spl17),
  inference(superposition,[],[f3990,f161])).
fof(f17403,plain,(
  ( ! [X3395,X3399,X3401,X3403,X3405,X3396,X3400,X3402,X3404,X3406] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3399),s('type.list.list'(sK0),X3400),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3401),s('type.list.list'(sK0),X3402))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3403),s('type.list.list'(sK0),X3404),s('type.list.list'(sK0),X3395),s('type.list.list'(sK0),X3405),s('type.list.list'(sK0),X3406))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3396),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl17),
  inference(forward_demodulation,[],[f16592,f109])).
fof(f16592,plain,(
  ( ! [X3395,X3397,X3399,X3401,X3403,X3405,X3396,X3398,X3400,X3402,X3404,X3406] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3396),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3399),s('type.list.list'(sK0),X3400),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3401),s('type.list.list'(sK0),X3402))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3403),s('type.list.list'(sK0),X3404),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3395),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3396),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3397),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3398))),s('type.list.list'(sK0),X3405),s('type.list.list'(sK0),X3406)))) ) | $spl17),
  inference(superposition,[],[f3988,f161])).
fof(f3988,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X18) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26)))) ) | $spl17),
  inference(superposition,[],[f3984,f103])).
fof(f17402,plain,(
  ( ! [X3389,X3391,X3393,X3384,X3388,X3390,X3392,X3394,X3383,X3387] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3387),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3388),s('type.list.list'(sK0),X3389),s('type.list.list'(sK0),X3390))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3391),s('type.list.list'(sK0),X3383),s('type.list.list'(sK0),X3392),s('type.list.list'(sK0),X3393),s('type.list.list'(sK0),X3394))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3384),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl17),
  inference(forward_demodulation,[],[f16591,f109])).
fof(f16591,plain,(
  ( ! [X3389,X3391,X3393,X3384,X3386,X3388,X3390,X3392,X3394,X3383,X3385,X3387] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3384),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3387),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3388),s('type.list.list'(sK0),X3389),s('type.list.list'(sK0),X3390))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3391),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3383),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3384),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3385),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3386))),s('type.list.list'(sK0),X3392),s('type.list.list'(sK0),X3393),s('type.list.list'(sK0),X3394)))) ) | $spl17),
  inference(superposition,[],[f3986,f161])).
fof(f3986,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl17),
  inference(superposition,[],[f3984,f102])).
fof(f17401,plain,(
  ( ! [X3358,X3360,X3351,X3355,X3357,X3359,X3361,X3352,X3356] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3361),s('type.list.list'(sK0),X3360),s('type.list.list'(sK0),X3358),s('type.list.list'(sK0),X3351),s('type.list.list'(sK0),X3356))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3352),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3355) != s('type.list.list'(sK0),X3356) | s('type.list.list'(sK0),X3357) != s('type.list.list'(sK0),X3358) | s('type.list.list'(sK0),X3359) != s('type.list.list'(sK0),X3360)) ) | $spl6),
  inference(forward_demodulation,[],[f16587,f109])).
fof(f16587,plain,(
  ( ! [X3358,X3360,X3351,X3353,X3355,X3357,X3359,X3361,X3352,X3354,X3356] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3352),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3355) != s('type.list.list'(sK0),X3356) | s('type.list.list'(sK0),X3357) != s('type.list.list'(sK0),X3358) | s('type.list.list'(sK0),X3359) != s('type.list.list'(sK0),X3360) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3361),s('type.list.list'(sK0),X3360),s('type.list.list'(sK0),X3358),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3351),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3352),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3353),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3354))),s('type.list.list'(sK0),X3356)))) ) | $spl6),
  inference(superposition,[],[f3077,f161])).
fof(f3077,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X1)))) ) | $spl6),
  inference(equality_resolution,[],[f2653])).
fof(f2653,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl6),
  inference(superposition,[],[f1178,f106])).
fof(f17400,plain,(
  ( ! [X3323,X3329,X3327,X3322,X3328,X3326] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3326),s('type.list.list'(sK0),X3322),s('type.list.list'(sK0),X3327),s('type.list.list'(sK0),X3328),s('type.list.list'(sK0),X3329))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3323),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl5),
  inference(forward_demodulation,[],[f16583,f109])).
fof(f16583,plain,(
  ( ! [X3323,X3329,X3327,X3325,X3322,X3328,X3326,X3324] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3323),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3326),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3322),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3323),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3324),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3325))),s('type.list.list'(sK0),X3327),s('type.list.list'(sK0),X3328),s('type.list.list'(sK0),X3329)))) ) | $spl5),
  inference(superposition,[],[f2600,f161])).
fof(f2600,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) | $spl5),
  inference(subsumption_resolution,[],[f2599,f162])).
fof(f2599,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f2598,f166])).
fof(f2598,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f2597,f168])).
fof(f2597,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f2595,f170])).
fof(f2595,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.num.num',sK5) != s('type.num.num',X0)) ) | $spl5),
  inference(superposition,[],[f1176,f106])).
fof(f1176,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl5),
  inference(cnf_transformation,[],[f1176_D])).
fof(f1176_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f17399,plain,(
  ( ! [X3290,X3294,X3299,X3297,X3291,X3295,X3298,X3296,X3300] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3300),s('type.list.list'(sK0),X3299),s('type.list.list'(sK0),X3290),s('type.list.list'(sK0),X3295),s('type.list.list'(sK0),X3297))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3291),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3294) != s('type.list.list'(sK0),X3295) | s('type.list.list'(sK0),X3296) != s('type.list.list'(sK0),X3297) | s('type.list.list'(sK0),X3298) != s('type.list.list'(sK0),X3299)) ) | $spl2),
  inference(forward_demodulation,[],[f16579,f109])).
fof(f16579,plain,(
  ( ! [X3290,X3294,X3292,X3299,X3297,X3291,X3295,X3293,X3298,X3296,X3300] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3291),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3294) != s('type.list.list'(sK0),X3295) | s('type.list.list'(sK0),X3296) != s('type.list.list'(sK0),X3297) | s('type.list.list'(sK0),X3298) != s('type.list.list'(sK0),X3299) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3300),s('type.list.list'(sK0),X3299),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3290),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3291),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3292),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3293))),s('type.list.list'(sK0),X3295),s('type.list.list'(sK0),X3297)))) ) | $spl2),
  inference(superposition,[],[f1045,f161])).
fof(f1045,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X1)))) ) | $spl2),
  inference(equality_resolution,[],[f1029])).
fof(f1029,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | $spl2),
  inference(superposition,[],[f980,f106])).
fof(f17398,plain,(
  ( ! [X3288,X3274,X3278,X3283,X3281,X3287,X3285,X3289,X3275,X3279,X3282,X3280,X3286,X3284] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3282),s('type.list.list'(sK0),X3283),s('type.list.list'(sK0),X3284),s('type.list.list'(sK0),X3285),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3286),s('type.list.list'(sK0),X3287),s('type.list.list'(sK0),X3288),s('type.list.list'(sK0),X3289),s('type.list.list'(sK0),X3274))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3278),s('type.list.list'(sK0),X3279),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3275),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3280),s('type.list.list'(sK0),X3281)))) ) | $spl2),
  inference(forward_demodulation,[],[f16578,f109])).
fof(f16578,plain,(
  ( ! [X3288,X3274,X3278,X3283,X3281,X3287,X3285,X3276,X3289,X3275,X3279,X3277,X3282,X3280,X3286,X3284] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3278),s('type.list.list'(sK0),X3279),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3275),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3280),s('type.list.list'(sK0),X3281))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3282),s('type.list.list'(sK0),X3283),s('type.list.list'(sK0),X3284),s('type.list.list'(sK0),X3285),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3286),s('type.list.list'(sK0),X3287),s('type.list.list'(sK0),X3288),s('type.list.list'(sK0),X3289),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3274),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3275),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3276),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3277)))))) ) | $spl2),
  inference(superposition,[],[f1005,f161])).
fof(f17397,plain,(
  ( ! [X3166,X3171,X3169,X3175,X3173,X3177,X3163,X3167,X3170,X3168,X3174,X3172,X3176,X3162] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3170),s('type.list.list'(sK0),X3171),s('type.list.list'(sK0),X3172),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3173))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3174),s('type.list.list'(sK0),X3175),s('type.list.list'(sK0),X3176),s('type.list.list'(sK0),X3162),s('type.list.list'(sK0),X3177))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3166),s('type.list.list'(sK0),X3167),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3163),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3168),s('type.list.list'(sK0),X3169)))) ) | $spl2),
  inference(forward_demodulation,[],[f16571,f109])).
fof(f16571,plain,(
  ( ! [X3166,X3164,X3171,X3169,X3175,X3173,X3177,X3163,X3167,X3165,X3170,X3168,X3174,X3172,X3176,X3162] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3166),s('type.list.list'(sK0),X3167),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3163),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3168),s('type.list.list'(sK0),X3169))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3170),s('type.list.list'(sK0),X3171),s('type.list.list'(sK0),X3172),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3173))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3174),s('type.list.list'(sK0),X3175),s('type.list.list'(sK0),X3176),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3162),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3163),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3164),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3165))),s('type.list.list'(sK0),X3177)))) ) | $spl2),
  inference(superposition,[],[f1003,f161])).
fof(f17396,plain,(
  ( ! [X3102,X3107,X3105,X3111,X3109,X3113,X3099,X3103,X3106,X3104,X3110,X3108,X3112,X3098] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3106),s('type.list.list'(sK0),X3107),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3108),s('type.list.list'(sK0),X3109))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3110),s('type.list.list'(sK0),X3111),s('type.list.list'(sK0),X3098),s('type.list.list'(sK0),X3112),s('type.list.list'(sK0),X3113))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3102),s('type.list.list'(sK0),X3103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3099),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3104),s('type.list.list'(sK0),X3105)))) ) | $spl2),
  inference(forward_demodulation,[],[f16567,f109])).
fof(f16567,plain,(
  ( ! [X3102,X3100,X3107,X3105,X3111,X3109,X3113,X3099,X3103,X3101,X3106,X3104,X3110,X3108,X3112,X3098] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3102),s('type.list.list'(sK0),X3103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3099),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3104),s('type.list.list'(sK0),X3105))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3106),s('type.list.list'(sK0),X3107),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3108),s('type.list.list'(sK0),X3109))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3110),s('type.list.list'(sK0),X3111),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3098),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3099),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3100),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3101))),s('type.list.list'(sK0),X3112),s('type.list.list'(sK0),X3113)))) ) | $spl2),
  inference(superposition,[],[f1001,f161])).
fof(f17394,plain,(
  ( ! [X3034,X3038,X3043,X3041,X3047,X3045,X3049,X3035,X3039,X3042,X3040,X3046,X3044,X3048] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3042),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3043),s('type.list.list'(sK0),X3044),s('type.list.list'(sK0),X3045))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3046),s('type.list.list'(sK0),X3034),s('type.list.list'(sK0),X3047),s('type.list.list'(sK0),X3048),s('type.list.list'(sK0),X3049))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3038),s('type.list.list'(sK0),X3039),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3035),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3040),s('type.list.list'(sK0),X3041)))) ) | $spl2),
  inference(forward_demodulation,[],[f16563,f109])).
fof(f16563,plain,(
  ( ! [X3034,X3038,X3036,X3043,X3041,X3047,X3045,X3049,X3035,X3039,X3042,X3040,X3046,X3044,X3037,X3048] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3038),s('type.list.list'(sK0),X3039),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3035),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3040),s('type.list.list'(sK0),X3041))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3042),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3043),s('type.list.list'(sK0),X3044),s('type.list.list'(sK0),X3045))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3046),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3034),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3035),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3036),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3037))),s('type.list.list'(sK0),X3047),s('type.list.list'(sK0),X3048),s('type.list.list'(sK0),X3049)))) ) | $spl2),
  inference(superposition,[],[f999,f161])).
fof(f17393,plain,(
  ( ! [X3012,X3010,X3006,X3009,X3011] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3009),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3006),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3010),s('type.list.list'(sK0),X3011),s('type.list.list'(sK0),X3012)))) ) | $spl254),
  inference(cnf_transformation,[],[f17393_D])).
fof(f17393_D,plain,(
  ( ! [X3012,X3010,X3006,X3009,X3011] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3009),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3006),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3010),s('type.list.list'(sK0),X3011),s('type.list.list'(sK0),X3012)))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f17348,plain,(
  ( ! [X1423] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1423),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl204),
  inference(cnf_transformation,[],[f17348_D])).
fof(f17348_D,plain,(
  ( ! [X1423] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1423),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f17392,plain,(
  ( ! [X3005,X3012,X3010,X3006,X3009,X3011] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3005),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3009),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3006),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3010),s('type.list.list'(sK0),X3011),s('type.list.list'(sK0),X3012)))) )),
  inference(forward_demodulation,[],[f16559,f109])).
fof(f16559,plain,(
  ( ! [X3007,X3005,X3012,X3010,X3008,X3006,X3009,X3011] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3009),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3006),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3010),s('type.list.list'(sK0),X3011),s('type.list.list'(sK0),X3012))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3005),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3006),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3007),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3008))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f757,f161])).
fof(f17390,plain,(
  ( ! [X2946,X2945] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2945))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2946),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16551,f109])).
fof(f16551,plain,(
  ( ! [X2946,X2948,X2947,X2945] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2946),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2945),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2946),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2947),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2948)))))) )),
  inference(superposition,[],[f521,f161])).
fof(f521,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X0)))) )),
  inference(equality_resolution,[],[f500])).
fof(f500,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X1)))) )),
  inference(equality_resolution,[],[f479])).
fof(f479,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X2)))) )),
  inference(equality_resolution,[],[f456])).
fof(f456,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X0)))) )),
  inference(equality_resolution,[],[f159])).
fof(f159,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',sK5) != s('type.num.num',X0) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) )),
  inference(superposition,[],[f84,f106])).
fof(f17389,plain,(
  ( ! [X2944,X2940] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2940),s('type.list.list'(sK0),X2944))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2944)) ) | $spl250),
  inference(cnf_transformation,[],[f17389_D])).
fof(f17389_D,plain,(
  ( ! [X2944,X2940] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2940),s('type.list.list'(sK0),X2944))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2944)) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f17387,plain,(
  ( ! [X2941,X2944,X2940] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2940),s('type.list.list'(sK0),X2944))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2941),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2944)) )),
  inference(forward_demodulation,[],[f16550,f109])).
fof(f16550,plain,(
  ( ! [X2943,X2941,X2944,X2942,X2940] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2941),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2944) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2940),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2941),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2942),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2943))),s('type.list.list'(sK0),X2944)))) )),
  inference(superposition,[],[f500,f161])).
fof(f17386,plain,(
  ( ! [X2934,X2938,X2939] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2934),s('type.list.list'(sK0),X2938),s('type.list.list'(sK0),X2939))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2939) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2938)) ) | $spl246),
  inference(cnf_transformation,[],[f17386_D])).
fof(f17386_D,plain,(
  ( ! [X2934,X2938,X2939] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2934),s('type.list.list'(sK0),X2938),s('type.list.list'(sK0),X2939))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2939) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2938)) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f17384,plain,(
  ( ! [X2934,X2938,X2935,X2939] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2934),s('type.list.list'(sK0),X2938),s('type.list.list'(sK0),X2939))) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2935),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2938) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2939)) )),
  inference(forward_demodulation,[],[f16549,f109])).
fof(f16549,plain,(
  ( ! [X2934,X2938,X2936,X2935,X2939,X2937] : (s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2935),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2938) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2939) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2934),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2935),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2936),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2937))),s('type.list.list'(sK0),X2938),s('type.list.list'(sK0),X2939)))) )),
  inference(superposition,[],[f479,f161])).
fof(f17383,plain,(
  ( ! [X2927,X2932,X2931,X2933] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2927),s('type.list.list'(sK0),X2932),s('type.list.list'(sK0),X2931),s('type.list.list'(sK0),X2933))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2933) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2932) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2931)) ) | $spl242),
  inference(cnf_transformation,[],[f17383_D])).
fof(f17383_D,plain,(
  ( ! [X2927,X2932,X2931,X2933] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2927),s('type.list.list'(sK0),X2932),s('type.list.list'(sK0),X2931),s('type.list.list'(sK0),X2933))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2933) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2932) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2931)) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f17381,plain,(
  ( ! [X2927,X2928,X2932,X2931,X2933] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2927),s('type.list.list'(sK0),X2932),s('type.list.list'(sK0),X2931),s('type.list.list'(sK0),X2933))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2931) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2932) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2933)) )),
  inference(forward_demodulation,[],[f16548,f109])).
fof(f16548,plain,(
  ( ! [X2927,X2930,X2928,X2932,X2931,X2929,X2933] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X2931) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X2932) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2933) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2927),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2928),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2929),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2930))),s('type.list.list'(sK0),X2932),s('type.list.list'(sK0),X2931),s('type.list.list'(sK0),X2933)))) )),
  inference(superposition,[],[f456,f161])).
fof(f17380,plain,(
  ( ! [X2687,X2693,X2689,X2691,X2684,X2692,X2694,X2688,X2690] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2687),s('type.list.list'(sK0),X2688),s('type.list.list'(sK0),X2689),s('type.list.list'(sK0),X2690),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2691),s('type.list.list'(sK0),X2692),s('type.list.list'(sK0),X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2684),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl238),
  inference(cnf_transformation,[],[f17380_D])).
fof(f17380_D,plain,(
  ( ! [X2687,X2693,X2689,X2691,X2684,X2692,X2694,X2688,X2690] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2687),s('type.list.list'(sK0),X2688),s('type.list.list'(sK0),X2689),s('type.list.list'(sK0),X2690),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2691),s('type.list.list'(sK0),X2692),s('type.list.list'(sK0),X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2684),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f17379,plain,(
  ( ! [X2687,X2683,X2693,X2689,X2691,X2684,X2692,X2694,X2688,X2690] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2683))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2687),s('type.list.list'(sK0),X2688),s('type.list.list'(sK0),X2689),s('type.list.list'(sK0),X2690),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2691),s('type.list.list'(sK0),X2692),s('type.list.list'(sK0),X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2684),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f16521,f109])).
fof(f16521,plain,(
  ( ! [X2687,X2683,X2693,X2689,X2691,X2684,X2686,X2692,X2694,X2688,X2690,X2685] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2687),s('type.list.list'(sK0),X2688),s('type.list.list'(sK0),X2689),s('type.list.list'(sK0),X2690),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2691),s('type.list.list'(sK0),X2692),s('type.list.list'(sK0),X2693),s('type.list.list'(sK0),X2694),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2684),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2683),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2684),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2685),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2686)))))) )),
  inference(superposition,[],[f157,f161])).
fof(f17378,plain,(
  ( ! [X2604,X2606,X2600,X2608,X2610,X2605,X2607,X2603,X2609] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2603),s('type.list.list'(sK0),X2604),s('type.list.list'(sK0),X2605),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2606))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2607),s('type.list.list'(sK0),X2608),s('type.list.list'(sK0),X2609),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2600),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2610)))) ) | $spl236),
  inference(cnf_transformation,[],[f17378_D])).
fof(f17378_D,plain,(
  ( ! [X2604,X2606,X2600,X2608,X2610,X2605,X2607,X2603,X2609] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2603),s('type.list.list'(sK0),X2604),s('type.list.list'(sK0),X2605),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2606))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2607),s('type.list.list'(sK0),X2608),s('type.list.list'(sK0),X2609),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2600),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2610)))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f17377,plain,(
  ( ! [X2604,X2606,X2600,X2608,X2610,X2599,X2605,X2607,X2603,X2609] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2599))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2603),s('type.list.list'(sK0),X2604),s('type.list.list'(sK0),X2605),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2606))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2607),s('type.list.list'(sK0),X2608),s('type.list.list'(sK0),X2609),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2600),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2610)))) )),
  inference(forward_demodulation,[],[f16514,f109])).
fof(f16514,plain,(
  ( ! [X2604,X2606,X2600,X2602,X2608,X2610,X2599,X2605,X2607,X2601,X2603,X2609] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2603),s('type.list.list'(sK0),X2604),s('type.list.list'(sK0),X2605),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2606))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2607),s('type.list.list'(sK0),X2608),s('type.list.list'(sK0),X2609),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2600),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2610))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2599),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2600),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2601),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2602)))))) )),
  inference(superposition,[],[f155,f161])).
fof(f17376,plain,(
  ( ! [X2524,X2526,X2520,X2522,X2516,X2525,X2521,X2523,X2519] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2519),s('type.list.list'(sK0),X2520),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2521),s('type.list.list'(sK0),X2522))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2523),s('type.list.list'(sK0),X2524),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2516),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2525),s('type.list.list'(sK0),X2526)))) ) | $spl234),
  inference(cnf_transformation,[],[f17376_D])).
fof(f17376_D,plain,(
  ( ! [X2524,X2526,X2520,X2522,X2516,X2525,X2521,X2523,X2519] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2519),s('type.list.list'(sK0),X2520),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2521),s('type.list.list'(sK0),X2522))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2523),s('type.list.list'(sK0),X2524),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2516),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2525),s('type.list.list'(sK0),X2526)))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f17375,plain,(
  ( ! [X2524,X2526,X2520,X2522,X2516,X2525,X2521,X2523,X2519,X2515] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2515))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2519),s('type.list.list'(sK0),X2520),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2521),s('type.list.list'(sK0),X2522))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2523),s('type.list.list'(sK0),X2524),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2516),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2525),s('type.list.list'(sK0),X2526)))) )),
  inference(forward_demodulation,[],[f16507,f109])).
fof(f16507,plain,(
  ( ! [X2524,X2526,X2520,X2522,X2516,X2518,X2525,X2521,X2523,X2517,X2519,X2515] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2519),s('type.list.list'(sK0),X2520),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2521),s('type.list.list'(sK0),X2522))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2523),s('type.list.list'(sK0),X2524),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2516),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2525),s('type.list.list'(sK0),X2526))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2515),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2516),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2517),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2518)))))) )),
  inference(superposition,[],[f153,f161])).
fof(f17373,plain,(
  ( ! [X2441,X2437,X2439,X2435,X2440,X2442,X2436,X2438,X2432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2435),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2436),s('type.list.list'(sK0),X2437),s('type.list.list'(sK0),X2438))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2439),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2432),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2440),s('type.list.list'(sK0),X2441),s('type.list.list'(sK0),X2442)))) ) | $spl230),
  inference(cnf_transformation,[],[f17373_D])).
fof(f17373_D,plain,(
  ( ! [X2441,X2437,X2439,X2435,X2440,X2442,X2436,X2438,X2432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2435),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2436),s('type.list.list'(sK0),X2437),s('type.list.list'(sK0),X2438))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2439),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2432),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2440),s('type.list.list'(sK0),X2441),s('type.list.list'(sK0),X2442)))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f17372,plain,(
  ( ! [X2431,X2441,X2437,X2439,X2435,X2440,X2442,X2436,X2438,X2432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2431))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2435),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2436),s('type.list.list'(sK0),X2437),s('type.list.list'(sK0),X2438))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2439),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2432),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2440),s('type.list.list'(sK0),X2441),s('type.list.list'(sK0),X2442)))) )),
  inference(forward_demodulation,[],[f16500,f109])).
fof(f16500,plain,(
  ( ! [X2431,X2441,X2437,X2439,X2433,X2435,X2440,X2442,X2436,X2438,X2432,X2434] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2435),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2436),s('type.list.list'(sK0),X2437),s('type.list.list'(sK0),X2438))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2439),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2432),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2440),s('type.list.list'(sK0),X2441),s('type.list.list'(sK0),X2442))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2431),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2432),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2433),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2434)))))) )),
  inference(superposition,[],[f151,f161])).
fof(f17371,plain,(
  ( ! [X2357,X2353,X2355,X2348,X2356,X2358,X2352,X2354,X2351] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2351),s('type.list.list'(sK0),X2352),s('type.list.list'(sK0),X2353),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2355),s('type.list.list'(sK0),X2356),s('type.list.list'(sK0),X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2348),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl228),
  inference(cnf_transformation,[],[f17371_D])).
fof(f17371_D,plain,(
  ( ! [X2357,X2353,X2355,X2348,X2356,X2358,X2352,X2354,X2351] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2351),s('type.list.list'(sK0),X2352),s('type.list.list'(sK0),X2353),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2355),s('type.list.list'(sK0),X2356),s('type.list.list'(sK0),X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2348),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f17370,plain,(
  ( ! [X2357,X2353,X2355,X2348,X2356,X2358,X2352,X2354,X2351,X2347] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2347),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2351),s('type.list.list'(sK0),X2352),s('type.list.list'(sK0),X2353),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2355),s('type.list.list'(sK0),X2356),s('type.list.list'(sK0),X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2348),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f16493,f109])).
fof(f16493,plain,(
  ( ! [X2357,X2353,X2355,X2348,X2350,X2356,X2358,X2352,X2354,X2349,X2351,X2347] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2351),s('type.list.list'(sK0),X2352),s('type.list.list'(sK0),X2353),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2355),s('type.list.list'(sK0),X2356),s('type.list.list'(sK0),X2357),s('type.list.list'(sK0),X2358),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2348),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2347),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2348),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2349),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2350))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f149,f161])).
fof(f17369,plain,(
  ( ! [X2274,X2270,X2268,X2272,X2264,X2271,X2269,X2267,X2273] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2267),s('type.list.list'(sK0),X2268),s('type.list.list'(sK0),X2269),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2270))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2271),s('type.list.list'(sK0),X2272),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2264),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2274)))) ) | $spl226),
  inference(cnf_transformation,[],[f17369_D])).
fof(f17369_D,plain,(
  ( ! [X2274,X2270,X2268,X2272,X2264,X2271,X2269,X2267,X2273] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2267),s('type.list.list'(sK0),X2268),s('type.list.list'(sK0),X2269),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2270))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2271),s('type.list.list'(sK0),X2272),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2264),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2274)))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f17368,plain,(
  ( ! [X2274,X2270,X2268,X2272,X2264,X2271,X2269,X2267,X2273,X2263] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2263),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2267),s('type.list.list'(sK0),X2268),s('type.list.list'(sK0),X2269),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2270))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2271),s('type.list.list'(sK0),X2272),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2264),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2274)))) )),
  inference(forward_demodulation,[],[f16486,f109])).
fof(f16486,plain,(
  ( ! [X2274,X2270,X2268,X2272,X2264,X2266,X2271,X2269,X2267,X2273,X2263,X2265] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2267),s('type.list.list'(sK0),X2268),s('type.list.list'(sK0),X2269),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2270))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2271),s('type.list.list'(sK0),X2272),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2264),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2274))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2263),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2264),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2265),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2266))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f147,f161])).
fof(f17367,plain,(
  ( ! [X2190,X2188,X2186,X2184,X2180,X2189,X2187,X2185,X2183] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2183),s('type.list.list'(sK0),X2184),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2185),s('type.list.list'(sK0),X2186))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2187),s('type.list.list'(sK0),X2188),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2180),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2189),s('type.list.list'(sK0),X2190)))) ) | $spl224),
  inference(cnf_transformation,[],[f17367_D])).
fof(f17367_D,plain,(
  ( ! [X2190,X2188,X2186,X2184,X2180,X2189,X2187,X2185,X2183] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2183),s('type.list.list'(sK0),X2184),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2185),s('type.list.list'(sK0),X2186))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2187),s('type.list.list'(sK0),X2188),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2180),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2189),s('type.list.list'(sK0),X2190)))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f17366,plain,(
  ( ! [X2190,X2188,X2186,X2184,X2180,X2189,X2187,X2185,X2183,X2179] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2179),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2183),s('type.list.list'(sK0),X2184),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2185),s('type.list.list'(sK0),X2186))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2187),s('type.list.list'(sK0),X2188),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2180),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2189),s('type.list.list'(sK0),X2190)))) )),
  inference(forward_demodulation,[],[f16479,f109])).
fof(f16479,plain,(
  ( ! [X2190,X2188,X2186,X2184,X2182,X2180,X2189,X2187,X2185,X2183,X2181,X2179] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2183),s('type.list.list'(sK0),X2184),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2185),s('type.list.list'(sK0),X2186))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2187),s('type.list.list'(sK0),X2188),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2180),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2189),s('type.list.list'(sK0),X2190))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2179),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2180),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2181),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2182))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f145,f161])).
fof(f17364,plain,(
  ( ! [X2105,X2103,X2101,X2099,X2106,X2104,X2102,X2100,X2096] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2099),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2100),s('type.list.list'(sK0),X2101),s('type.list.list'(sK0),X2102))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2096),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2104),s('type.list.list'(sK0),X2105),s('type.list.list'(sK0),X2106)))) ) | $spl220),
  inference(cnf_transformation,[],[f17364_D])).
fof(f17364_D,plain,(
  ( ! [X2105,X2103,X2101,X2099,X2106,X2104,X2102,X2100,X2096] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2099),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2100),s('type.list.list'(sK0),X2101),s('type.list.list'(sK0),X2102))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2096),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2104),s('type.list.list'(sK0),X2105),s('type.list.list'(sK0),X2106)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f17363,plain,(
  ( ! [X2105,X2103,X2101,X2099,X2095,X2106,X2104,X2102,X2100,X2096] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X2095),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2099),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2100),s('type.list.list'(sK0),X2101),s('type.list.list'(sK0),X2102))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2096),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2104),s('type.list.list'(sK0),X2105),s('type.list.list'(sK0),X2106)))) )),
  inference(forward_demodulation,[],[f16472,f109])).
fof(f16472,plain,(
  ( ! [X2105,X2103,X2101,X2099,X2097,X2095,X2106,X2104,X2102,X2100,X2098,X2096] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2099),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2100),s('type.list.list'(sK0),X2101),s('type.list.list'(sK0),X2102))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2103),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2096),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2104),s('type.list.list'(sK0),X2105),s('type.list.list'(sK0),X2106))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2095),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2096),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2097),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2098))),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f143,f161])).
fof(f17362,plain,(
  ( ! [X2018,X2016,X2012,X2021,X2019,X2017,X2015,X2022,X2020] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2015),s('type.list.list'(sK0),X2016),s('type.list.list'(sK0),X2017),s('type.list.list'(sK0),X2018),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2019),s('type.list.list'(sK0),X2020),s('type.list.list'(sK0),X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2012),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl218),
  inference(cnf_transformation,[],[f17362_D])).
fof(f17362_D,plain,(
  ( ! [X2018,X2016,X2012,X2021,X2019,X2017,X2015,X2022,X2020] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2015),s('type.list.list'(sK0),X2016),s('type.list.list'(sK0),X2017),s('type.list.list'(sK0),X2018),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2019),s('type.list.list'(sK0),X2020),s('type.list.list'(sK0),X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2012),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f17361,plain,(
  ( ! [X2018,X2016,X2012,X2021,X2011,X2017,X2015,X2019,X2022,X2020] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2011),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2015),s('type.list.list'(sK0),X2016),s('type.list.list'(sK0),X2017),s('type.list.list'(sK0),X2018),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2019),s('type.list.list'(sK0),X2020),s('type.list.list'(sK0),X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2012),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f16465,f109])).
fof(f16465,plain,(
  ( ! [X2018,X2016,X2014,X2012,X2021,X2019,X2017,X2015,X2011,X2013,X2022,X2020] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2015),s('type.list.list'(sK0),X2016),s('type.list.list'(sK0),X2017),s('type.list.list'(sK0),X2018),s('type.list.list'(sK0),sK3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2019),s('type.list.list'(sK0),X2020),s('type.list.list'(sK0),X2021),s('type.list.list'(sK0),X2022),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2012),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2011),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2012),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2013),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2014))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f141,f161])).
fof(f17360,plain,(
  ( ! [X1938,X1936,X1934,X1932,X1928,X1937,X1935,X1933,X1931] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1933),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1934))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1935),s('type.list.list'(sK0),X1936),s('type.list.list'(sK0),X1937),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1938)))) ) | $spl216),
  inference(cnf_transformation,[],[f17360_D])).
fof(f17360_D,plain,(
  ( ! [X1938,X1936,X1934,X1932,X1928,X1937,X1935,X1933,X1931] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1933),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1934))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1935),s('type.list.list'(sK0),X1936),s('type.list.list'(sK0),X1937),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1938)))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f17359,plain,(
  ( ! [X1938,X1936,X1934,X1932,X1928,X1937,X1935,X1933,X1931,X1927] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1927),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1933),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1934))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1935),s('type.list.list'(sK0),X1936),s('type.list.list'(sK0),X1937),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1938)))) )),
  inference(forward_demodulation,[],[f16458,f109])).
fof(f16458,plain,(
  ( ! [X1938,X1936,X1934,X1932,X1930,X1928,X1937,X1935,X1933,X1931,X1929,X1927] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1933),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1934))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1935),s('type.list.list'(sK0),X1936),s('type.list.list'(sK0),X1937),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1928),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1938))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1927),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1928),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1929),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1930))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f139,f161])).
fof(f17358,plain,(
  ( ! [X1853,X1851,X1849,X1847,X1854,X1852,X1850,X1848,X1844] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1847),s('type.list.list'(sK0),X1848),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1849),s('type.list.list'(sK0),X1850))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1851),s('type.list.list'(sK0),X1852),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1844),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1854)))) ) | $spl214),
  inference(cnf_transformation,[],[f17358_D])).
fof(f17358_D,plain,(
  ( ! [X1853,X1851,X1849,X1847,X1854,X1852,X1850,X1848,X1844] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1847),s('type.list.list'(sK0),X1848),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1849),s('type.list.list'(sK0),X1850))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1851),s('type.list.list'(sK0),X1852),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1844),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1854)))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f17357,plain,(
  ( ! [X1853,X1851,X1849,X1847,X1843,X1854,X1852,X1850,X1848,X1844] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1843),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1847),s('type.list.list'(sK0),X1848),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1849),s('type.list.list'(sK0),X1850))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1851),s('type.list.list'(sK0),X1852),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1844),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1854)))) )),
  inference(forward_demodulation,[],[f16451,f109])).
fof(f16451,plain,(
  ( ! [X1853,X1851,X1849,X1847,X1845,X1843,X1854,X1852,X1850,X1848,X1846,X1844] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1847),s('type.list.list'(sK0),X1848),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1849),s('type.list.list'(sK0),X1850))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1851),s('type.list.list'(sK0),X1852),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1844),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1854))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1843),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1844),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1845),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1846))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f137,f161])).
fof(f17356,plain,(
  ( ! [X1763,X1765,X1767,X1769,X1760,X1764,X1766,X1768,X1770] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1763),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1764),s('type.list.list'(sK0),X1765),s('type.list.list'(sK0),X1766))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1767),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1760),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1768),s('type.list.list'(sK0),X1769),s('type.list.list'(sK0),X1770)))) ) | $spl212),
  inference(cnf_transformation,[],[f17356_D])).
fof(f17356_D,plain,(
  ( ! [X1763,X1765,X1767,X1769,X1760,X1764,X1766,X1768,X1770] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1763),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1764),s('type.list.list'(sK0),X1765),s('type.list.list'(sK0),X1766))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1767),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1760),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1768),s('type.list.list'(sK0),X1769),s('type.list.list'(sK0),X1770)))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f17355,plain,(
  ( ! [X1763,X1765,X1767,X1769,X1759,X1760,X1764,X1766,X1768,X1770] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1759),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1763),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1764),s('type.list.list'(sK0),X1765),s('type.list.list'(sK0),X1766))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1767),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1760),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1768),s('type.list.list'(sK0),X1769),s('type.list.list'(sK0),X1770)))) )),
  inference(forward_demodulation,[],[f16444,f109])).
fof(f16444,plain,(
  ( ! [X1761,X1763,X1765,X1767,X1769,X1759,X1760,X1762,X1764,X1766,X1768,X1770] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1763),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X1764),s('type.list.list'(sK0),X1765),s('type.list.list'(sK0),X1766))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1767),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1760),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1768),s('type.list.list'(sK0),X1769),s('type.list.list'(sK0),X1770))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1759),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1760),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1761),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1762))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f135,f161])).
fof(f17353,plain,(
  ( ! [X1676,X1681,X1683,X1685,X1675,X1679,X1680,X1682,X1684,X1686] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1675),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),X1681),s('type.list.list'(sK0),X1682),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1676),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f16437,f109])).
fof(f16437,plain,(
  ( ! [X1676,X1681,X1683,X1685,X1678,X1675,X1677,X1679,X1680,X1682,X1684,X1686] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),X1681),s('type.list.list'(sK0),X1682),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),X1685),s('type.list.list'(sK0),X1686),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1676),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1675),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1676),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1677),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1678))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f133,f161])).
fof(f17351,plain,(
  ( ! [X1600,X1602,X1592,X1596,X1598,X1601,X1591,X1595,X1597,X1599] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1591),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1595),s('type.list.list'(sK0),X1596),s('type.list.list'(sK0),X1597),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1598))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1599),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1601),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1592),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1602)))) )),
  inference(forward_demodulation,[],[f16430,f109])).
fof(f16430,plain,(
  ( ! [X1600,X1602,X1592,X1594,X1596,X1598,X1601,X1591,X1593,X1595,X1597,X1599] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1595),s('type.list.list'(sK0),X1596),s('type.list.list'(sK0),X1597),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1598))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1599),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1601),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1592),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1602))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1591),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1592),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1593),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1594))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f131,f161])).
fof(f17349,plain,(
  ( ! [X1513,X1515,X1517,X1507,X1511,X1512,X1514,X1516,X1518,X1508] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1507),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1513),s('type.list.list'(sK0),X1514))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1515),s('type.list.list'(sK0),X1516),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1508),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1517),s('type.list.list'(sK0),X1518)))) )),
  inference(forward_demodulation,[],[f16423,f109])).
fof(f16423,plain,(
  ( ! [X1513,X1515,X1517,X1507,X1509,X1511,X1512,X1514,X1516,X1518,X1508,X1510] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1513),s('type.list.list'(sK0),X1514))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1515),s('type.list.list'(sK0),X1516),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1508),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1517),s('type.list.list'(sK0),X1518))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1507),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1508),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1509),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1510))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f129,f161])).
fof(f17346,plain,(
  ( ! [X1434,X1428,X1430,X1424,X1433,X1427,X1429,X1431,X1423,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1423),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1427),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1428),s('type.list.list'(sK0),X1429),s('type.list.list'(sK0),X1430))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1431),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1424),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1432),s('type.list.list'(sK0),X1433),s('type.list.list'(sK0),X1434)))) )),
  inference(forward_demodulation,[],[f16416,f109])).
fof(f16416,plain,(
  ( ! [X1434,X1428,X1430,X1424,X1426,X1433,X1427,X1429,X1431,X1425,X1423,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1427),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1428),s('type.list.list'(sK0),X1429),s('type.list.list'(sK0),X1430))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1431),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1424),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1432),s('type.list.list'(sK0),X1433),s('type.list.list'(sK0),X1434))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1423),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1424),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1425),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1426))),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f127,f161])).
fof(f17345,plain,(
  ( ! [X945,X940,X946,X944,X943] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X940),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X943),s('type.list.list'(sK0),X944),s('type.list.list'(sK0),X945),s('type.list.list'(sK0),X946)))) ) | $spl200),
  inference(cnf_transformation,[],[f17345_D])).
fof(f17345_D,plain,(
  ( ! [X945,X940,X946,X944,X943] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X940),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X943),s('type.list.list'(sK0),X944),s('type.list.list'(sK0),X945),s('type.list.list'(sK0),X946)))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f17340,plain,(
  ( ! [X494] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X494),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl194),
  inference(cnf_transformation,[],[f17340_D])).
fof(f17340_D,plain,(
  ( ! [X494] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X494),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f17344,plain,(
  ( ! [X945,X940,X946,X944,X939,X943] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X939),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X940),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X943),s('type.list.list'(sK0),X944),s('type.list.list'(sK0),X945),s('type.list.list'(sK0),X946)))) )),
  inference(forward_demodulation,[],[f16369,f109])).
fof(f16369,plain,(
  ( ! [X945,X942,X940,X946,X944,X939,X943,X941] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X940),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X943),s('type.list.list'(sK0),X944),s('type.list.list'(sK0),X945),s('type.list.list'(sK0),X946))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X939),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X940),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X941),s(fun('type.list.list'(sK0),'type.num.num'),X942))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f592,f161])).
fof(f17342,plain,(
  ( ! [X892] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X892),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl196),
  inference(cnf_transformation,[],[f17342_D])).
fof(f17342_D,plain,(
  ( ! [X892] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X892),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f17343,plain,(
  ( ! [X895,X897,X898,X896,X891] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X891),s('type.list.list'(sK0),X898),s('type.list.list'(sK0),X897),s('type.list.list'(sK0),X896),s('type.list.list'(sK0),X895))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X898) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X897) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X896) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X895)) ) | $spl198),
  inference(cnf_transformation,[],[f17343_D])).
fof(f17343_D,plain,(
  ( ! [X895,X897,X898,X896,X891] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X891),s('type.list.list'(sK0),X898),s('type.list.list'(sK0),X897),s('type.list.list'(sK0),X896),s('type.list.list'(sK0),X895))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X898) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X897) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X896) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X895)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f17341,plain,(
  ( ! [X895,X897,X892,X898,X896,X891] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X891),s('type.list.list'(sK0),X898),s('type.list.list'(sK0),X897),s('type.list.list'(sK0),X896),s('type.list.list'(sK0),X895))) | s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X892),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X895) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X896) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X897) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X898)) )),
  inference(forward_demodulation,[],[f16363,f109])).
fof(f16363,plain,(
  ( ! [X895,X893,X897,X894,X892,X898,X896,X891] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X892),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X895) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X896) | s('type.list.list'(sK0),sK3) != s('type.list.list'(sK0),X897) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X898) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X891),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X892),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X893),s(fun('type.list.list'(sK0),'type.num.num'),X894))),s('type.list.list'(sK0),X898),s('type.list.list'(sK0),X897),s('type.list.list'(sK0),X896),s('type.list.list'(sK0),X895)))) )),
  inference(superposition,[],[f159,f161])).
fof(f17339,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X495,X501,X503] : (s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X498),X499),s('type.list.list'(X498),X500),s('type.list.list'(X498),X501),s('type.list.list'(X498),X502))) != s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X495),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X498),X503),s('type.list.list'(X498),X504),s('type.list.list'(X498),X505),s('type.list.list'(X498),X506)))) ) | $spl192),
  inference(cnf_transformation,[],[f17339_D])).
fof(f17339_D,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X495,X501,X503] : (s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X498),X499),s('type.list.list'(X498),X500),s('type.list.list'(X498),X501),s('type.list.list'(X498),X502))) != s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X495),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X498),X503),s('type.list.list'(X498),X504),s('type.list.list'(X498),X505),s('type.list.list'(X498),X506)))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f17338,plain,(
  ( ! [X499,X505,X494,X500,X502,X498,X504,X506,X495,X501,X503] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X494),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X498),X499),s('type.list.list'(X498),X500),s('type.list.list'(X498),X501),s('type.list.list'(X498),X502))) != s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X495),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X498),X503),s('type.list.list'(X498),X504),s('type.list.list'(X498),X505),s('type.list.list'(X498),X506)))) )),
  inference(forward_demodulation,[],[f16330,f109])).
fof(f16330,plain,(
  ( ! [X499,X505,X494,X500,X502,X496,X498,X504,X506,X495,X501,X503,X497] : (s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X498),X499),s('type.list.list'(X498),X500),s('type.list.list'(X498),X501),s('type.list.list'(X498),X502))) != s('type.HoodMelvilleQueue.status'(X498),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X495),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X498),X503),s('type.list.list'(X498),X504),s('type.list.list'(X498),X505),s('type.list.list'(X498),X506))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X494),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X495),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X496),s(fun('type.list.list'(sK0),'type.num.num'),X497))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f125,f161])).
fof(f17333,plain,(
  ( ! [X128,X129] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16297,f109])).
fof(f16297,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X128),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X130),s(fun('type.list.list'(sK0),bool),X131)))) )),
  inference(superposition,[],[f98,f161])).
fof(f17332,plain,(
  ( ! [X125,X124] : (~p(s(bool,X124)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16296,f109])).
fof(f16296,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X126),s(fun('type.list.list'(sK0),bool),X127))))) )),
  inference(superposition,[],[f98,f161])).
fof(f17331,plain,(
  ( ! [X121,X120] : (s(bool,'T_0') != s(bool,X120) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16295,f109])).
fof(f16295,plain,(
  ( ! [X123,X121,X122,X120] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X120),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X122),s(fun('type.list.list'(sK0),bool),X123)))) )),
  inference(superposition,[],[f97,f161])).
fof(f17330,plain,(
  ( ! [X116,X117] : (p(s(bool,X116)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16294,f109])).
fof(f16294,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X116),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X118),s(fun('type.list.list'(sK0),bool),X119))))) )),
  inference(superposition,[],[f97,f161])).
fof(f17329,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') = s(bool,X112) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16293,f109])).
fof(f16293,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X112),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X114),s(fun('type.list.list'(sK0),bool),X115)))) )),
  inference(superposition,[],[f96,f161])).
fof(f17328,plain,(
  ( ! [X109,X108] : (~p(s(bool,X108)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16292,f109])).
fof(f16292,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X108),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X110),s(fun('type.list.list'(sK0),bool),X111))))) )),
  inference(superposition,[],[f96,f161])).
fof(f17327,plain,(
  ( ! [X105,X104] : (s(bool,'T_0') != s(bool,X104) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16291,f109])).
fof(f16291,plain,(
  ( ! [X107,X105,X106,X104] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X104),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X106),s(fun('type.list.list'(sK0),bool),X107)))) )),
  inference(superposition,[],[f95,f161])).
fof(f17325,plain,(
  ( ! [X101,X100] : (p(s(bool,X100)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16290,f109])).
fof(f16290,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X100),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X102),s(fun('type.list.list'(sK0),bool),X103))))) )),
  inference(superposition,[],[f95,f161])).
fof(f17324,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,X96) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16289,f109])).
fof(f16289,plain,(
  ( ! [X99,X97,X98,X96] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X96),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X98),s(fun('type.list.list'(sK0),bool),X99)))) )),
  inference(superposition,[],[f94,f161])).
fof(f17323,plain,(
  ( ! [X92,X93] : (p(s(bool,X92)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16288,f109])).
fof(f16288,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X92),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X94),s(fun('type.list.list'(sK0),bool),X95))))) )),
  inference(superposition,[],[f94,f161])).
fof(f17322,plain,(
  ( ! [X88,X89] : (s(bool,'F_0') != s(bool,X88) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16287,f109])).
fof(f16287,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X88),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X90),s(fun('type.list.list'(sK0),bool),X91)))) )),
  inference(superposition,[],[f93,f161])).
fof(f17321,plain,(
  ( ! [X85,X84] : (~p(s(bool,X84)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16286,f109])).
fof(f16286,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X84),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X86),s(fun('type.list.list'(sK0),bool),X87))))) )),
  inference(superposition,[],[f93,f161])).
fof(f17320,plain,(
  ( ! [X80,X81] : (s(bool,'F_0') = s(bool,X80) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16285,f109])).
fof(f16285,plain,(
  ( ! [X80,X83,X81,X82] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X80),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X82),s(fun('type.list.list'(sK0),bool),X83)))) )),
  inference(superposition,[],[f92,f161])).
fof(f17319,plain,(
  ( ! [X76,X77] : (p(s(bool,X76)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16284,f109])).
fof(f16284,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X76),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X78),s(fun('type.list.list'(sK0),bool),X79))))) )),
  inference(superposition,[],[f92,f161])).
fof(f17318,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') != s(bool,X72) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16283,f109])).
fof(f16283,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X72),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X74),s(fun('type.list.list'(sK0),bool),X75)))) )),
  inference(superposition,[],[f91,f161])).
fof(f17316,plain,(
  ( ! [X68,X69] : (~p(s(bool,X68)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16282,f109])).
fof(f16282,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X68),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X70),s(fun('type.list.list'(sK0),bool),X71))))) )),
  inference(superposition,[],[f91,f161])).
fof(f17315,plain,(
  ( ! [X64,X67,X63] : (s(bool,X63) = s(bool,X67) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X67))) )),
  inference(forward_demodulation,[],[f16281,f109])).
fof(f16281,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X67) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X63),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X65),s(fun('type.list.list'(sK0),bool),X66))) | ~p(s(bool,X67))) )),
  inference(superposition,[],[f88,f161])).
fof(f17314,plain,(
  ( ! [X59,X62,X58] : (s(bool,X58) = s(bool,X62) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X62))) )),
  inference(forward_demodulation,[],[f16280,f109])).
fof(f16280,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X62) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X58),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X60),s(fun('type.list.list'(sK0),bool),X61))) | ~p(s(bool,X62))) )),
  inference(superposition,[],[f88,f161])).
fof(f17313,plain,(
  ( ! [X57,X54,X53] : (~p(s(bool,X53)) | s(bool,X57) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X57))) )),
  inference(forward_demodulation,[],[f16279,f109])).
fof(f16279,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X57)) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X53),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X55),s(fun('type.list.list'(sK0),bool),X56))))) )),
  inference(superposition,[],[f88,f161])).
fof(f17312,plain,(
  ( ! [X52,X48,X49] : (~p(s(bool,X48)) | s(bool,X52) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X52))) )),
  inference(forward_demodulation,[],[f16278,f109])).
fof(f16278,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X52) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X50),s(fun('type.list.list'(sK0),bool),X51)))) | ~p(s(bool,X52))) )),
  inference(superposition,[],[f88,f161])).
fof(f17311,plain,(
  ( ! [X47,X43,X44] : (s(bool,X43) = s(bool,X47) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X47))) )),
  inference(forward_demodulation,[],[f16277,f109])).
fof(f16277,plain,(
  ( ! [X47,X45,X43,X46,X44] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X47) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X43),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X45),s(fun('type.list.list'(sK0),bool),X46))) | p(s(bool,X47))) )),
  inference(superposition,[],[f85,f161])).
fof(f17310,plain,(
  ( ! [X39,X38,X42] : (s(bool,X38) = s(bool,X42) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X42))) )),
  inference(forward_demodulation,[],[f16276,f109])).
fof(f16276,plain,(
  ( ! [X39,X41,X38,X42,X40] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X42) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X38),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X40),s(fun('type.list.list'(sK0),bool),X41))) | p(s(bool,X42))) )),
  inference(superposition,[],[f85,f161])).
fof(f17309,plain,(
  ( ! [X37,X33,X34] : (p(s(bool,X33)) | s(bool,X37) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X37))) )),
  inference(forward_demodulation,[],[f16275,f109])).
fof(f16275,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s(bool,X37) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36)))) | p(s(bool,X37))) )),
  inference(superposition,[],[f85,f161])).
fof(f17308,plain,(
  ( ! [X28,X29,X32] : (p(s(bool,X28)) | s(bool,X32) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X32))) )),
  inference(forward_demodulation,[],[f16274,f109])).
fof(f16274,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,X32) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X32)) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X28),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X30),s(fun('type.list.list'(sK0),bool),X31))))) )),
  inference(superposition,[],[f85,f161])).
fof(f17306,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') = s(bool,X49) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16257,f109])).
fof(f16257,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X50),s(fun('type.list.list'(sK0),bool),X51))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f98])).
fof(f17305,plain,(
  ( ! [X45,X44] : (s(bool,'T_0') = s(bool,X45) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16256,f109])).
fof(f16256,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X45),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X46),s(fun('type.list.list'(sK0),bool),X47))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f96])).
fof(f17304,plain,(
  ( ! [X41,X40] : (s(bool,'F_0') = s(bool,X41) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16255,f109])).
fof(f16255,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X41),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X42),s(fun('type.list.list'(sK0),bool),X43))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f94])).
fof(f17303,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') = s(bool,X37) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16254,f109])).
fof(f16254,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X37),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X38),s(fun('type.list.list'(sK0),bool),X39))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f92])).
fof(f17302,plain,(
  ( ! [X33,X31,X32] : (s(bool,X32) = s(bool,X33) | ~p(s(bool,X32)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16253,f109])).
fof(f16253,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X32) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X34),s(fun('type.list.list'(sK0),bool),X35))) | ~p(s(bool,X32)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f88])).
fof(f17300,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) = s(bool,X28) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X27))) )),
  inference(forward_demodulation,[],[f16252,f109])).
fof(f16252,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,X27) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X28),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X29),s(fun('type.list.list'(sK0),bool),X30))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X27))) )),
  inference(superposition,[],[f161,f88])).
fof(f17299,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) = s(bool,X23) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X22))) )),
  inference(forward_demodulation,[],[f16251,f109])).
fof(f16251,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,X22) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X23),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X24),s(fun('type.list.list'(sK0),bool),X25))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X22))) )),
  inference(superposition,[],[f161,f85])).
fof(f17297,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) = s(bool,X18) | p(s(bool,X17)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f16250,f109])).
fof(f16250,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X17) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X18),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X19),s(fun('type.list.list'(sK0),bool),X20))) | p(s(bool,X17)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) )),
  inference(superposition,[],[f161,f85])).
fof(f17285,plain,(
  ( ! [X43,X42] : (~p(s(bool,X42)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16196,f109])).
fof(f16196,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X42),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X44),s(fun('type.list.list'(sK0),bool),X45))))) )),
  inference(superposition,[],[f161,f98])).
fof(f17283,plain,(
  ( ! [X39,X38] : (~p(s(bool,X38)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16195,f109])).
fof(f16195,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X38),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X40),s(fun('type.list.list'(sK0),bool),X41))))) )),
  inference(superposition,[],[f161,f96])).
fof(f17282,plain,(
  ( ! [X35,X34] : (p(s(bool,X34)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16194,f109])).
fof(f16194,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X36),s(fun('type.list.list'(sK0),bool),X37))))) )),
  inference(superposition,[],[f161,f94])).
fof(f17280,plain,(
  ( ! [X30,X31] : (p(s(bool,X30)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f16193,f109])).
fof(f16193,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X30),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X32),s(fun('type.list.list'(sK0),bool),X33))))) )),
  inference(superposition,[],[f161,f92])).
fof(f17279,plain,(
  ( ! [X26,X29,X25] : (~p(s(bool,X25)) | s(bool,X29) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X29))) )),
  inference(forward_demodulation,[],[f16192,f109])).
fof(f16192,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X29) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X29)) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X25),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X27),s(fun('type.list.list'(sK0),bool),X28))))) )),
  inference(superposition,[],[f161,f88])).
fof(f17277,plain,(
  ( ! [X24,X21,X20] : (~p(s(bool,X20)) | s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) )),
  inference(forward_demodulation,[],[f16191,f109])).
fof(f16191,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X20),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X22),s(fun('type.list.list'(sK0),bool),X23)))) | ~p(s(bool,X24))) )),
  inference(superposition,[],[f161,f88])).
fof(f17276,plain,(
  ( ! [X19,X15,X16] : (p(s(bool,X15)) | s(bool,X19) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X19))) )),
  inference(forward_demodulation,[],[f16190,f109])).
fof(f16190,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,X19) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X15),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X17),s(fun('type.list.list'(sK0),bool),X18)))) | p(s(bool,X19))) )),
  inference(superposition,[],[f161,f85])).
fof(f17274,plain,(
  ( ! [X14,X10,X11] : (p(s(bool,X10)) | s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) )),
  inference(forward_demodulation,[],[f16189,f109])).
fof(f16189,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK3))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14)) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X10),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X12),s(fun('type.list.list'(sK0),bool),X13))))) )),
  inference(superposition,[],[f161,f85])).
fof(f13036,plain,(
  ( ! [X3506] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3506),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl174),
  inference(cnf_transformation,[],[f13036_D])).
fof(f13036_D,plain,(
  ( ! [X3506] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3506),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f13043,plain,(
  ( ! [X3961,X3958,X3954,X3960,X3959,X3955] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3958),s('type.list.list'(sK0),X3959),s('type.list.list'(sK0),X3960),s('type.list.list'(sK0),X3961),s('type.list.list'(sK0),X3955))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3954),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12678,f109])).
fof(f12678,plain,(
  ( ! [X3961,X3958,X3956,X3954,X3960,X3959,X3957,X3955] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3958),s('type.list.list'(sK0),X3959),s('type.list.list'(sK0),X3960),s('type.list.list'(sK0),X3961),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3955),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3954),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3956),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3957))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3954),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f10883,f11344])).
fof(f11344,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(X0,X1),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))))),X2),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))),X3),s(fun('type.list.list'(sK0),X0),X4))) = s(X0,happ(s(fun('type.list.list'(sK0),X0),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),X0))))),X2),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f161,f8078])).
fof(f8078,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK3) | $spl24),
  inference(trivial_inequality_removal,[],[f8052])).
fof(f8052,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK3) | $spl24),
  inference(superposition,[],[f166,f8008])).
fof(f10883,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X4)))) ) | $spl24),
  inference(superposition,[],[f8754,f8008])).
fof(f8754,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X54)))) ) | $spl24),
  inference(forward_demodulation,[],[f157,f8078])).
fof(f13042,plain,(
  ( ! [X3911,X3907,X3913,X3910,X3906,X3912] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3910),s('type.list.list'(sK0),X3911),s('type.list.list'(sK0),X3907),s('type.list.list'(sK0),X3912),s('type.list.list'(sK0),X3913))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3906),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12672,f109])).
fof(f12672,plain,(
  ( ! [X3911,X3909,X3907,X3913,X3910,X3908,X3906,X3912] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3910),s('type.list.list'(sK0),X3911),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3907),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3906),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3908),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3909))),s('type.list.list'(sK0),X3912),s('type.list.list'(sK0),X3913))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3906),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f10593,f11344])).
fof(f10593,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2)))) ) | $spl24),
  inference(superposition,[],[f8750,f8008])).
fof(f8750,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X18)))) ) | $spl24),
  inference(forward_demodulation,[],[f153,f8078])).
fof(f13031,plain,(
  ( ! [X3159] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3159),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl172),
  inference(cnf_transformation,[],[f13031_D])).
fof(f13031_D,plain,(
  ( ! [X3159] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3159),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f13041,plain,(
  ( ! [X3889,X3886,X3882,X3888,X3887,X3883] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3886),s('type.list.list'(sK0),X3887),s('type.list.list'(sK0),X3888),s('type.list.list'(sK0),X3883),s('type.list.list'(sK0),X3889))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3882),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12669,f109])).
fof(f12669,plain,(
  ( ! [X3889,X3886,X3884,X3882,X3888,X3887,X3885,X3883] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3886),s('type.list.list'(sK0),X3887),s('type.list.list'(sK0),X3888),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3883),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3882),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3884),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3885))),s('type.list.list'(sK0),X3889))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3882),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f10192,f11344])).
fof(f10192,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8744,f8008])).
fof(f8744,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f147,f8078])).
fof(f13014,plain,(
  ( ! [X2307] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2307),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl160),
  inference(cnf_transformation,[],[f13014_D])).
fof(f13014_D,plain,(
  ( ! [X2307] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2307),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f13040,plain,(
  ( ! [X3864,X3863,X3859,X3865,X3862,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3862),s('type.list.list'(sK0),X3863),s('type.list.list'(sK0),X3864),s('type.list.list'(sK0),X3865),s('type.list.list'(sK0),X3859))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12666,f109])).
fof(f12666,plain,(
  ( ! [X3864,X3863,X3861,X3859,X3865,X3862,X3860,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3862),s('type.list.list'(sK0),X3863),s('type.list.list'(sK0),X3864),s('type.list.list'(sK0),X3865),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3859),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3860),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3861))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3858),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f9790,f11344])).
fof(f9790,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8088,f8008])).
fof(f8088,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f141])).
fof(f13039,plain,(
  ( ! [X3763,X3765,X3767,X3759,X3768,X3762,X3764,X3766,X3758,X3769] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3762),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),X3764),s('type.list.list'(sK0),X3765),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3766),s('type.list.list'(sK0),X3767),s('type.list.list'(sK0),X3768),s('type.list.list'(sK0),X3769),s('type.list.list'(sK0),X3759))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3758),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12657,f109])).
fof(f12657,plain,(
  ( ! [X3761,X3763,X3765,X3767,X3759,X3768,X3760,X3762,X3764,X3766,X3758,X3769] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3762),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),X3764),s('type.list.list'(sK0),X3765),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3766),s('type.list.list'(sK0),X3767),s('type.list.list'(sK0),X3768),s('type.list.list'(sK0),X3769),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3759),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3758),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3760),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3761))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3758),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f8754,f11344])).
fof(f13038,plain,(
  ( ! [X3678,X3681,X3683,X3685,X3675,X3679,X3680,X3682,X3684,X3674] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3678),s('type.list.list'(sK0),X3679),s('type.list.list'(sK0),X3680),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3681))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3682),s('type.list.list'(sK0),X3683),s('type.list.list'(sK0),X3684),s('type.list.list'(sK0),X3675),s('type.list.list'(sK0),X3685))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3674),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12650,f109])).
fof(f12650,plain,(
  ( ! [X3676,X3678,X3681,X3683,X3685,X3675,X3677,X3679,X3680,X3682,X3684,X3674] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3678),s('type.list.list'(sK0),X3679),s('type.list.list'(sK0),X3680),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3681))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3682),s('type.list.list'(sK0),X3683),s('type.list.list'(sK0),X3684),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3675),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3674),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3676),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3677))),s('type.list.list'(sK0),X3685))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3674),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f8752,f11344])).
fof(f8752,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X36)))) ) | $spl24),
  inference(forward_demodulation,[],[f155,f8078])).
fof(f13037,plain,(
  ( ! [X3600,X3594,X3596,X3598,X3590,X3601,X3595,X3597,X3599,X3591] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3594),s('type.list.list'(sK0),X3595),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3596),s('type.list.list'(sK0),X3597))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3598),s('type.list.list'(sK0),X3599),s('type.list.list'(sK0),X3591),s('type.list.list'(sK0),X3600),s('type.list.list'(sK0),X3601))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3590),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12643,f109])).
fof(f12643,plain,(
  ( ! [X3600,X3592,X3594,X3596,X3598,X3590,X3601,X3593,X3595,X3597,X3599,X3591] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3594),s('type.list.list'(sK0),X3595),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3596),s('type.list.list'(sK0),X3597))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3598),s('type.list.list'(sK0),X3599),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3591),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3590),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3592),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3593))),s('type.list.list'(sK0),X3600),s('type.list.list'(sK0),X3601))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3590),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f8750,f11344])).
fof(f13035,plain,(
  ( ! [X3506,X3510,X3512,X3514,X3516,X3507,X3511,X3513,X3515,X3517] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3510),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3511),s('type.list.list'(sK0),X3512),s('type.list.list'(sK0),X3513))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3514),s('type.list.list'(sK0),X3507),s('type.list.list'(sK0),X3515),s('type.list.list'(sK0),X3516),s('type.list.list'(sK0),X3517))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3506),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12636,f109])).
fof(f12636,plain,(
  ( ! [X3506,X3508,X3510,X3512,X3514,X3516,X3507,X3509,X3511,X3513,X3515,X3517] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3510),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3511),s('type.list.list'(sK0),X3512),s('type.list.list'(sK0),X3513))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3514),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3507),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3506),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3508),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3509))),s('type.list.list'(sK0),X3515),s('type.list.list'(sK0),X3516),s('type.list.list'(sK0),X3517))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3506),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(superposition,[],[f8748,f11344])).
fof(f8748,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X0)))) ) | $spl24),
  inference(forward_demodulation,[],[f151,f8078])).
fof(f13034,plain,(
  ( ! [X3426,X3428,X3430,X3432,X3423,X3427,X3429,X3431,X3433,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),X3428),s('type.list.list'(sK0),X3429),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3430),s('type.list.list'(sK0),X3431),s('type.list.list'(sK0),X3432),s('type.list.list'(sK0),X3433),s('type.list.list'(sK0),X3423))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3422),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12629,f109])).
fof(f12629,plain,(
  ( ! [X3424,X3426,X3428,X3430,X3432,X3423,X3425,X3427,X3429,X3431,X3433,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),X3428),s('type.list.list'(sK0),X3429),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3430),s('type.list.list'(sK0),X3431),s('type.list.list'(sK0),X3432),s('type.list.list'(sK0),X3433),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3423),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3422),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3424),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3425))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3422),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8746,f11344])).
fof(f8746,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f149,f8078])).
fof(f13033,plain,(
  ( ! [X3339,X3343,X3345,X3347,X3349,X3338,X3342,X3344,X3346,X3348] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3342),s('type.list.list'(sK0),X3343),s('type.list.list'(sK0),X3344),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3345))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3346),s('type.list.list'(sK0),X3347),s('type.list.list'(sK0),X3348),s('type.list.list'(sK0),X3339),s('type.list.list'(sK0),X3349))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3338),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12622,f109])).
fof(f12622,plain,(
  ( ! [X3339,X3341,X3343,X3345,X3347,X3349,X3338,X3340,X3342,X3344,X3346,X3348] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3342),s('type.list.list'(sK0),X3343),s('type.list.list'(sK0),X3344),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3345))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3346),s('type.list.list'(sK0),X3347),s('type.list.list'(sK0),X3348),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3339),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3338),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3340),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3341))),s('type.list.list'(sK0),X3349))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3338),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8744,f11344])).
fof(f13032,plain,(
  ( ! [X3261,X3264,X3254,X3258,X3262,X3260,X3265,X3255,X3259,X3263] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3258),s('type.list.list'(sK0),X3259),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3260),s('type.list.list'(sK0),X3261))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3262),s('type.list.list'(sK0),X3263),s('type.list.list'(sK0),X3255),s('type.list.list'(sK0),X3264),s('type.list.list'(sK0),X3265))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3254),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12615,f109])).
fof(f12615,plain,(
  ( ! [X3261,X3264,X3254,X3258,X3256,X3262,X3260,X3265,X3255,X3259,X3257,X3263] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3258),s('type.list.list'(sK0),X3259),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3260),s('type.list.list'(sK0),X3261))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3262),s('type.list.list'(sK0),X3263),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3255),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3254),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3256),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3257))),s('type.list.list'(sK0),X3264),s('type.list.list'(sK0),X3265))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3254),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8720,f11344])).
fof(f8720,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f145,f8078])).
fof(f13030,plain,(
  ( ! [X3166,X3164,X3169,X3159,X3163,X3167,X3165,X3170,X3168,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3163),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3164),s('type.list.list'(sK0),X3165),s('type.list.list'(sK0),X3166))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3167),s('type.list.list'(sK0),X3160),s('type.list.list'(sK0),X3168),s('type.list.list'(sK0),X3169),s('type.list.list'(sK0),X3170))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3159),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12607,f109])).
fof(f12607,plain,(
  ( ! [X3166,X3164,X3169,X3159,X3163,X3161,X3167,X3165,X3170,X3168,X3162,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3163),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3164),s('type.list.list'(sK0),X3165),s('type.list.list'(sK0),X3166))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3167),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3160),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3159),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3161),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3162))),s('type.list.list'(sK0),X3168),s('type.list.list'(sK0),X3169),s('type.list.list'(sK0),X3170))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3159),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8557,f11344])).
fof(f8557,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f143,f8078])).
fof(f13016,plain,(
  ( ! [X2360] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2360),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl162),
  inference(cnf_transformation,[],[f13016_D])).
fof(f13016_D,plain,(
  ( ! [X2360] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2360),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f13029,plain,(
  ( ! [X3142,X3146,X3148,X3143,X3147,X3149] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3146),s('type.list.list'(sK0),X3143),s('type.list.list'(sK0),X3147),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),X3149))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3142),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12604,f109])).
fof(f12604,plain,(
  ( ! [X3142,X3146,X3144,X3148,X3143,X3147,X3145,X3149] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3146),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3143),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3142),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3144),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3145))),s('type.list.list'(sK0),X3147),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),X3149))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3142),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8096,f11344])).
fof(f8096,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f757])).
fof(f13008,plain,(
  ( ! [X1505] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1505),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl158),
  inference(cnf_transformation,[],[f13008_D])).
fof(f13008_D,plain,(
  ( ! [X1505] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1505),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f13028,plain,(
  ( ! [X3041,X3047,X3045,X3040,X3046,X3044] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3044),s('type.list.list'(sK0),X3045),s('type.list.list'(sK0),X3041),s('type.list.list'(sK0),X3046),s('type.list.list'(sK0),X3047))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12590,f109])).
fof(f12590,plain,(
  ( ! [X3043,X3041,X3047,X3045,X3042,X3040,X3046,X3044] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3044),s('type.list.list'(sK0),X3045),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3041),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3042),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3043))),s('type.list.list'(sK0),X3046),s('type.list.list'(sK0),X3047))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3040),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8090,f11344])).
fof(f8090,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X25),s('type.list.list'(sK0),X26),s('type.list.list'(sK0),X27),s('type.list.list'(sK0),X28),s('type.list.list'(sK0),X29))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),X27)) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f166])).
fof(f13026,plain,(
  ( ! [X2948,X2954,X2952,X2958,X2956,X2949,X2955,X2953,X2959,X2957] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),X2954),s('type.list.list'(sK0),X2955),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2956),s('type.list.list'(sK0),X2957),s('type.list.list'(sK0),X2958),s('type.list.list'(sK0),X2959),s('type.list.list'(sK0),X2949))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2948),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12582,f109])).
fof(f12582,plain,(
  ( ! [X2950,X2948,X2954,X2952,X2958,X2956,X2951,X2949,X2955,X2953,X2959,X2957] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),X2954),s('type.list.list'(sK0),X2955),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2956),s('type.list.list'(sK0),X2957),s('type.list.list'(sK0),X2958),s('type.list.list'(sK0),X2959),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2949),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2948),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2950),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2951))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2948),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8088,f11344])).
fof(f13024,plain,(
  ( ! [X2864,X2870,X2868,X2874,X2872,X2865,X2871,X2869,X2875,X2873] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2868),s('type.list.list'(sK0),X2869),s('type.list.list'(sK0),X2870),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2871))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2872),s('type.list.list'(sK0),X2873),s('type.list.list'(sK0),X2874),s('type.list.list'(sK0),X2865),s('type.list.list'(sK0),X2875))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2864),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12575,f109])).
fof(f12575,plain,(
  ( ! [X2866,X2864,X2870,X2868,X2874,X2872,X2867,X2865,X2871,X2869,X2875,X2873] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2868),s('type.list.list'(sK0),X2869),s('type.list.list'(sK0),X2870),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2871))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2872),s('type.list.list'(sK0),X2873),s('type.list.list'(sK0),X2874),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2865),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2864),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2866),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2867))),s('type.list.list'(sK0),X2875))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2864),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8087,f11344])).
fof(f8087,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f139])).
fof(f13022,plain,(
  ( ! [X2780,X2788,X2790,X2784,X2786,X2781,X2789,X2791,X2785,X2787] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2784),s('type.list.list'(sK0),X2785),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2786),s('type.list.list'(sK0),X2787))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2788),s('type.list.list'(sK0),X2789),s('type.list.list'(sK0),X2781),s('type.list.list'(sK0),X2790),s('type.list.list'(sK0),X2791))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2780),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12568,f109])).
fof(f12568,plain,(
  ( ! [X2780,X2782,X2788,X2790,X2784,X2786,X2781,X2783,X2789,X2791,X2785,X2787] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2784),s('type.list.list'(sK0),X2785),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2786),s('type.list.list'(sK0),X2787))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2788),s('type.list.list'(sK0),X2789),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2781),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2780),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2782),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2783))),s('type.list.list'(sK0),X2790),s('type.list.list'(sK0),X2791))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2780),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8086,f11344])).
fof(f8086,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f137])).
fof(f13020,plain,(
  ( ! [X2704,X2706,X2701,X2703,X2697,X2705,X2707,X2700,X2702,X2696] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2700),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2701),s('type.list.list'(sK0),X2702),s('type.list.list'(sK0),X2703))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2704),s('type.list.list'(sK0),X2697),s('type.list.list'(sK0),X2705),s('type.list.list'(sK0),X2706),s('type.list.list'(sK0),X2707))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2696),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12561,f109])).
fof(f12561,plain,(
  ( ! [X2704,X2706,X2701,X2703,X2697,X2699,X2705,X2707,X2700,X2702,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2700),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2701),s('type.list.list'(sK0),X2702),s('type.list.list'(sK0),X2703))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2704),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2697),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2696),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2698),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2699))),s('type.list.list'(sK0),X2705),s('type.list.list'(sK0),X2706),s('type.list.list'(sK0),X2707))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2696),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8085,f11344])).
fof(f8085,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f135])).
fof(f13019,plain,(
  ( ! [X2621,X2623,X2617,X2619,X2612,X2620,X2622,X2616,X2618,X2613] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),X2618),s('type.list.list'(sK0),X2619),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2620),s('type.list.list'(sK0),X2621),s('type.list.list'(sK0),X2622),s('type.list.list'(sK0),X2623),s('type.list.list'(sK0),X2613))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2612),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12554,f109])).
fof(f12554,plain,(
  ( ! [X2621,X2623,X2617,X2619,X2612,X2614,X2620,X2622,X2616,X2618,X2613,X2615] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),X2618),s('type.list.list'(sK0),X2619),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2620),s('type.list.list'(sK0),X2621),s('type.list.list'(sK0),X2622),s('type.list.list'(sK0),X2623),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2613),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2612),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2614),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2615))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2612),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8084,f11344])).
fof(f8084,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f133])).
fof(f13018,plain,(
  ( ! [X2536,X2538,X2532,X2534,X2528,X2537,X2539,X2533,X2535,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2532),s('type.list.list'(sK0),X2533),s('type.list.list'(sK0),X2534),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2535))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2536),s('type.list.list'(sK0),X2537),s('type.list.list'(sK0),X2538),s('type.list.list'(sK0),X2529),s('type.list.list'(sK0),X2539))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2528),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12547,f109])).
fof(f12547,plain,(
  ( ! [X2531,X2536,X2538,X2532,X2534,X2528,X2530,X2537,X2539,X2533,X2535,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2532),s('type.list.list'(sK0),X2533),s('type.list.list'(sK0),X2534),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2535))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2536),s('type.list.list'(sK0),X2537),s('type.list.list'(sK0),X2538),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2529),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2528),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2530),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2531))),s('type.list.list'(sK0),X2539))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2528),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8083,f11344])).
fof(f8083,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f131])).
fof(f13017,plain,(
  ( ! [X2452,X2454,X2448,X2450,X2445,X2453,X2455,X2449,X2451,X2444] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2448),s('type.list.list'(sK0),X2449),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2450),s('type.list.list'(sK0),X2451))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2452),s('type.list.list'(sK0),X2453),s('type.list.list'(sK0),X2445),s('type.list.list'(sK0),X2454),s('type.list.list'(sK0),X2455))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2444),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12540,f109])).
fof(f12540,plain,(
  ( ! [X2452,X2454,X2448,X2450,X2445,X2447,X2453,X2455,X2449,X2451,X2444,X2446] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2448),s('type.list.list'(sK0),X2449),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2450),s('type.list.list'(sK0),X2451))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2452),s('type.list.list'(sK0),X2453),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2445),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2444),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2446),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2447))),s('type.list.list'(sK0),X2454),s('type.list.list'(sK0),X2455))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2444),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8082,f11344])).
fof(f8082,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X19),s('type.list.list'(sK0),X20),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X21),s('type.list.list'(sK0),X22))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X23),s('type.list.list'(sK0),X24),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),X25),s('type.list.list'(sK0),X26))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X18),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f129])).
fof(f13015,plain,(
  ( ! [X2361,X2369,X2364,X2366,X2371,X2360,X2368,X2370,X2365,X2367] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2364),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2365),s('type.list.list'(sK0),X2366),s('type.list.list'(sK0),X2367))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2368),s('type.list.list'(sK0),X2361),s('type.list.list'(sK0),X2369),s('type.list.list'(sK0),X2370),s('type.list.list'(sK0),X2371))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2360),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12533,f109])).
fof(f12533,plain,(
  ( ! [X2361,X2363,X2369,X2364,X2366,X2360,X2362,X2371,X2368,X2370,X2365,X2367] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2364),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2365),s('type.list.list'(sK0),X2366),s('type.list.list'(sK0),X2367))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2368),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2361),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2360),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2362),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2363))),s('type.list.list'(sK0),X2369),s('type.list.list'(sK0),X2370),s('type.list.list'(sK0),X2371))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2360),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8081,f11344])).
fof(f8081,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f127])).
fof(f13013,plain,(
  ( ! [X2313,X2311,X2307,X2312,X2314,X2308] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2311),s('type.list.list'(sK0),X2312),s('type.list.list'(sK0),X2308),s('type.list.list'(sK0),X2313),s('type.list.list'(sK0),X2314))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2307),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12526,f109])).
fof(f12526,plain,(
  ( ! [X2313,X2309,X2311,X2307,X2312,X2314,X2308,X2310] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2311),s('type.list.list'(sK0),X2312),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2308),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2307),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2309),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2310))),s('type.list.list'(sK0),X2313),s('type.list.list'(sK0),X2314))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2307),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f7589,f11344])).
fof(f12909,plain,(
  ( ! [X2617,X2612,X2614,X2610,X2616,X2607,X2613,X2615,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),X2612),s('type.list.list'(sK0),X2613),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2607),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl112),
  inference(cnf_transformation,[],[f12909_D])).
fof(f12909_D,plain,(
  ( ! [X2617,X2612,X2614,X2610,X2616,X2607,X2613,X2615,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),X2612),s('type.list.list'(sK0),X2613),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2607),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f13012,plain,(
  ( ! [X1787,X1789,X1791,X1793,X1795,X1796,X1794,X1786,X1788,X1790,X1792,X1782,X1783,X1797] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),X1783),s('type.list.list'(sK0),X1788),s('type.list.list'(sK0),X1789))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),X1792),s('type.list.list'(sK0),X1793),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1794),s('type.list.list'(sK0),X1795),s('type.list.list'(sK0),X1796),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1782),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f12472,f109])).
fof(f12472,plain,(
  ( ! [X1787,X1789,X1791,X1793,X1795,X1797,X1782,X1784,X1786,X1788,X1790,X1792,X1794,X1796,X1783,X1785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1783),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1782),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1784),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1785))),s('type.list.list'(sK0),X1788),s('type.list.list'(sK0),X1789))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),X1792),s('type.list.list'(sK0),X1793),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1794),s('type.list.list'(sK0),X1795),s('type.list.list'(sK0),X1796),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1782),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1005,f11344])).
fof(f12907,plain,(
  ( ! [X2531,X2526,X2532,X2528,X2530,X2527,X2523,X2533,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2526),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2529))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2530),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2523),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2533)))) ) | $spl110),
  inference(cnf_transformation,[],[f12907_D])).
fof(f12907_D,plain,(
  ( ! [X2531,X2526,X2532,X2528,X2530,X2527,X2523,X2533,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2526),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2529))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2530),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2523),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2533)))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f13011,plain,(
  ( ! [X1670,X1674,X1676,X1678,X1681,X1683,X1685,X1671,X1675,X1677,X1679,X1680,X1682,X1684] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1674),s('type.list.list'(sK0),X1675),s('type.list.list'(sK0),X1671),s('type.list.list'(sK0),X1676),s('type.list.list'(sK0),X1677))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1678),s('type.list.list'(sK0),X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1681))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1682),s('type.list.list'(sK0),X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1670),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1685)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f12465,f109])).
fof(f12465,plain,(
  ( ! [X1670,X1672,X1674,X1676,X1678,X1681,X1683,X1685,X1671,X1673,X1675,X1677,X1679,X1680,X1682,X1684] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1674),s('type.list.list'(sK0),X1675),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1671),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1670),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1672),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1673))),s('type.list.list'(sK0),X1676),s('type.list.list'(sK0),X1677))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1678),s('type.list.list'(sK0),X1679),s('type.list.list'(sK0),X1680),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1681))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1682),s('type.list.list'(sK0),X1683),s('type.list.list'(sK0),X1684),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1670),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1685)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1003,f11344])).
fof(f12905,plain,(
  ( ! [X2448,X2445,X2447,X2443,X2439,X2449,X2444,X2446,X2442] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2444),s('type.list.list'(sK0),X2445))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2439),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2448),s('type.list.list'(sK0),X2449)))) ) | $spl108),
  inference(cnf_transformation,[],[f12905_D])).
fof(f12905_D,plain,(
  ( ! [X2448,X2445,X2447,X2443,X2439,X2449,X2444,X2446,X2442] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2444),s('type.list.list'(sK0),X2445))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2439),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2448),s('type.list.list'(sK0),X2449)))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f13010,plain,(
  ( ! [X1606,X1610,X1612,X1614,X1617,X1619,X1621,X1607,X1611,X1613,X1615,X1616,X1618,X1620] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1610),s('type.list.list'(sK0),X1611),s('type.list.list'(sK0),X1607),s('type.list.list'(sK0),X1612),s('type.list.list'(sK0),X1613))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1614),s('type.list.list'(sK0),X1615),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1616),s('type.list.list'(sK0),X1617))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1618),s('type.list.list'(sK0),X1619),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1606),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1620),s('type.list.list'(sK0),X1621)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f12461,f109])).
fof(f12461,plain,(
  ( ! [X1606,X1608,X1610,X1612,X1614,X1617,X1619,X1621,X1607,X1609,X1611,X1613,X1615,X1616,X1618,X1620] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1610),s('type.list.list'(sK0),X1611),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1607),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1606),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1608),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1609))),s('type.list.list'(sK0),X1612),s('type.list.list'(sK0),X1613))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1614),s('type.list.list'(sK0),X1615),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1616),s('type.list.list'(sK0),X1617))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1618),s('type.list.list'(sK0),X1619),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1606),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1620),s('type.list.list'(sK0),X1621)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1001,f11344])).
fof(f12902,plain,(
  ( ! [X2361,X2363,X2359,X2355,X2364,X2360,X2362,X2358,X2365] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2358),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),X2361))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2362),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2355),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),X2365)))) ) | $spl104),
  inference(cnf_transformation,[],[f12902_D])).
fof(f12902_D,plain,(
  ( ! [X2361,X2363,X2359,X2355,X2364,X2360,X2362,X2358,X2365] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2358),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),X2361))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2362),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2355),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),X2365)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f13009,plain,(
  ( ! [X1542,X1546,X1548,X1550,X1553,X1555,X1557,X1543,X1547,X1549,X1551,X1552,X1554,X1556] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1546),s('type.list.list'(sK0),X1547),s('type.list.list'(sK0),X1543),s('type.list.list'(sK0),X1548),s('type.list.list'(sK0),X1549))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1550),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1551),s('type.list.list'(sK0),X1552),s('type.list.list'(sK0),X1553))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1554),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1542),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1555),s('type.list.list'(sK0),X1556),s('type.list.list'(sK0),X1557)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f12457,f109])).
fof(f12457,plain,(
  ( ! [X1542,X1544,X1546,X1548,X1550,X1553,X1555,X1557,X1543,X1545,X1547,X1549,X1551,X1552,X1554,X1556] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1546),s('type.list.list'(sK0),X1547),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1543),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1542),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1544),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1545))),s('type.list.list'(sK0),X1548),s('type.list.list'(sK0),X1549))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1550),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1551),s('type.list.list'(sK0),X1552),s('type.list.list'(sK0),X1553))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1554),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1542),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1555),s('type.list.list'(sK0),X1556),s('type.list.list'(sK0),X1557)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f999,f11344])).
fof(f13007,plain,(
  ( ! [X1505,X1509,X1511,X1512,X1506,X1510] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1509),s('type.list.list'(sK0),X1510),s('type.list.list'(sK0),X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),X1506))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1505),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12452,f109])).
fof(f12452,plain,(
  ( ! [X1505,X1507,X1509,X1511,X1512,X1506,X1508,X1510] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1509),s('type.list.list'(sK0),X1510),s('type.list.list'(sK0),X1511),s('type.list.list'(sK0),X1512),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1506),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1505),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1507),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1508))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1505),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f170,f11344])).
fof(f13006,plain,(
  ( ! [X1465] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1465),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl156),
  inference(cnf_transformation,[],[f13006_D])).
fof(f13006_D,plain,(
  ( ! [X1465] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1465),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f13005,plain,(
  ( ! [X1472,X1466,X1470,X1465,X1469,X1471] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1469),s('type.list.list'(sK0),X1470),s('type.list.list'(sK0),X1471),s('type.list.list'(sK0),X1466),s('type.list.list'(sK0),X1472))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1465),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12447,f109])).
fof(f12447,plain,(
  ( ! [X1472,X1466,X1468,X1470,X1465,X1467,X1469,X1471] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1469),s('type.list.list'(sK0),X1470),s('type.list.list'(sK0),X1471),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1466),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1465),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1467),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1468))),s('type.list.list'(sK0),X1472))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1465),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f168,f11344])).
fof(f13004,plain,(
  ( ! [X1425] : (s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1425),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl154),
  inference(cnf_transformation,[],[f13004_D])).
fof(f13004_D,plain,(
  ( ! [X1425] : (s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1425),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f13003,plain,(
  ( ! [X1430,X1426,X1429,X1431,X1425,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1429),s('type.list.list'(sK0),X1426),s('type.list.list'(sK0),X1430),s('type.list.list'(sK0),X1431),s('type.list.list'(sK0),X1432))) | s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1425),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12442,f109])).
fof(f12442,plain,(
  ( ! [X1428,X1430,X1426,X1427,X1429,X1431,X1425,X1432] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1429),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1426),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1425),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1427),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1428))),s('type.list.list'(sK0),X1430),s('type.list.list'(sK0),X1431),s('type.list.list'(sK0),X1432))) | s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1425),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f164,f11344])).
fof(f13000,plain,(
  ( ! [X820] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X820),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl150),
  inference(cnf_transformation,[],[f13000_D])).
fof(f13000_D,plain,(
  ( ! [X820] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X820),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f13002,plain,(
  ( ! [X1048,X1042,X1046,X1041,X1047,X1045] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1042),s('type.list.list'(sK0),X1045),s('type.list.list'(sK0),X1046),s('type.list.list'(sK0),X1047),s('type.list.list'(sK0),X1048))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1041),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12406,f109])).
fof(f12406,plain,(
  ( ! [X1048,X1042,X1046,X1044,X1043,X1041,X1047,X1045] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X1042),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1041),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X1043),s(fun('type.list.list'(sK0),'type.num.num'),X1044))),s('type.list.list'(sK0),X1045),s('type.list.list'(sK0),X1046),s('type.list.list'(sK0),X1047),s('type.list.list'(sK0),X1048))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1041),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8095,f11344])).
fof(f8095,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X30),s('type.list.list'(sK0),X31),s('type.list.list'(sK0),X32),s('type.list.list'(sK0),X33),s('type.list.list'(sK0),X34))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X30),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f592])).
fof(f12999,plain,(
  ( ! [X825,X831,X829,X821,X826,X824,X830,X828,X820,X832,X827] : (s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X824),X825),s('type.list.list'(X824),X826),s('type.list.list'(X824),X827),s('type.list.list'(X824),X828))) != s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X821),s('type.list.list'(X824),X829),s('type.list.list'(X824),X830),s('type.list.list'(X824),X831),s('type.list.list'(X824),X832))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X820),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12387,f109])).
fof(f12387,plain,(
  ( ! [X825,X831,X829,X823,X821,X826,X824,X830,X828,X822,X820,X832,X827] : (s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X824),X825),s('type.list.list'(X824),X826),s('type.list.list'(X824),X827),s('type.list.list'(X824),X828))) != s('type.HoodMelvilleQueue.status'(X824),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X821),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X820),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X822),s(fun('type.list.list'(sK0),'type.num.num'),X823))),s('type.list.list'(X824),X829),s('type.list.list'(X824),X830),s('type.list.list'(X824),X831),s('type.list.list'(X824),X832))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X820),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8080,f11344])).
fof(f8080,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X1),X6),s('type.list.list'(X1),X7),s('type.list.list'(X1),X8),s('type.list.list'(X1),X9))) != s('type.HoodMelvilleQueue.status'(X1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(X1),X2),s('type.list.list'(X1),X3),s('type.list.list'(X1),X4),s('type.list.list'(X1),X5))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f125])).
fof(f12998,plain,(
  ( ! [X500] : (s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl148),
  inference(cnf_transformation,[],[f12998_D])).
fof(f12998_D,plain,(
  ( ! [X500] : (s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f12997,plain,(
  ( ! [X505,X507,X500,X504,X506,X501] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X501),s('type.list.list'(sK0),X504),s('type.list.list'(sK0),X505),s('type.list.list'(sK0),X506),s('type.list.list'(sK0),X507))) | s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12356,f109])).
fof(f12356,plain,(
  ( ! [X505,X507,X500,X502,X504,X506,X501,X503] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X501),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X502),s(fun('type.list.list'(sK0),'type.num.num'),X503))),s('type.list.list'(sK0),X504),s('type.list.list'(sK0),X505),s('type.list.list'(sK0),X506),s('type.list.list'(sK0),X507))) | s('type.num.num',sK5) = s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X500),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f162,f11344])).
fof(f12800,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl38),
  inference(cnf_transformation,[],[f12800_D])).
fof(f12800_D,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f12991,plain,(
  ( ! [X132,X131] : (~p(s(bool,X132)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12322,f109])).
fof(f12322,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X132),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X133),s(fun('type.list.list'(sK0),bool),X134)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X131),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f98,f11344])).
fof(f12818,plain,(
  ( ! [X26] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl44),
  inference(cnf_transformation,[],[f12818_D])).
fof(f12818_D,plain,(
  ( ! [X26] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f12990,plain,(
  ( ! [X127,X128] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12321,f109])).
fof(f12321,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X128),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X129),s(fun('type.list.list'(sK0),bool),X130))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X127),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f98,f11344])).
fof(f12847,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl56),
  inference(cnf_transformation,[],[f12847_D])).
fof(f12847_D,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f12989,plain,(
  ( ! [X123,X124] : (p(s(bool,X124)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12320,f109])).
fof(f12320,plain,(
  ( ! [X125,X123,X126,X124] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X125),s(fun('type.list.list'(sK0),bool),X126)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X123),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f97,f11344])).
fof(f12814,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl40),
  inference(cnf_transformation,[],[f12814_D])).
fof(f12814_D,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f12988,plain,(
  ( ! [X120,X119] : (s(bool,'T_0') != s(bool,X120) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12319,f109])).
fof(f12319,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X120),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X121),s(fun('type.list.list'(sK0),bool),X122))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X119),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f97,f11344])).
fof(f12987,plain,(
  ( ! [X116,X115] : (~p(s(bool,X116)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12318,f109])).
fof(f12318,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X116),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X117),s(fun('type.list.list'(sK0),bool),X118)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X115),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f96,f11344])).
fof(f12986,plain,(
  ( ! [X111,X112] : (s(bool,'T_0') = s(bool,X112) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12317,f109])).
fof(f12317,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X112),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X113),s(fun('type.list.list'(sK0),bool),X114))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X111),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f96,f11344])).
fof(f12985,plain,(
  ( ! [X107,X108] : (p(s(bool,X108)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12316,f109])).
fof(f12316,plain,(
  ( ! [X109,X107,X110,X108] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X108),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X109),s(fun('type.list.list'(sK0),bool),X110)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X107),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f95,f11344])).
fof(f12984,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,X104) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12315,f109])).
fof(f12315,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X104),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X105),s(fun('type.list.list'(sK0),bool),X106))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X103),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f95,f11344])).
fof(f12797,plain,(
  ( ! [X31] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl36),
  inference(cnf_transformation,[],[f12797_D])).
fof(f12797_D,plain,(
  ( ! [X31] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f12983,plain,(
  ( ! [X99,X100] : (p(s(bool,X100)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12314,f109])).
fof(f12314,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X100),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X101),s(fun('type.list.list'(sK0),bool),X102)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X99),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f94,f11344])).
fof(f12982,plain,(
  ( ! [X95,X96] : (s(bool,'F_0') = s(bool,X96) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12313,f109])).
fof(f12313,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X96),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X97),s(fun('type.list.list'(sK0),bool),X98))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X95),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f94,f11344])).
fof(f12837,plain,(
  ( ! [X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl52),
  inference(cnf_transformation,[],[f12837_D])).
fof(f12837_D,plain,(
  ( ! [X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f12981,plain,(
  ( ! [X92,X91] : (~p(s(bool,X92)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12312,f109])).
fof(f12312,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X92),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X93),s(fun('type.list.list'(sK0),bool),X94)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X91),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f93,f11344])).
fof(f12980,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X88) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12311,f109])).
fof(f12311,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X88),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X89),s(fun('type.list.list'(sK0),bool),X90))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X87),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f93,f11344])).
fof(f12979,plain,(
  ( ! [X83,X84] : (p(s(bool,X84)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12310,f109])).
fof(f12310,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X84),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X85),s(fun('type.list.list'(sK0),bool),X86)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X83),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f92,f11344])).
fof(f12978,plain,(
  ( ! [X80,X79] : (s(bool,'F_0') = s(bool,X80) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12309,f109])).
fof(f12309,plain,(
  ( ! [X80,X81,X79,X82] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X80),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X81),s(fun('type.list.list'(sK0),bool),X82))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X79),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f92,f11344])).
fof(f12977,plain,(
  ( ! [X76,X75] : (~p(s(bool,X76)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12308,f109])).
fof(f12308,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X76),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X77),s(fun('type.list.list'(sK0),bool),X78)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X75),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f91,f11344])).
fof(f12976,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') != s(bool,X72) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12307,f109])).
fof(f12307,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X72),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X73),s(fun('type.list.list'(sK0),bool),X74))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X71),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f91,f11344])).
fof(f12793,plain,(
  ( ! [X24,X21] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) ) | $spl32),
  inference(cnf_transformation,[],[f12793_D])).
fof(f12793_D,plain,(
  ( ! [X24,X21] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f12975,plain,(
  ( ! [X70,X66,X67] : (~p(s(bool,X67)) | s(bool,X70) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X70))) ) | $spl24),
  inference(forward_demodulation,[],[f12306,f109])).
fof(f12306,plain,(
  ( ! [X70,X68,X66,X69,X67] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X67),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X68),s(fun('type.list.list'(sK0),bool),X69)))) | s(bool,X70) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X66),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X70))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12974,plain,(
  ( ! [X61,X62,X65] : (~p(s(bool,X62)) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X65))) ) | $spl24),
  inference(forward_demodulation,[],[f12305,f109])).
fof(f12305,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X62),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X63),s(fun('type.list.list'(sK0),bool),X64)))) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X61),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X65))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12973,plain,(
  ( ! [X57,X60,X56] : (s(bool,X57) = s(bool,X60) | ~p(s(bool,X60)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12304,f109])).
fof(f12304,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X60) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X57),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X58),s(fun('type.list.list'(sK0),bool),X59))) | ~p(s(bool,X60)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X56),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12972,plain,(
  ( ! [X52,X55,X51] : (s(bool,X52) = s(bool,X55) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X55))) ) | $spl24),
  inference(forward_demodulation,[],[f12303,f109])).
fof(f12303,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X55) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X52),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X53),s(fun('type.list.list'(sK0),bool),X54))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X51),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X55))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12789,plain,(
  ( ! [X14,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) ) | $spl28),
  inference(cnf_transformation,[],[f12789_D])).
fof(f12789_D,plain,(
  ( ! [X14,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f12971,plain,(
  ( ! [X47,X50,X46] : (p(s(bool,X47)) | s(bool,X50) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X50))) ) | $spl24),
  inference(forward_demodulation,[],[f12302,f109])).
fof(f12302,plain,(
  ( ! [X47,X50,X48,X46,X49] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X47),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X48),s(fun('type.list.list'(sK0),bool),X49)))) | s(bool,X50) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X46),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X50))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12970,plain,(
  ( ! [X45,X41,X42] : (p(s(bool,X42)) | s(bool,X45) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X45))) ) | $spl24),
  inference(forward_demodulation,[],[f12301,f109])).
fof(f12301,plain,(
  ( ! [X45,X43,X41,X44,X42] : (p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X42),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X43),s(fun('type.list.list'(sK0),bool),X44)))) | s(bool,X45) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X41),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X45))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12969,plain,(
  ( ! [X37,X36,X40] : (s(bool,X37) = s(bool,X40) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X40))) ) | $spl24),
  inference(forward_demodulation,[],[f12300,f109])).
fof(f12300,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,X40) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X37),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X38),s(fun('type.list.list'(sK0),bool),X39))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X40))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12968,plain,(
  ( ! [X35,X31,X32] : (s(bool,X32) = s(bool,X35) | p(s(bool,X35)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f12299,f109])).
fof(f12299,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X35) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X32),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X33),s(fun('type.list.list'(sK0),bool),X34))) | p(s(bool,X35)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12946,plain,(
  ( ! [X3856,X3853,X3859,X3857,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl144),
  inference(cnf_transformation,[],[f12946_D])).
fof(f12946_D,plain,(
  ( ! [X3856,X3853,X3859,X3857,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f12925,plain,(
  ( ! [X3076] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3076)))) ) | $spl128),
  inference(cnf_transformation,[],[f12925_D])).
fof(f12925_D,plain,(
  ( ! [X3076] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3076)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f12950,plain,(
  ( ! [X3948,X3954,X3952,X3949,X3955,X3953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3948))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3952),s('type.list.list'(sK0),X3953),s('type.list.list'(sK0),X3954),s('type.list.list'(sK0),X3955),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3949),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12186,f109])).
fof(f12186,plain,(
  ( ! [X3950,X3948,X3954,X3952,X3951,X3949,X3955,X3953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3952),s('type.list.list'(sK0),X3953),s('type.list.list'(sK0),X3954),s('type.list.list'(sK0),X3955),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3949),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3948),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3949),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3950),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3951)))))) ) | $spl24),
  inference(superposition,[],[f10883,f11344])).
fof(f12869,plain,(
  ( ! [X1540,X1542,X1541,X1543,X1537] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1540),s('type.list.list'(sK0),X1541),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1537),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1542),s('type.list.list'(sK0),X1543)))) ) | $spl70),
  inference(cnf_transformation,[],[f12869_D])).
fof(f12869_D,plain,(
  ( ! [X1540,X1542,X1541,X1543,X1537] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1540),s('type.list.list'(sK0),X1541),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1537),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1542),s('type.list.list'(sK0),X1543)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f12949,plain,(
  ( ! [X3901,X3907,X3905,X3900,X3906,X3904] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3900))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3904),s('type.list.list'(sK0),X3905),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3901),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3906),s('type.list.list'(sK0),X3907)))) ) | $spl24),
  inference(forward_demodulation,[],[f12180,f109])).
fof(f12180,plain,(
  ( ! [X3903,X3901,X3907,X3905,X3902,X3900,X3906,X3904] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3904),s('type.list.list'(sK0),X3905),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3901),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3906),s('type.list.list'(sK0),X3907))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3900),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3901),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3902),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3903)))))) ) | $spl24),
  inference(superposition,[],[f10593,f11344])).
fof(f12948,plain,(
  ( ! [X3882,X3880,X3877,X3883,X3881] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3880),s('type.list.list'(sK0),X3881),s('type.list.list'(sK0),X3882),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3883)))) ) | $spl146),
  inference(cnf_transformation,[],[f12948_D])).
fof(f12948_D,plain,(
  ( ! [X3882,X3880,X3877,X3883,X3881] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3880),s('type.list.list'(sK0),X3881),s('type.list.list'(sK0),X3882),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3883)))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f12933,plain,(
  ( ! [X3153] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3153),s('type.list.list'(sK0),sK1)))) ) | $spl136),
  inference(cnf_transformation,[],[f12933_D])).
fof(f12933_D,plain,(
  ( ! [X3153] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3153),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f12947,plain,(
  ( ! [X3876,X3882,X3880,X3877,X3883,X3881] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3876),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3880),s('type.list.list'(sK0),X3881),s('type.list.list'(sK0),X3882),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3883)))) ) | $spl24),
  inference(forward_demodulation,[],[f12177,f109])).
fof(f12177,plain,(
  ( ! [X3878,X3876,X3882,X3880,X3879,X3877,X3883,X3881] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3880),s('type.list.list'(sK0),X3881),s('type.list.list'(sK0),X3882),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3877),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3883))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3876),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3877),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3878),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3879))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f10192,f11344])).
fof(f12945,plain,(
  ( ! [X3856,X3853,X3859,X3857,X3852,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3852),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12174,f109])).
fof(f12174,plain,(
  ( ! [X3856,X3855,X3853,X3859,X3857,X3854,X3852,X3858] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3856),s('type.list.list'(sK0),X3857),s('type.list.list'(sK0),X3858),s('type.list.list'(sK0),X3859),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3852),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3853),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3854),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3855))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f9790,f11344])).
fof(f12917,plain,(
  ( ! [X2943,X2946,X2950,X2948,X2952,X2947,X2951,X2949,X2953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2946),s('type.list.list'(sK0),X2947),s('type.list.list'(sK0),X2948),s('type.list.list'(sK0),X2949),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2950),s('type.list.list'(sK0),X2951),s('type.list.list'(sK0),X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2943),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl120),
  inference(cnf_transformation,[],[f12917_D])).
fof(f12917_D,plain,(
  ( ! [X2943,X2946,X2950,X2948,X2952,X2947,X2951,X2949,X2953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2946),s('type.list.list'(sK0),X2947),s('type.list.list'(sK0),X2948),s('type.list.list'(sK0),X2949),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2950),s('type.list.list'(sK0),X2951),s('type.list.list'(sK0),X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2943),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f12944,plain,(
  ( ! [X3761,X3763,X3753,X3757,X3759,X3760,X3762,X3752,X3756,X3758] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3752))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3756),s('type.list.list'(sK0),X3757),s('type.list.list'(sK0),X3758),s('type.list.list'(sK0),X3759),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3760),s('type.list.list'(sK0),X3761),s('type.list.list'(sK0),X3762),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3753),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12165,f109])).
fof(f12165,plain,(
  ( ! [X3761,X3763,X3753,X3755,X3757,X3759,X3760,X3762,X3752,X3754,X3756,X3758] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3756),s('type.list.list'(sK0),X3757),s('type.list.list'(sK0),X3758),s('type.list.list'(sK0),X3759),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3760),s('type.list.list'(sK0),X3761),s('type.list.list'(sK0),X3762),s('type.list.list'(sK0),X3763),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3753),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3752),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3753),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3754),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3755)))))) ) | $spl24),
  inference(superposition,[],[f8754,f11344])).
fof(f12915,plain,(
  ( ! [X2859,X2863,X2866,X2864,X2868,X2862,X2867,X2865,X2869] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2862),s('type.list.list'(sK0),X2863),s('type.list.list'(sK0),X2864),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2865))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2866),s('type.list.list'(sK0),X2867),s('type.list.list'(sK0),X2868),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2859),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2869)))) ) | $spl118),
  inference(cnf_transformation,[],[f12915_D])).
fof(f12915_D,plain,(
  ( ! [X2859,X2863,X2866,X2864,X2868,X2862,X2867,X2865,X2869] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2862),s('type.list.list'(sK0),X2863),s('type.list.list'(sK0),X2864),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2865))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2866),s('type.list.list'(sK0),X2867),s('type.list.list'(sK0),X2868),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2859),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2869)))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f12943,plain,(
  ( ! [X3676,X3678,X3668,X3673,X3675,X3677,X3679,X3669,X3672,X3674] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3668))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3672),s('type.list.list'(sK0),X3673),s('type.list.list'(sK0),X3674),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3676),s('type.list.list'(sK0),X3677),s('type.list.list'(sK0),X3678),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3669),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3679)))) ) | $spl24),
  inference(forward_demodulation,[],[f12158,f109])).
fof(f12158,plain,(
  ( ! [X3676,X3678,X3668,X3670,X3673,X3675,X3677,X3679,X3669,X3671,X3672,X3674] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3672),s('type.list.list'(sK0),X3673),s('type.list.list'(sK0),X3674),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3676),s('type.list.list'(sK0),X3677),s('type.list.list'(sK0),X3678),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3669),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3679))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3668),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3669),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3670),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3671)))))) ) | $spl24),
  inference(superposition,[],[f8752,f11344])).
fof(f12913,plain,(
  ( ! [X2780,X2782,X2778,X2784,X2775,X2781,X2783,X2779,X2785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2778),s('type.list.list'(sK0),X2779),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2780),s('type.list.list'(sK0),X2781))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2782),s('type.list.list'(sK0),X2783),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2775),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2784),s('type.list.list'(sK0),X2785)))) ) | $spl116),
  inference(cnf_transformation,[],[f12913_D])).
fof(f12913_D,plain,(
  ( ! [X2780,X2782,X2778,X2784,X2775,X2781,X2783,X2779,X2785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2778),s('type.list.list'(sK0),X2779),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2780),s('type.list.list'(sK0),X2781))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2782),s('type.list.list'(sK0),X2783),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2775),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2784),s('type.list.list'(sK0),X2785)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f12942,plain,(
  ( ! [X3592,X3594,X3584,X3588,X3590,X3593,X3595,X3585,X3589,X3591] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3584))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3588),s('type.list.list'(sK0),X3589),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3590),s('type.list.list'(sK0),X3591))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3592),s('type.list.list'(sK0),X3593),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3585),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3594),s('type.list.list'(sK0),X3595)))) ) | $spl24),
  inference(forward_demodulation,[],[f12151,f109])).
fof(f12151,plain,(
  ( ! [X3592,X3594,X3584,X3586,X3588,X3590,X3593,X3595,X3585,X3587,X3589,X3591] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3588),s('type.list.list'(sK0),X3589),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3590),s('type.list.list'(sK0),X3591))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3592),s('type.list.list'(sK0),X3593),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3585),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3594),s('type.list.list'(sK0),X3595))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3584),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3585),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3586),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3587)))))) ) | $spl24),
  inference(superposition,[],[f8750,f11344])).
fof(f12911,plain,(
  ( ! [X2695,X2691,X2701,X2697,X2699,X2694,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2694),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),X2697))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2698),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2691),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),X2701)))) ) | $spl114),
  inference(cnf_transformation,[],[f12911_D])).
fof(f12911_D,plain,(
  ( ! [X2695,X2691,X2701,X2697,X2699,X2694,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2694),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),X2697))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2698),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2691),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),X2701)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f12941,plain,(
  ( ! [X3500,X3504,X3506,X3508,X3510,X3501,X3505,X3507,X3509,X3511] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3500))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3504),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3505),s('type.list.list'(sK0),X3506),s('type.list.list'(sK0),X3507))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3508),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3501),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3509),s('type.list.list'(sK0),X3510),s('type.list.list'(sK0),X3511)))) ) | $spl24),
  inference(forward_demodulation,[],[f12144,f109])).
fof(f12144,plain,(
  ( ! [X3500,X3502,X3504,X3506,X3508,X3510,X3501,X3503,X3505,X3507,X3509,X3511] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3504),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3505),s('type.list.list'(sK0),X3506),s('type.list.list'(sK0),X3507))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3508),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3501),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3509),s('type.list.list'(sK0),X3510),s('type.list.list'(sK0),X3511))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3500),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3501),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3502),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3503)))))) ) | $spl24),
  inference(superposition,[],[f8748,f11344])).
fof(f12940,plain,(
  ( ! [X3424,X3426,X3417,X3421,X3423,X3425,X3427,X3420,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3420),s('type.list.list'(sK0),X3421),s('type.list.list'(sK0),X3422),s('type.list.list'(sK0),X3423),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3417),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl142),
  inference(cnf_transformation,[],[f12940_D])).
fof(f12940_D,plain,(
  ( ! [X3424,X3426,X3417,X3421,X3423,X3425,X3427,X3420,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3420),s('type.list.list'(sK0),X3421),s('type.list.list'(sK0),X3422),s('type.list.list'(sK0),X3423),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3417),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f12939,plain,(
  ( ! [X3424,X3426,X3417,X3421,X3423,X3425,X3427,X3416,X3420,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3416),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3420),s('type.list.list'(sK0),X3421),s('type.list.list'(sK0),X3422),s('type.list.list'(sK0),X3423),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3417),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12137,f109])).
fof(f12137,plain,(
  ( ! [X3424,X3426,X3417,X3419,X3421,X3423,X3425,X3427,X3416,X3418,X3420,X3422] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3420),s('type.list.list'(sK0),X3421),s('type.list.list'(sK0),X3422),s('type.list.list'(sK0),X3423),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3424),s('type.list.list'(sK0),X3425),s('type.list.list'(sK0),X3426),s('type.list.list'(sK0),X3427),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3417),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3416),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3417),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3418),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3419))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8746,f11344])).
fof(f12938,plain,(
  ( ! [X3333,X3337,X3339,X3341,X3343,X3336,X3338,X3340,X3342] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3336),s('type.list.list'(sK0),X3337),s('type.list.list'(sK0),X3338),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3339))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3340),s('type.list.list'(sK0),X3341),s('type.list.list'(sK0),X3342),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3333),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3343)))) ) | $spl140),
  inference(cnf_transformation,[],[f12938_D])).
fof(f12938_D,plain,(
  ( ! [X3333,X3337,X3339,X3341,X3343,X3336,X3338,X3340,X3342] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3336),s('type.list.list'(sK0),X3337),s('type.list.list'(sK0),X3338),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3339))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3340),s('type.list.list'(sK0),X3341),s('type.list.list'(sK0),X3342),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3333),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3343)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f12937,plain,(
  ( ! [X3333,X3337,X3339,X3341,X3343,X3332,X3336,X3338,X3340,X3342] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3332),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3336),s('type.list.list'(sK0),X3337),s('type.list.list'(sK0),X3338),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3339))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3340),s('type.list.list'(sK0),X3341),s('type.list.list'(sK0),X3342),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3333),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3343)))) ) | $spl24),
  inference(forward_demodulation,[],[f12130,f109])).
fof(f12130,plain,(
  ( ! [X3333,X3335,X3337,X3339,X3341,X3343,X3332,X3334,X3336,X3338,X3340,X3342] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3336),s('type.list.list'(sK0),X3337),s('type.list.list'(sK0),X3338),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3339))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3340),s('type.list.list'(sK0),X3341),s('type.list.list'(sK0),X3342),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3333),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3343))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3332),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3333),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3334),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3335))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8744,f11344])).
fof(f12936,plain,(
  ( ! [X3254,X3252,X3258,X3256,X3249,X3255,X3253,X3259,X3257] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3252),s('type.list.list'(sK0),X3253),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3254),s('type.list.list'(sK0),X3255))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3256),s('type.list.list'(sK0),X3257),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3249),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3258),s('type.list.list'(sK0),X3259)))) ) | $spl138),
  inference(cnf_transformation,[],[f12936_D])).
fof(f12936_D,plain,(
  ( ! [X3254,X3252,X3258,X3256,X3249,X3255,X3253,X3259,X3257] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3252),s('type.list.list'(sK0),X3253),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3254),s('type.list.list'(sK0),X3255))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3256),s('type.list.list'(sK0),X3257),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3249),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3258),s('type.list.list'(sK0),X3259)))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f12935,plain,(
  ( ! [X3248,X3254,X3252,X3258,X3256,X3249,X3255,X3253,X3259,X3257] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3248),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3252),s('type.list.list'(sK0),X3253),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3254),s('type.list.list'(sK0),X3255))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3256),s('type.list.list'(sK0),X3257),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3249),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3258),s('type.list.list'(sK0),X3259)))) ) | $spl24),
  inference(forward_demodulation,[],[f12123,f109])).
fof(f12123,plain,(
  ( ! [X3250,X3248,X3254,X3252,X3258,X3256,X3251,X3249,X3255,X3253,X3259,X3257] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3252),s('type.list.list'(sK0),X3253),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3254),s('type.list.list'(sK0),X3255))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3256),s('type.list.list'(sK0),X3257),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3249),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3258),s('type.list.list'(sK0),X3259))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3248),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3249),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3250),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3251))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8720,f11344])).
fof(f12881,plain,(
  ( ! [X1825] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1825),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl84),
  inference(cnf_transformation,[],[f12881_D])).
fof(f12881_D,plain,(
  ( ! [X1825] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1825),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f12934,plain,(
  ( ! [X3237,X3243,X3241,X3247,X3245,X3238,X3242,X3246,X3244] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3247),s('type.list.list'(sK0),X3246),s('type.list.list'(sK0),X3237),s('type.list.list'(sK0),X3242),s('type.list.list'(sK0),X3244))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3238),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3241) != s('type.list.list'(sK0),X3242) | s('type.list.list'(sK0),X3243) != s('type.list.list'(sK0),X3244) | s('type.list.list'(sK0),X3245) != s('type.list.list'(sK0),X3246)) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f12122,f109])).
fof(f12122,plain,(
  ( ! [X3239,X3237,X3243,X3241,X3247,X3245,X3238,X3242,X3240,X3246,X3244] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3238),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X3241) != s('type.list.list'(sK0),X3242) | s('type.list.list'(sK0),X3243) != s('type.list.list'(sK0),X3244) | s('type.list.list'(sK0),X3245) != s('type.list.list'(sK0),X3246) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3247),s('type.list.list'(sK0),X3246),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3237),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3238),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3239),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3240))),s('type.list.list'(sK0),X3242),s('type.list.list'(sK0),X3244)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f8716,f11344])).
fof(f8716,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),X6) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X4),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X1)))) ) | ($spl17 | $spl24)),
  inference(equality_resolution,[],[f8368])).
fof(f8368,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',X0) != s('type.num.num',X4) | s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),X8) | s('type.list.list'(sK0),X2) != s('type.list.list'(sK0),X7) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X6) | s('type.list.list'(sK0),X1) != s('type.list.list'(sK0),X5) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f8039,f106])).
fof(f8039,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X5),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X7),s('type.list.list'(sK0),X8)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f4232,f8008])).
fof(f4232,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X4),s('type.list.list'(sK0),X5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X6),s('type.list.list'(sK0),X7)))) ) | $spl17),
  inference(equality_resolution,[],[f3988])).
fof(f12932,plain,(
  ( ! [X3164,X3159,X3157,X3163,X3161,X3154,X3158,X3162,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3157),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3158),s('type.list.list'(sK0),X3159),s('type.list.list'(sK0),X3160))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3161),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3154),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3162),s('type.list.list'(sK0),X3163),s('type.list.list'(sK0),X3164)))) ) | $spl134),
  inference(cnf_transformation,[],[f12932_D])).
fof(f12932_D,plain,(
  ( ! [X3164,X3159,X3157,X3163,X3161,X3154,X3158,X3162,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3157),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3158),s('type.list.list'(sK0),X3159),s('type.list.list'(sK0),X3160))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3161),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3154),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3162),s('type.list.list'(sK0),X3163),s('type.list.list'(sK0),X3164)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f12931,plain,(
  ( ! [X3164,X3153,X3159,X3157,X3163,X3161,X3154,X3158,X3162,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3153),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3157),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3158),s('type.list.list'(sK0),X3159),s('type.list.list'(sK0),X3160))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3161),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3154),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3162),s('type.list.list'(sK0),X3163),s('type.list.list'(sK0),X3164)))) ) | $spl24),
  inference(forward_demodulation,[],[f12115,f109])).
fof(f12115,plain,(
  ( ! [X3164,X3155,X3153,X3159,X3157,X3163,X3161,X3154,X3158,X3156,X3162,X3160] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3157),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3158),s('type.list.list'(sK0),X3159),s('type.list.list'(sK0),X3160))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3161),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3154),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3162),s('type.list.list'(sK0),X3163),s('type.list.list'(sK0),X3164))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3153),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3154),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3155),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3156))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8557,f11344])).
fof(f12886,plain,(
  ( ! [X1886] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1886),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl90),
  inference(cnf_transformation,[],[f12886_D])).
fof(f12886_D,plain,(
  ( ! [X1886] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1886),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f12930,plain,(
  ( ! [X3150,X3149] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3149),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3150),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12114,f109])).
fof(f12114,plain,(
  ( ! [X3150,X3151,X3149,X3152] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3150),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3149),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3150),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3151),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3152))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8529,f11344])).
fof(f8529,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(equality_resolution,[],[f8507])).
fof(f8507,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1)))) ) | $spl24),
  inference(equality_resolution,[],[f8092])).
fof(f8092,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X2)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f479])).
fof(f12929,plain,(
  ( ! [X3144,X3148] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3144))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3148)) ) | $spl132),
  inference(cnf_transformation,[],[f12929_D])).
fof(f12929_D,plain,(
  ( ! [X3144,X3148] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3144))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3148)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f12928,plain,(
  ( ! [X3144,X3148,X3145] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3144))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3145),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3148)) ) | $spl24),
  inference(forward_demodulation,[],[f12113,f109])).
fof(f12113,plain,(
  ( ! [X3146,X3144,X3148,X3147,X3145] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3145),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3148) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3148),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3144),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3145),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3146),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3147)))))) ) | $spl24),
  inference(superposition,[],[f8507,f11344])).
fof(f12927,plain,(
  ( ! [X3142,X3140,X3137,X3143,X3141] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3140),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3137),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3141),s('type.list.list'(sK0),X3142),s('type.list.list'(sK0),X3143)))) ) | $spl130),
  inference(cnf_transformation,[],[f12927_D])).
fof(f12927_D,plain,(
  ( ! [X3142,X3140,X3137,X3143,X3141] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3140),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3137),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3141),s('type.list.list'(sK0),X3142),s('type.list.list'(sK0),X3143)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f12903,plain,(
  ( ! [X2354] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl106),
  inference(cnf_transformation,[],[f12903_D])).
fof(f12903_D,plain,(
  ( ! [X2354] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f12926,plain,(
  ( ! [X3136,X3142,X3140,X3137,X3143,X3141] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3136),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3140),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3137),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3141),s('type.list.list'(sK0),X3142),s('type.list.list'(sK0),X3143)))) ) | $spl24),
  inference(forward_demodulation,[],[f12112,f109])).
fof(f12112,plain,(
  ( ! [X3138,X3136,X3142,X3140,X3139,X3137,X3143,X3141] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X3140),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3137),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X3141),s('type.list.list'(sK0),X3142),s('type.list.list'(sK0),X3143))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3136),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3137),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3138),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3139))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8096,f11344])).
fof(f12924,plain,(
  ( ! [X3076,X3077] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X3076))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3077),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f12104,f109])).
fof(f12104,plain,(
  ( ! [X3078,X3076,X3079,X3077] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3077),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3076),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3077),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3078),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3079)))))) ) | $spl24),
  inference(superposition,[],[f8094,f11344])).
fof(f8094,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X0)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f521])).
fof(f12923,plain,(
  ( ! [X3071,X3075] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3071),s('type.list.list'(sK0),X3075))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3075)) ) | $spl126),
  inference(cnf_transformation,[],[f12923_D])).
fof(f12923_D,plain,(
  ( ! [X3071,X3075] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3071),s('type.list.list'(sK0),X3075))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3075)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f12922,plain,(
  ( ! [X3071,X3072,X3075] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X3071),s('type.list.list'(sK0),X3075))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3072),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3075)) ) | $spl24),
  inference(forward_demodulation,[],[f12103,f109])).
fof(f12103,plain,(
  ( ! [X3071,X3074,X3072,X3075,X3073] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3072),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3071),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3072),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3073),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3074))),s('type.list.list'(sK0),X3075))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3075)) ) | $spl24),
  inference(superposition,[],[f8093,f11344])).
fof(f8093,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1)) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f500])).
fof(f12921,plain,(
  ( ! [X3065,X3069,X3070] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3069),s('type.list.list'(sK0),X3065),s('type.list.list'(sK0),X3070))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3070) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3069)) ) | $spl124),
  inference(cnf_transformation,[],[f12921_D])).
fof(f12921_D,plain,(
  ( ! [X3065,X3069,X3070] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3069),s('type.list.list'(sK0),X3065),s('type.list.list'(sK0),X3070))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3070) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3069)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f12920,plain,(
  ( ! [X3065,X3069,X3066,X3070] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3069),s('type.list.list'(sK0),X3065),s('type.list.list'(sK0),X3070))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3066),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3069) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3070)) ) | $spl24),
  inference(forward_demodulation,[],[f12102,f109])).
fof(f12102,plain,(
  ( ! [X3067,X3065,X3069,X3066,X3070,X3068] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3066),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3069) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3070) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3069),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3065),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3066),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3067),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3068))),s('type.list.list'(sK0),X3070)))) ) | $spl24),
  inference(superposition,[],[f8092,f11344])).
fof(f12878,plain,(
  ( ! [X1793] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1793),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl80),
  inference(cnf_transformation,[],[f12878_D])).
fof(f12878_D,plain,(
  ( ! [X1793] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1793),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f12919,plain,(
  ( ! [X3058,X3062,X3064,X3063] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3058),s('type.list.list'(sK0),X3062),s('type.list.list'(sK0),X3063),s('type.list.list'(sK0),X3064))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3064) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3063) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3062)) ) | $spl122),
  inference(cnf_transformation,[],[f12919_D])).
fof(f12919_D,plain,(
  ( ! [X3058,X3062,X3064,X3063] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3058),s('type.list.list'(sK0),X3062),s('type.list.list'(sK0),X3063),s('type.list.list'(sK0),X3064))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3064) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3063) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3062)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f12918,plain,(
  ( ! [X3058,X3062,X3064,X3059,X3063] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3058),s('type.list.list'(sK0),X3062),s('type.list.list'(sK0),X3063),s('type.list.list'(sK0),X3064))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3059),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3062) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3063) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3064)) ) | $spl24),
  inference(forward_demodulation,[],[f12101,f109])).
fof(f12101,plain,(
  ( ! [X3058,X3062,X3060,X3064,X3059,X3063,X3061] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3059),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3062) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3063) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X3064) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X3058),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X3059),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X3060),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X3061))),s('type.list.list'(sK0),X3062),s('type.list.list'(sK0),X3063),s('type.list.list'(sK0),X3064)))) ) | $spl24),
  inference(superposition,[],[f8091,f11344])).
fof(f8091,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X0)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f456])).
fof(f12916,plain,(
  ( ! [X2943,X2946,X2950,X2948,X2952,X2942,X2947,X2951,X2949,X2953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2942),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2946),s('type.list.list'(sK0),X2947),s('type.list.list'(sK0),X2948),s('type.list.list'(sK0),X2949),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2950),s('type.list.list'(sK0),X2951),s('type.list.list'(sK0),X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2943),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12090,f109])).
fof(f12090,plain,(
  ( ! [X2943,X2946,X2944,X2950,X2948,X2952,X2942,X2947,X2945,X2951,X2949,X2953] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2946),s('type.list.list'(sK0),X2947),s('type.list.list'(sK0),X2948),s('type.list.list'(sK0),X2949),s('type.list.list'(sK0),sK1))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2950),s('type.list.list'(sK0),X2951),s('type.list.list'(sK0),X2952),s('type.list.list'(sK0),X2953),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2943),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2942),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2943),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2944),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2945))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8088,f11344])).
fof(f12914,plain,(
  ( ! [X2859,X2863,X2866,X2864,X2868,X2858,X2862,X2867,X2865,X2869] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2858),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2862),s('type.list.list'(sK0),X2863),s('type.list.list'(sK0),X2864),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2865))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2866),s('type.list.list'(sK0),X2867),s('type.list.list'(sK0),X2868),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2859),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2869)))) ) | $spl24),
  inference(forward_demodulation,[],[f12083,f109])).
fof(f12083,plain,(
  ( ! [X2859,X2863,X2866,X2864,X2861,X2868,X2858,X2862,X2860,X2867,X2865,X2869] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2862),s('type.list.list'(sK0),X2863),s('type.list.list'(sK0),X2864),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2865))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2866),s('type.list.list'(sK0),X2867),s('type.list.list'(sK0),X2868),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2859),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2869))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2858),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2859),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2860),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2861))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8087,f11344])).
fof(f12912,plain,(
  ( ! [X2780,X2782,X2778,X2784,X2775,X2781,X2783,X2779,X2785,X2774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2774),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2778),s('type.list.list'(sK0),X2779),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2780),s('type.list.list'(sK0),X2781))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2782),s('type.list.list'(sK0),X2783),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2775),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2784),s('type.list.list'(sK0),X2785)))) ) | $spl24),
  inference(forward_demodulation,[],[f12076,f109])).
fof(f12076,plain,(
  ( ! [X2780,X2782,X2776,X2778,X2784,X2775,X2781,X2783,X2777,X2779,X2785,X2774] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2778),s('type.list.list'(sK0),X2779),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2780),s('type.list.list'(sK0),X2781))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2782),s('type.list.list'(sK0),X2783),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2775),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2784),s('type.list.list'(sK0),X2785))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2774),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2775),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2776),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2777))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8086,f11344])).
fof(f12910,plain,(
  ( ! [X2695,X2691,X2701,X2697,X2699,X2694,X2690,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2690),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2694),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),X2697))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2698),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2691),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),X2701)))) ) | $spl24),
  inference(forward_demodulation,[],[f12069,f109])).
fof(f12069,plain,(
  ( ! [X2693,X2695,X2691,X2701,X2697,X2699,X2692,X2694,X2690,X2700,X2696,X2698] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2694),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X2695),s('type.list.list'(sK0),X2696),s('type.list.list'(sK0),X2697))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2698),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2691),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2699),s('type.list.list'(sK0),X2700),s('type.list.list'(sK0),X2701))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2690),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2691),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2692),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2693))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8085,f11344])).
fof(f12908,plain,(
  ( ! [X2617,X2606,X2612,X2614,X2610,X2616,X2607,X2613,X2615,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2606),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),X2612),s('type.list.list'(sK0),X2613),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2607),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))))) ) | $spl24),
  inference(forward_demodulation,[],[f12062,f109])).
fof(f12062,plain,(
  ( ! [X2617,X2606,X2612,X2614,X2608,X2610,X2616,X2607,X2613,X2615,X2609,X2611] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2610),s('type.list.list'(sK0),X2611),s('type.list.list'(sK0),X2612),s('type.list.list'(sK0),X2613),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2614),s('type.list.list'(sK0),X2615),s('type.list.list'(sK0),X2616),s('type.list.list'(sK0),X2617),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2607),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2606),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2607),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2608),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2609))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8084,f11344])).
fof(f12906,plain,(
  ( ! [X2531,X2526,X2522,X2532,X2528,X2530,X2527,X2523,X2533,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2522),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2526),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2529))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2530),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2523),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2533)))) ) | $spl24),
  inference(forward_demodulation,[],[f12055,f109])).
fof(f12055,plain,(
  ( ! [X2531,X2526,X2524,X2522,X2532,X2528,X2530,X2525,X2527,X2523,X2533,X2529] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2526),s('type.list.list'(sK0),X2527),s('type.list.list'(sK0),X2528),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2529))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2530),s('type.list.list'(sK0),X2531),s('type.list.list'(sK0),X2532),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2523),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2533))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2522),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2523),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2524),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2525))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8083,f11344])).
fof(f12904,plain,(
  ( ! [X2448,X2445,X2447,X2443,X2439,X2449,X2444,X2446,X2442,X2438] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2438),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2444),s('type.list.list'(sK0),X2445))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2439),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2448),s('type.list.list'(sK0),X2449)))) ) | $spl24),
  inference(forward_demodulation,[],[f12048,f109])).
fof(f12048,plain,(
  ( ! [X2448,X2445,X2447,X2441,X2443,X2439,X2449,X2444,X2446,X2440,X2442,X2438] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2442),s('type.list.list'(sK0),X2443),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2444),s('type.list.list'(sK0),X2445))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2446),s('type.list.list'(sK0),X2447),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2439),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2448),s('type.list.list'(sK0),X2449))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2438),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2439),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2440),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2441))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8082,f11344])).
fof(f12901,plain,(
  ( ! [X2361,X2363,X2359,X2355,X2364,X2360,X2362,X2358,X2354,X2365] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X2354),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2358),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),X2361))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2362),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2355),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),X2365)))) ) | $spl24),
  inference(forward_demodulation,[],[f12041,f109])).
fof(f12041,plain,(
  ( ! [X2361,X2363,X2357,X2359,X2355,X2364,X2360,X2362,X2356,X2358,X2354,X2365] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2358),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2359),s('type.list.list'(sK0),X2360),s('type.list.list'(sK0),X2361))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2362),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2355),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2363),s('type.list.list'(sK0),X2364),s('type.list.list'(sK0),X2365))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2354),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2355),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2356),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2357))),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8081,f11344])).
fof(f12899,plain,(
  ( ! [X2306,X2301,X2305,X2307,X2302,X2308] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2301),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2305),s('type.list.list'(sK0),X2306),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2302),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2307),s('type.list.list'(sK0),X2308)))) ) | $spl24),
  inference(forward_demodulation,[],[f12034,f109])).
fof(f12034,plain,(
  ( ! [X2306,X2303,X2301,X2305,X2307,X2302,X2308,X2304] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2305),s('type.list.list'(sK0),X2306),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2302),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X2307),s('type.list.list'(sK0),X2308))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2301),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2302),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2303),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2304))),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f7589,f11344])).
fof(f12898,plain,(
  ( ! [X2299,X2297,X2295,X2291,X2300,X2298,X2296,X2294,X2290] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2300),s('type.list.list'(sK0),X2299),s('type.list.list'(sK0),X2297),s('type.list.list'(sK0),X2295),s('type.list.list'(sK0),X2290))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2291),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2294) != s('type.list.list'(sK0),X2295) | s('type.list.list'(sK0),X2296) != s('type.list.list'(sK0),X2297) | s('type.list.list'(sK0),X2298) != s('type.list.list'(sK0),X2299)) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f12033,f109])).
fof(f12033,plain,(
  ( ! [X2299,X2297,X2295,X2293,X2291,X2300,X2298,X2296,X2294,X2292,X2290] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2291),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2294) != s('type.list.list'(sK0),X2295) | s('type.list.list'(sK0),X2296) != s('type.list.list'(sK0),X2297) | s('type.list.list'(sK0),X2298) != s('type.list.list'(sK0),X2299) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2300),s('type.list.list'(sK0),X2299),s('type.list.list'(sK0),X2297),s('type.list.list'(sK0),X2295),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2290),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2291),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2292),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2293)))))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f7108,f11344])).
fof(f12897,plain,(
  ( ! [X2289,X2287,X2285,X2283,X2279,X2288,X2286,X2284,X2280] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2289),s('type.list.list'(sK0),X2288),s('type.list.list'(sK0),X2286),s('type.list.list'(sK0),X2279),s('type.list.list'(sK0),X2284))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2280),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2283) != s('type.list.list'(sK0),X2284) | s('type.list.list'(sK0),X2285) != s('type.list.list'(sK0),X2286) | s('type.list.list'(sK0),X2287) != s('type.list.list'(sK0),X2288)) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f12032,f109])).
fof(f12032,plain,(
  ( ! [X2289,X2287,X2285,X2283,X2281,X2279,X2288,X2286,X2284,X2282,X2280] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2280),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2283) != s('type.list.list'(sK0),X2284) | s('type.list.list'(sK0),X2285) != s('type.list.list'(sK0),X2286) | s('type.list.list'(sK0),X2287) != s('type.list.list'(sK0),X2288) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2289),s('type.list.list'(sK0),X2288),s('type.list.list'(sK0),X2286),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2279),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2280),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2281),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2282))),s('type.list.list'(sK0),X2284)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f6963,f11344])).
fof(f12895,plain,(
  ( ! [X2276,X2274,X2272,X2268,X2277,X2275,X2273,X2269,X2278] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2278),s('type.list.list'(sK0),X2277),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),X2268))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2272) != s('type.list.list'(sK0),X2273) | s('type.list.list'(sK0),X2274) != s('type.list.list'(sK0),X2275) | s('type.list.list'(sK0),X2276) != s('type.list.list'(sK0),X2277)) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f12031,f109])).
fof(f12031,plain,(
  ( ! [X2276,X2274,X2272,X2268,X2270,X2277,X2275,X2273,X2269,X2271,X2278] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X2272) != s('type.list.list'(sK0),X2273) | s('type.list.list'(sK0),X2274) != s('type.list.list'(sK0),X2275) | s('type.list.list'(sK0),X2276) != s('type.list.list'(sK0),X2277) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2278),s('type.list.list'(sK0),X2277),s('type.list.list'(sK0),X2275),s('type.list.list'(sK0),X2273),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2268),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2269),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2270),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2271)))))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f6924,f11344])).
fof(f12894,plain,(
  ( ! [X2243,X2239,X2246,X2244,X2240,X2245] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2243),s('type.list.list'(sK0),X2239),s('type.list.list'(sK0),X2244),s('type.list.list'(sK0),X2245),s('type.list.list'(sK0),X2246))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2240),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl9 | $spl24)),
  inference(forward_demodulation,[],[f12027,f109])).
fof(f12027,plain,(
  ( ! [X2243,X2239,X2241,X2246,X2244,X2242,X2240,X2245] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2240),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X2243),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X2239),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X2240),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X2241),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X2242))),s('type.list.list'(sK0),X2244),s('type.list.list'(sK0),X2245),s('type.list.list'(sK0),X2246)))) ) | ($spl9 | $spl24)),
  inference(superposition,[],[f6323,f11344])).
fof(f12892,plain,(
  ( ! [X1932,X1930,X1928,X1926,X1922,X1931,X1929,X1927,X1925,X1921] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1925),s('type.list.list'(sK0),X1926),s('type.list.list'(sK0),X1927),s('type.list.list'(sK0),X1928),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1929),s('type.list.list'(sK0),X1930),s('type.list.list'(sK0),X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),X1921))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1922),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f11996,f109])).
fof(f11996,plain,(
  ( ! [X1932,X1930,X1928,X1926,X1924,X1922,X1931,X1929,X1927,X1925,X1923,X1921] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1922),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1925),s('type.list.list'(sK0),X1926),s('type.list.list'(sK0),X1927),s('type.list.list'(sK0),X1928),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1929),s('type.list.list'(sK0),X1930),s('type.list.list'(sK0),X1931),s('type.list.list'(sK0),X1932),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1921),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1922),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1923),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1924)))))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f3992,f11344])).
fof(f12890,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1909,X1920,X1918,X1916,X1914,X1910] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1913),s('type.list.list'(sK0),X1914),s('type.list.list'(sK0),X1915),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1916))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1917),s('type.list.list'(sK0),X1918),s('type.list.list'(sK0),X1919),s('type.list.list'(sK0),X1909),s('type.list.list'(sK0),X1920))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1910),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f11995,f109])).
fof(f11995,plain,(
  ( ! [X1919,X1917,X1915,X1913,X1911,X1909,X1920,X1918,X1916,X1914,X1912,X1910] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1910),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1913),s('type.list.list'(sK0),X1914),s('type.list.list'(sK0),X1915),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1916))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1917),s('type.list.list'(sK0),X1918),s('type.list.list'(sK0),X1919),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1909),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1910),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1911),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1912))),s('type.list.list'(sK0),X1920)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f3990,f11344])).
fof(f12888,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1897,X1908,X1906,X1904,X1902,X1898] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1901),s('type.list.list'(sK0),X1902),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1903),s('type.list.list'(sK0),X1904))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1905),s('type.list.list'(sK0),X1906),s('type.list.list'(sK0),X1897),s('type.list.list'(sK0),X1907),s('type.list.list'(sK0),X1908))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1898),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f11994,f109])).
fof(f11994,plain,(
  ( ! [X1907,X1905,X1903,X1901,X1899,X1897,X1908,X1906,X1904,X1902,X1900,X1898] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1898),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1901),s('type.list.list'(sK0),X1902),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1903),s('type.list.list'(sK0),X1904))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1905),s('type.list.list'(sK0),X1906),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1897),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1898),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1899),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1900))),s('type.list.list'(sK0),X1907),s('type.list.list'(sK0),X1908)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f3988,f11344])).
fof(f12885,plain,(
  ( ! [X1886,X1895,X1893,X1891,X1889,X1885,X1896,X1894,X1892,X1890] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1889),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1890),s('type.list.list'(sK0),X1891),s('type.list.list'(sK0),X1892))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1893),s('type.list.list'(sK0),X1885),s('type.list.list'(sK0),X1894),s('type.list.list'(sK0),X1895),s('type.list.list'(sK0),X1896))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1886),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl17 | $spl24)),
  inference(forward_demodulation,[],[f11993,f109])).
fof(f11993,plain,(
  ( ! [X1886,X1895,X1893,X1891,X1889,X1887,X1885,X1896,X1894,X1892,X1890,X1888] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1886),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1889),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X1890),s('type.list.list'(sK0),X1891),s('type.list.list'(sK0),X1892))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1893),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1885),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1886),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1887),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1888))),s('type.list.list'(sK0),X1894),s('type.list.list'(sK0),X1895),s('type.list.list'(sK0),X1896)))) ) | ($spl17 | $spl24)),
  inference(superposition,[],[f3986,f11344])).
fof(f12883,plain,(
  ( ! [X1857,X1853,X1862,X1860,X1858,X1854,X1863,X1861,X1859] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1863),s('type.list.list'(sK0),X1862),s('type.list.list'(sK0),X1860),s('type.list.list'(sK0),X1853),s('type.list.list'(sK0),X1858))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1854),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X1857) != s('type.list.list'(sK0),X1858) | s('type.list.list'(sK0),X1859) != s('type.list.list'(sK0),X1860) | s('type.list.list'(sK0),X1861) != s('type.list.list'(sK0),X1862)) ) | ($spl6 | $spl24)),
  inference(forward_demodulation,[],[f11989,f109])).
fof(f11989,plain,(
  ( ! [X1857,X1855,X1853,X1862,X1860,X1858,X1856,X1854,X1863,X1861,X1859] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1854),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X1857) != s('type.list.list'(sK0),X1858) | s('type.list.list'(sK0),X1859) != s('type.list.list'(sK0),X1860) | s('type.list.list'(sK0),X1861) != s('type.list.list'(sK0),X1862) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1863),s('type.list.list'(sK0),X1862),s('type.list.list'(sK0),X1860),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1853),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1854),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1855),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1856))),s('type.list.list'(sK0),X1858)))) ) | ($spl6 | $spl24)),
  inference(superposition,[],[f3077,f11344])).
fof(f12880,plain,(
  ( ! [X1824,X1831,X1829,X1825,X1830,X1828] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1828),s('type.list.list'(sK0),X1824),s('type.list.list'(sK0),X1829),s('type.list.list'(sK0),X1830),s('type.list.list'(sK0),X1831))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1825),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | ($spl5 | $spl24)),
  inference(forward_demodulation,[],[f11985,f109])).
fof(f11985,plain,(
  ( ! [X1824,X1831,X1829,X1827,X1825,X1830,X1828,X1826] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1825),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1828),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1824),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1825),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1826),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1827))),s('type.list.list'(sK0),X1829),s('type.list.list'(sK0),X1830),s('type.list.list'(sK0),X1831)))) ) | ($spl5 | $spl24)),
  inference(superposition,[],[f2600,f11344])).
fof(f12877,plain,(
  ( ! [X1793,X1802,X1800,X1798,X1796,X1792,X1801,X1799,X1797] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1802),s('type.list.list'(sK0),X1801),s('type.list.list'(sK0),X1792),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),X1799))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1793),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X1796) != s('type.list.list'(sK0),X1797) | s('type.list.list'(sK0),X1798) != s('type.list.list'(sK0),X1799) | s('type.list.list'(sK0),X1800) != s('type.list.list'(sK0),X1801)) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f11981,f109])).
fof(f11981,plain,(
  ( ! [X1795,X1793,X1802,X1800,X1798,X1796,X1794,X1792,X1801,X1799,X1797] : (s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1793),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),X1796) != s('type.list.list'(sK0),X1797) | s('type.list.list'(sK0),X1798) != s('type.list.list'(sK0),X1799) | s('type.list.list'(sK0),X1800) != s('type.list.list'(sK0),X1801) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1802),s('type.list.list'(sK0),X1801),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1792),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1793),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1794),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1795))),s('type.list.list'(sK0),X1797),s('type.list.list'(sK0),X1799)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1045,f11344])).
fof(f12875,plain,(
  ( ! [X1787,X1789,X1791,X1776,X1780,X1782,X1784,X1786,X1788,X1790,X1777,X1781,X1783,X1785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1784),s('type.list.list'(sK0),X1785),s('type.list.list'(sK0),X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1788),s('type.list.list'(sK0),X1789),s('type.list.list'(sK0),X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),X1776))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1780),s('type.list.list'(sK0),X1781),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1777),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1782),s('type.list.list'(sK0),X1783)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f11980,f109])).
fof(f11980,plain,(
  ( ! [X1787,X1789,X1791,X1776,X1778,X1780,X1782,X1784,X1786,X1788,X1790,X1777,X1779,X1781,X1783,X1785] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1780),s('type.list.list'(sK0),X1781),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1777),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1782),s('type.list.list'(sK0),X1783))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1784),s('type.list.list'(sK0),X1785),s('type.list.list'(sK0),X1786),s('type.list.list'(sK0),X1787),s('type.list.list'(sK0),sK4))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1788),s('type.list.list'(sK0),X1789),s('type.list.list'(sK0),X1790),s('type.list.list'(sK0),X1791),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1776),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1777),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1778),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1779)))))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1005,f11344])).
fof(f12873,plain,(
  ( ! [X1664,X1668,X1670,X1672,X1674,X1676,X1678,X1665,X1669,X1671,X1673,X1675,X1677,X1679] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1672),s('type.list.list'(sK0),X1673),s('type.list.list'(sK0),X1674),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1676),s('type.list.list'(sK0),X1677),s('type.list.list'(sK0),X1678),s('type.list.list'(sK0),X1664),s('type.list.list'(sK0),X1679))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1668),s('type.list.list'(sK0),X1669),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1665),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1670),s('type.list.list'(sK0),X1671)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f11973,f109])).
fof(f11973,plain,(
  ( ! [X1664,X1666,X1668,X1670,X1672,X1674,X1676,X1678,X1665,X1667,X1669,X1671,X1673,X1675,X1677,X1679] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1668),s('type.list.list'(sK0),X1669),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1665),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1670),s('type.list.list'(sK0),X1671))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1672),s('type.list.list'(sK0),X1673),s('type.list.list'(sK0),X1674),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1675))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1676),s('type.list.list'(sK0),X1677),s('type.list.list'(sK0),X1678),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1664),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1665),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1666),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1667))),s('type.list.list'(sK0),X1679)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1003,f11344])).
fof(f12871,plain,(
  ( ! [X1600,X1604,X1606,X1608,X1610,X1612,X1614,X1601,X1605,X1607,X1609,X1611,X1613,X1615] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1608),s('type.list.list'(sK0),X1609),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1610),s('type.list.list'(sK0),X1611))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1612),s('type.list.list'(sK0),X1613),s('type.list.list'(sK0),X1600),s('type.list.list'(sK0),X1614),s('type.list.list'(sK0),X1615))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1604),s('type.list.list'(sK0),X1605),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1601),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1606),s('type.list.list'(sK0),X1607)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f11969,f109])).
fof(f11969,plain,(
  ( ! [X1600,X1602,X1604,X1606,X1608,X1610,X1612,X1614,X1601,X1603,X1605,X1607,X1609,X1611,X1613,X1615] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1604),s('type.list.list'(sK0),X1605),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1601),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1606),s('type.list.list'(sK0),X1607))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1608),s('type.list.list'(sK0),X1609),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1610),s('type.list.list'(sK0),X1611))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1612),s('type.list.list'(sK0),X1613),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1600),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1601),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1602),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1603))),s('type.list.list'(sK0),X1614),s('type.list.list'(sK0),X1615)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f1001,f11344])).
fof(f12868,plain,(
  ( ! [X1540,X1542,X1544,X1546,X1548,X1536,X1550,X1541,X1543,X1545,X1547,X1549,X1551,X1537] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1544),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1545),s('type.list.list'(sK0),X1546),s('type.list.list'(sK0),X1547))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1548),s('type.list.list'(sK0),X1536),s('type.list.list'(sK0),X1549),s('type.list.list'(sK0),X1550),s('type.list.list'(sK0),X1551))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1540),s('type.list.list'(sK0),X1541),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1537),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1542),s('type.list.list'(sK0),X1543)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f11965,f109])).
fof(f11965,plain,(
  ( ! [X1538,X1540,X1542,X1544,X1546,X1548,X1536,X1550,X1539,X1541,X1543,X1537,X1545,X1547,X1549,X1551] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1540),s('type.list.list'(sK0),X1541),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1537),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1542),s('type.list.list'(sK0),X1543))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1544),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X1545),s('type.list.list'(sK0),X1546),s('type.list.list'(sK0),X1547))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1548),s('type.list.list'(sK0),'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.list.list'(sK0),X1536),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))))),X1537),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0)))),X1538),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),X1539))),s('type.list.list'(sK0),X1549),s('type.list.list'(sK0),X1550),s('type.list.list'(sK0),X1551)))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f999,f11344])).
fof(f12867,plain,(
  ( ! [X1042,X1040,X1039,X1041,X1036] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1036),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1039),s('type.list.list'(sK0),X1040),s('type.list.list'(sK0),X1041),s('type.list.list'(sK0),X1042)))) ) | $spl68),
  inference(cnf_transformation,[],[f12867_D])).
fof(f12867_D,plain,(
  ( ! [X1042,X1040,X1039,X1041,X1036] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1036),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1039),s('type.list.list'(sK0),X1040),s('type.list.list'(sK0),X1041),s('type.list.list'(sK0),X1042)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f12862,plain,(
  ( ! [X814] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X814),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl62),
  inference(cnf_transformation,[],[f12862_D])).
fof(f12862_D,plain,(
  ( ! [X814] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X814),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f12866,plain,(
  ( ! [X1042,X1040,X1035,X1039,X1041,X1036] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1035),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1036),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1039),s('type.list.list'(sK0),X1040),s('type.list.list'(sK0),X1041),s('type.list.list'(sK0),X1042)))) ) | $spl24),
  inference(forward_demodulation,[],[f11914,f109])).
fof(f11914,plain,(
  ( ! [X1042,X1040,X1035,X1039,X1037,X1041,X1038,X1036] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1036),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),X1039),s('type.list.list'(sK0),X1040),s('type.list.list'(sK0),X1041),s('type.list.list'(sK0),X1042))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X1035),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1036),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X1037),s(fun('type.list.list'(sK0),'type.num.num'),X1038))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8095,f11344])).
fof(f12864,plain,(
  ( ! [X1020] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1020),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl64),
  inference(cnf_transformation,[],[f12864_D])).
fof(f12864_D,plain,(
  ( ! [X1020] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1020),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f12865,plain,(
  ( ! [X1019,X1023,X1025,X1026,X1024] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1019),s('type.list.list'(sK0),X1026),s('type.list.list'(sK0),X1023),s('type.list.list'(sK0),X1025),s('type.list.list'(sK0),X1024))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1026) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1025) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1024) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1023)) ) | $spl66),
  inference(cnf_transformation,[],[f12865_D])).
fof(f12865_D,plain,(
  ( ! [X1019,X1023,X1025,X1026,X1024] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1019),s('type.list.list'(sK0),X1026),s('type.list.list'(sK0),X1023),s('type.list.list'(sK0),X1025),s('type.list.list'(sK0),X1024))) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1026) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1025) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1024) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1023)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f12863,plain,(
  ( ! [X1019,X1023,X1025,X1020,X1026,X1024] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X1019),s('type.list.list'(sK0),X1026),s('type.list.list'(sK0),X1023),s('type.list.list'(sK0),X1025),s('type.list.list'(sK0),X1024))) | s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1020),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1023) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1024) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1025) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1026)) ) | $spl24),
  inference(forward_demodulation,[],[f11912,f109])).
fof(f11912,plain,(
  ( ! [X1019,X1023,X1021,X1025,X1022,X1020,X1026,X1024] : (s('type.num.num',sK5) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1020),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1023) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1024) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X1025) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1026) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X1019),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X1020),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X1021),s(fun('type.list.list'(sK0),'type.num.num'),X1022))),s('type.list.list'(sK0),X1026),s('type.list.list'(sK0),X1023),s('type.list.list'(sK0),X1025),s('type.list.list'(sK0),X1024)))) ) | $spl24),
  inference(superposition,[],[f8089,f11344])).
fof(f8089,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',sK5) != s('type.num.num',X0) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X4) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X3) | s('type.list.list'(sK0),sK4) != s('type.list.list'(sK0),X1) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),X4)))) ) | $spl24),
  inference(backward_demodulation,[],[f8078,f159])).
fof(f12861,plain,(
  ( ! [X825,X819,X823,X821,X826,X824,X818,X822,X820,X815] : (s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X818),X819),s('type.list.list'(X818),X820),s('type.list.list'(X818),X821),s('type.list.list'(X818),X822))) != s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X815),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X818),X823),s('type.list.list'(X818),X824),s('type.list.list'(X818),X825),s('type.list.list'(X818),X826)))) ) | $spl60),
  inference(cnf_transformation,[],[f12861_D])).
fof(f12861_D,plain,(
  ( ! [X825,X819,X823,X821,X826,X824,X818,X822,X820,X815] : (s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X818),X819),s('type.list.list'(X818),X820),s('type.list.list'(X818),X821),s('type.list.list'(X818),X822))) != s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X815),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X818),X823),s('type.list.list'(X818),X824),s('type.list.list'(X818),X825),s('type.list.list'(X818),X826)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f12860,plain,(
  ( ! [X825,X819,X823,X821,X814,X826,X824,X818,X822,X820,X815] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X814),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X818),X819),s('type.list.list'(X818),X820),s('type.list.list'(X818),X821),s('type.list.list'(X818),X822))) != s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X815),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X818),X823),s('type.list.list'(X818),X824),s('type.list.list'(X818),X825),s('type.list.list'(X818),X826)))) ) | $spl24),
  inference(forward_demodulation,[],[f11895,f109])).
fof(f11895,plain,(
  ( ! [X825,X819,X817,X823,X821,X814,X826,X824,X818,X816,X822,X820,X815] : (s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(X818),X819),s('type.list.list'(X818),X820),s('type.list.list'(X818),X821),s('type.list.list'(X818),X822))) != s('type.HoodMelvilleQueue.status'(X818),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num')))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X815),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))),s('type.list.list'(X818),X823),s('type.list.list'(X818),X824),s('type.list.list'(X818),X825),s('type.list.list'(X818),X826))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num','const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s('type.num.num',X814),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))))),X815),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.num.num'))),X816),s(fun('type.list.list'(sK0),'type.num.num'),X817))),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(superposition,[],[f8080,f11344])).
fof(f12855,plain,(
  ( ! [X128,X129] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11831,f109])).
fof(f11831,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X128),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X129),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X130),s(fun('type.list.list'(sK0),bool),X131)))) ) | $spl24),
  inference(superposition,[],[f98,f11344])).
fof(f12854,plain,(
  ( ! [X125,X124] : (~p(s(bool,X124)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11830,f109])).
fof(f11830,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X124),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X125),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X126),s(fun('type.list.list'(sK0),bool),X127))))) ) | $spl24),
  inference(superposition,[],[f98,f11344])).
fof(f12853,plain,(
  ( ! [X121,X120] : (s(bool,'T_0') != s(bool,X120) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11829,f109])).
fof(f11829,plain,(
  ( ! [X123,X121,X122,X120] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X120),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X121),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X122),s(fun('type.list.list'(sK0),bool),X123)))) ) | $spl24),
  inference(superposition,[],[f97,f11344])).
fof(f12852,plain,(
  ( ! [X116,X117] : (p(s(bool,X116)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11828,f109])).
fof(f11828,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X116),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X117),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X118),s(fun('type.list.list'(sK0),bool),X119))))) ) | $spl24),
  inference(superposition,[],[f97,f11344])).
fof(f12851,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') = s(bool,X112) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11827,f109])).
fof(f11827,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X112),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X113),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X114),s(fun('type.list.list'(sK0),bool),X115)))) ) | $spl24),
  inference(superposition,[],[f96,f11344])).
fof(f12850,plain,(
  ( ! [X109,X108] : (~p(s(bool,X108)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11826,f109])).
fof(f11826,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X108),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X109),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X110),s(fun('type.list.list'(sK0),bool),X111))))) ) | $spl24),
  inference(superposition,[],[f96,f11344])).
fof(f12848,plain,(
  ( ! [X105,X104] : (s(bool,'T_0') != s(bool,X104) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11825,f109])).
fof(f11825,plain,(
  ( ! [X107,X105,X106,X104] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X104),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X105),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X106),s(fun('type.list.list'(sK0),bool),X107)))) ) | $spl24),
  inference(superposition,[],[f95,f11344])).
fof(f12846,plain,(
  ( ! [X101,X100] : (p(s(bool,X100)) | s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11824,f109])).
fof(f11824,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X100),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X101),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X102),s(fun('type.list.list'(sK0),bool),X103))))) ) | $spl24),
  inference(superposition,[],[f95,f11344])).
fof(f12845,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,X96) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11823,f109])).
fof(f11823,plain,(
  ( ! [X99,X97,X98,X96] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X96),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X97),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X98),s(fun('type.list.list'(sK0),bool),X99)))) ) | $spl24),
  inference(superposition,[],[f94,f11344])).
fof(f12844,plain,(
  ( ! [X92,X93] : (p(s(bool,X92)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11822,f109])).
fof(f11822,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X92),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X93),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X94),s(fun('type.list.list'(sK0),bool),X95))))) ) | $spl24),
  inference(superposition,[],[f94,f11344])).
fof(f12843,plain,(
  ( ! [X88,X89] : (s(bool,'F_0') != s(bool,X88) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11821,f109])).
fof(f11821,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X88),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X89),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X90),s(fun('type.list.list'(sK0),bool),X91)))) ) | $spl24),
  inference(superposition,[],[f93,f11344])).
fof(f12842,plain,(
  ( ! [X85,X84] : (~p(s(bool,X84)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11820,f109])).
fof(f11820,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X84),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X85),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X86),s(fun('type.list.list'(sK0),bool),X87))))) ) | $spl24),
  inference(superposition,[],[f93,f11344])).
fof(f12841,plain,(
  ( ! [X80,X81] : (s(bool,'F_0') = s(bool,X80) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11819,f109])).
fof(f11819,plain,(
  ( ! [X80,X83,X81,X82] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X80),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X81),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X82),s(fun('type.list.list'(sK0),bool),X83)))) ) | $spl24),
  inference(superposition,[],[f92,f11344])).
fof(f12840,plain,(
  ( ! [X76,X77] : (p(s(bool,X76)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11818,f109])).
fof(f11818,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X76),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X77),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X78),s(fun('type.list.list'(sK0),bool),X79))))) ) | $spl24),
  inference(superposition,[],[f92,f11344])).
fof(f12838,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') != s(bool,X72) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11817,f109])).
fof(f11817,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,'F_0') != s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X72),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X73),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X74),s(fun('type.list.list'(sK0),bool),X75)))) ) | $spl24),
  inference(superposition,[],[f91,f11344])).
fof(f12836,plain,(
  ( ! [X68,X69] : (~p(s(bool,X68)) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11816,f109])).
fof(f11816,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X68),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X69),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X70),s(fun('type.list.list'(sK0),bool),X71))))) ) | $spl24),
  inference(superposition,[],[f91,f11344])).
fof(f12835,plain,(
  ( ! [X64,X67,X63] : (s(bool,X63) = s(bool,X67) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X67))) ) | $spl24),
  inference(forward_demodulation,[],[f11815,f109])).
fof(f11815,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X67) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X63),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X64),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X65),s(fun('type.list.list'(sK0),bool),X66))) | ~p(s(bool,X67))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12834,plain,(
  ( ! [X59,X62,X58] : (s(bool,X58) = s(bool,X62) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X62))) ) | $spl24),
  inference(forward_demodulation,[],[f11814,f109])).
fof(f11814,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X62) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X58),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X59),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X60),s(fun('type.list.list'(sK0),bool),X61))) | ~p(s(bool,X62))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12833,plain,(
  ( ! [X57,X54,X53] : (~p(s(bool,X53)) | s(bool,X57) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X57))) ) | $spl24),
  inference(forward_demodulation,[],[f11813,f109])).
fof(f11813,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X57)) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X53),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X54),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X55),s(fun('type.list.list'(sK0),bool),X56))))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12832,plain,(
  ( ! [X52,X48,X49] : (~p(s(bool,X48)) | s(bool,X52) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X52))) ) | $spl24),
  inference(forward_demodulation,[],[f11812,f109])).
fof(f11812,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X52) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X50),s(fun('type.list.list'(sK0),bool),X51)))) | ~p(s(bool,X52))) ) | $spl24),
  inference(superposition,[],[f88,f11344])).
fof(f12831,plain,(
  ( ! [X47,X43,X44] : (s(bool,X43) = s(bool,X47) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X47))) ) | $spl24),
  inference(forward_demodulation,[],[f11811,f109])).
fof(f11811,plain,(
  ( ! [X47,X45,X43,X46,X44] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X47) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X43),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X45),s(fun('type.list.list'(sK0),bool),X46))) | p(s(bool,X47))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12830,plain,(
  ( ! [X39,X38,X42] : (s(bool,X38) = s(bool,X42) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X42))) ) | $spl24),
  inference(forward_demodulation,[],[f11810,f109])).
fof(f11810,plain,(
  ( ! [X39,X41,X38,X42,X40] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | s(bool,X42) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X38),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X40),s(fun('type.list.list'(sK0),bool),X41))) | p(s(bool,X42))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12829,plain,(
  ( ! [X37,X33,X34] : (p(s(bool,X33)) | s(bool,X37) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X37))) ) | $spl24),
  inference(forward_demodulation,[],[f11809,f109])).
fof(f11809,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s(bool,X37) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X35),s(fun('type.list.list'(sK0),bool),X36)))) | p(s(bool,X37))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12828,plain,(
  ( ! [X28,X29,X32] : (p(s(bool,X28)) | s(bool,X32) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X32))) ) | $spl24),
  inference(forward_demodulation,[],[f11808,f109])).
fof(f11808,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,X32) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X32)) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X28),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X29),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X30),s(fun('type.list.list'(sK0),bool),X31))))) ) | $spl24),
  inference(superposition,[],[f85,f11344])).
fof(f12826,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') = s(bool,X49) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11791,f109])).
fof(f11791,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X49),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X50),s(fun('type.list.list'(sK0),bool),X51))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X48),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f98])).
fof(f12824,plain,(
  ( ! [X45,X44] : (s(bool,'T_0') = s(bool,X45) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11790,f109])).
fof(f11790,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X45),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X46),s(fun('type.list.list'(sK0),bool),X47))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X44),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f96])).
fof(f12823,plain,(
  ( ! [X41,X40] : (s(bool,'F_0') = s(bool,X41) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11789,f109])).
fof(f11789,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X41),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X42),s(fun('type.list.list'(sK0),bool),X43))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X40),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f94])).
fof(f12821,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') = s(bool,X37) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11788,f109])).
fof(f11788,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'F_0') = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X37),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X38),s(fun('type.list.list'(sK0),bool),X39))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X36),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f92])).
fof(f12820,plain,(
  ( ! [X33,X31,X32] : (s(bool,X32) = s(bool,X33) | ~p(s(bool,X32)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11787,f109])).
fof(f11787,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X32) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X33),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X34),s(fun('type.list.list'(sK0),bool),X35))) | ~p(s(bool,X32)) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f88])).
fof(f12817,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) = s(bool,X28) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X27))) ) | $spl24),
  inference(forward_demodulation,[],[f11786,f109])).
fof(f11786,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,X27) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X28),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X29),s(fun('type.list.list'(sK0),bool),X30))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | ~p(s(bool,X27))) ) | $spl24),
  inference(superposition,[],[f11344,f88])).
fof(f12816,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) = s(bool,X23) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X22))) ) | $spl24),
  inference(forward_demodulation,[],[f11785,f109])).
fof(f11785,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,X22) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X23),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X24),s(fun('type.list.list'(sK0),bool),X25))) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) | p(s(bool,X22))) ) | $spl24),
  inference(superposition,[],[f11344,f85])).
fof(f12813,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) = s(bool,X18) | p(s(bool,X17)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(forward_demodulation,[],[f11784,f109])).
fof(f11784,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X17) = s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X18),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X19),s(fun('type.list.list'(sK0),bool),X20))) | p(s(bool,X17)) | p(s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))))) ) | $spl24),
  inference(superposition,[],[f11344,f85])).
fof(f12801,plain,(
  ( ! [X43,X42] : (~p(s(bool,X42)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11738,f109])).
fof(f11738,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X42),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X43),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X44),s(fun('type.list.list'(sK0),bool),X45))))) ) | $spl24),
  inference(superposition,[],[f11344,f98])).
fof(f12799,plain,(
  ( ! [X39,X38] : (~p(s(bool,X38)) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11737,f109])).
fof(f11737,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X38),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X39),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X40),s(fun('type.list.list'(sK0),bool),X41))))) ) | $spl24),
  inference(superposition,[],[f11344,f96])).
fof(f12798,plain,(
  ( ! [X35,X34] : (p(s(bool,X34)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11736,f109])).
fof(f11736,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X34),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X35),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X36),s(fun('type.list.list'(sK0),bool),X37))))) ) | $spl24),
  inference(superposition,[],[f11344,f94])).
fof(f12796,plain,(
  ( ! [X30,X31] : (p(s(bool,X30)) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1)))) ) | $spl24),
  inference(forward_demodulation,[],[f11735,f109])).
fof(f11735,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X30),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X31),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X32),s(fun('type.list.list'(sK0),bool),X33))))) ) | $spl24),
  inference(superposition,[],[f11344,f92])).
fof(f12795,plain,(
  ( ! [X26,X29,X25] : (~p(s(bool,X25)) | s(bool,X29) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X29))) ) | $spl24),
  inference(forward_demodulation,[],[f11734,f109])).
fof(f11734,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X29) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X29)) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X25),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X26),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X27),s(fun('type.list.list'(sK0),bool),X28))))) ) | $spl24),
  inference(superposition,[],[f11344,f88])).
fof(f12792,plain,(
  ( ! [X24,X21,X20] : (~p(s(bool,X20)) | s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,X24))) ) | $spl24),
  inference(forward_demodulation,[],[f11733,f109])).
fof(f11733,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X24) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X20),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X21),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X22),s(fun('type.list.list'(sK0),bool),X23)))) | ~p(s(bool,X24))) ) | $spl24),
  inference(superposition,[],[f11344,f88])).
fof(f12791,plain,(
  ( ! [X19,X15,X16] : (p(s(bool,X15)) | s(bool,X19) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X19))) ) | $spl24),
  inference(forward_demodulation,[],[f11732,f109])).
fof(f11732,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,X19) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X15),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X16),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X17),s(fun('type.list.list'(sK0),bool),X18)))) | p(s(bool,X19))) ) | $spl24),
  inference(superposition,[],[f11344,f85])).
fof(f12788,plain,(
  ( ! [X14,X10,X11] : (p(s(bool,X10)) | s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14))) ) | $spl24),
  inference(forward_demodulation,[],[f11731,f109])).
fof(f11731,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,X14) = s(bool,happ(s(fun('type.list.list'(sK0),bool),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool)))),happ(s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s('type.num.num',sK5))),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),sK1))) | p(s(bool,X14)) | p(s(bool,'const.HoodMelvilleQueue.status_CASE_5'(s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'),s(bool,X10),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))))),X11),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),bool))),X12),s(fun('type.list.list'(sK0),bool),X13))))) ) | $spl24),
  inference(superposition,[],[f11344,f85])).
fof(f8008,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl24),
  inference(cnf_transformation,[],[f8008_D])).
fof(f8008_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f8009,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK3)))) ) | $spl26),
  inference(cnf_transformation,[],[f8009_D])).
fof(f8009_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK3)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f8002,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f141,f84])).
fof(f7811,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl22),
  inference(cnf_transformation,[],[f7811_D])).
fof(f7811_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f6028,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X3)))) ) | $spl20),
  inference(cnf_transformation,[],[f6028_D])).
fof(f6028_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X3)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f7805,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f139,f84])).
fof(f6027,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl18),
  inference(cnf_transformation,[],[f6027_D])).
fof(f6027_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f6020,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl8),
  inference(superposition,[],[f4704,f2460])).
fof(f4704,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X37),s('type.list.list'(sK0),X38),s('type.list.list'(sK0),X39),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X40))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X41),s('type.list.list'(sK0),X42),s('type.list.list'(sK0),X43),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),X44))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),X36),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl8),
  inference(forward_demodulation,[],[f139,f3586])).
fof(f3586,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK4) | $spl8),
  inference(trivial_inequality_removal,[],[f3561])).
fof(f3561,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK4) | $spl8),
  inference(superposition,[],[f164,f2460])).
fof(f3982,plain,(
  ( ! [X88] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X88)) ) | $spl14),
  inference(cnf_transformation,[],[f3982_D])).
fof(f3982_D,plain,(
  ( ! [X88] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X88)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f3984,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | $spl17),
  inference(cnf_transformation,[],[f3984_D])).
fof(f3984_D,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f3981,plain,(
  ( ! [X88] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X88)) ) | ($spl5 | $spl8)),
  inference(subsumption_resolution,[],[f3976,f2600])).
fof(f3976,plain,(
  ( ! [X88] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X88))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X88)) ) | $spl8),
  inference(superposition,[],[f3597,f3586])).
fof(f3597,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),X1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X1)) ) | $spl8),
  inference(backward_demodulation,[],[f3586,f500])).
fof(f2460,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl8),
  inference(cnf_transformation,[],[f2460_D])).
fof(f2460_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f3527,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK4)))) ) | $spl12),
  inference(cnf_transformation,[],[f3527_D])).
fof(f3527_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK4)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f3522,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK4))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f133,f84])).
fof(f2461,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK2)))) ) | $spl10),
  inference(cnf_transformation,[],[f2461_D])).
fof(f2461_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2453,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3),s('type.list.list'(sK0),sK2))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK1),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl4),
  inference(superposition,[],[f1775,f1177])).
fof(f1775,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X55),s('type.list.list'(sK0),X56),s('type.list.list'(sK0),X57),s('type.list.list'(sK0),X58),s('type.list.list'(sK0),sK2))) != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X59),s('type.list.list'(sK0),X60),s('type.list.list'(sK0),X61),s('type.list.list'(sK0),X62),s('type.list.list'(sK0),X54))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),X54),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) ) | $spl4),
  inference(forward_demodulation,[],[f133,f1236])).
fof(f1236,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) | $spl4),
  inference(trivial_inequality_removal,[],[f1211])).
fof(f1211,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) | $spl4),
  inference(superposition,[],[f164,f1177])).
fof(f1177,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl4),
  inference(cnf_transformation,[],[f1177_D])).
fof(f1177_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1178,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3)))) ) | $spl6),
  inference(cnf_transformation,[],[f1178_D])).
fof(f1178_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1171,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f131,f84])).
fof(f979,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) | $spl0),
  inference(cnf_transformation,[],[f979_D])).
fof(f979_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f980,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f980_D])).
fof(f980_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f973,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK0),X1),s('type.list.list'(sK0),sK4),s('type.list.list'(sK0),X2),s('type.list.list'(sK0),X3))) | s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK5),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),sK1)))) )),
  inference(superposition,[],[f129,f84])).
% SZS output end Proof for thm.HoodMelvilleQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 306
% Passive clauses: 5240
% Generated clauses: 20210
% Final active clauses: 124
% Final passive clauses: 2548
% Input formulas: 37
% Initial clauses: 39
% 
% Selected by SInE selection: 20
% SInE iterations: 1
% 
% Duplicate literals: 169
% Trivial inequalities: 142
% Fw subsumption resolutions: 327
% Fw demodulations: 1150
% Bw demodulations: 70
% 
% Simple tautologies: 178
% Equational tautologies: 14
% Forward subsumptions: 13100
% 
% Binary resolution: 211
% Forward superposition: 14503
% Backward superposition: 3093
% Self superposition: 45
% Equality factoring: 24
% Equality resolution: 157
% 
% Split clauses: 369
% Split components: 740
% SAT solver clauses: 389
% SAT solver unit clauses: 7
% SAT solver binary clauses: 187
% 
% Sat splits: 369
% Sat splitting refutations: 17
% 
% Memory used [KB]: 15351
% Time elapsed: 0.904 s
% ------------------------------
% ------------------------------
% Success in time 13.001 s
