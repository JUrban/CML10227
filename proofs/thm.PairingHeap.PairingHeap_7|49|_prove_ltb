Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.PairingHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.PairingHeap
% SZS output start Proof for thm.PairingHeap
fof(f4030,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4029,f210,f379,f377,f212,f376])).
fof(f376,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'))) | $spl1),
  inference(cnf_transformation,[],[f376_D])).
fof(f376_D,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f212,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0')))),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  (s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK14),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK15)))))) & ! [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,X2),s('type.list.list'('type.PairingHeap.heap'(sK12)),X3))))) & s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f132])).
fof(f132,plain,(
  ? [X0,X1] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))) | ? [X4,X5] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X4),s('type.list.list'('type.PairingHeap.heap'(X0)),X5)))))) & ! [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X2),s('type.list.list'('type.PairingHeap.heap'(X0)),X3))))) & s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))))),
  inference(rectify,[],[f92])).
fof(f92,plain,(
  ? [X0,X1] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))) | ? [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X2),s('type.list.list'('type.PairingHeap.heap'(X0)),X3)))))) & ! [X4,X5] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X4),s('type.list.list'('type.PairingHeap.heap'(X0)),X5))))) & s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ? [X0,X1] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))) | ? [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X2),s('type.list.list'('type.PairingHeap.heap'(X0)),X3)))))) & (! [X4,X5] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X4),s('type.list.list'('type.PairingHeap.heap'(X0)),X5))))) & s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0')))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))) | ? [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X2),s('type.list.list'('type.PairingHeap.heap'(X0)),X3)))))) => (? [X4,X5] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X4),s('type.list.list'('type.PairingHeap.heap'(X0)),X5))))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0')))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ~! [X0] : ! [X1] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'))) | ? [X2,X3] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X2),s('type.list.list'('type.PairingHeap.heap'(X0)),X3)))))) => (? [X4,X5] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X4),s('type.list.list'('type.PairingHeap.heap'(X0)),X5))))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),X1) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X0)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'))) | ? [X8,X9] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X8),s('type.list.list'('type.PairingHeap.heap'(X6)),X9)))))) => (? [X8,X9] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X8),s('type.list.list'('type.PairingHeap.heap'(X6)),X9))))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'))) | ? [X8,X9] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X8),s('type.list.list'('type.PairingHeap.heap'(X6)),X9)))))) => (? [X8,X9] : s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X8),s('type.list.list'('type.PairingHeap.heap'(X6)),X9))))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),X7) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(X6)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0')))))),
  file('thm.PairingHeap.PairingHeap_7|49|_prove_ltb','thm.PairingHeap.PairingHeap_7|49|_prove_ltb')).
fof(f377,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'))) | $spl0),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f379,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK14),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK15))))) | $spl2),
  inference(cnf_transformation,[],[f379_D])).
fof(f379_D,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK14),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK15))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f210,plain,(
  s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK14),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK15))))) | s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) = s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0')))),
  inference(cnf_transformation,[],[f133])).
fof(f4029,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f379,f211])).
fof(f211,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),sK13) != s('type.pair.prod'('type.one.one','type.PairingHeap.heap'(sK12)),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,X2),s('type.list.list'('type.PairingHeap.heap'(sK12)),X3)))))) )),
  inference(cnf_transformation,[],[f133])).
% SZS output end Proof for thm.PairingHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 310
% Passive clauses: 1207
% Generated clauses: 3812
% Final active clauses: 310
% Final passive clauses: 749
% Input formulas: 35
% Initial clauses: 162
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 253
% 
% Simple tautologies: 139
% Equational tautologies: 20
% Forward subsumptions: 2039
% 
% Binary resolution: 2327
% Factoring: 706
% Forward superposition: 108
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 157
% SAT solver clauses: 154
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 153
% TWLsolver calls for satisfiability: 133
% 
% Memory used [KB]: 1918
% Time elapsed: 0.174 s
% ------------------------------
% ------------------------------
% Success in time 0.18 s
