Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pegComplete
% (128551)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 122
% Passive clauses: 1778
% Generated clauses: 16073
% Final active clauses: 109
% Final passive clauses: 1363
% Input formulas: 21
% Initial clauses: 46
% 
% Duplicate literals: 694
% Trivial inequalities: 329
% Fw subsumption resolutions: 2620
% Fw demodulations: 1989
% Bw demodulations: 10
% 
% Simple tautologies: 383
% Equational tautologies: 45
% Forward subsumptions: 6376
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 595
% Factoring: 4
% Forward superposition: 4524
% Backward superposition: 4821
% Self superposition: 178
% Equality factoring: 115
% Equality resolution: 27
% 
% Split clauses: 465
% Split components: 969
% SAT solver clauses: 1088
% SAT solver unit clauses: 24
% SAT solver binary clauses: 206
% 
% Sat splits: 465
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1079
% TWLsolver calls for satisfiability: 199
% 
% Memory used [KB]: 7419
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.pegComplete
% (128641)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 110
% Passive clauses: 468
% Generated clauses: 11311
% Final active clauses: 98
% Final passive clauses: 338
% Input formulas: 21
% Initial clauses: 46
% 
% Duplicate literals: 720
% Trivial inequalities: 114
% Fw subsumption resolutions: 1250
% Fw demodulations: 784
% Bw demodulations: 27
% Condensations: 1381
% Global subsumptions: 7
% 
% Simple tautologies: 191
% Equational tautologies: 56
% Forward subsumptions: 4560
% 
% Binary resolution: 266
% Factoring: 4
% Forward superposition: 2611
% Backward superposition: 3451
% Self superposition: 232
% Equality factoring: 152
% Equality resolution: 17
% 
% Split clauses: 73
% Split components: 154
% SAT solver clauses: 877
% SAT solver unit clauses: 58
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 14
% 
% Sat splits: 73
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 849
% TWLsolver calls for satisfiability: 276
% 
% Memory used [KB]: 9338
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.pegComplete
% (128697)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 259
% Passive clauses: 2198
% Generated clauses: 113247
% Final active clauses: 66
% Final passive clauses: 330
% Input formulas: 21
% Initial clauses: 46
% 
% Duplicate literals: 7428
% Trivial inequalities: 687
% Fw subsumption resolutions: 8107
% Fw demodulations: 10605
% Bw demodulations: 1141
% Condensations: 16283
% Global subsumptions: 438
% 
% Simple tautologies: 1013
% Equational tautologies: 5651
% Forward subsumptions: 58609
% Bw demodulations to eq. taut.: 122
% 
% Unit resulting resolution: 24438
% Factoring: 1
% Forward superposition: 24460
% Backward superposition: 15264
% Self superposition: 607
% Equality factoring: 454
% Equality resolution: 40
% 
% Split clauses: 237
% Split components: 479
% SAT solver clauses: 4844
% SAT solver unit clauses: 241
% SAT solver binary clauses: 466
% 
% Sat splits: 237
% Sat splitting refutations: 1732
% 
% Memory used [KB]: 33901
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.pegComplete
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pegComplete
% SZS output start Proof for thm.pegComplete
fof(f2171,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f124,f125,f150,f155,f156,f185,f353,f355,f395,f397,f450,f452,f510,f511,f153,f531,f560,f565,f582,f583,f595,f594,f632,f645,f705,f1030,f1029,f1038,f1039,f1041,f1044,f1045,f1050,f1051,f1052,f1053,f1054,f1055,f1057,f1058,f1061,f1062,f1040,f1037,f1067,f1036,f1035,f1137,f1242,f1241,f1729,f561,f1741,f633,f1697,f576,f575,f1698,f592,f591,f1760,f151,f2035,f2037,f2097,f181,f2098,f2170])).
fof(f2170,plain,(
  $false | ($spl10 | $spl12 | $spl54)),
  inference(trivial_inequality_removal,[],[f2169])).
fof(f2169,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ($spl10 | $spl12 | $spl54)),
  inference(superposition,[],[f2163,f452])).
fof(f2163,plain,(
  ( ! [X0] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0'))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) | ($spl10 | $spl54)),
  inference(equality_resolution,[],[f2152])).
fof(f2152,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X0) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X0))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) | ($spl10 | $spl54)),
  inference(trivial_inequality_removal,[],[f2149])).
fof(f2149,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X0) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X0))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) | ($spl10 | $spl54)),
  inference(superposition,[],[f2098,f397])).
fof(f2098,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2)))) ) | $spl54),
  inference(cnf_transformation,[],[f2098_D])).
fof(f2098_D,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f181,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) ) | $spl6),
  inference(cnf_transformation,[],[f181_D])).
fof(f181_D,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f2097,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl52),
  inference(subsumption_resolution,[],[f2096,f121])).
fof(f121,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.pegComplete.left_insert2_ind',aHL_TRUTH)).
fof(f2096,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl52),
  inference(forward_demodulation,[],[f2095,f161])).
fof(f161,plain,(
  ( ! [X19,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X18))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),X19)))))) )),
  inference(resolution,[],[f77,f98])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X18] : (s(bool,'T_0') = s(bool,X18) <=> p(s(bool,X18)))),
  file('thm.pegComplete.left_insert2_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f77,plain,(
  ( ! [X12,X11] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),X12))))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X11,X12] : p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),X12)))))) & ! [X4,X5,X6] : ((s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X6,X5,X4)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(X6,X5,X4)))) & s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(X6,X5,X4)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(X6,X5,X4)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X6,X5,X4)))) & s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X6,X5,X4)) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X6,X5,X4)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6))))))) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK7))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f56])).
fof(f56,plain,(
  ? [X0,X1] : (! [X11,X12] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,'type.gram.MMLnonT'),X12)))))) & ! [X4,X5,X6] : (? [X7,X8,X9,X10] : (s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X10))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X10) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6))))))) & ? [X2,X3] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X3)))))),
  inference(rectify,[],[f50])).
fof(f50,plain,(
  ? [X0,X1] : (! [X9,X10] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X9))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,'type.gram.MMLnonT'),X10)))))) & ! [X2,X3,X4] : (? [X5,X6,X7,X8] : (s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X3),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4))))))) & ? [X11,X12] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X12)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ? [X0,X1] : ((! [X9,X10] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X9))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,'type.gram.MMLnonT'),X10)))))) & ! [X2,X3,X4] : (? [X5,X6,X7,X8] : ((s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8)) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X3),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4)))))))) & ? [X11,X12] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X12)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : ((! [X9,X10] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X9))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,'type.gram.MMLnonT'),X10)))))) & ! [X2,X3,X4] : (! [X5,X6,X7,X8] : ((s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X3),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X12)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1] : ((! [X9,X10] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X9))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,'type.gram.MMLnonT'),X10)))))) & ! [X2,X3,X4] : (! [X5,X6,X7,X8] : ((s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X7),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8))) & s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X8)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X5))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X3),s('type.list.list'('type.grammar.parsetree'(X0,'type.gram.MMLnonT')),X4)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),bool)),X1),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(X0,'type.gram.MMLnonT'),X12)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8,X9] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X6,'type.gram.MMLnonT'),X9)))))) & ! [X8,X10,X11] : (! [X9,X12,X13,X14] : ((s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X11) = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X12))) & s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X12) = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X13),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X14))) & s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X14)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X9))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X11)))))))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X15))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X16)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8,X9] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(X6,'type.gram.MMLnonT'),X9)))))) & ! [X8,X10,X11] : (! [X9,X12,X13,X14] : ((s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X11) = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X12))) & s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X12) = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X13),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X14))) & s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X14)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X9))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X8))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(X6,'type.gram.MMLnonT')),X11)))))))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),bool)),X7),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X15))),s('type.grammar.parsetree'(X6,'type.gram.MMLnonT'),X16)))))),
  file('thm.pegComplete.left_insert2_ind','thm.pegComplete.left_insert2_ind')).
fof(f2095,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f2054,f107])).
fof(f107,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : ((p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X18] : ((p(s(bool,'F_0')) | p(s(bool,X18))) <=> p(s(bool,X18)))),
  file('thm.pegComplete.left_insert2_ind','thm.bool.OR_CLAUSES|split|2')).
fof(f2054,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl52),
  inference(superposition,[],[f83,f2037])).
fof(f83,plain,(
  ( ! [X4,X2,X0,X10,X8,X3,X1,X11,X9] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X4)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK10(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),X8)))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X10),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),sK12(X2,X1,X0)) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK8(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),sK9(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK8(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),sK9(X2,X1,X0))))))) | (! [X8,X9,X10,X11] : (s('type.list.list'('type.grammar.parsetree'(X0,X1)),sK12(X2,X1,X0)) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X10),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK10(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),X8))))) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK10(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),sK11(X2,X1,X0)),s('type.list.list'('type.grammar.parsetree'(X0,X1)),sK12(X2,X1,X0)))))))) | ! [X3,X4] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10,sK11,sK12])],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2] : (? [X12,X13] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X12))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),X13)))))) | ? [X5,X6,X7] : (! [X8,X9,X10,X11] : (s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X10),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X0,X1)),X11) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X5))),s('type.grammar.parsetree'(X0,X1),X8))))) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X5))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),X6),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7))))))) | ! [X3,X4] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X4)))))),
  inference(rectify,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (? [X10,X11] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X10))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),X11)))))) | ? [X3,X4,X5] : (! [X6,X7,X8,X9] : (s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X6),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X6))))) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),X4),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5))))))) | ! [X12,X13] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X12))),s('type.grammar.parsetree'(X0,X1),X13)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2] : ((? [X10,X11] : ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X10))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),X11)))))) | ? [X3,X4,X5] : (! [X6,X7,X8,X9] : ((s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X6),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7) != s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) | s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9)) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X6))))) & ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),X4),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5)))))))) | ! [X12,X13] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X12))),s('type.grammar.parsetree'(X0,X1),X13)))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X10))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),X11)))))) & ! [X3,X4,X5] : (! [X6,X7,X8,X9] : ((s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5) = s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X6),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7))) & s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7) = s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) & s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X6))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),X4),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5)))))))) => ! [X12,X13] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X12))),s('type.grammar.parsetree'(X0,X1),X13)))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ! [X2] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X10))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),X11)))))) & ! [X3,X4,X5] : (! [X6,X7,X8,X9] : ((s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5) = s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X6),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7))) & s('type.list.list'('type.grammar.parsetree'(X0,X1)),X7) = s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.CONS_2'(s('type.grammar.parsetree'(X0,X1),X8),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9))) & s('type.list.list'('type.grammar.parsetree'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X0,X1)),X9)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X6))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),X4),s('type.list.list'('type.grammar.parsetree'(X0,X1)),X5)))))))) => ! [X12,X13] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X12))),s('type.grammar.parsetree'(X0,X1),X13)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X17] : ! [X7] : ((! [X8,X9] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,X17),bool),happ(s(fun('type.grammar.parsetree'(X6,X17),fun('type.grammar.parsetree'(X6,X17),bool)),X7),s('type.grammar.parsetree'(X6,X17),X8))),s('type.grammar.parsetree'(X6,X17),'const.grammar.Lf_1'(s('type.grammar.symbol'(X6,X17),X9)))))) & ! [X8,X10,X11] : (! [X9,X12,X13,X14] : ((s('type.list.list'('type.grammar.parsetree'(X6,X17)),X11) = s('type.list.list'('type.grammar.parsetree'(X6,X17)),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,X17),X9),s('type.list.list'('type.grammar.parsetree'(X6,X17)),X12))) & s('type.list.list'('type.grammar.parsetree'(X6,X17)),X12) = s('type.list.list'('type.grammar.parsetree'(X6,X17)),'const.list.CONS_2'(s('type.grammar.parsetree'(X6,X17),X13),s('type.list.list'('type.grammar.parsetree'(X6,X17)),X14))) & s('type.list.list'('type.grammar.parsetree'(X6,X17)),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(X6,X17)),X14)) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,X17),bool),happ(s(fun('type.grammar.parsetree'(X6,X17),fun('type.grammar.parsetree'(X6,X17),bool)),X7),s('type.grammar.parsetree'(X6,X17),X8))),s('type.grammar.parsetree'(X6,X17),X9))))) => p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,X17),bool),happ(s(fun('type.grammar.parsetree'(X6,X17),fun('type.grammar.parsetree'(X6,X17),bool)),X7),s('type.grammar.parsetree'(X6,X17),X8))),s('type.grammar.parsetree'(X6,X17),'const.grammar.Nd_2'(s('type.sum.sum'(X17,'type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(X6,X17)),X11)))))))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.grammar.parsetree'(X6,X17),bool),happ(s(fun('type.grammar.parsetree'(X6,X17),fun('type.grammar.parsetree'(X6,X17),bool)),X7),s('type.grammar.parsetree'(X6,X17),X15))),s('type.grammar.parsetree'(X6,X17),X16)))))),
  file('thm.pegComplete.left_insert2_ind','thm.pegComplete.left_insert|49|_ind')).
fof(f2037,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | $spl52),
  inference(cnf_transformation,[],[f2037_D])).
fof(f2037_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f2035,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) )),
  inference(subsumption_resolution,[],[f2034,f121])).
fof(f2034,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) )),
  inference(forward_demodulation,[],[f1999,f161])).
fof(f1999,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f538,f84])).
fof(f84,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),X3))),s('type.grammar.parsetree'(X0,X1),X4)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK10(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Nd_2'(s('type.sum.sum'(X1,'type.num.num'),sK11(X2,X1,X0)),s('type.list.list'('type.grammar.parsetree'(X0,X1)),sK12(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X0,X1),bool),happ(s(fun('type.grammar.parsetree'(X0,X1),fun('type.grammar.parsetree'(X0,X1),bool)),X2),s('type.grammar.parsetree'(X0,X1),sK8(X2,X1,X0)))),s('type.grammar.parsetree'(X0,X1),'const.grammar.Lf_1'(s('type.grammar.symbol'(X0,X1),sK9(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f538,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X25))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X26),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X27)))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X25))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X27,X26,X25))))) )),
  inference(resolution,[],[f81,f94])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X18] : (s(bool,'F_0') = s(bool,X18) <=> ~p(s(bool,X18)))),
  file('thm.pegComplete.left_insert2_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f81,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X6,X5,X4))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6))))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f151,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1)))) ) | $spl2),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1760,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4)))) )),
  inference(subsumption_resolution,[],[f1704,f121])).
fof(f1704,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4)))) )),
  inference(superposition,[],[f83,f161])).
fof(f591,plain,(
  ( ! [X4,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) | $spl20),
  inference(cnf_transformation,[],[f591_D])).
fof(f591_D,plain,(
  ( ! [X4,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f592,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))))) ) | $spl22),
  inference(cnf_transformation,[],[f592_D])).
fof(f592_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1698,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X5,'type.gram.MMLnonT',sK0)) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X5),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X5),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X5,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X8) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X8))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X5),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X5,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X5,'type.gram.MMLnonT',sK0)))))))) ) | $spl10),
  inference(superposition,[],[f83,f397])).
fof(f575,plain,(
  ( ! [X4,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl16),
  inference(cnf_transformation,[],[f575_D])).
fof(f575_D,plain,(
  ( ! [X4,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f576,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))))) ) | $spl18),
  inference(cnf_transformation,[],[f576_D])).
fof(f576_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1697,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0)))))))) ) | $spl12),
  inference(superposition,[],[f83,f452])).
fof(f633,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2)))) ) | $spl28),
  inference(cnf_transformation,[],[f633_D])).
fof(f633_D,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1741,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl5),
  inference(subsumption_resolution,[],[f1740,f121])).
fof(f1740,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl5),
  inference(forward_demodulation,[],[f1739,f161])).
fof(f1739,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1660,f107])).
fof(f1660,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl5),
  inference(superposition,[],[f83,f609])).
fof(f609,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))))) | $spl5),
  inference(resolution,[],[f153,f94])).
fof(f561,plain,(
  ( ! [X14,X10,X15,X11,X16] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X11)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X11,X10,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X16),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14)))) ) | $spl14),
  inference(cnf_transformation,[],[f561_D])).
fof(f561_D,plain,(
  ( ! [X14,X10,X15,X11,X16] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X11)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X11,X10,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X16),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1729,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X5,X6,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))))))) )),
  inference(subsumption_resolution,[],[f1728,f121])).
fof(f1728,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X5,X6,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))))))) )),
  inference(forward_demodulation,[],[f1617,f161])).
fof(f1617,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X5,X6,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))))))) )),
  inference(resolution,[],[f83,f81])).
fof(f1241,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) | $spl48),
  inference(cnf_transformation,[],[f1241_D])).
fof(f1241_D,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1242,plain,(
  ( ! [X10] : (~p(s(bool,X10))) ) | $spl50),
  inference(cnf_transformation,[],[f1242_D])).
fof(f1242_D,plain,(
  ( ! [X10] : (~p(s(bool,X10))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f1137,plain,(
  ( ! [X10,X11] : (~p(s(bool,X10)) | p(s(bool,X11))) ) | $spl30),
  inference(superposition,[],[f107,f1035])).
fof(f1035,plain,(
  ( ! [X44] : (s(bool,'F_0') = s(bool,X44)) ) | $spl30),
  inference(cnf_transformation,[],[f1035_D])).
fof(f1035_D,plain,(
  ( ! [X44] : (s(bool,'F_0') = s(bool,X44)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1036,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X45))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X46),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X47))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X48))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X49),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X50))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X47,X46,X45)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X50,X49,X48))) ) | $spl32),
  inference(cnf_transformation,[],[f1036_D])).
fof(f1036_D,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X45))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X46),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X47))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X48))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X49),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X50))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X47,X46,X45)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X50,X49,X48))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1067,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X169))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X170),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X171))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X173))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X174),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X175))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X175,X174,X173)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X171,X170,X169)) | s(bool,'F_0') = s(bool,X172)) )),
  inference(subsumption_resolution,[],[f1011,f94])).
fof(f1011,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (~p(s(bool,X172)) | s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X169))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X170),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X171))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X173))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X174),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X175))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X175,X174,X173)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X171,X170,X169)) | s(bool,'F_0') = s(bool,X172)) )),
  inference(superposition,[],[f329,f841])).
fof(f841,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X10) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X11))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X12),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X13))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X13,X12,X11)) | s(bool,'F_0') = s(bool,X10)) )),
  inference(resolution,[],[f329,f94])).
fof(f329,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,X5)) | s(bool,X5) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X3),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X3,X4))) )),
  inference(resolution,[],[f80,f90])).
fof(f90,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X20,X21] : ((p(s(bool,X20)) => p(s(bool,X21))) => ((p(s(bool,X21)) => p(s(bool,X20))) => s(bool,X20) = s(bool,X21)))),
  file('thm.pegComplete.left_insert2_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f80,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X6,X5,X4))) )),
  inference(cnf_transformation,[],[f57])).
fof(f1037,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X1,X0))) ) | $spl34),
  inference(cnf_transformation,[],[f1037_D])).
fof(f1037_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X1,X0))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1040,plain,(
  ( ! [X24,X23] : (s(bool,X23) = s(bool,X24) | ~p(s(bool,X23)) | s(bool,'F_0') = s(bool,X24)) ) | $spl38),
  inference(cnf_transformation,[],[f1040_D])).
fof(f1040_D,plain,(
  ( ! [X24,X23] : (s(bool,X23) = s(bool,X24) | ~p(s(bool,X23)) | s(bool,'F_0') = s(bool,X24)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1062,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(bool,X73) = s(bool,X74) | ~p(s(bool,X74)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X72,X71,X70)) | s(bool,'F_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f987,f80])).
fof(f987,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(bool,X73) = s(bool,X74) | ~p(s(bool,X74)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X70))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X71),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X72)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X72,X71,X70)) | s(bool,'F_0') = s(bool,X73)) )),
  inference(superposition,[],[f90,f841])).
fof(f1061,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,X68) = s(bool,X69) | ~p(s(bool,X69)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X67,X66,X65)) | s(bool,'F_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f986,f80])).
fof(f986,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,X68) = s(bool,X69) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X65))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X66),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X67)))))) | ~p(s(bool,X69)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X67,X66,X65)) | s(bool,'F_0') = s(bool,X68)) )),
  inference(superposition,[],[f90,f841])).
fof(f1058,plain,(
  ( ! [X329,X328,X330] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X330),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X329)))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X329,X330,X328))))) ) | $spl46),
  inference(cnf_transformation,[],[f1058_D])).
fof(f1058_D,plain,(
  ( ! [X329,X328,X330] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X330),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X329)))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X329,X330,X328))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f1057,plain,(
  ( ! [X333,X329,X331,X332,X328,X330] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X330),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X329)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X333,X332,X331)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X329,X330,X328))))) )),
  inference(subsumption_resolution,[],[f969,f80])).
fof(f969,plain,(
  ( ! [X333,X329,X331,X332,X328,X330] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X331))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X332),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X333)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X330),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X329)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X333,X332,X331)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X328))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X329,X330,X328))))) )),
  inference(superposition,[],[f81,f841])).
fof(f1055,plain,(
  ( ! [X280,X279,X285,X281,X286] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),X285))),s('type.grammar.parsetree'(X279,X280),X286)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK10(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Nd_2'(s('type.sum.sum'(X280,'type.num.num'),sK11(X281,X280,X279)),s('type.list.list'('type.grammar.parsetree'(X279,X280)),sK12(X281,X280,X279)))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK8(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Lf_1'(s('type.grammar.symbol'(X279,X280),sK9(X281,X280,X279)))))))) ) | $spl44),
  inference(cnf_transformation,[],[f1055_D])).
fof(f1055_D,plain,(
  ( ! [X280,X279,X285,X281,X286] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),X285))),s('type.grammar.parsetree'(X279,X280),X286)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK10(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Nd_2'(s('type.sum.sum'(X280,'type.num.num'),sK11(X281,X280,X279)),s('type.list.list'('type.grammar.parsetree'(X279,X280)),sK12(X281,X280,X279)))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK8(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Lf_1'(s('type.grammar.symbol'(X279,X280),sK9(X281,X280,X279)))))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f1054,plain,(
  ( ! [X280,X282,X279,X285,X281,X283,X284,X286] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),X285))),s('type.grammar.parsetree'(X279,X280),X286)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK8(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Lf_1'(s('type.grammar.symbol'(X279,X280),sK9(X281,X280,X279))))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X284,X283,X282)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK10(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Nd_2'(s('type.sum.sum'(X280,'type.num.num'),sK11(X281,X280,X279)),s('type.list.list'('type.grammar.parsetree'(X279,X280)),sK12(X281,X280,X279))))))) )),
  inference(subsumption_resolution,[],[f960,f80])).
fof(f960,plain,(
  ( ! [X280,X282,X279,X285,X281,X283,X284,X286] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X282))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X283),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X284)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),X285))),s('type.grammar.parsetree'(X279,X280),X286)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK8(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Lf_1'(s('type.grammar.symbol'(X279,X280),sK9(X281,X280,X279))))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X284,X283,X282)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X279,X280),bool),happ(s(fun('type.grammar.parsetree'(X279,X280),fun('type.grammar.parsetree'(X279,X280),bool)),X281),s('type.grammar.parsetree'(X279,X280),sK10(X281,X280,X279)))),s('type.grammar.parsetree'(X279,X280),'const.grammar.Nd_2'(s('type.sum.sum'(X280,'type.num.num'),sK11(X281,X280,X279)),s('type.list.list'('type.grammar.parsetree'(X279,X280)),sK12(X281,X280,X279))))))) )),
  inference(superposition,[],[f84,f841])).
fof(f1053,plain,(
  ( ! [X271,X277,X273,X278,X272] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),X277))),s('type.grammar.parsetree'(X271,X272),X278)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK8(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Lf_1'(s('type.grammar.symbol'(X271,X272),sK9(X273,X272,X271)))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK10(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Nd_2'(s('type.sum.sum'(X272,'type.num.num'),sK11(X273,X272,X271)),s('type.list.list'('type.grammar.parsetree'(X271,X272)),sK12(X273,X272,X271)))))))) ) | $spl42),
  inference(cnf_transformation,[],[f1053_D])).
fof(f1053_D,plain,(
  ( ! [X271,X277,X273,X278,X272] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),X277))),s('type.grammar.parsetree'(X271,X272),X278)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK8(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Lf_1'(s('type.grammar.symbol'(X271,X272),sK9(X273,X272,X271)))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK10(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Nd_2'(s('type.sum.sum'(X272,'type.num.num'),sK11(X273,X272,X271)),s('type.list.list'('type.grammar.parsetree'(X271,X272)),sK12(X273,X272,X271)))))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f1052,plain,(
  ( ! [X271,X277,X273,X275,X276,X278,X272,X274] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),X277))),s('type.grammar.parsetree'(X271,X272),X278)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK10(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Nd_2'(s('type.sum.sum'(X272,'type.num.num'),sK11(X273,X272,X271)),s('type.list.list'('type.grammar.parsetree'(X271,X272)),sK12(X273,X272,X271))))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X276,X275,X274)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK8(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Lf_1'(s('type.grammar.symbol'(X271,X272),sK9(X273,X272,X271))))))) )),
  inference(subsumption_resolution,[],[f959,f80])).
fof(f959,plain,(
  ( ! [X271,X277,X273,X275,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X274))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X275),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X276)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),X277))),s('type.grammar.parsetree'(X271,X272),X278)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK10(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Nd_2'(s('type.sum.sum'(X272,'type.num.num'),sK11(X273,X272,X271)),s('type.list.list'('type.grammar.parsetree'(X271,X272)),sK12(X273,X272,X271))))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X276,X275,X274)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X271,X272),bool),happ(s(fun('type.grammar.parsetree'(X271,X272),fun('type.grammar.parsetree'(X271,X272),bool)),X273),s('type.grammar.parsetree'(X271,X272),sK8(X273,X272,X271)))),s('type.grammar.parsetree'(X271,X272),'const.grammar.Lf_1'(s('type.grammar.symbol'(X271,X272),sK9(X273,X272,X271))))))) )),
  inference(superposition,[],[f84,f841])).
fof(f1051,plain,(
  ( ! [X261,X259,X269,X265,X267,X260,X268,X270,X266] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),X265))),s('type.grammar.parsetree'(X259,X260),X266)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK8(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),'const.grammar.Lf_1'(s('type.grammar.symbol'(X259,X260),sK9(X261,X260,X259)))))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),sK12(X261,X260,X259)) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X267),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X270),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK10(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),X267))))) ) | $spl40),
  inference(cnf_transformation,[],[f1051_D])).
fof(f1051_D,plain,(
  ( ! [X261,X259,X269,X265,X267,X260,X268,X270,X266] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),X265))),s('type.grammar.parsetree'(X259,X260),X266)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK8(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),'const.grammar.Lf_1'(s('type.grammar.symbol'(X259,X260),sK9(X261,X260,X259)))))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),sK12(X261,X260,X259)) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X267),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X270),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK10(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),X267))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1050,plain,(
  ( ! [X261,X263,X259,X269,X265,X267,X260,X262,X268,X270,X264,X266] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),X265))),s('type.grammar.parsetree'(X259,X260),X266)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK10(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),X267)))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X270),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),sK12(X261,X260,X259)) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X267),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X264,X263,X262)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK8(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),'const.grammar.Lf_1'(s('type.grammar.symbol'(X259,X260),sK9(X261,X260,X259))))))) )),
  inference(subsumption_resolution,[],[f958,f80])).
fof(f958,plain,(
  ( ! [X261,X263,X259,X269,X265,X267,X260,X262,X268,X270,X264,X266] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X262))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X263),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X264)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),X265))),s('type.grammar.parsetree'(X259,X260),X266)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK10(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),X267)))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X270),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X268))) | s('type.list.list'('type.grammar.parsetree'(X259,X260)),sK12(X261,X260,X259)) != s('type.list.list'('type.grammar.parsetree'(X259,X260)),'const.list.CONS_2'(s('type.grammar.parsetree'(X259,X260),X267),s('type.list.list'('type.grammar.parsetree'(X259,X260)),X269))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X264,X263,X262)) | s(bool,'F_0') = s(bool,happ(s(fun('type.grammar.parsetree'(X259,X260),bool),happ(s(fun('type.grammar.parsetree'(X259,X260),fun('type.grammar.parsetree'(X259,X260),bool)),X261),s('type.grammar.parsetree'(X259,X260),sK8(X261,X260,X259)))),s('type.grammar.parsetree'(X259,X260),'const.grammar.Lf_1'(s('type.grammar.symbol'(X259,X260),sK9(X261,X260,X259))))))) )),
  inference(superposition,[],[f83,f841])).
fof(f1045,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X35) = s(bool,X39) | ~p(s(bool,X39)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X38,X37,X36)) | s(bool,'F_0') = s(bool,X35)) )),
  inference(subsumption_resolution,[],[f931,f80])).
fof(f931,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X36))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X37),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X38)))))) | s(bool,X35) = s(bool,X39) | ~p(s(bool,X39)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X38,X37,X36)) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f90,f841])).
fof(f1044,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X30) = s(bool,X34) | ~p(s(bool,X34)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X33,X32,X31)) | s(bool,'F_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f930,f80])).
fof(f930,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X31))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X32),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X33)))))) | s(bool,X30) = s(bool,X34) | ~p(s(bool,X34)) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X33,X32,X31)) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f90,f841])).
fof(f1041,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X28) = s(bool,X29) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X27,X26,X25)) | s(bool,'F_0') = s(bool,X29) | ~p(s(bool,X28))) )),
  inference(subsumption_resolution,[],[f916,f80])).
fof(f916,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X28) = s(bool,X29) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X27,X26,X25)) | s(bool,'F_0') = s(bool,X29) | ~p(s(bool,X28)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X25))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X26),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X27))))))) )),
  inference(superposition,[],[f841,f90])).
fof(f1039,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X23) = s(bool,X24) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X22,X21,X20)) | s(bool,'F_0') = s(bool,X24) | ~p(s(bool,X23))) )),
  inference(subsumption_resolution,[],[f915,f80])).
fof(f915,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X23) = s(bool,X24) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X22,X21,X20)) | s(bool,'F_0') = s(bool,X24) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X20))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X21),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X22)))))) | ~p(s(bool,X23))) )),
  inference(superposition,[],[f841,f90])).
fof(f1038,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X4)) ) | $spl36),
  inference(cnf_transformation,[],[f1038_D])).
fof(f1038_D,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X4)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1029,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) = s(bool,X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X1,X0)) | s(bool,'F_0') = s(bool,X4) | s(bool,'F_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f910])).
fof(f910,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) = s(bool,X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X1,X0)) | s(bool,'F_0') = s(bool,X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X2,X1,X0)) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f841,f841])).
fof(f1030,plain,(
  ( ! [X47,X45,X50,X48,X46,X44,X49] : (s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X45))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X46),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X47))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X48))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X49),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X50))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X50,X49,X48)) | s(bool,'F_0') = s(bool,X44) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X47,X46,X45))) )),
  inference(duplicate_literal_removal,[],[f898])).
fof(f898,plain,(
  ( ! [X47,X45,X50,X48,X46,X44,X49] : (s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X45))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X46),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X47))))) = s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X48))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X49),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X50))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X50,X49,X48)) | s(bool,'F_0') = s(bool,X44) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X47,X46,X45)) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f841,f841])).
fof(f705,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5)))) ) | $spl5),
  inference(subsumption_resolution,[],[f704,f121])).
fof(f704,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5)))) ) | $spl5),
  inference(forward_demodulation,[],[f703,f161])).
fof(f703,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl5),
  inference(subsumption_resolution,[],[f662,f107])).
fof(f662,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl5),
  inference(superposition,[],[f83,f609])).
fof(f645,plain,(
  $false | ($spl12 | $spl20)),
  inference(trivial_inequality_removal,[],[f644])).
fof(f644,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ($spl12 | $spl20)),
  inference(superposition,[],[f640,f452])).
fof(f640,plain,(
  ( ! [X0] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0'))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))) ) | $spl20),
  inference(equality_resolution,[],[f591])).
fof(f632,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl5),
  inference(subsumption_resolution,[],[f631,f121])).
fof(f631,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3)))) ) | $spl5),
  inference(forward_demodulation,[],[f604,f161])).
fof(f604,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) ) | $spl5),
  inference(resolution,[],[f153,f83])).
fof(f594,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | $spl25),
  inference(cnf_transformation,[],[f594_D])).
fof(f594_D,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f595,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X6,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X8)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X6,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9))))) ) | $spl26),
  inference(cnf_transformation,[],[f595_D])).
fof(f595_D,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X6,'type.gram.MMLnonT',sK0))))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X8)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X6,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f583,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X8)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X6,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X9),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X5))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X6),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X6,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X6,'type.gram.MMLnonT',sK0)))))))) ) | $spl10),
  inference(superposition,[],[f83,f397])).
fof(f582,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0)))))))) ) | $spl10),
  inference(superposition,[],[f83,f397])).
fof(f565,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(X0,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),X0),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(X0,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(X0,'type.gram.MMLnonT',sK0)))))))) ) | $spl12),
  inference(superposition,[],[f83,f452])).
fof(f560,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X16] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X11)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X12))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X13)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X16),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X11,X10,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15)))) )),
  inference(subsumption_resolution,[],[f559,f121])).
fof(f559,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X11)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X12))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X13)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X16),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X11,X10,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15)))) )),
  inference(forward_demodulation,[],[f535,f161])).
fof(f535,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X16] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X10),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X11)))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X12))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X13)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X16),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X14))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X11,X10,sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X15))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f81,f83])).
fof(f531,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f530,f121])).
fof(f530,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f150,f161])).
fof(f153,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0))))))) | $spl5),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f511,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(subsumption_resolution,[],[f470,f110])).
fof(f110,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,'T_0'))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (p(s(bool,X0)) | p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : ((p(s(bool,X0)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X18] : ((p(s(bool,X18)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  file('thm.pegComplete.left_insert2_ind','thm.bool.OR_CLAUSES|split|1')).
fof(f470,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(superposition,[],[f84,f161])).
fof(f510,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4)))) )),
  inference(subsumption_resolution,[],[f469,f121])).
fof(f469,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4)))) )),
  inference(superposition,[],[f83,f161])).
fof(f452,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0'))) | $spl12),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0'))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f450,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0'))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) ) | $spl8),
  inference(forward_demodulation,[],[f449,f355])).
fof(f449,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) )),
  inference(subsumption_resolution,[],[f423,f77])).
fof(f423,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f79,f84])).
fof(f79,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(X6,X5,X4)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK4(X6,X5,X4)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(X6,X5,X4))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f397,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | $spl10),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f395,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) )),
  inference(subsumption_resolution,[],[f369,f77])).
fof(f369,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f78,f84])).
fof(f78,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X4))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6)))))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X6) = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK2(X6,X5,X4)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK3(X6,X5,X4))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f355,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | $spl8),
  inference(cnf_transformation,[],[f355_D])).
fof(f355_D,plain,(
  s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f353,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1))))) )),
  inference(subsumption_resolution,[],[f328,f77])).
fof(f328,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') = s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK5(sK12(sK1,'type.gram.MMLnonT',sK0),sK11(sK1,'type.gram.MMLnonT',sK0),sK10(sK1,'type.gram.MMLnonT',sK0))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f80,f84])).
fof(f185,plain,(
  $false | $spl6),
  inference(resolution,[],[f181,f82])).
fof(f82,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK7))))),
  inference(cnf_transformation,[],[f57])).
fof(f156,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X6))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X7)))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f77,f84])).
fof(f155,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X1)))) | p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X5),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X3))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X2),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X4)))) )),
  inference(resolution,[],[f77,f83])).
fof(f150,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0))))))) | $spl1),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f125,plain,(
  ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Nd_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),sK11(sK1,'type.gram.MMLnonT',sK0)),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0))))))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))),
  inference(resolution,[],[f82,f84])).
fof(f124,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK10(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0)))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.NIL_0') != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X3),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X1))) | s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),sK12(sK1,'type.gram.MMLnonT',sK0)) != s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),X0),s('type.list.list'('type.grammar.parsetree'(sK0,'type.gram.MMLnonT')),X2))) | ~p(s(bool,happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool),happ(s(fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),fun('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),bool)),sK1),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),sK8(sK1,'type.gram.MMLnonT',sK0)))),s('type.grammar.parsetree'(sK0,'type.gram.MMLnonT'),'const.grammar.Lf_1'(s('type.grammar.symbol'(sK0,'type.gram.MMLnonT'),sK9(sK1,'type.gram.MMLnonT',sK0)))))))) )),
  inference(resolution,[],[f82,f83])).
% SZS output end Proof for thm.pegComplete
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 78
% Passive clauses: 534
% Generated clauses: 2039
% Final active clauses: 60
% Final passive clauses: 381
% Input formulas: 21
% Initial clauses: 46
% 
% Selected by SInE selection: 21
% SInE iterations: 1
% 
% Duplicate literals: 89
% Trivial inequalities: 63
% Fw subsumption resolutions: 231
% Fw demodulations: 154
% Bw demodulations: 11
% 
% Simple tautologies: 91
% Equational tautologies: 1
% Forward subsumptions: 906
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 273
% Factoring: 1
% Forward superposition: 750
% Backward superposition: 423
% Self superposition: 7
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 41
% SAT solver unit clauses: 2
% SAT solver binary clauses: 26
% 
% Sat splits: 36
% Sat splitting refutations: 4
% 
% Memory used [KB]: 3070
% Time elapsed: 0.076 s
% ------------------------------
% ------------------------------
% Success in time 11.82 s
