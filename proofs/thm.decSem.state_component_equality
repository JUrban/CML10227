Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.decSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.decSem
% SZS output start Proof for thm.decSem
fof(f3313,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3312,f3276,f23,f39,f24,f41,f25,f43,f26,f45,f37,f27,f46,f44,f42,f40,f38,f3308,f3306,f3310])).
fof(f3310,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f3309])).
fof(f3309,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f46,f37])).
fof(f3306,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f3305])).
fof(f3305,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f42,f37])).
fof(f3308,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f3307])).
fof(f3307,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f44,f37])).
fof(f38,plain,(
  s('type.decSem.state'(sK0),sK1) != s('type.decSem.state'(sK0),sK2) | $spl1),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  s('type.decSem.state'(sK0),sK1) != s('type.decSem.state'(sK0),sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f40,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) | $spl3),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f42,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) | $spl5),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f44,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) | $spl7),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f46,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | $spl9),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f27,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) != s('type.decSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) & s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))))) & (s('type.decSem.state'(sK0),sK1) != s('type.decSem.state'(sK0),sK2) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & (s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & (s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <~> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.decSem.state'(X6),X7) = s('type.decSem.state'(X6),X8) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X7))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.decSem.state'(X6),X7) = s('type.decSem.state'(X6),X8) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X7))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X8)))))),
  file('thm.decSem.state_component_equality','thm.decSem.state_component_equality')).
fof(f37,plain,(
  s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) | $spl0),
  inference(cnf_transformation,[],[f37_D])).
fof(f37_D,plain,(
  s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f45,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | $spl8),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f43,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) | $spl6),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f41,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) | $spl4),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f39,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) | $spl2),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f3276,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f3275,f38])).
fof(f3275,plain,(
  s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f3274,f45])).
fof(f3274,plain,(
  s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f3273])).
fof(f3273,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) | s('type.decSem.state'(sK0),sK1) = s('type.decSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6)),
  inference(equality_resolution,[],[f1793])).
fof(f1793,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),X0))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),X0))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),X0))) | s('type.decSem.state'(sK0),sK2) = s('type.decSem.state'(sK0),X0)) ) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f1792,f39])).
fof(f1792,plain,(
  ( ! [X0] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),X0))) | s('type.decSem.state'(sK0),sK2) = s('type.decSem.state'(sK0),X0) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),X0)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1789,f41])).
fof(f1789,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.decSem.state_ffi_1'(s('type.decSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),sK2))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(sK0),X0))) | s('type.decSem.state'(sK0),sK2) = s('type.decSem.state'(sK0),X0) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),sK2))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(sK0),X0))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK2))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),X0)))) ) | $spl6),
  inference(superposition,[],[f35,f43])).
fof(f35,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : ((s('type.decSem.state'(X0),X1) != s('type.decSem.state'(X0),X2) | (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2))))) & ((s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))) | s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1,X2] : (s('type.decSem.state'(X0),X1) = s('type.decSem.state'(X0),X2) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X1))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.decSem.state_ffi_1'(s('type.decSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.decSem.state'(X6),X7) = s('type.decSem.state'(X6),X8) <=> (s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X7))) = s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.decSem.state_refs_1'(s('type.decSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.decSem.state_ffi_1'(s('type.decSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.decSem.state_globals_1'(s('type.decSem.state'(X6),X8)))))),
  file('thm.decSem.state_component_equality','thm.decSem.decSem_47_prove_ltb')).
fof(f3312,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f3311])).
fof(f3311,plain,(
  s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) != s('type.num.num','const.decSem.state_clock_1'(s('type.decSem.state'(sK0),sK1))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f40,f37])).
% SZS output end Proof for thm.decSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 36
% Passive clauses: 606
% Generated clauses: 3160
% Final active clauses: 27
% Final passive clauses: 535
% Input formulas: 6
% Initial clauses: 14
% 
% Duplicate literals: 365
% Trivial inequalities: 40
% Fw subsumption resolutions: 177
% Fw demodulations: 34
% 
% Simple tautologies: 91
% Equational tautologies: 85
% Forward subsumptions: 1239
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 12
% Forward superposition: 1035
% Backward superposition: 1006
% Self superposition: 226
% Equality factoring: 204
% Equality resolution: 7
% 
% Split clauses: 191
% Split components: 386
% SAT solver clauses: 533
% SAT solver unit clauses: 234
% SAT solver binary clauses: 165
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 191
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 531
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1791
% Time elapsed: 0.171 s
% ------------------------------
% ------------------------------
% Success in time 0.18 s
