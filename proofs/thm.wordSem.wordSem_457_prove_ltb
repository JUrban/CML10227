Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (9923)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 177
% Passive clauses: 3140
% Generated clauses: 21901
% Final active clauses: 174
% Final passive clauses: 2781
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 558
% Trivial inequalities: 850
% Fw subsumption resolutions: 1550
% Fw demodulations: 5197
% Bw demodulations: 3
% 
% Simple tautologies: 266
% Equational tautologies: 21
% Forward subsumptions: 10075
% 
% Binary resolution: 172
% Forward superposition: 7060
% Backward superposition: 6267
% Self superposition: 120
% Equality factoring: 39
% Equality resolution: 21
% 
% Split clauses: 96
% Split components: 197
% SAT solver clauses: 261
% SAT solver unit clauses: 10
% SAT solver binary clauses: 89
% 
% Sat splits: 96
% 
% TWLsolver clauses: 261
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 22003
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f1036,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1035,f730,f734,f71,f98,f94,f116])).
fof(f116,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) ) | $spl32),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f94,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2)))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : ! [X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X3),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X12,X13] : ! [X14,X15] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X13))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X13))),X10),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X13))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X13)),X15),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X13,X12),X14)))))),
  file('thm.wordSem.wordSem_457_prove_ltb','thm.wordSem.wordSem_449_prove_ltb')).
fof(f98,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) ) | $spl0),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f71,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),X10),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X8),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X7,X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),X10),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X8),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X7,X6),X9)))))),
  file('thm.wordSem.wordSem_457_prove_ltb','thm.wordSem.wordSem_457_prove_ltb')).
fof(f734,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X0),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X1)))))) ) | $spl226),
  inference(cnf_transformation,[],[f734_D])).
fof(f734_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X0),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X1)))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f730,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X0),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X1)))))) ) | ($spl0 | $spl32)),
  inference(superposition,[],[f98,f116])).
fof(f1035,plain,(
  $false | $spl226),
  inference(equality_resolution,[],[f734])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 129
% Generated clauses: 949
% Final active clauses: 43
% Final passive clauses: 84
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 4
% Trivial inequalities: 66
% Fw subsumption resolutions: 37
% Fw demodulations: 145
% Bw demodulations: 2
% Condensations: 3
% 
% Simple tautologies: 17
% Equational tautologies: 3
% Forward subsumptions: 390
% 
% Binary resolution: 15
% Forward superposition: 235
% Backward superposition: 260
% Self superposition: 18
% Equality factoring: 2
% Equality resolution: 6
% 
% SAT solver clauses: 181
% SAT solver unit clauses: 38
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 180
% TWLsolver calls for satisfiability: 118
% 
% Memory used [KB]: 3837
% Time elapsed: 0.042 s
% ------------------------------
% ------------------------------
% Success in time 0.68 s
