Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labProps
% (12442)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 246
% Passive clauses: 4129
% Generated clauses: 29542
% Final active clauses: 214
% Final passive clauses: 3627
% Input formulas: 517
% Initial clauses: 616
% 
% Duplicate literals: 708
% Trivial inequalities: 617
% Fw subsumption resolutions: 2606
% Fw demodulations: 5062
% Bw demodulations: 32
% 
% Simple tautologies: 487
% Equational tautologies: 45
% Forward subsumptions: 15683
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 297
% Factoring: 1
% Forward superposition: 9627
% Backward superposition: 9703
% Self superposition: 174
% Equality factoring: 77
% Equality resolution: 37
% 
% Split clauses: 134
% Split components: 268
% SAT solver clauses: 459
% SAT solver unit clauses: 17
% SAT solver binary clauses: 115
% 
% Sat splits: 134
% 
% TWLsolver clauses: 459
% TWLsolver calls for satisfiability: 92
% 
% Memory used [KB]: 16502
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labProps
% (12466)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 261
% Passive clauses: 2303
% Generated clauses: 27943
% Final active clauses: 178
% Final passive clauses: 1308
% Input formulas: 517
% Initial clauses: 616
% 
% Duplicate literals: 680
% Trivial inequalities: 658
% Fw subsumption resolutions: 1481
% Fw demodulations: 3470
% Bw demodulations: 753
% Condensations: 930
% Global subsumptions: 13
% 
% Simple tautologies: 340
% Equational tautologies: 41
% Forward subsumptions: 14985
% Bw demodulations to eq. taut.: 30
% 
% Binary resolution: 252
% Factoring: 1
% Forward superposition: 7492
% Backward superposition: 8535
% Self superposition: 146
% Equality factoring: 69
% Equality resolution: 27
% 
% Split clauses: 108
% Split components: 216
% SAT solver clauses: 3420
% SAT solver unit clauses: 1086
% SAT solver binary clauses: 91
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 3
% 
% Sat splits: 108
% Sat splitting refutations: 29
% 
% TWLsolver clauses: 3367
% TWLsolver calls for satisfiability: 2063
% 
% Memory used [KB]: 22643
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.labProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labProps
% SZS output start Proof for thm.labProps
fof(f282829,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f282792])).
fof(f282792,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2)))))))))))),
  inference(backward_demodulation,[],[f282788,f78718])).
fof(f78718,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))))))),
  inference(unit_resulting_resolution,[],[f20104,f1719])).
fof(f1719,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f1527])).
fof(f1527,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f690])).
fof(f690,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f346])).
fof(f346,axiom,(
  ! [X27,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))) <=> s('type.num.num',X27) = s('type.num.num',X82))),
  file('thm.labProps.arith_upd_consts|split|2','thm.numeral.numeral_distrib|split|19')).
fof(f20104,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))))),
  inference(unit_resulting_resolution,[],[f5488,f1719])).
fof(f5488,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))))),
  inference(unit_resulting_resolution,[],[f5039,f1719])).
fof(f5039,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))))),
  inference(unit_resulting_resolution,[],[f1551,f1719])).
fof(f1551,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))),
  inference(cnf_transformation,[],[f1484])).
fof(f1484,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),'const.labSem.arith_upd_2'(s('type.asm.arith'(sK0),sK3),s('type.labSem.state'(sK0,sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f1472])).
fof(f1472,plain,(
  ? [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ~! [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X9),s('type.labSem.state'(X6,X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X9),s('type.labSem.state'(X6,X7),X8)))))),
  file('thm.labProps.arith_upd_consts|split|2','thm.labProps.arith_upd_consts|split|2')).
fof(f282788,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3)))))) )),
  inference(forward_demodulation,[],[f282705,f1752])).
fof(f1752,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f737])).
fof(f737,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f736])).
fof(f736,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7] : ! [X25,X44] : s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X25))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),'const.labSem.asm_inst_2'(s('type.asm.inst'(X6),X44),s('type.labSem.state'(X6,X7),X25)))))),
  file('thm.labProps.arith_upd_consts|split|2','thm.labSem.asm_inst_consts|split|5')).
fof(f282705,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))))) )),
  inference(unit_resulting_resolution,[],[f1836,f1938])).
fof(f1938,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f1537])).
fof(f1537,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f1536])).
fof(f1536,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & ((s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f1087])).
fof(f1087,plain,(
  ! [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f1086])).
fof(f1086,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6,X18] : ! [X20,X19] : (s('type.labSem.state'(X6,X18),X19) = s('type.labSem.state'(X6,X18),X20) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X18),X20))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X18),X19))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.ffi.ffi_state'(X18),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.ffi.ffi_state'(X18),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X18),X20))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X18),X19))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X18),X20))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X18),X19))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X18),X20))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X18),X19))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X18),X20)))))),
  file('thm.labProps.arith_upd_consts|split|2','thm.labSem.state_component_equality')).
fof(f1836,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f905])).
fof(f905,plain,(
  ! [X0,X1,X2,X3] : s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f904])).
fof(f904,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.labSem.state'(X0,X1),'const.labSem.arith_upd_2'(s('type.asm.arith'(X0),X2),s('type.labSem.state'(X0,X1),X3))) = s('type.labSem.state'(X0,X1),'const.labSem.asm_inst_2'(s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),X2))),s('type.labSem.state'(X0,X1),X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X18] : ! [X8,X25] : s('type.labSem.state'(X6,X18),'const.labSem.arith_upd_2'(s('type.asm.arith'(X6),X8),s('type.labSem.state'(X6,X18),X25))) = s('type.labSem.state'(X6,X18),'const.labSem.asm_inst_2'(s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),X8))),s('type.labSem.state'(X6,X18),X25)))),
  file('thm.labProps.arith_upd_consts|split|2','thm.labSem.asm_inst_def|split|2')).
% SZS output end Proof for thm.labProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1091
% Passive clauses: 10051
% Generated clauses: 286143
% Final active clauses: 485
% Final passive clauses: 3269
% Input formulas: 517
% Initial clauses: 616
% Discarded non-redundant clauses: 652
% 
% Duplicate literals: 4561
% Trivial inequalities: 2103
% Fw subsumption resolutions: 11627
% Fw demodulations: 66620
% Bw demodulations: 5683
% Condensations: 4007
% Global subsumptions: 377
% 
% Simple tautologies: 995
% Equational tautologies: 805
% Forward subsumptions: 182913
% Fw demodulations to eq. taut.: 919
% Bw demodulations to eq. taut.: 273
% 
% Unit resulting resolution: 23791
% Factoring: 1
% Forward superposition: 87808
% Backward superposition: 72635
% Self superposition: 480
% Equality factoring: 189
% Equality resolution: 52
% 
% Split clauses: 64
% Split components: 128
% SAT solver clauses: 11524
% SAT solver unit clauses: 3288
% SAT solver binary clauses: 4572
% 
% Sat splits: 64
% Sat splitting refutations: 966
% 
% Memory used [KB]: 123835
% Time elapsed: 8.239 s
% ------------------------------
% ------------------------------
% Success in time 9.6 s
