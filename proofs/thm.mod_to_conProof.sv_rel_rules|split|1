Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (124610)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 3223
% Generated clauses: 16191
% Final active clauses: 96
% Final passive clauses: 2809
% Input formulas: 7
% Initial clauses: 26
% 
% Duplicate literals: 862
% Trivial inequalities: 193
% Fw subsumption resolutions: 2655
% Fw demodulations: 1099
% Bw demodulations: 12
% 
% Simple tautologies: 276
% Equational tautologies: 80
% Forward subsumptions: 6409
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 328
% Factoring: 2
% Forward superposition: 6139
% Backward superposition: 4310
% Self superposition: 260
% Equality factoring: 196
% Equality resolution: 20
% 
% Split clauses: 571
% Split components: 1153
% SAT solver clauses: 1596
% SAT solver unit clauses: 37
% SAT solver binary clauses: 215
% 
% Sat splits: 571
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1592
% TWLsolver calls for satisfiability: 217
% 
% Memory used [KB]: 6908
% Time elapsed: 0.620 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (124633)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 117
% Passive clauses: 316
% Generated clauses: 6834
% Final active clauses: 99
% Final passive clauses: 168
% Input formulas: 7
% Initial clauses: 26
% 
% Duplicate literals: 702
% Trivial inequalities: 42
% Fw subsumption resolutions: 395
% Fw demodulations: 155
% Bw demodulations: 38
% Condensations: 920
% 
% Simple tautologies: 124
% Equational tautologies: 53
% Forward subsumptions: 2368
% 
% Binary resolution: 123
% Factoring: 1
% Forward superposition: 1789
% Backward superposition: 1871
% Self superposition: 245
% Equality factoring: 140
% Equality resolution: 15
% 
% Split clauses: 68
% Split components: 137
% SAT solver clauses: 724
% SAT solver unit clauses: 28
% SAT solver binary clauses: 32
% 
% Sat splits: 68
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 724
% TWLsolver calls for satisfiability: 518
% 
% Memory used [KB]: 6652
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (124653)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 276
% Passive clauses: 2520
% Generated clauses: 117214
% Final active clauses: 57
% Final passive clauses: 313
% Input formulas: 7
% Initial clauses: 26
% Discarded non-redundant clauses: 12
% 
% Duplicate literals: 7944
% Trivial inequalities: 1070
% Fw subsumption resolutions: 11517
% Fw demodulations: 7681
% Bw demodulations: 1355
% Condensations: 15885
% Global subsumptions: 675
% 
% Simple tautologies: 1253
% Equational tautologies: 979
% Forward subsumptions: 63823
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 48
% 
% Unit resulting resolution: 3758
% Factoring: 1
% Forward superposition: 25621
% Backward superposition: 20741
% Self superposition: 662
% Equality factoring: 413
% Equality resolution: 79
% 
% Split clauses: 348
% Split components: 713
% SAT solver clauses: 5152
% SAT solver unit clauses: 22
% SAT solver binary clauses: 138
% 
% Sat splits: 348
% Sat splitting refutations: 1258
% 
% Memory used [KB]: 50916
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 30 next slice time: 30
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f8200,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f8187])).
fof(f8187,plain,(
  s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3))) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3)))),
  inference(resolution,[],[f8186,f53])).
fof(f53,plain,(
  ~sP1(sK2,'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3)),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3)))),
  inference(resolution,[],[f28,f45])).
fof(f45,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | ~sP1(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | sP1(X0,X1,X2)) & (~sP1(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> sP1(X0,X1,X2))),
  inference(definition_folding,[],[f14,f18,f17])).
fof(f17,plain,(
  ! [X4,X6,X5] : (sP0(X4,X6,X5) <=> ? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f18,plain,(
  ! [X0,X1,X2] : (sP1(X0,X1,X2) <=> ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f14,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (? [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (! [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X5,X10,X11] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.store_v'('type.modSem.v'),X10),s('type.semanticPrimitives.store_v'('type.conSem.v'),X11)))) <=> ! [X12] : (! [X13,X14,X15] : ((? [X16,X17] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X16))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X17))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X16),s('type.conSem.v',X17))))) | ? [X7] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7)))) | ? [X18,X19] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X18))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X19))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.modSem.v'),X18),s('type.list.list'('type.conSem.v'),X19)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X14))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X15))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X10))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X11))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|1','thm.mod_to_conProof.sv_rel_def')).
fof(f28,plain,(
  ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3))))))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f13])).
fof(f13,plain,(
  ? [X0,X1] : ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1] : p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|1','thm.mod_to_conProof.sv_rel_rules|split|1')).
fof(f8186,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1,'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))) )),
  inference(equality_resolution,[],[f1747])).
fof(f1747,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.store_v'('type.conSem.v'),X2) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))) | sP1(X0,X1,X2) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3)))) )),
  inference(duplicate_literal_removal,[],[f1719])).
fof(f1719,plain,(
  ( ! [X2,X0,X3,X1] : (sP1(X0,X1,X2) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X2) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))) | sP1(X0,X1,X2)) )),
  inference(resolution,[],[f37,f39])).
fof(f39,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK10(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (((sP0(sK4(X10,X2,X1,X0),sK6(X10,X2,X1,X0),sK5(X10,X2,X1,X0)) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK5(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK6(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7(X10,X2,X1,X0))))) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK5(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK8(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK6(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK9(X10,X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4(X10,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK8(X10,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK9(X10,X2,X1,X0))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.modSem.v'),sK5(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.conSem.v'),sK6(X10,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & ((! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK10(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK10(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (? [X11,X12,X13] : ((sP0(X11,X13,X12) | ? [X16] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16)))) | ? [X14,X15] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X14))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X15))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X14),s('type.list.list'('type.conSem.v'),X15)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X12))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X13))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(rectify,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(nnf_transformation,[],[f18])).
fof(f37,plain,(
  ( ! [X6,X4,X2,X0,X5,X1,X9] : (sP1(X0,X1,X2) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK10(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6)))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) )),
  inference(cnf_transformation,[],[f23])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 155
% Passive clauses: 2271
% Generated clauses: 7973
% Final active clauses: 110
% Final passive clauses: 1785
% Input formulas: 7
% Initial clauses: 25
% 
% Selected by SInE selection: 6
% SInE iterations: 1
% 
% Duplicate literals: 480
% Trivial inequalities: 169
% Fw subsumption resolutions: 1378
% Fw demodulations: 21
% Bw demodulations: 24
% 
% Simple tautologies: 354
% Equational tautologies: 40
% Forward subsumptions: 3058
% 
% Binary resolution: 1329
% Forward superposition: 3106
% Backward superposition: 1057
% Self superposition: 118
% Equality factoring: 100
% Equality resolution: 37
% 
% Split clauses: 394
% Split components: 794
% SAT solver clauses: 405
% SAT solver unit clauses: 6
% SAT solver binary clauses: 43
% 
% Sat splits: 394
% Sat splitting refutations: 8
% 
% Memory used [KB]: 4221
% Time elapsed: 0.248 s
% ------------------------------
% ------------------------------
% Success in time 12.16 s
