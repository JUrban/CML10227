Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.infer_eComplete
% (91964)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 60
% Passive clauses: 1206
% Generated clauses: 9781
% Final active clauses: 54
% Final passive clauses: 1079
% Input formulas: 9
% Initial clauses: 21
% 
% Duplicate literals: 786
% Trivial inequalities: 134
% Fw subsumption resolutions: 1525
% Fw demodulations: 69
% Bw demodulations: 3
% 
% Simple tautologies: 246
% Equational tautologies: 112
% Forward subsumptions: 3840
% 
% Binary resolution: 60
% Forward superposition: 3656
% Backward superposition: 2729
% Self superposition: 363
% Equality factoring: 330
% Equality resolution: 12
% 
% Split clauses: 679
% Split components: 1372
% SAT solver clauses: 1777
% SAT solver unit clauses: 254
% SAT solver binary clauses: 592
% 
% Sat splits: 679
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1768
% TWLsolver calls for satisfiability: 61
% 
% Memory used [KB]: 4605
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.infer_eComplete
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.infer_eComplete
% SZS output start Proof for thm.infer_eComplete
fof(f1174,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1168,f39,f72,f82,f83,f53,f80,f51,f78,f105,f106,f47,f76,f48,f77,f306,f312,f170,f285,f93,f99,f970,f944,f946,f44,f40,f71,f61,f114,f116,f635,f631,f615,f42,f64,f942,f917,f928,f947,f43,f66,f45,f74,f987,f617,f916,f41,f70,f68,f62,f95,f100,f91,f92,f38,f55,f37,f56,f737,f748,f961,f957,f736,f619,f88,f89,f36,f57,f35,f58,f1094,f918,f930,f34,f59,f85,f86,f33,f60,f948,f959])).
fof(f959,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6))) | $spl164),
  inference(cnf_transformation,[],[f959_D])).
fof(f959_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f948,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6))) | ($spl18 | $spl48)),
  inference(resolution,[],[f68,f100])).
fof(f60,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f33,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))) & ((p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))))) | sP0(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))) & (? [X4] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X4)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) | ? [X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X3)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3))))))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f24])).
fof(f24,plain,(
  ! [X1,X0,X2] : ((~sP0(X1,X0,X2) | (! [X4] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) & ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3))))))))) & (? [X4] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) | ? [X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3))))))) | sP0(X1,X0,X2)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X1,X0,X2] : ((~sP0(X1,X0,X2) | (! [X4] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) & ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3))))))))) & ((? [X4] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) | ? [X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3)))))))) | sP0(X1,X0,X2)))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X1,X0,X2] : (sP0(X1,X0,X2) <=> (! [X4] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) & ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3)))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f86,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) | $spl40),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f85,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) | ($spl10 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f84,f78])).
fof(f84,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',X6)))) | ~sP0(X0,X1,X2)) ) | ($spl10 | $spl36)),
  inference(forward_demodulation,[],[f60,f80])).
fof(f59,plain,(
  ( ! [X2,X0,X5,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X5)))) | ~sP0(X0,X1,X2)) ) | $spl8),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ( ! [X2,X0,X5,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X5)))) | ~sP0(X0,X1,X2)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f34,plain,(
  ( ! [X2,X0,X5,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X5)))) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f26])).
fof(f930,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7))) | $spl158),
  inference(cnf_transformation,[],[f930_D])).
fof(f930_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7))) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f918,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7))) | ($spl20 | $spl48)),
  inference(resolution,[],[f70,f100])).
fof(f1094,plain,(
  $false | ($spl8 | $spl12 | $spl17 | $spl26 | $spl158)),
  inference(subsumption_resolution,[],[f1093,f74])).
fof(f1093,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl12 | $spl17 | $spl158)),
  inference(forward_demodulation,[],[f1092,f930])).
fof(f1092,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) | ($spl8 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f1083,f61])).
fof(f1083,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) | ~sP0(sK4,sK3,sK5) | ($spl8 | $spl17)),
  inference(resolution,[],[f66,f59])).
fof(f58,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) ) | $spl6),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f35,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f57,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) ) | $spl4),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f36,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f89,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))) ) | $spl42),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f88,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))) ) | ($spl4 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f87,f78])).
fof(f87,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0))))))) | sP0(X0,X1,X2) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))) ) | ($spl4 | $spl36)),
  inference(forward_demodulation,[],[f57,f80])).
fof(f619,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) | $spl116),
  inference(cnf_transformation,[],[f619_D])).
fof(f619_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f736,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) | ($spl13 | $spl26 | $spl42 | $spl118)),
  inference(subsumption_resolution,[],[f735,f74])).
fof(f735,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) | ($spl13 | $spl42 | $spl118)),
  inference(forward_demodulation,[],[f734,f631])).
fof(f734,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4))))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) | ($spl13 | $spl42)),
  inference(resolution,[],[f89,f62])).
fof(f957,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) | $spl162),
  inference(cnf_transformation,[],[f957_D])).
fof(f957_D,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f961,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) | ($spl18 | $spl48 | $spl62)),
  inference(condensation,[],[f960])).
fof(f960,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl18 | $spl48 | $spl62)),
  inference(subsumption_resolution,[],[f949,f100])).
fof(f949,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl18 | $spl62)),
  inference(superposition,[],[f68,f312])).
fof(f748,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4)))))) | $spl134),
  inference(cnf_transformation,[],[f748_D])).
fof(f748_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4)))))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f737,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4)))))) | ($spl56 | $spl116)),
  inference(resolution,[],[f619,f116])).
fof(f56,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) ) | $spl2),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f37,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.ast.t',sK1(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f55,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) ) | $spl0),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f38,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f92,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))))) ) | $spl44),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f91,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))),s('type.ast.t',sK1(X2,X1,X0))))))) | sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))))) ) | ($spl0 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f90,f78])).
fof(f90,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',sK1(X2,X1,X0))))))) | sP0(X0,X1,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),sK2(X2,X1,X0)))))))) ) | ($spl0 | $spl36)),
  inference(forward_demodulation,[],[f55,f80])).
fof(f100,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f95,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | ($spl29 | $spl30)),
  inference(superposition,[],[f76,f77])).
fof(f62,plain,(
  ~sP0(sK4,sK3,sK5) | $spl13),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ~sP0(sK4,sK3,sK5) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f68,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) | $spl18),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f70,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) | $spl20),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f41,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) | ~sP0(sK4,sK3,sK5)),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  (sP0(sK4,sK3,sK5) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X5))))))))) & (~sP0(sK4,sK3,sK5) | (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6))))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4,sK5,sK6,sK7])],[f29])).
fof(f29,plain,(
  ? [X0,X1,X2] : ((sP0(X1,X0,X2) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))) & (~sP0(X1,X0,X2) | ? [X4] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) | ? [X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3)))))))))),
  inference(rectify,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2] : ((sP0(X1,X0,X2) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))) & (~sP0(X1,X0,X2) | ? [X6] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) | ? [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2] : ((sP0(X1,X0,X2) | (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))) & (~sP0(X1,X0,X2) | (? [X6] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) & ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) | ? [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5))))))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ? [X0,X1,X2] : (sP0(X1,X0,X2) <~> (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))))))),
  inference(definition_folding,[],[f19,f21])).
fof(f19,plain,(
  ? [X0,X1,X2] : ((! [X4] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) & ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3)))))))) <~> (! [X6] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) | p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2] : ((! [X4] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X4)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X4))))))) & ! [X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X3)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X3)))))))) <=> (! [X6] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X6)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.ast.t',X6))))))) & ! [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.list.list'('type.ast.t'),X5)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X1),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.infer_t.infer_t'),X2))))))),s('type.list.list'('type.ast.t'),X5)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((! [X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.ast.t',X9)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.ast.t',X9))))))) & ! [X10] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.list.list'('type.ast.t'),X10)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.list.list'('type.ast.t'),X10)))))))) <=> (! [X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.ast.t',X9)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.ast.t',X9))))))) & ! [X10] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.list.list'('type.ast.t'),X10)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.list.list'('type.ast.t'),X10)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((! [X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.ast.t',X9)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.ast.t',X9))))))) & ! [X10] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.list.list'('type.ast.t'),X10)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.list.list'('type.ast.t'),X10)))))))) <=> (! [X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.ast.t',X9)))) => p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.ast.t',X9))))))) & ! [X10] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),X6))),s('type.list.list'('type.ast.t'),X10)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X7),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X6),s('type.list.list'('type.infer_t.infer_t'),X8))))))),s('type.list.list'('type.ast.t'),X10)))))))))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb','thm.infer_eComplete.infer_eComplete_47_prove_ltb')).
fof(f916,plain,(
  $false | ($spl13 | $spl26 | $spl44 | $spl118 | $spl134)),
  inference(subsumption_resolution,[],[f915,f74])).
fof(f915,plain,(
  ~p(s(bool,'T_0')) | ($spl13 | $spl26 | $spl44 | $spl118 | $spl134)),
  inference(forward_demodulation,[],[f914,f748])).
fof(f914,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))))) | ($spl13 | $spl26 | $spl44 | $spl118)),
  inference(subsumption_resolution,[],[f913,f74])).
fof(f913,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))))) | ($spl13 | $spl44 | $spl118)),
  inference(forward_demodulation,[],[f912,f631])).
fof(f912,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))))) | ($spl13 | $spl44)),
  inference(resolution,[],[f92,f62])).
fof(f617,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) | $spl114),
  inference(cnf_transformation,[],[f617_D])).
fof(f617_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f987,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) | ($spl2 | $spl13 | $spl26 | $spl134)),
  inference(subsumption_resolution,[],[f986,f74])).
fof(f986,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) | ($spl2 | $spl13 | $spl134)),
  inference(forward_demodulation,[],[f848,f748])).
fof(f848,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) | ($spl2 | $spl13)),
  inference(resolution,[],[f56,f62])).
fof(f74,plain,(
  p(s(bool,'T_0')) | $spl26),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb',aHL_TRUTH)).
fof(f66,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7)))))) | $spl17),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7)))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f43,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7)))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) | ~sP0(sK4,sK3,sK5)),
  inference(cnf_transformation,[],[f30])).
fof(f947,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6))))) | ($spl18 | $spl54)),
  inference(resolution,[],[f68,f106])).
fof(f928,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7))))) | $spl156),
  inference(cnf_transformation,[],[f928_D])).
fof(f928_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7))))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f917,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7))))) | ($spl20 | $spl56)),
  inference(resolution,[],[f70,f116])).
fof(f942,plain,(
  $false | ($spl17 | $spl26 | $spl156)),
  inference(subsumption_resolution,[],[f941,f74])).
fof(f941,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl156)),
  inference(backward_demodulation,[],[f928,f66])).
fof(f64,plain,(
  ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6)))))) | $spl15),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6)))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f42,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK7)))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6)))))) | ~sP0(sK4,sK3,sK5)),
  inference(cnf_transformation,[],[f30])).
fof(f615,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),sK2(sK5,sK3,sK4))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK1(sK5,sK3,sK4))))) | ($spl6 | $spl13)),
  inference(resolution,[],[f58,f62])).
fof(f631,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4)))))) | $spl118),
  inference(cnf_transformation,[],[f631_D])).
fof(f631_D,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4)))))) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f635,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4)))))) | ($spl48 | $spl62 | $spl114)),
  inference(condensation,[],[f634])).
fof(f634,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4)))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl48 | $spl62 | $spl114)),
  inference(subsumption_resolution,[],[f622,f100])).
fof(f622,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK1(sK5,sK3,sK4)))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl62 | $spl114)),
  inference(superposition,[],[f617,f312])).
fof(f116,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X0)))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X0)))))) ) | $spl56),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X0)))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X0)))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f114,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X0)))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X0)))))) ) | ($spl22 | $spl48)),
  inference(resolution,[],[f71,f100])).
fof(f61,plain,(
  sP0(sK4,sK3,sK5) | $spl12),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  sP0(sK4,sK3,sK5) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f71,plain,(
  ( ! [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X5))))) ) | $spl22),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X5))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f40,plain,(
  ( ! [X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),X5)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.list.list'('type.ast.t'),X5)))) | sP0(sK4,sK3,sK5)) )),
  inference(cnf_transformation,[],[f30])).
fof(f44,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.list.list'('type.ast.t'),sK7)))))) | ~p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6)))))) | ~sP0(sK4,sK3,sK5)),
  inference(cnf_transformation,[],[f30])).
fof(f946,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6)))))) | $spl161),
  inference(cnf_transformation,[],[f946_D])).
fof(f946_D,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6)))))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f944,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',sK6)))))) | ($spl15 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f943,f78])).
fof(f943,plain,(
  ~p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',sK6)))))) | ($spl15 | $spl36)),
  inference(forward_demodulation,[],[f64,f80])).
fof(f970,plain,(
  $false | ($spl26 | $spl161 | $spl162)),
  inference(subsumption_resolution,[],[f969,f74])).
fof(f969,plain,(
  ~p(s(bool,'T_0')) | ($spl161 | $spl162)),
  inference(backward_demodulation,[],[f957,f946])).
fof(f99,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f93,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl30),
  inference(superposition,[],[f77,f77])).
fof(f285,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl60),
  inference(cnf_transformation,[],[f285_D])).
fof(f285_D,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f170,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl26 | $spl46)),
  inference(superposition,[],[f74,f99])).
fof(f312,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0))))) | s(bool,X1) = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0))) | s(bool,'T_0') = s(bool,X1)) ) | $spl62),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0))))) | s(bool,X1) = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f306,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0))))) | s(bool,X1) = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl54 | $spl60)),
  inference(resolution,[],[f106,f285])).
fof(f77,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl30),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb',aHL_BOOL_CASES)).
fof(f76,plain,(
  ~p(s(bool,'F_0')) | $spl29),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f47,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f12])).
fof(f12,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb',aHL_FALSITY)).
fof(f106,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0)))) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0)))))) ) | $spl54),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0)))) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0)))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f105,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0)))) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0)))))) ) | ($spl29 | $spl30 | $spl38)),
  inference(subsumption_resolution,[],[f104,f76])).
fof(f104,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X0)))) | s(bool,'T_0') = s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X0)))))) ) | ($spl30 | $spl38)),
  inference(superposition,[],[f83,f77])).
fof(f78,plain,(
  ( ! [X0,X1] : (s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0),s('type.ast.t',X1))) = s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0))),s('type.ast.t',X1)))) ) | $spl32),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  ( ! [X0,X1] : (s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0),s('type.ast.t',X1))) = s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0))),s('type.ast.t',X1)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f51,plain,(
  ( ! [X0,X1] : (s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0),s('type.ast.t',X1))) = s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0))),s('type.ast.t',X1)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0),s('type.ast.t',X1))) = s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X0))),s('type.ast.t',X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13,X14] : s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X13),s('type.ast.t',X14))) = s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),X13))),s('type.ast.t',X14)))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb','ARITY_1_2_const.infer.infer_type_subst')).
fof(f80,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),X1),s('type.infer_t.infer_t',X2))) = s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),X1))),s('type.infer_t.infer_t',X2)))) ) | $spl36),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),X1),s('type.infer_t.infer_t',X2))) = s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),X1))),s('type.infer_t.infer_t',X2)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f53,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),X1),s('type.infer_t.infer_t',X2))) = s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),X1))),s('type.infer_t.infer_t',X2)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2] : s(bool,'const.infer.check_t_3'(s('type.num.num',X0),s(fun('type.num.num',bool),X1),s('type.infer_t.infer_t',X2))) = s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X0),s(fun('type.num.num',bool),X1))),s('type.infer_t.infer_t',X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X13,X14,X15] : s(bool,'const.infer.check_t_3'(s('type.num.num',X13),s(fun('type.num.num',bool),X14),s('type.infer_t.infer_t',X15))) = s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',X13),s(fun('type.num.num',bool),X14))),s('type.infer_t.infer_t',X15)))),
  file('thm.infer_eComplete.infer_eComplete_47_prove_ltb','ARITY_2_3_const.infer.check_t')).
fof(f83,plain,(
  ( ! [X6] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) | $spl38),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ( ! [X6] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f82,plain,(
  ( ! [X6] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t','const.infer.infer_type_subst_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) | ($spl24 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f81,f78])).
fof(f81,plain,(
  ( ! [X6] : (p(s(bool,'const.infer.check_t_3'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) | ($spl24 | $spl36)),
  inference(forward_demodulation,[],[f72,f80])).
fof(f72,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) | $spl24),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f39,plain,(
  ( ! [X6] : (p(s(bool,happ(s(fun('type.infer_t.infer_t',bool),'const.infer.check_t_2'(s('type.num.num',sK4),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))),s('type.infer_t.infer_t',happ(s(fun('type.ast.t','type.infer_t.infer_t'),'const.infer.infer_type_subst_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.infer_t.infer_t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.infer_t.infer_t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.infer_t.infer_t'),sK5))))))),s('type.ast.t',X6)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',X6)))) | sP0(sK4,sK3,sK5)) )),
  inference(cnf_transformation,[],[f30])).
fof(f1168,plain,(
  $false | ($spl12 | $spl26 | $spl40 | $spl161 | $spl164)),
  inference(subsumption_resolution,[],[f1167,f74])).
fof(f1167,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl40 | $spl161 | $spl164)),
  inference(forward_demodulation,[],[f1166,f959])).
fof(f1166,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) | ($spl12 | $spl40 | $spl161)),
  inference(subsumption_resolution,[],[f1158,f61])).
fof(f1158,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK3))),s('type.ast.t',sK6)))) | ~sP0(sK4,sK3,sK5) | ($spl40 | $spl161)),
  inference(resolution,[],[f946,f86])).
% SZS output end Proof for thm.infer_eComplete
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 87
% Generated clauses: 1213
% Final active clauses: 27
% Final passive clauses: 35
% Input formulas: 9
% Initial clauses: 21
% 
% Duplicate literals: 139
% Trivial inequalities: 16
% Fw subsumption resolutions: 94
% Fw demodulations: 38
% Bw demodulations: 6
% Condensations: 177
% 
% Simple tautologies: 25
% Equational tautologies: 17
% Forward subsumptions: 412
% 
% Binary resolution: 25
% Forward superposition: 254
% Backward superposition: 177
% Self superposition: 34
% Equality factoring: 34
% 
% Split clauses: 43
% Split components: 91
% SAT solver clauses: 215
% SAT solver unit clauses: 22
% SAT solver binary clauses: 17
% SAT solver learnt clauses: 11
% SAT solver learnt literals: 28
% 
% Sat splits: 43
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 204
% TWLsolver calls for satisfiability: 205
% 
% Memory used [KB]: 2046
% Time elapsed: 0.045 s
% ------------------------------
% ------------------------------
% Success in time 0.67 s
