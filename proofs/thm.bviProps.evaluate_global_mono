Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f5984,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5979,f216,f324,f326,f197,f327])).
fof(f327,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f327_D])).
fof(f327_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f197,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bviProps.evaluate_global_mono',aHL_FALSITY)).
fof(f326,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f326_D])).
fof(f326_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f324,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f324_D])).
fof(f324_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f216,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f139])).
fof(f139,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X11] : ((p(s(bool,'F_0')) => p(s(bool,X11))) <=> p(s(bool,'T_0')))),
  file('thm.bviProps.evaluate_global_mono','thm.bool.IMP_CLAUSES|split|2')).
fof(f5979,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f5978,f337])).
fof(f337,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl0),
  inference(resolution,[],[f209,f324])).
fof(f209,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.bviProps.evaluate_global_mono','thm.bool.EQ_CLAUSES|split|3')).
fof(f5978,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl3),
  inference(forward_demodulation,[],[f5977,f637])).
fof(f637,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13)))))),
  inference(resolution,[],[f189,f206])).
fof(f206,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.bviProps.evaluate_global_mono','thm.bool.EQ_CLAUSES|split|1')).
fof(f189,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13))))))),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bviSem.state'(sK10),sK15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK10))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK11),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK12),s('type.bviSem.state'(sK10),sK13))))))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13)))))) & ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK15))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15])],[f89])).
fof(f89,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) & ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X5)))))))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) & ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X5))))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) => (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X5))))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) => (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X5))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) => (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),X9)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) => (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),X9)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),X11))))))))),
  file('thm.bviProps.evaluate_global_mono','thm.bviProps.evaluate_global_mono')).
fof(f5977,plain,(
  s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13))))) | $spl3),
  inference(subsumption_resolution,[],[f5976,f327])).
fof(f5976,plain,(
  p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13)))))),
  inference(forward_demodulation,[],[f5975,f687])).
fof(f687,plain,(
  s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK15)))))),
  inference(resolution,[],[f190,f210])).
fof(f210,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f135])).
fof(f190,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK15))))))),
  inference(cnf_transformation,[],[f130])).
fof(f5975,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK15)))))) | s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13)))))),
  inference(forward_demodulation,[],[f5968,f262])).
fof(f262,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X12] : ! [X13,X14] : s(X12,X14) = s(X12,'const.pair.SND_1'(s('type.pair.prod'(X6,X12),'const.pair.,_2'(s(X6,X13),s(X12,X14)))))),
  file('thm.bviProps.evaluate_global_mono','thm.pair.SND')).
fof(f5968,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bviSem.state'(sK10),sK15)))))))))) | s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(sK10),sK13)))))),
  inference(superposition,[],[f3687,f188])).
fof(f188,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bviSem.state'(sK10),sK15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK10))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK11),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK10)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK12),s('type.bviSem.state'(sK10),sK13)))))))),
  inference(cnf_transformation,[],[f130])).
fof(f3687,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))))) | s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) )),
  inference(resolution,[],[f232,f210])).
fof(f232,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) | p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))))))))))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) | p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))))))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X8,X9] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),X9)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(X6),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9)))))))))))))))),
  file('thm.bviProps.evaluate_global_mono','thm.bviProps.bviProps_48_prove_ltb')).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 350
% Passive clauses: 1644
% Generated clauses: 5747
% Final active clauses: 347
% Final passive clauses: 1146
% Input formulas: 34
% Initial clauses: 133
% 
% Duplicate literals: 197
% Trivial inequalities: 30
% Fw subsumption resolutions: 619
% Fw demodulations: 82
% Bw demodulations: 3
% 
% Simple tautologies: 144
% Equational tautologies: 34
% Forward subsumptions: 2866
% 
% Binary resolution: 2476
% Factoring: 710
% Forward superposition: 410
% Backward superposition: 967
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 8
% 
% Split clauses: 191
% Split components: 388
% SAT solver clauses: 287
% SAT solver unit clauses: 11
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 1
% 
% Sat splits: 191
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 283
% TWLsolver calls for satisfiability: 152
% 
% Memory used [KB]: 3326
% Time elapsed: 0.243 s
% ------------------------------
% ------------------------------
% Success in time 0.27 s
