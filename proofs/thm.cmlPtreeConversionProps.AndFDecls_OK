Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.cmlPtreeConversionProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.cmlPtreeConversionProps
% SZS output start Proof for thm.cmlPtreeConversionProps
fof(f4254,plain,(
  $false),
  inference(subsumption_resolution,[],[f4253,f58])).
fof(f58,plain,(
  ( ! [X2] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2)))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK2))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) & ! [X2] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f29])).
fof(f29,plain,(
  ? [X0,X1] : (p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) & ! [X2] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ? [X0,X1] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0')))))) & ! [X2] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0')))))) => ? [X2] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X6))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0')))))) => ? [X8] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X6))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0')))))) => ? [X8] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X8))))),
  file('thm.cmlPtreeConversionProps.AndFDecls_OK','thm.cmlPtreeConversionProps.AndFDecls_OK')).
fof(f4253,plain,(
  ( ! [X1] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK13(X1,sK3))))) )),
  inference(trivial_inequality_removal,[],[f4251])).
fof(f4251,plain,(
  ( ! [X1] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK13(X1,sK3)))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3)))) )),
  inference(resolution,[],[f4249,f1898])).
fof(f1898,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK13(X1,X0)))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) )),
  inference(forward_demodulation,[],[f76,f57])).
fof(f57,plain,(
  s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0')))))),
  inference(cnf_transformation,[],[f40])).
fof(f76,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK13(X1,X0)))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ~sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : (~sP1(X0,X1) | ((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X1),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X1))))) | s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',sK5(X1,X0)))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X1),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & sP0(X0) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK6(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),sK7(X1,X0)))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),sK8(X1,X0)))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),sK9(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),sK10(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),sK11(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),sK12(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK13(X1,X0))))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),sK14(X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14])],[f44])).
fof(f44,plain,(
  ! [X0,X1] : (~sP1(X0,X1) | ((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X1),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X1))))) | ? [X11] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X11))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X1),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & sP0(X0) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | ? [X10] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | ? [X8] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X8))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | ? [X7] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | ? [X5] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X5))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | ? [X4] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ? [X3] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X3)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | ? [X2] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X2))))))),
  inference(rectify,[],[f43])).
fof(f43,plain,(
  ! [X1,X2] : (~sP1(X1,X2) | ((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2))))) | ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & sP0(X1) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X1,X2] : (~sP1(X1,X2) | ((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2))))) | ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & sP0(X1) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f4249,plain,(
  ( ! [X0] : (sP1(sK3,X0)) )),
  inference(subsumption_resolution,[],[f4248,f59])).
fof(f59,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.cmlPtreeConversionProps.AndFDecls_OK',aHL_TRUTH)).
fof(f4248,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP1(sK3,X0)) )),
  inference(forward_demodulation,[],[f4247,f119])).
fof(f119,plain,(
  s(bool,'T_0') = s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3)))),
  inference(subsumption_resolution,[],[f116,f60])).
fof(f60,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.cmlPtreeConversionProps.AndFDecls_OK',aHL_FALSITY)).
fof(f116,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3)))),
  inference(superposition,[],[f55,f61])).
fof(f61,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.cmlPtreeConversionProps.AndFDecls_OK',aHL_BOOL_CASES)).
fof(f55,plain,(
  p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))))),
  inference(cnf_transformation,[],[f40])).
fof(f4247,plain,(
  ( ! [X0] : (sP1(sK3,X0) | ~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))))) )),
  inference(equality_resolution,[],[f1047])).
fof(f1047,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))) | sP1(X0,X1) | ~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X0))))) )),
  inference(superposition,[],[f80,f56])).
fof(f56,plain,(
  s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),sK3))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),sK2)))),
  inference(cnf_transformation,[],[f40])).
fof(f80,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) | sP1(X1,X2) | ~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) | sP1(X1,X2))),
  inference(definition_folding,[],[f32,f38,f37])).
fof(f37,plain,(
  ! [X1] : (~sP0(X1) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) | ? [X12] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X12))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) & s('type.list.list'('type.ast.exp'),'const.list.NIL_0') != s('type.list.list'('type.ast.exp'),X12)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f32,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0))) | ((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2))))) | ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) | ? [X12] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X12))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) & s('type.list.list'('type.ast.exp'),'const.list.NIL_0') != s('type.list.list'('type.ast.exp'),X12))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) | s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0)))) | (((~p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) | s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2)))))) | ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) | ? [X12] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X12))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) & s('type.list.list'('type.ast.exp'),'const.list.NIL_0') != s('type.list.list'('type.ast.exp'),X12))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) | ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) | ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) | ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) | ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) | ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) | ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) | ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) | ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) != s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) | ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0)))) => (((p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2)))))) => ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) => ? [X12] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X12))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) & s('type.list.list'('type.ast.exp'),'const.list.NIL_0') != s('type.list.list'('type.ast.exp'),X12))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) => ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) => ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) => ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) => ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) => ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) => ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) => ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) => ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) => ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X0)))) => (((p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X2),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X2)))))) => ? [X13] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X13))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) => ? [X12] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X12))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) & ~s('type.list.list'('type.ast.exp'),'const.list.NIL_0') = s('type.list.list'('type.ast.exp'),X12))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) => ? [X11] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) => ? [X10] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X10))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) => ? [X9] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) => ? [X8] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) => ? [X7] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X7))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) => ? [X6] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X6))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) => ? [X5] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X5)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) => ? [X4] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) => ? [X3] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X1))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X3))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7,X17] : ((p(s(bool,'const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s(fun('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),X6)))) => (((p(s(bool,'const.bool.IN_2'(s('type.gram.MMLnonT',X17),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s(fun('type.gram.MMLnonT',bool),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',X17)))))) => ? [X18] : s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',X18))) = s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',X17),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) => ? [X19] : (s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X19))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) & ~s('type.list.list'('type.ast.exp'),'const.list.NIL_0') = s('type.list.list'('type.ast.exp'),X19))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) => ? [X20] : s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X20)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) => ? [X19] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X19))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) => ? [X19] : s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),X19))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) => ? [X21] : s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),X21)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) => ? [X22] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X22))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) => ? [X22] : s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),X22))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) => ? [X23] : s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),X23)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) => ? [X8] : s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X8)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) => ? [X24] : s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),X7))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),X24))))))),
  file('thm.cmlPtreeConversionProps.AndFDecls_OK','thm.cmlPtreeConversionProps.E_OK|48|')).
% SZS output end Proof for thm.cmlPtreeConversionProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 110
% Passive clauses: 414
% Generated clauses: 4097
% Final active clauses: 99
% Final passive clauses: 224
% Input formulas: 12
% Initial clauses: 46
% 
% Duplicate literals: 327
% Trivial inequalities: 132
% Fw subsumption resolutions: 544
% Fw demodulations: 333
% Bw demodulations: 5
% 
% Simple tautologies: 167
% Equational tautologies: 16
% Forward subsumptions: 1913
% 
% Binary resolution: 119
% Forward superposition: 1474
% Backward superposition: 945
% Self superposition: 43
% Equality factoring: 30
% Equality resolution: 26
% 
% Split clauses: 145
% Split components: 296
% SAT solver clauses: 326
% SAT solver unit clauses: 6
% SAT solver binary clauses: 44
% 
% Sat splits: 145
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 326
% TWLsolver calls for satisfiability: 101
% 
% Memory used [KB]: 2942
% Time elapsed: 0.139 s
% ------------------------------
% ------------------------------
% Success in time 0.14 s
