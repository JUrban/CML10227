Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (36909)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 110
% Passive clauses: 929
% Generated clauses: 15566
% Final active clauses: 108
% Final passive clauses: 676
% Input formulas: 51
% Initial clauses: 52
% 
% Duplicate literals: 625
% Trivial inequalities: 154
% Fw subsumption resolutions: 1491
% Fw demodulations: 1053
% 
% Simple tautologies: 168
% Equational tautologies: 23
% Forward subsumptions: 10637
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 4
% Forward superposition: 6071
% Backward superposition: 5718
% Self superposition: 251
% Equality factoring: 65
% Equality resolution: 15
% 
% Split clauses: 180
% Split components: 360
% SAT solver clauses: 524
% SAT solver unit clauses: 38
% SAT solver binary clauses: 130
% 
% Sat splits: 180
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 524
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (36928)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 84
% Passive clauses: 280
% Generated clauses: 11207
% Final active clauses: 81
% Final passive clauses: 193
% Input formulas: 51
% Initial clauses: 52
% 
% Duplicate literals: 616
% Trivial inequalities: 140
% Fw subsumption resolutions: 669
% Fw demodulations: 583
% Bw demodulations: 2
% Condensations: 1712
% 
% Simple tautologies: 138
% Equational tautologies: 23
% Forward subsumptions: 6569
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 4
% Forward superposition: 3791
% Backward superposition: 3147
% Self superposition: 186
% Equality factoring: 64
% Equality resolution: 13
% 
% Split clauses: 32
% Split components: 64
% SAT solver clauses: 522
% SAT solver unit clauses: 100
% SAT solver binary clauses: 35
% 
% Sat splits: 32
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 522
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 9466
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f116993,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f116869])).
fof(f116869,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f153,f24908])).
fof(f24908,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f24907,f159])).
fof(f159,plain,(
  ( ! [X0,X1] : (s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))) = s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))) = s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X0),X1)))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1] : s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))) = s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X0),X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X7] : s('type.exhSem.state'(X6),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X6),X7))) = s('type.exhSem.state'(X6),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X6),X7)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exhSem.dec_clock_def')).
fof(f24907,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f24842,f21836])).
fof(f21836,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X3),X4))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X3),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X3),X4)))))) )),
  inference(forward_demodulation,[],[f21697,f206])).
fof(f206,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f191,f190])).
fof(f190,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X6] : ! [X8,X10] : s(X6,X8) = s(X6,'const.combin.K_2'(s(X6,X8),s(X9,X10)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.combin.K_THM')).
fof(f191,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6,X9] : ! [X21,X22] : s(X6,'const.combin.K_2'(s(X6,X21),s(X9,X22))) = s(X6,happ(s(fun(X9,X6),'const.combin.K_1'(s(X6,X21))),s(X9,X22)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','ARITY_1_2_const.combin.K')).
fof(f21697,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X3),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X3),X4))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X3),X4))))),s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X3),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X3),X4))))))),s('type.patSem.state'(X3),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X3),'type.ffi.ffi_state'(X3)),'const.combin.K_1'(s('type.ffi.ffi_state'(X3),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X3),X4))))),s('type.patSem.state'(X3),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X3),X4))))))),s('type.patSem.state'(X3),'const.bool.ARB_0')))))))))))) )),
  inference(superposition,[],[f178,f160])).
fof(f160,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X17] : ! [X7] : s('type.patSem.state'(X17),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X17),X7))) = s('type.patSem.state'(X17),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X17),X7))))),s('type.patSem.state'(X17),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X17),X7))))))),s('type.patSem.state'(X17),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X17),'type.ffi.ffi_state'(X17)),'const.combin.K_1'(s('type.ffi.ffi_state'(X17),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X17),X7))))),s('type.patSem.state'(X17),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X17),X7))))))),s('type.patSem.state'(X17),'const.bool.ARB_0')))))))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exh_to_patProof.compile_state_def')).
fof(f178,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1)))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X17] : ! [X7,X12] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X12),s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X17),X7))))) = s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X17),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.patSem.state'(X17),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.patSem.patSem_79_prove_ltb')).
fof(f24842,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.exhSem.state'(X0),X1)))))) )),
  inference(superposition,[],[f21835,f158])).
fof(f158,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.patSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.patSem.state'(X0),X1)))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1] : s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.patSem.state'(X0),X1)))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6] : ! [X7] : s('type.patSem.state'(X6),'const.patSem.dec_clock_1'(s('type.patSem.state'(X6),X7))) = s('type.patSem.state'(X6),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.patSem.state_clock_1'(s('type.patSem.state'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.patSem.state'(X6),X7)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.patSem.dec_clock_def')).
fof(f21835,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f21834,f21788])).
fof(f21788,plain,(
  ( ! [X12,X10,X11] : (s('type.patSem.state'(X10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))) = s('type.patSem.state'(X10),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X11),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X10)),'const.combin.K_1'(s('type.ffi.ffi_state'(X10),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X10),X12))))),s('type.patSem.state'(X10),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f21787,f171])).
fof(f171,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X17] : ! [X7,X12] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X17),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X17),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.exhSem.state'(X17),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exhSem.exhSem_85_prove_ltb')).
fof(f21787,plain,(
  ( ! [X12,X10,X11] : (s('type.patSem.state'(X10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))) = s('type.patSem.state'(X10),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X11),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))))),s('type.patSem.state'(X10),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X10)),'const.combin.K_1'(s('type.ffi.ffi_state'(X10),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X10),X12))))),s('type.patSem.state'(X10),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f21786,f164])).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X17] : ! [X7,X12] : s('type.ffi.ffi_state'(X17),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X17),X7))) = s('type.ffi.ffi_state'(X17),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X17),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.exhSem.state'(X17),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exhSem.exhSem_88_prove_ltb')).
fof(f21786,plain,(
  ( ! [X12,X10,X11] : (s('type.patSem.state'(X10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))) = s('type.patSem.state'(X10),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X11),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))))),s('type.patSem.state'(X10),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X10)),'const.combin.K_1'(s('type.ffi.ffi_state'(X10),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f21674,f172])).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X17] : ! [X7,X12] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X17),X7))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X17),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.exhSem.state'(X17),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exhSem.exhSem_9|49|_prove_ltb')).
fof(f21674,plain,(
  ( ! [X12,X10,X11] : (s('type.patSem.state'(X10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))) = s('type.patSem.state'(X10),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X11),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))))),s('type.patSem.state'(X10),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X10)),'const.combin.K_1'(s('type.ffi.ffi_state'(X10),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))),s('type.patSem.state'(X10),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X10),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X11),s('type.exhSem.state'(X10),X12))))))))),s('type.patSem.state'(X10),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f160,f181])).
fof(f181,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X17] : ! [X7,X12] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X12),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X17),X7))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X17),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.exhSem.state'(X17),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exhSem.exhSem_94_prove_ltb')).
fof(f21834,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f21696,f203])).
fof(f203,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X14,X15,X16] : ! [X12,X13] : s(fun(X14,X15),'const.combin.K_1'(s(X15,happ(s(fun(X16,X15),X12),s(X16,X13))))) = s(fun(X14,X15),'const.combin.o_2'(s(fun(X16,X15),X12),s(fun(X14,X16),'const.combin.K_1'(s(X16,X13)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.combin.K_o_THM|split|1')).
fof(f21696,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X2),s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f187,f160])).
fof(f187,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3] : s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X17] : ! [X7,X19,X12] : s('type.patSem.state'(X17),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.patSem.state'(X17),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.patSem.state'(X17),X7))))) = s('type.patSem.state'(X17),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X12),s(fun('type.num.num','type.num.num'),X19))),s('type.patSem.state'(X17),X7)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.patSem.patSem_84_prove_ltb')).
fof(f153,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.patSem.dec_clock_1'(s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.patSem.dec_clock_1'(s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f148])).
fof(f148,plain,(
  ? [X0,X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))))) != s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f54])).
fof(f54,plain,(
  ~! [X0,X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ~! [X0] : ! [X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.dec_clock_1'(s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X6),X7))))) = s('type.patSem.state'(X6),'const.patSem.dec_clock_1'(s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),'const.exhSem.dec_clock_1'(s('type.exhSem.state'(X6),X7))))) = s('type.patSem.state'(X6),'const.patSem.dec_clock_1'(s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49||48|_prove_ltb')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 391
% Passive clauses: 2844
% Generated clauses: 130650
% Final active clauses: 204
% Final passive clauses: 1091
% Input formulas: 51
% Initial clauses: 52
% 
% Duplicate literals: 4734
% Trivial inequalities: 855
% Fw subsumption resolutions: 8123
% Fw demodulations: 13326
% Bw demodulations: 983
% Condensations: 12439
% Global subsumptions: 271
% 
% Simple tautologies: 902
% Equational tautologies: 449
% Forward subsumptions: 85779
% Fw demodulations to eq. taut.: 177
% Bw demodulations to eq. taut.: 26
% 
% Unit resulting resolution: 3235
% Forward superposition: 35739
% Backward superposition: 34876
% Self superposition: 821
% Equality factoring: 184
% Equality resolution: 38
% 
% Split clauses: 335
% Split components: 686
% SAT solver clauses: 4098
% SAT solver unit clauses: 899
% SAT solver binary clauses: 243
% 
% Sat splits: 335
% Sat splitting refutations: 311
% 
% Memory used [KB]: 88783
% Time elapsed: 5.134 s
% ------------------------------
% ------------------------------
% Success in time 6.47 s
