Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (83513)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 153
% Passive clauses: 3424
% Generated clauses: 22201
% Final active clauses: 151
% Final passive clauses: 3142
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 680
% Trivial inequalities: 628
% Fw subsumption resolutions: 1817
% Fw demodulations: 6509
% Bw demodulations: 2
% 
% Simple tautologies: 278
% Equational tautologies: 23
% Forward subsumptions: 8194
% 
% Binary resolution: 207
% Forward superposition: 7695
% Backward superposition: 4357
% Self superposition: 120
% Equality factoring: 54
% Equality resolution: 21
% 
% Split clauses: 308
% Split components: 627
% SAT solver clauses: 774
% SAT solver unit clauses: 15
% SAT solver binary clauses: 260
% 
% Sat splits: 308
% 
% TWLsolver clauses: 774
% TWLsolver calls for satisfiability: 124
% 
% Memory used [KB]: 13944
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f2454,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2453,f2392,f2437,f67,f94,f93,f115])).
fof(f115,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(X4,X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) | $spl38),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(X4,X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f93,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(X4,X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(X4,X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X13,X7,X14,X9] : ? [X11,X12] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X7),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))),s('type.list.list'('type.clos_known.val_approx'),X13))),s('type.sptree.spt'('type.clos_known.val_approx'),X14)))),
  file('thm.clos_knownProof.clos_knownProof_2|48|7_prove_ltb','thm.clos_knownProof.clos_knownProof_|49||48|_prove_ltb')).
fof(f94,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))),s('type.list.list'('type.clos_known.val_approx'),sK4))),s('type.sptree.spt'('type.clos_known.val_approx'),sK2)))) ) | $spl0),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))),s('type.list.list'('type.clos_known.val_approx'),sK4))),s('type.sptree.spt'('type.clos_known.val_approx'),sK2)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f67,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))),s('type.list.list'('type.clos_known.val_approx'),sK4))),s('type.sptree.spt'('type.clos_known.val_approx'),sK2)))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK3))))),s('type.list.list'('type.clos_known.val_approx'),sK4))),s('type.sptree.spt'('type.clos_known.val_approx'),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))))),s('type.list.list'('type.clos_known.val_approx'),X4))),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X1),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3))))),s('type.list.list'('type.clos_known.val_approx'),X4))),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X7),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))),s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X7),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))),s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))),
  file('thm.clos_knownProof.clos_knownProof_2|48|7_prove_ltb','thm.clos_knownProof.clos_knownProof_2|48|7_prove_ltb')).
fof(f2437,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(sK3,sK2,sK1,sK4,sK0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(sK3,sK2,sK1,sK4,sK0))))) ) | $spl584),
  inference(cnf_transformation,[],[f2437_D])).
fof(f2437_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(sK3,sK2,sK1,sK4,sK0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(sK3,sK2,sK1,sK4,sK0))))) ) <=> ~$spl584),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl584])])).
fof(f2392,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK10(sK3,sK2,sK1,sK4,sK0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK11(sK3,sK2,sK1,sK4,sK0))))) ) | ($spl0 | $spl38)),
  inference(superposition,[],[f94,f115])).
fof(f2453,plain,(
  $false | $spl584),
  inference(equality_resolution,[],[f2437])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 290
% Generated clauses: 2343
% Final active clauses: 42
% Final passive clauses: 240
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 156
% Trivial inequalities: 28
% Fw subsumption resolutions: 91
% Fw demodulations: 75
% Bw demodulations: 8
% Condensations: 227
% 
% Simple tautologies: 84
% Equational tautologies: 17
% Forward subsumptions: 928
% 
% Binary resolution: 15
% Forward superposition: 661
% Backward superposition: 638
% Self superposition: 79
% Equality factoring: 40
% Equality resolution: 8
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 473
% SAT solver unit clauses: 39
% SAT solver binary clauses: 36
% SAT solver learnt clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 472
% TWLsolver calls for satisfiability: 104
% 
% Memory used [KB]: 6396
% Time elapsed: 0.148 s
% ------------------------------
% ------------------------------
% Success in time 0.766 s
