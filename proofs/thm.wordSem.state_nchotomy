Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (142514)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 2625
% Generated clauses: 23904
% Final active clauses: 171
% Final passive clauses: 2257
% Input formulas: 133
% Initial clauses: 192
% 
% Duplicate literals: 921
% Trivial inequalities: 484
% Fw subsumption resolutions: 1850
% Fw demodulations: 2552
% Bw demodulations: 6
% 
% Simple tautologies: 467
% Equational tautologies: 56
% Forward subsumptions: 13387
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 372
% Factoring: 1
% Forward superposition: 9284
% Backward superposition: 7879
% Self superposition: 176
% Equality factoring: 93
% Equality resolution: 45
% 
% Split clauses: 166
% Split components: 332
% SAT solver clauses: 431
% SAT solver unit clauses: 22
% SAT solver binary clauses: 134
% 
% Sat splits: 166
% 
% TWLsolver clauses: 430
% TWLsolver calls for satisfiability: 110
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% (142532)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 172
% Passive clauses: 887
% Generated clauses: 17585
% Final active clauses: 165
% Final passive clauses: 692
% Input formulas: 133
% Initial clauses: 192
% 
% Duplicate literals: 618
% Trivial inequalities: 592
% Fw subsumption resolutions: 1171
% Fw demodulations: 1900
% Bw demodulations: 22
% Condensations: 1027
% Global subsumptions: 4
% 
% Simple tautologies: 303
% Equational tautologies: 47
% Forward subsumptions: 9591
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 86
% Factoring: 1
% Forward superposition: 6388
% Backward superposition: 4492
% Self superposition: 105
% Equality factoring: 61
% Equality resolution: 39
% 
% Split clauses: 59
% Split components: 118
% SAT solver clauses: 1636
% SAT solver unit clauses: 306
% SAT solver binary clauses: 69
% SAT solver learnt clauses: 8
% 
% Sat splits: 59
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1620
% TWLsolver calls for satisfiability: 1654
% 
% Memory used [KB]: 17782
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f106422,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f417,f539,f540,f538,f537,f541,f544,f542,f546,f549,f552,f548,f553,f555,f536])).
fof(f536,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f411])).
fof(f411,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f410])).
fof(f410,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & ((s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X1,X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f292])).
fof(f292,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6,X7] : ! [X75,X74] : (s('type.wordSem.state'(X6,X7),X74) = s('type.wordSem.state'(X6,X7),X75) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X75))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X74))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X75))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X74))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X75))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X74))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X75))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X74))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X75))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X74))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X75))) & s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X74))) = s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X75)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.wordSem_334_prove_ltb')).
fof(f555,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f330])).
fof(f330,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_accessors|split|6')).
fof(f553,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5) = s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f327])).
fof(f327,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5) = s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f326])).
fof(f326,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5) = s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_accessors|split|3')).
fof(f548,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f316])).
fof(f316,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_accessors|split|10')).
fof(f552,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(fun('type.num.num',fun('type.num.num','type.num.num')),X7) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.num.num',fun('type.num.num','type.num.num')),X7) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f324])).
fof(f324,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.num.num',fun('type.num.num','type.num.num')),X7) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s(fun('type.num.num',fun('type.num.num','type.num.num')),X14) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_permute')).
fof(f549,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(fun('type.fcp.cart'(bool,X1),bool),X6) = s(fun('type.fcp.cart'(bool,X1),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f319,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.fcp.cart'(bool,X1),bool),X6) = s(fun('type.fcp.cart'(bool,X1),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f318])).
fof(f318,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(fun('type.fcp.cart'(bool,X1),bool),X6) = s(fun('type.fcp.cart'(bool,X1),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s(fun('type.fcp.cart'(bool,X6),bool),X13) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_mdomain')).
fof(f546,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f313])).
fof(f313,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f312])).
fof(f312,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_accessors|split|1')).
fof(f542,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.list.list'('type.wordSem.stack_frame'(X1)),X4) = s('type.list.list'('type.wordSem.stack_frame'(X1)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f305,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.list.list'('type.wordSem.stack_frame'(X1)),X4) = s('type.list.list'('type.wordSem.stack_frame'(X1)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f304])).
fof(f304,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.list.list'('type.wordSem.stack_frame'(X1)),X4) = s('type.list.list'('type.wordSem.stack_frame'(X1)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'('type.wordSem.stack_frame'(X6)),X11) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_stack')).
fof(f544,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2) = s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))) )),
  inference(cnf_transformation,[],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2) = s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(flattening,[],[f308])).
fof(f308,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2) = s('type.sptree.spt'('type.wordSem.word_loc'(X1)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X1,X0),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.stack_frame'(X1)),X4),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5),s(fun('type.fcp.cart'(bool,X1),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X1))),X12),s(bool,X13),s('type.ffi.ffi_state'(X0),X14)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X7,X6] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_locals')).
fof(f541,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.ffi.ffi_state'(X1),X14) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f303])).
fof(f303,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.ffi.ffi_state'(X1),X14) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f302])).
fof(f302,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.ffi.ffi_state'(X1),X14) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.ffi.ffi_state'(X7),X21) = s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_ffi')).
fof(f537,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.num.num',X11) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X11) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f294])).
fof(f294,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X11) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.num.num',X18) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_termdep')).
fof(f538,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.num.num',X9) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X9) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f296])).
fof(f296,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X9) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.num.num',X16) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_handler')).
fof(f540,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.num.num',X10) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f301])).
fof(f301,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X10) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f300])).
fof(f300,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s('type.num.num',X10) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.num.num',X17) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_clock')).
fof(f539,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(bool,X13) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))) )),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(bool,X13) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(flattening,[],[f298])).
fof(f298,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : s(bool,X13) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X3),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),bool),X6),s(fun('type.num.num',fun('type.num.num','type.num.num')),X7),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X12),s(bool,X13),s('type.ffi.ffi_state'(X1),X14)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s(bool,X20) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_be')).
fof(f417,plain,(
  ( ! [X6,X4,X14,X12,X10,X8,X7,X5,X3,X15,X13,X11,X9] : (s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),X3),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),X4),s('type.list.list'('type.wordSem.stack_frame'(sK0)),X5),s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),X6),s(fun('type.fcp.cart'(bool,sK0),bool),X7),s(fun('type.num.num',fun('type.num.num','type.num.num')),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),X13),s(bool,X14),s('type.ffi.ffi_state'(sK1),X15)))) )),
  inference(cnf_transformation,[],[f391])).
fof(f391,plain,(
  ! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15] : s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),X3),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),X4),s('type.list.list'('type.wordSem.stack_frame'(sK0)),X5),s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),X6),s(fun('type.fcp.cart'(bool,sK0),bool),X7),s(fun('type.num.num',fun('type.num.num','type.num.num')),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),X13),s(bool,X14),s('type.ffi.ffi_state'(sK1),X15)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f384])).
fof(f384,plain,(
  ? [X0,X1,X2] : ! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15] : s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X3),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X4),s('type.list.list'('type.wordSem.stack_frame'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X6),s(fun('type.fcp.cart'(bool,X0),bool),X7),s(fun('type.num.num',fun('type.num.num','type.num.num')),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X13),s(bool,X14),s('type.ffi.ffi_state'(X1),X15)))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2] : ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15] : s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X3),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X4),s('type.list.list'('type.wordSem.stack_frame'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X6),s(fun('type.fcp.cart'(bool,X0),bool),X7),s(fun('type.num.num',fun('type.num.num','type.num.num')),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X13),s(bool,X14),s('type.ffi.ffi_state'(X1),X15)))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1] : ! [X2] : ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15] : s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X3),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),X4),s('type.list.list'('type.wordSem.stack_frame'(X0)),X5),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),X6),s(fun('type.fcp.cart'(bool,X0),bool),X7),s(fun('type.num.num',fun('type.num.num','type.num.num')),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),X9),s('type.num.num',X10),s('type.num.num',X11),s('type.num.num',X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),X13),s(bool,X14),s('type.ffi.ffi_state'(X1),X15)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ? [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.wordSem.state'(X6,X7),X8) = s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ? [X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.wordSem.state'(X6,X7),X8) = s('type.wordSem.state'(X6,X7),'const.wordSem.recordtype|46|state_13'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X9),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),X10),s('type.list.list'('type.wordSem.stack_frame'(X6)),X11),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),X12),s(fun('type.fcp.cart'(bool,X6),bool),X13),s(fun('type.num.num',fun('type.num.num','type.num.num')),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),X15),s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),X19),s(bool,X20),s('type.ffi.ffi_state'(X7),X21)))),
  file('thm.wordSem.state_nchotomy','thm.wordSem.state_nchotomy')).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 425
% Passive clauses: 4297
% Generated clauses: 107210
% Final active clauses: 265
% Final passive clauses: 1787
% Input formulas: 133
% Initial clauses: 192
% Discarded non-redundant clauses: 1758
% 
% Duplicate literals: 2647
% Trivial inequalities: 801
% Fw subsumption resolutions: 4735
% Fw demodulations: 11753
% Bw demodulations: 1589
% Condensations: 6114
% Global subsumptions: 67
% 
% Simple tautologies: 782
% Equational tautologies: 510
% Forward subsumptions: 74520
% Fw demodulations to eq. taut.: 488
% Bw demodulations to eq. taut.: 143
% 
% Unit resulting resolution: 5949
% Factoring: 1
% Forward superposition: 46682
% Backward superposition: 24137
% Self superposition: 423
% Equality factoring: 164
% Equality resolution: 89
% 
% Split clauses: 69
% Split components: 142
% SAT solver clauses: 4906
% SAT solver unit clauses: 422
% SAT solver binary clauses: 1955
% 
% Sat splits: 69
% Sat splitting refutations: 402
% 
% Memory used [KB]: 96586
% Time elapsed: 6.178 s
% ------------------------------
% ------------------------------
% Success in time 7.531 s
