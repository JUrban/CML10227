Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (71891)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 603
% Passive clauses: 4595
% Generated clauses: 15739
% Final active clauses: 553
% Final passive clauses: 3707
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 255
% Trivial inequalities: 48
% Fw subsumption resolutions: 926
% Fw demodulations: 1493
% Bw demodulations: 46
% 
% Simple tautologies: 298
% Equational tautologies: 55
% Forward subsumptions: 8111
% Fw demodulations to eq. taut.: 10
% 
% Binary resolution: 5445
% Factoring: 842
% Forward superposition: 3291
% Backward superposition: 2967
% Self superposition: 49
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 132
% Split components: 266
% SAT solver clauses: 155
% SAT solver unit clauses: 7
% SAT solver binary clauses: 40
% 
% Sat splits: 132
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 153
% TWLsolver calls for satisfiability: 45
% 
% Memory used [KB]: 9083
% Time elapsed: 0.604 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (71916)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 308
% Passive clauses: 1985
% Generated clauses: 10676
% Final active clauses: 302
% Final passive clauses: 1656
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 106
% Trivial inequalities: 36
% Fw subsumption resolutions: 312
% Fw demodulations: 935
% Bw demodulations: 26
% Condensations: 96
% Global subsumptions: 19
% 
% Simple tautologies: 228
% Equational tautologies: 13
% Forward subsumptions: 4699
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 1501
% Factoring: 156
% Forward superposition: 2751
% Backward superposition: 2363
% Self superposition: 67
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 2505
% SAT solver unit clauses: 349
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 2
% 
% Sat splits: 17
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2429
% TWLsolver calls for satisfiability: 1624
% 
% Memory used [KB]: 15351
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f16107,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f645,f779])).
fof(f779,plain,(
  ( ! [X6,X7] : (s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK9),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) != s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK14))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.patSem.state'(sK9),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK9),sK11))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK10))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.exhLang.exp',sK13))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(backward_demodulation,[],[f570,f471])).
fof(f471,plain,(
  ( ! [X6,X7] : (s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK9),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) != s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK14))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.patSem.state'(sK9),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK9),sK11))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),sK10))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.exhLang.exp',sK13))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f368])).
fof(f368,plain,(
  ! [X6,X7] : s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK9),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) != s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK14))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.patSem.state'(sK9),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK9),sK11))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),sK10))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.exhLang.exp',sK13))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13,sK14])],[f325])).
fof(f325,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ! [X6,X7] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),X5))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),X1))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ? [X6,X7] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),X5))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),X1))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ? [X6,X7] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X7))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),X5))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),X1))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.exhLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X12),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X13))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),X11))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X8))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),X7))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.exhLang.exp',X10))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X12),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X13))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),X11))))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X8))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_exp_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),happ(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s('type.list.list'('type.string.char'),X7))),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.exhLang.exp',X10))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|47_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49|47_prove_ltb')).
fof(f570,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X0] : ! [X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X16] : ! [X18] : s('type.option.option'(X16),'const.option.SOME_1'(s(X16,X18))) = s('type.option.option'(X16),happ(s(fun(X16,'type.option.option'(X16)),'const.option.SOME_0'),s(X16,X18)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|47_prove_ltb','ARITY_0_1_const.option.SOME')).
fof(f645,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK23(X2,X1,X0)),s(X1,sK24(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f438])).
fof(f438,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK23(X2,X1,X0)),s(X1,sK24(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK23,sK24])],[f252])).
fof(f252,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f251])).
fof(f251,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X16,X17] : ! [X7] : ? [X40,X41] : s('type.pair.prod'(X16,X17),X7) = s('type.pair.prod'(X16,X17),'const.pair.,_2'(s(X16,X40),s(X17,X41)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|47_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 389
% Passive clauses: 3159
% Generated clauses: 15667
% Final active clauses: 384
% Final passive clauses: 2684
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 7
% Trivial inequalities: 1
% Fw subsumption resolutions: 35
% Fw demodulations: 1210
% Bw demodulations: 90
% Condensations: 17
% 
% Simple tautologies: 75
% Equational tautologies: 19
% Forward subsumptions: 11087
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 1760
% Factoring: 1
% Forward superposition: 6284
% Backward superposition: 5775
% Self superposition: 200
% Equality factoring: 2
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 3171
% SAT solver unit clauses: 1867
% SAT solver binary clauses: 973
% 
% Sat splits: 5
% 
% Memory used [KB]: 40041
% Time elapsed: 1.866 s
% ------------------------------
% ------------------------------
% Success in time 3.25 s
