Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f4630,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4629,f223,f409,f407,f405,f403,f401,f3968,f3967,f3966,f4211])).
fof(f4211,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f405,f228])).
fof(f228,plain,(
  ( ! [X2,X3,X1] : (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK13),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK14))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK15),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK16))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK17),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),sK19))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK20),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK21))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK22),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK23)))))) & ! [X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))))) & ! [X8,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) & ! [X6,X7] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X6),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X7))))) & ! [X4,X5] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X4),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5))))) & ! [X1,X2,X3] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X21,X22] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X21),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X22))))) | ? [X19,X20] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))))) | ? [X16,X17,X18] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X16),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.bvlSem.v'),X18))))) | ? [X14,X15] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X15))))) | ? [X12,X13] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X13)))))) & ! [X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))))) & ! [X8,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) & ! [X6,X7] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X6),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X7))))) & ! [X4,X5] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X4),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5))))) & ! [X1,X2,X3] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))))) | ? [X8,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X5),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X6),s('type.list.list'('type.bvlSem.v'),X7))))) | ? [X3,X4] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4))))) | ? [X1,X2] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X2)))))) & ! [X21,X22] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X21),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X22))))) & ! [X19,X20] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))))) & ! [X17,X18] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X17),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18))))) & ! [X15,X16] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X16))))) & ! [X12,X13,X14] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),X14))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))))) | ? [X8,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X5),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X6),s('type.list.list'('type.bvlSem.v'),X7))))) | ? [X3,X4] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4))))) | ? [X1,X2] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X2)))))) & (! [X21,X22] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X21),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X22))))) & ! [X19,X20] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))))) & ! [X17,X18] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X17),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18))))) & ! [X15,X16] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X16))))) & ! [X12,X13,X14] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),X14)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))))) | ? [X8,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X5),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X6),s('type.list.list'('type.bvlSem.v'),X7))))) | ? [X3,X4] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4))))) | ? [X1,X2] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X2)))))) => (? [X21,X22] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X21),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X22))))) | ? [X19,X20] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))))) | ? [X17,X18] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X17),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18))))) | ? [X15,X16] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X16))))) | ? [X12,X13,X14] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X0) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),X14)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X7,X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),X11))))) | ? [X7,X12] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X12))))) | ? [X7,X13] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X13)))))) => (? [X7,X8] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X7,X13] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X13))))) | ? [X7,X12] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X12))))) | ? [X7,X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X7,X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),X11))))) | ? [X7,X12] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X12))))) | ? [X7,X13] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X13)))))) => (? [X7,X8] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9))))) | ? [X7,X13] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X13))))) | ? [X7,X12] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X12))))) | ? [X7,X10,X11] : s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),X6) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),X11)))))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_3_prove_ltb','thm.bvl_to_bviProof.bvl_to_bviProof_3_prove_ltb')).
fof(f3966,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f401,f224])).
fof(f224,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X10),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3967,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f407,f227])).
fof(f227,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X4),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3968,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f409,f226])).
fof(f226,plain,(
  ( ! [X6,X7] : (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X6),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X7)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f401,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK13),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK14))))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK13),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK14))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK15),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK16))))) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK15),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK16))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f405,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK17),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),sK19))))) | $spl4),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK17),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),sK19))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f407,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK20),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK21))))) | $spl6),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK20),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK21))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f409,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK22),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK23))))) | $spl8),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK22),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK23))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f223,plain,(
  s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK22),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK23))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK20),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK21))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK17),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),sK19))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK15),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK16))))) | s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) = s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),sK13),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK14)))))),
  inference(cnf_transformation,[],[f138])).
fof(f4629,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f403,f225])).
fof(f225,plain,(
  ( ! [X8,X9] : (s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),sK12) != s('type.pair.prod'(fun('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s(fun('type.num.num','type.num.num'),X8),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 368
% Passive clauses: 1457
% Generated clauses: 4400
% Final active clauses: 368
% Final passive clauses: 911
% Input formulas: 37
% Initial clauses: 173
% 
% Duplicate literals: 153
% Trivial inequalities: 23
% Fw subsumption resolutions: 295
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2296
% 
% Binary resolution: 2713
% Factoring: 771
% Forward superposition: 150
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 100
% Split components: 204
% SAT solver clauses: 189
% SAT solver unit clauses: 11
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 1
% 
% Sat splits: 100
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 188
% TWLsolver calls for satisfiability: 160
% 
% Memory used [KB]: 2302
% Time elapsed: 0.096 s
% ------------------------------
% ------------------------------
% Success in time 0.101 s
