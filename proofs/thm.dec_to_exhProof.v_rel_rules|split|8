Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.dec_to_exhProof
% (77817)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 159
% Passive clauses: 2339
% Generated clauses: 18036
% Final active clauses: 153
% Final passive clauses: 1990
% Input formulas: 37
% Initial clauses: 279
% 
% Duplicate literals: 521
% Trivial inequalities: 317
% Fw subsumption resolutions: 3471
% Fw demodulations: 2677
% Bw demodulations: 2
% 
% Simple tautologies: 370
% Equational tautologies: 59
% Forward subsumptions: 7698
% 
% Binary resolution: 379
% Factoring: 1
% Forward superposition: 4673
% Backward superposition: 5241
% Self superposition: 198
% Equality factoring: 154
% Equality resolution: 38
% 
% Split clauses: 325
% Split components: 667
% SAT solver clauses: 681
% SAT solver unit clauses: 13
% SAT solver binary clauses: 82
% 
% Sat splits: 325
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 681
% TWLsolver calls for satisfiability: 149
% 
% Memory used [KB]: 8187
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.dec_to_exhProof
% (77839)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 187
% Passive clauses: 795
% Generated clauses: 11214
% Final active clauses: 135
% Final passive clauses: 330
% Input formulas: 37
% Initial clauses: 279
% 
% Duplicate literals: 646
% Trivial inequalities: 196
% Fw subsumption resolutions: 1282
% Fw demodulations: 899
% Bw demodulations: 295
% Condensations: 1208
% Global subsumptions: 6
% 
% Simple tautologies: 284
% Equational tautologies: 36
% Forward subsumptions: 4249
% 
% Binary resolution: 164
% Factoring: 1
% Forward superposition: 2675
% Backward superposition: 2288
% Self superposition: 163
% Equality factoring: 115
% Equality resolution: 48
% 
% Split clauses: 146
% Split components: 294
% SAT solver clauses: 1308
% SAT solver unit clauses: 267
% SAT solver binary clauses: 123
% SAT solver learnt clauses: 12
% 
% Sat splits: 146
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 1284
% TWLsolver calls for satisfiability: 6065
% 
% Memory used [KB]: 7931
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.dec_to_exhProof
% (77871)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 874
% Passive clauses: 9282
% Generated clauses: 210041
% Final active clauses: 212
% Final passive clauses: 826
% Input formulas: 37
% Initial clauses: 279
% 
% Duplicate literals: 5775
% Trivial inequalities: 1608
% Fw subsumption resolutions: 29306
% Fw demodulations: 28822
% Bw demodulations: 6093
% Condensations: 22309
% Global subsumptions: 330
% 
% Simple tautologies: 2003
% Equational tautologies: 537
% Forward subsumptions: 109230
% Fw demodulations to eq. taut.: 13
% Bw demodulations to eq. taut.: 925
% 
% Unit resulting resolution: 3508
% Factoring: 3
% Forward superposition: 49483
% Backward superposition: 50416
% Self superposition: 806
% Equality factoring: 539
% Equality resolution: 140
% 
% Split clauses: 326
% Split components: 659
% SAT solver clauses: 10909
% SAT solver unit clauses: 109
% SAT solver binary clauses: 1522
% 
% Sat splits: 326
% Sat splitting refutations: 643
% 
% Memory used [KB]: 80467
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.dec_to_exhProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.dec_to_exhProof
% SZS output start Proof for thm.dec_to_exhProof
fof(f1722,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1720])).
fof(f1720,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),
  inference(resolution,[],[f1709,f353])).
fof(f353,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP5(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK34(X4,X3,X2,X1,X0)),s('type.conSem.v',sK35(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK37(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK34(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK36(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK38(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK35(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK36(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK37(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK38(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP5(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK34,sK35,sK36,sK37,sK38])],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP5(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.exhSem.v',X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X11))),s('type.exhSem.v',X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP5(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f166])).
fof(f166,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP5(X5,X6,X3,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP5(X5,X6,X3,X8,X7)))),
  inference(flattening,[],[f165])).
fof(f165,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP5(X5,X6,X3,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP5(X5,X6,X3,X8,X7)))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X5,X6,X3,X8,X7] : (sP5(X5,X6,X3,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f1709,plain,(
  ~sP5(sK66('const.list.NIL_0','const.list.NIL_0',sK26),sK26,sK64('const.list.NIL_0','const.list.NIL_0',sK26),'const.list.NIL_0','const.list.NIL_0')),
  inference(subsumption_resolution,[],[f1708,f329])).
fof(f329,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.dec_to_exhProof.v_rel_rules|split|8',aHL_FALSITY)).
fof(f1708,plain,(
  p(s(bool,'F_0')) | ~sP5(sK66('const.list.NIL_0','const.list.NIL_0',sK26),sK26,sK64('const.list.NIL_0','const.list.NIL_0',sK26),'const.list.NIL_0','const.list.NIL_0')),
  inference(forward_demodulation,[],[f1609,f554])).
fof(f554,plain,(
  s(bool,'F_0') = s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))),
  inference(resolution,[],[f260,f322])).
fof(f322,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.dec_to_exhProof.v_rel_rules|split|8','thm.bool.EQ_CLAUSES|split|2')).
fof(f260,plain,(
  ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26])],[f75])).
fof(f75,plain,(
  ? [X0] : ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  file('thm.dec_to_exhProof.v_rel_rules|split|8','thm.dec_to_exhProof.v_rel_rules|split|8')).
fof(f1609,plain,(
  p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0')))) | ~sP5(sK66('const.list.NIL_0','const.list.NIL_0',sK26),sK26,sK64('const.list.NIL_0','const.list.NIL_0',sK26),'const.list.NIL_0','const.list.NIL_0')),
  inference(resolution,[],[f538,f389])).
fof(f389,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK66(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))) | ~sP5(sK66(X2,X1,X0),X6,sK64(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X12,X13,X14] : (sP6(X12,X13,X14) | (sP4(X13,sK58(X14,X13,X12,X2,X1,X0),X12,sK60(X14,X13,X12,X2,X1,X0),sK59(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK58(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK59(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK60(X14,X13,X12,X2,X1,X0)))))) | (sP5(X14,sK61(X14,X13,X12,X2,X1,X0),X12,sK63(X14,X13,X12,X2,X1,X0),sK62(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK61(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK62(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK63(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & ((~sP6(sK64(X2,X1,X0),sK65(X2,X1,X0),sK66(X2,X1,X0)) & ! [X9,X10,X11] : (~sP4(sK65(X2,X1,X0),X9,sK64(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK65(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP5(sK66(X2,X1,X0),X6,sK64(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK66(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK66(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK58,sK59,sK60,sK61,sK62,sK63,sK64,sK65,sK66])],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X12,X13,X14] : (sP6(X12,X13,X14) | ? [X18,X19,X20] : (sP4(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))) | ? [X15,X16,X17] : (sP5(X14,X15,X12,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP6(X3,X4,X5) & ! [X9,X10,X11] : (~sP4(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP5(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(rectify,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X3,X4,X5] : (sP6(X3,X4,X5) | ? [X14,X15,X16] : (sP4(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP5(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP6(X3,X4,X5) & ! [X14,X15,X16] : (~sP4(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (~sP5(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP6(X3,X4,X5) | ? [X14,X15,X16] : (sP4(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP5(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(definition_folding,[],[f98,f111,f110,f109,f108,f107,f106,f105])).
fof(f105,plain,(
  ! [X5,X21,X23,X22] : (sP0(X5,X21,X23,X22) <=> ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f106,plain,(
  ! [X5,X21,X23,X22] : (sP1(X5,X21,X23,X22) <=> ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f107,plain,(
  ! [X4,X21,X23,X22] : (sP2(X4,X21,X23,X22) <=> ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f108,plain,(
  ! [X4,X21,X23,X22] : (sP3(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f109,plain,(
  ! [X4,X14,X3,X16,X15] : (sP4(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f111,plain,(
  ! [X3,X4,X5] : (sP6(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP2(X4,X21,X23,X22) | sP0(X5,X21,X23,X22) | sP1(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP3(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f98,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(ennf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X7,X8] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))) <=> ! [X9,X10,X11] : ((! [X12,X13,X14] : ((? [X15] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X15))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X15)))) | ? [X16,X17,X18] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X16),s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X16))),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18))))) | ? [X19,X20,X21,X22,X23] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19),s('type.list.list'('type.string.char'),X20),s('type.conLang.exp',X21))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22),s('type.list.list'('type.string.char'),X20),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X23),s('type.conLang.exp',X21))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X23),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22))))) | ? [X22,X19,X20,X24,X23] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X24),s('type.list.list'('type.string.char'),X20))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X24))),s('type.list.list'('type.string.char'),X20))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X23),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22))))) | ? [X15] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X15))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X15)))) | ? [X17,X18] : (s('type.conSem.v',X13) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X14) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X12))),s('type.conSem.v',X13))),s('type.exhSem.v',X14))))) & ! [X25,X26,X27] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X26) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X27)) | ? [X28,X29,X17,X18] : (s('type.list.list'('type.conSem.v'),X26) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X28),s('type.list.list'('type.conSem.v'),X17))) & s('type.list.list'('type.exhSem.v'),X27) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X29),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X25))),s('type.conSem.v',X28))),s('type.exhSem.v',X29)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X25))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X25))),s('type.list.list'('type.conSem.v'),X26))),s('type.list.list'('type.exhSem.v'),X27))))) & ! [X30,X31,X32] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X32)) | ? [X20,X28,X29,X19,X22] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.conSem.v',X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X32) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.exhSem.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X30))),s('type.conSem.v',X28))),s('type.exhSem.v',X29)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X32)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))))),
  file('thm.dec_to_exhProof.v_rel_rules|split|8','thm.dec_to_exhProof.v_rel|48|_def')).
fof(f538,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK66('const.list.NIL_0','const.list.NIL_0',sK26)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))),
  inference(resolution,[],[f260,f390])).
fof(f390,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK66(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f187])).
% SZS output end Proof for thm.dec_to_exhProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 248
% Passive clauses: 210
% Generated clauses: 1173
% Final active clauses: 243
% Final passive clauses: 169
% Input formulas: 37
% Initial clauses: 273
% 
% Selected by SInE selection: 32
% SInE iterations: 1
% 
% Duplicate literals: 39
% Trivial inequalities: 10
% Fw subsumption resolutions: 186
% Fw demodulations: 50
% Bw demodulations: 1
% 
% Simple tautologies: 93
% Equational tautologies: 1
% Forward subsumptions: 535
% 
% Binary resolution: 208
% Forward superposition: 578
% Backward superposition: 86
% Equality resolution: 10
% 
% Split clauses: 22
% Split components: 46
% SAT solver clauses: 28
% SAT solver unit clauses: 5
% SAT solver binary clauses: 12
% 
% Sat splits: 22
% Sat splitting refutations: 5
% 
% Memory used [KB]: 3709
% Time elapsed: 0.127 s
% ------------------------------
% ------------------------------
% Success in time 11.96 s
