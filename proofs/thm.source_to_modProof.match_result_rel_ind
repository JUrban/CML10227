Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (109269)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 1778
% Generated clauses: 22634
% Final active clauses: 171
% Final passive clauses: 1378
% Input formulas: 18
% Initial clauses: 41
% 
% Duplicate literals: 1654
% Trivial inequalities: 114
% Fw subsumption resolutions: 3219
% Fw demodulations: 3131
% Bw demodulations: 7
% 
% Simple tautologies: 360
% Equational tautologies: 23
% Forward subsumptions: 10605
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 338
% Forward superposition: 8669
% Backward superposition: 5079
% Self superposition: 118
% Equality factoring: 40
% Equality resolution: 30
% 
% Split clauses: 1013
% Split components: 2031
% SAT solver clauses: 1788
% SAT solver unit clauses: 7
% SAT solver binary clauses: 147
% 
% Sat splits: 1013
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1788
% TWLsolver calls for satisfiability: 228
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (109288)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 537
% Generated clauses: 13787
% Final active clauses: 110
% Final passive clauses: 364
% Input formulas: 18
% Initial clauses: 41
% 
% Duplicate literals: 1068
% Trivial inequalities: 64
% Fw subsumption resolutions: 963
% Fw demodulations: 1776
% Bw demodulations: 61
% Condensations: 1001
% 
% Simple tautologies: 217
% Equational tautologies: 18
% Forward subsumptions: 7083
% 
% Binary resolution: 73
% Forward superposition: 4645
% Backward superposition: 3412
% Self superposition: 88
% Equality factoring: 32
% Equality resolution: 13
% 
% Split clauses: 18
% Split components: 41
% SAT solver clauses: 750
% SAT solver unit clauses: 59
% SAT solver binary clauses: 29
% 
% Sat splits: 18
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 750
% TWLsolver calls for satisfiability: 437
% 
% Memory used [KB]: 10618
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (109296)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 342
% Passive clauses: 4540
% Generated clauses: 84529
% Final active clauses: 82
% Final passive clauses: 692
% Input formulas: 18
% Initial clauses: 41
% Discarded non-redundant clauses: 1955
% 
% Duplicate literals: 5124
% Trivial inequalities: 729
% Fw subsumption resolutions: 7889
% Fw demodulations: 10307
% Bw demodulations: 2042
% Condensations: 10381
% Global subsumptions: 1429
% 
% Simple tautologies: 1060
% Equational tautologies: 431
% Forward subsumptions: 40671
% Fw demodulations to eq. taut.: 16
% Bw demodulations to eq. taut.: 114
% 
% Unit resulting resolution: 1889
% Forward superposition: 19392
% Backward superposition: 19784
% Self superposition: 483
% Equality factoring: 293
% Equality resolution: 80
% 
% Split clauses: 368
% Split components: 756
% SAT solver clauses: 8124
% SAT solver unit clauses: 160
% SAT solver binary clauses: 446
% 
% Sat splits: 368
% Sat splitting refutations: 1417
% 
% Memory used [KB]: 66395
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f3796,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f110,f117,f134,f118,f138,f119,f144,f120,f148,f239,f261,f320,f340,f341,f346,f345,f365,f370,f373,f376,f380,f372,f382,f364,f409,f413,f415,f417,f454,f458,f460,f462,f495,f498,f499,f501,f517,f520,f523,f526,f411,f546,f549,f552,f555,f575,f580,f583,f586,f606,f611,f614,f617,f620,f339,f338,f656,f661,f664,f667,f687,f692,f695,f698,f701,f720,f749,f752,f799,f804,f807,f810,f847,f870,f535,f529,f444,f438,f878,f877,f917,f920,f923,f926,f367,f933,f936,f956,f974,f995,f1000,f1003,f1006,f997,f1029,f1069,f1074,f1077,f1080,f1071,f1149,f1154,f1157,f1160,f1151,f1201,f1206,f1209,f1212,f1203,f1294,f1299,f1302,f1305,f1296,f1310,f1328,f1351,f530,f548,f536,f554,f456,f559,f579,f565,f585,f577,f590,f610,f596,f1366,f1364,f616,f608,f640,f660,f646,f1370,f1368,f666,f658,f671,f691,f677,f1374,f1372,f697,f689,f783,f803,f789,f1378,f1376,f809,f801,f953,f952,f1395,f1397,f1401,f1405,f1409,f1407,f1414,f935,f1424,f1461,f1362,f1360,f1462,f1479,f1524,f1526,f1528,f1628,f1650,f984,f976,f1654,f1444,f1537,f1451,f1660,f1533,f1661,f1663,f1665,f1667,f1669,f1671,f1675,f1677,f1434,f1425,f872,f1356,f281,f146,f280,f1426,f1435,f874,f1358,f1399,f1710,f1707,f142,f140,f1754,f279,f278,f1775,f1777,f1656,f1924,f1975,f2107,f2109,f2111,f2302,f2428,f2477,f2499,f1811,f1810,f130,f2504,f2503,f136,f2509,f348,f132,f2510,f2804,f128,f127,f3127,f3794])).
fof(f3794,plain,(
  $false | ($spl6 | $spl16)),
  inference(subsumption_resolution,[],[f3787,f92])).
fof(f92,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.source_to_modProof.match_result_rel_ind',aHL_FALSITY)).
fof(f3787,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl16)),
  inference(superposition,[],[f3752,f115])).
fof(f115,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))),
  inference(resolution,[],[f100,f87])).
fof(f87,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X18] : (s(bool,'F_0') = s(bool,X18) <=> ~p(s(bool,X18)))),
  file('thm.source_to_modProof.match_result_rel_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f100,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))),
  inference(forward_demodulation,[],[f70,f95])).
fof(f95,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X24,X19,X20] : ! [X25,X21,X26] : s(X24,happ(s(fun(X20,X24),happ(s(fun(X19,fun(X20,X24)),X25),s(X19,X21))),s(X20,X26))) = s(X24,'const.pair.UNCURRY_2'(s(fun(X19,fun(X20,X24)),X25),s('type.pair.prod'(X19,X20),'const.pair.,_2'(s(X19,X21),s(X20,X26)))))),
  file('thm.source_to_modProof.match_result_rel_ind','thm.pair.UNCURRY_DEF')).
fof(f70,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X25,X26,X27,X28] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28)))))) & ! [X23,X24] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X24))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X21,X22] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X18)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X5,X6,X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f48])).
fof(f48,plain,(
  ? [X0] : (! [X25,X26,X27,X28] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28)))))) & ! [X23,X24] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X24))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X21,X22] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X18)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X5,X6,X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ? [X1,X2,X3,X4] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4)))))),
  inference(rectify,[],[f42])).
fof(f42,plain,(
  ? [X0] : (! [X21,X22,X23,X24] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X18))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14)))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X3))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ? [X25,X26,X27,X28] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X27))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X28)))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ? [X0] : ((! [X21,X22,X23,X24] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X18))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14)))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X3))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) & ? [X25,X26,X27,X28] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X27))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X28)))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ((! [X21,X22,X23,X24] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X18))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14)))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X3))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X25,X26,X27,X28] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X27))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X28)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X8,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12)))))) & ! [X7,X8,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X17)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X8,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12)))))) & ! [X7,X8,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X8,X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X17)))))),
  file('thm.source_to_modProof.match_result_rel_ind','thm.source_to_modProof.match_result_rel_ind')).
fof(f3752,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))) ) | ($spl6 | $spl16)),
  inference(superposition,[],[f1722,f132])).
fof(f1722,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X2))))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))) ) | $spl16),
  inference(superposition,[],[f109,f142])).
fof(f109,plain,(
  ( ! [X28,X26,X27,X25] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))))) )),
  inference(forward_demodulation,[],[f61,f95])).
fof(f61,plain,(
  ( ! [X28,X26,X27,X25] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f3127,plain,(
  $false | ($spl15 | $spl48 | $spl90)),
  inference(subsumption_resolution,[],[f3108,f139])).
fof(f139,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl15),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f3108,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl48 | $spl90)),
  inference(backward_demodulation,[],[f1376,f689])).
fof(f127,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl0),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f128,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f2804,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) )),
  inference(subsumption_resolution,[],[f2774,f92])).
fof(f2774,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) )),
  inference(superposition,[],[f82,f115])).
fof(f82,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK31(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK31(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK31(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31])],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X19] : ! [X27] : (p(s(bool,'const.relation.WF_1'(s(fun(X19,fun(X19,bool)),X27)))) => ! [X6] : (! [X21] : (! [X26] : (p(s(bool,happ(s(fun(X19,bool),happ(s(fun(X19,fun(X19,bool)),X27),s(X19,X26))),s(X19,X21)))) => p(s(bool,happ(s(fun(X19,bool),X6),s(X19,X26))))) => p(s(bool,happ(s(fun(X19,bool),X6),s(X19,X21))))) => ! [X21] : p(s(bool,happ(s(fun(X19,bool),X6),s(X19,X21))))))),
  file('thm.source_to_modProof.match_result_rel_ind','thm.relation.WF_INDUCTION_THM')).
fof(f2510,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) )),
  inference(resolution,[],[f100,f82])).
fof(f132,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f348,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | $spl33),
  inference(cnf_transformation,[],[f348_D])).
fof(f348_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f2509,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl11),
  inference(subsumption_resolution,[],[f2506,f135])).
fof(f135,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl11),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f2506,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl11),
  inference(superposition,[],[f135,f71])).
fof(f71,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK6(X1,X0)))) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1)) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X19] : ! [X28] : (s('type.semanticPrimitives.match_result'(X19),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X19),X28) | s('type.semanticPrimitives.match_result'(X19),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X19),X28) | ? [X29] : s('type.semanticPrimitives.match_result'(X19),X28) = s('type.semanticPrimitives.match_result'(X19),'const.semanticPrimitives.Match_1'(s(X19,X29))))),
  file('thm.source_to_modProof.match_result_rel_ind','thm.semanticPrimitives.match_result_nchotomy')).
fof(f136,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl10),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2503,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(trivial_inequality_removal,[],[f2502])).
fof(f2502,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f129,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f2504,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f2501,f129])).
fof(f2501,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f130,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl4),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1810,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl102),
  inference(duplicate_literal_removal,[],[f1802])).
fof(f1802,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl102),
  inference(superposition,[],[f71,f1656])).
fof(f1811,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl102),
  inference(duplicate_literal_removal,[],[f1793])).
fof(f1793,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl102),
  inference(superposition,[],[f1656,f71])).
fof(f2499,plain,(
  $false | ($spl9 | $spl16)),
  inference(subsumption_resolution,[],[f134,f1723])).
fof(f1723,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))) ) | $spl16),
  inference(superposition,[],[f105,f142])).
fof(f105,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X18))))))) )),
  inference(forward_demodulation,[],[f65,f95])).
fof(f65,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X18))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f2477,plain,(
  $false | ($spl10 | $spl16)),
  inference(resolution,[],[f1723,f1711])).
fof(f1711,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | $spl10),
  inference(forward_demodulation,[],[f100,f136])).
fof(f2428,plain,(
  $false | ($spl15 | $spl46 | $spl86)),
  inference(subsumption_resolution,[],[f2409,f139])).
fof(f2409,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl46 | $spl86)),
  inference(backward_demodulation,[],[f1372,f658])).
fof(f2302,plain,(
  $false | ($spl15 | $spl44 | $spl82)),
  inference(subsumption_resolution,[],[f2283,f139])).
fof(f2283,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl44 | $spl82)),
  inference(backward_demodulation,[],[f1368,f608])).
fof(f2111,plain,(
  $false | ($spl75 | $spl78 | $spl97)),
  inference(subsumption_resolution,[],[f2110,f1406])).
fof(f1406,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl97),
  inference(cnf_transformation,[],[f1406_D])).
fof(f1406_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f2110,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl75 | $spl78)),
  inference(subsumption_resolution,[],[f2105,f1359])).
fof(f1359,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl75),
  inference(cnf_transformation,[],[f1359_D])).
fof(f1359_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f2105,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl78),
  inference(duplicate_literal_removal,[],[f2097])).
fof(f2097,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl78),
  inference(superposition,[],[f71,f1364])).
fof(f2109,plain,(
  $false | ($spl75 | $spl78 | $spl97)),
  inference(subsumption_resolution,[],[f2108,f1406])).
fof(f2108,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl75 | $spl78)),
  inference(subsumption_resolution,[],[f2106,f1359])).
fof(f2106,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl78),
  inference(duplicate_literal_removal,[],[f2089])).
fof(f2089,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl78),
  inference(superposition,[],[f1364,f71])).
fof(f2107,plain,(
  $false | ($spl15 | $spl42 | $spl78)),
  inference(subsumption_resolution,[],[f2088,f139])).
fof(f2088,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl42 | $spl78)),
  inference(backward_demodulation,[],[f1364,f577])).
fof(f1975,plain,(
  $false | ($spl21 | $spl38 | $spl96)),
  inference(subsumption_resolution,[],[f1956,f145])).
fof(f145,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f1956,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl38 | $spl96)),
  inference(backward_demodulation,[],[f1407,f456])).
fof(f1924,plain,(
  $false | ($spl10 | $spl19)),
  inference(subsumption_resolution,[],[f1923,f108])).
fof(f108,plain,(
  ( ! [X24,X23] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X24),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(forward_demodulation,[],[f62,f95])).
fof(f62,plain,(
  ( ! [X24,X23] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X24))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1923,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl10 | $spl19)),
  inference(forward_demodulation,[],[f144,f136])).
fof(f1656,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl102),
  inference(cnf_transformation,[],[f1656_D])).
fof(f1656_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f1777,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl106),
  inference(cnf_transformation,[],[f1777_D])).
fof(f1777_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f1775,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl7 | $spl10)),
  inference(trivial_inequality_removal,[],[f1773])).
fof(f1773,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl7 | $spl10)),
  inference(superposition,[],[f1719,f71])).
fof(f1719,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl7 | $spl10)),
  inference(forward_demodulation,[],[f131,f136])).
fof(f131,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl7),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f278,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl24),
  inference(cnf_transformation,[],[f278_D])).
fof(f278_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f279,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) | $spl26),
  inference(cnf_transformation,[],[f279_D])).
fof(f279_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1754,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl10),
  inference(resolution,[],[f1711,f82])).
fof(f140,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl14),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f142,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1707,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(trivial_inequality_removal,[],[f1705])).
fof(f1705,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(superposition,[],[f145,f71])).
fof(f1710,plain,(
  $false | ($spl10 | $spl14)),
  inference(subsumption_resolution,[],[f1709,f106])).
fof(f106,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(forward_demodulation,[],[f64,f95])).
fof(f64,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1709,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl10 | $spl14)),
  inference(forward_demodulation,[],[f1708,f136])).
fof(f1708,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl14),
  inference(forward_demodulation,[],[f100,f140])).
fof(f1399,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl94),
  inference(cnf_transformation,[],[f1399_D])).
fof(f1399_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f1358,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl72),
  inference(cnf_transformation,[],[f1358_D])).
fof(f1358_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f874,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl54),
  inference(cnf_transformation,[],[f874_D])).
fof(f874_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f1435,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f71,f935])).
fof(f1426,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f935,f71])).
fof(f280,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl9),
  inference(subsumption_resolution,[],[f270,f108])).
fof(f270,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl9),
  inference(superposition,[],[f134,f71])).
fof(f146,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl20),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f281,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl9),
  inference(subsumption_resolution,[],[f271,f106])).
fof(f271,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl9),
  inference(superposition,[],[f134,f71])).
fof(f1356,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl70),
  inference(cnf_transformation,[],[f1356_D])).
fof(f1356_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f872,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl52),
  inference(cnf_transformation,[],[f872_D])).
fof(f872_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f1425,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f935,f71])).
fof(f1434,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f71,f935])).
fof(f1677,plain,(
  $false | ($spl9 | $spl20)),
  inference(subsumption_resolution,[],[f1676,f108])).
fof(f1676,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl9 | $spl20)),
  inference(forward_demodulation,[],[f134,f146])).
fof(f1675,plain,(
  $false | ($spl9 | $spl17 | $spl20 | $spl41)),
  inference(subsumption_resolution,[],[f1674,f501])).
fof(f1674,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl9 | $spl17 | $spl20)),
  inference(forward_demodulation,[],[f1673,f146])).
fof(f1673,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl9 | $spl17 | $spl20)),
  inference(subsumption_resolution,[],[f1672,f1402])).
fof(f1402,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20)),
  inference(forward_demodulation,[],[f141,f146])).
fof(f141,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl17),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f1672,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl9 | $spl20)),
  inference(forward_demodulation,[],[f280,f146])).
fof(f1671,plain,(
  $false | ($spl14 | $spl20 | $spl41)),
  inference(subsumption_resolution,[],[f1670,f501])).
fof(f1670,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl20)),
  inference(forward_demodulation,[],[f140,f146])).
fof(f1669,plain,(
  $false | ($spl14 | $spl20 | $spl41 | $spl42)),
  inference(subsumption_resolution,[],[f1668,f501])).
fof(f1668,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl20 | $spl42)),
  inference(forward_demodulation,[],[f881,f1563])).
fof(f1563,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42)),
  inference(forward_demodulation,[],[f577,f146])).
fof(f881,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl42)),
  inference(backward_demodulation,[],[f140,f577])).
fof(f1667,plain,(
  $false | ($spl14 | $spl20 | $spl41 | $spl44)),
  inference(subsumption_resolution,[],[f1666,f501])).
fof(f1666,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl20 | $spl44)),
  inference(forward_demodulation,[],[f882,f1586])).
fof(f1586,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl44)),
  inference(forward_demodulation,[],[f608,f146])).
fof(f882,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl44)),
  inference(backward_demodulation,[],[f140,f608])).
fof(f1665,plain,(
  $false | ($spl14 | $spl20 | $spl41 | $spl46)),
  inference(subsumption_resolution,[],[f1664,f501])).
fof(f1664,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl20 | $spl46)),
  inference(forward_demodulation,[],[f883,f1607])).
fof(f1607,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl46)),
  inference(forward_demodulation,[],[f658,f146])).
fof(f883,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl46)),
  inference(backward_demodulation,[],[f140,f658])).
fof(f1663,plain,(
  $false | ($spl20 | $spl39 | $spl42 | $spl76)),
  inference(subsumption_resolution,[],[f1662,f1410])).
fof(f1410,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl39)),
  inference(forward_demodulation,[],[f455,f146])).
fof(f455,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl39),
  inference(cnf_transformation,[],[f455_D])).
fof(f455_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f1662,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42 | $spl76)),
  inference(forward_demodulation,[],[f1362,f1563])).
fof(f1661,plain,(
  $false | ($spl20 | $spl39 | $spl96)),
  inference(subsumption_resolution,[],[f1407,f1410])).
fof(f1533,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl56)),
  inference(subsumption_resolution,[],[f1435,f1403])).
fof(f1403,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37)),
  inference(forward_demodulation,[],[f410,f146])).
fof(f410,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl37),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f1660,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl104),
  inference(cnf_transformation,[],[f1660_D])).
fof(f1660_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f1451,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(forward_demodulation,[],[f1450,f935])).
fof(f1450,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(forward_demodulation,[],[f1449,f935])).
fof(f1449,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(subsumption_resolution,[],[f1434,f1402])).
fof(f1537,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl56)),
  inference(subsumption_resolution,[],[f1426,f1403])).
fof(f1444,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(forward_demodulation,[],[f1443,f935])).
fof(f1443,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(forward_demodulation,[],[f1442,f935])).
fof(f1442,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20 | $spl56)),
  inference(subsumption_resolution,[],[f1425,f1402])).
fof(f1654,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl100),
  inference(cnf_transformation,[],[f1654_D])).
fof(f1654_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f976,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f367,f71])).
fof(f984,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f71,f367])).
fof(f1650,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl20),
  inference(subsumption_resolution,[],[f1470,f104])).
fof(f104,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(forward_demodulation,[],[f66,f95])).
fof(f66,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1470,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl20),
  inference(superposition,[],[f1415,f71])).
fof(f1415,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | $spl20),
  inference(forward_demodulation,[],[f100,f146])).
fof(f1628,plain,(
  $false | ($spl6 | $spl20)),
  inference(resolution,[],[f902,f1415])).
fof(f902,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) ) | $spl6),
  inference(superposition,[],[f102,f132])).
fof(f102,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(forward_demodulation,[],[f68,f95])).
fof(f68,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1528,plain,(
  $false | ($spl17 | $spl20 | $spl37 | $spl55 | $spl74)),
  inference(subsumption_resolution,[],[f1527,f1402])).
fof(f1527,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl55 | $spl74)),
  inference(subsumption_resolution,[],[f1522,f873])).
fof(f873,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl55),
  inference(cnf_transformation,[],[f873_D])).
fof(f873_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f1522,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl74)),
  inference(duplicate_literal_removal,[],[f1514])).
fof(f1514,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl74)),
  inference(superposition,[],[f71,f1500])).
fof(f1500,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl74)),
  inference(subsumption_resolution,[],[f1499,f1403])).
fof(f1499,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl74),
  inference(duplicate_literal_removal,[],[f1481])).
fof(f1481,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl74),
  inference(superposition,[],[f1360,f71])).
fof(f1526,plain,(
  $false | ($spl17 | $spl20 | $spl37 | $spl55 | $spl74)),
  inference(subsumption_resolution,[],[f1525,f1402])).
fof(f1525,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl55 | $spl74)),
  inference(subsumption_resolution,[],[f1523,f873])).
fof(f1523,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl74)),
  inference(duplicate_literal_removal,[],[f1505])).
fof(f1505,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl74)),
  inference(superposition,[],[f1500,f71])).
fof(f1524,plain,(
  $false | ($spl20 | $spl37 | $spl55 | $spl56 | $spl74)),
  inference(subsumption_resolution,[],[f1504,f873])).
fof(f1504,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37 | $spl56 | $spl74)),
  inference(backward_demodulation,[],[f1500,f935])).
fof(f1479,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl98),
  inference(cnf_transformation,[],[f1479_D])).
fof(f1479_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f1462,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl20),
  inference(resolution,[],[f1415,f82])).
fof(f1360,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl74),
  inference(cnf_transformation,[],[f1360_D])).
fof(f1360_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f1362,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl76),
  inference(cnf_transformation,[],[f1362_D])).
fof(f1362_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f1461,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl39)),
  inference(trivial_inequality_removal,[],[f1459])).
fof(f1459,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl39)),
  inference(superposition,[],[f1410,f71])).
fof(f1424,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37)),
  inference(trivial_inequality_removal,[],[f1422])).
fof(f1422,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl37)),
  inference(superposition,[],[f1403,f71])).
fof(f935,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(cnf_transformation,[],[f935_D])).
fof(f935_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f1414,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20)),
  inference(trivial_inequality_removal,[],[f1412])).
fof(f1412,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl17 | $spl20)),
  inference(superposition,[],[f1402,f71])).
fof(f1407,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl96),
  inference(cnf_transformation,[],[f1407_D])).
fof(f1407_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f1409,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42)),
  inference(duplicate_literal_removal,[],[f1408])).
fof(f1408,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42)),
  inference(forward_demodulation,[],[f589,f146])).
fof(f589,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f577,f71])).
fof(f1405,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42)),
  inference(duplicate_literal_removal,[],[f1404])).
fof(f1404,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl42)),
  inference(forward_demodulation,[],[f595,f146])).
fof(f595,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f71,f577])).
fof(f1401,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl38)),
  inference(duplicate_literal_removal,[],[f1400])).
fof(f1400,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f558,f146])).
fof(f558,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f456,f71])).
fof(f1397,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl38)),
  inference(duplicate_literal_removal,[],[f1396])).
fof(f1396,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f564,f146])).
fof(f564,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f71,f456])).
fof(f1395,plain,(
  $false | ($spl17 | $spl20 | $spl52)),
  inference(subsumption_resolution,[],[f1354,f146])).
fof(f1354,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl17 | $spl52)),
  inference(forward_demodulation,[],[f141,f872])).
fof(f952,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl52),
  inference(duplicate_literal_removal,[],[f944])).
fof(f944,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl52),
  inference(superposition,[],[f71,f872])).
fof(f953,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl52),
  inference(duplicate_literal_removal,[],[f938])).
fof(f938,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl52),
  inference(superposition,[],[f872,f71])).
fof(f801,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl50),
  inference(cnf_transformation,[],[f801_D])).
fof(f801_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f809,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl48),
  inference(forward_demodulation,[],[f808,f689])).
fof(f808,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(forward_demodulation,[],[f790,f689])).
fof(f790,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(superposition,[],[f71,f689])).
fof(f1376,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl90),
  inference(cnf_transformation,[],[f1376_D])).
fof(f1376_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f1378,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl92),
  inference(cnf_transformation,[],[f1378_D])).
fof(f1378_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f789,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(superposition,[],[f71,f689])).
fof(f803,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl48),
  inference(forward_demodulation,[],[f802,f689])).
fof(f802,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(forward_demodulation,[],[f784,f689])).
fof(f784,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(superposition,[],[f689,f71])).
fof(f783,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(superposition,[],[f689,f71])).
fof(f689,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl48),
  inference(cnf_transformation,[],[f689_D])).
fof(f689_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f697,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl46),
  inference(forward_demodulation,[],[f696,f658])).
fof(f696,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(forward_demodulation,[],[f678,f658])).
fof(f678,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(superposition,[],[f71,f658])).
fof(f1372,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl86),
  inference(cnf_transformation,[],[f1372_D])).
fof(f1372_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f1374,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl88),
  inference(cnf_transformation,[],[f1374_D])).
fof(f1374_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f677,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(superposition,[],[f71,f658])).
fof(f691,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl46),
  inference(forward_demodulation,[],[f690,f658])).
fof(f690,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(forward_demodulation,[],[f672,f658])).
fof(f672,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(superposition,[],[f658,f71])).
fof(f671,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(superposition,[],[f658,f71])).
fof(f658,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl46),
  inference(cnf_transformation,[],[f658_D])).
fof(f658_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f666,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl44),
  inference(forward_demodulation,[],[f665,f608])).
fof(f665,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(forward_demodulation,[],[f647,f608])).
fof(f647,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(superposition,[],[f71,f608])).
fof(f1368,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl82),
  inference(cnf_transformation,[],[f1368_D])).
fof(f1368_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f1370,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl84),
  inference(cnf_transformation,[],[f1370_D])).
fof(f1370_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f646,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(superposition,[],[f71,f608])).
fof(f660,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl44),
  inference(forward_demodulation,[],[f659,f608])).
fof(f659,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(forward_demodulation,[],[f641,f608])).
fof(f641,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(superposition,[],[f608,f71])).
fof(f640,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(superposition,[],[f608,f71])).
fof(f608,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl44),
  inference(cnf_transformation,[],[f608_D])).
fof(f608_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f616,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl42),
  inference(forward_demodulation,[],[f615,f577])).
fof(f615,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(forward_demodulation,[],[f597,f577])).
fof(f597,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f71,f577])).
fof(f1364,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl78),
  inference(cnf_transformation,[],[f1364_D])).
fof(f1364_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f1366,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl80),
  inference(cnf_transformation,[],[f1366_D])).
fof(f1366_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f596,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f71,f577])).
fof(f610,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl42),
  inference(forward_demodulation,[],[f609,f577])).
fof(f609,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(forward_demodulation,[],[f591,f577])).
fof(f591,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f577,f71])).
fof(f590,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(superposition,[],[f577,f71])).
fof(f577,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl42),
  inference(cnf_transformation,[],[f577_D])).
fof(f577_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f585,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl38),
  inference(forward_demodulation,[],[f584,f456])).
fof(f584,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(forward_demodulation,[],[f566,f456])).
fof(f566,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f71,f456])).
fof(f565,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f71,f456])).
fof(f579,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl38),
  inference(forward_demodulation,[],[f578,f456])).
fof(f578,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(forward_demodulation,[],[f560,f456])).
fof(f560,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f456,f71])).
fof(f559,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(superposition,[],[f456,f71])).
fof(f456,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl38),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f554,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f553,f411])).
fof(f553,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f537,f411])).
fof(f537,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f536,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f548,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f547,f411])).
fof(f547,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f531,f411])).
fof(f531,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f530,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f1351,plain,(
  $false | ($spl6 | $spl23)),
  inference(subsumption_resolution,[],[f148,f351])).
fof(f351,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) ) | $spl6),
  inference(superposition,[],[f101,f132])).
fof(f101,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(forward_demodulation,[],[f69,f95])).
fof(f69,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1328,plain,(
  $false | ($spl6 | $spl14)),
  inference(resolution,[],[f351,f899])).
fof(f899,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl14),
  inference(forward_demodulation,[],[f100,f140])).
fof(f1310,plain,(
  $false | ($spl13 | $spl14)),
  inference(subsumption_resolution,[],[f1309,f107])).
fof(f107,plain,(
  ( ! [X21,X22] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(forward_demodulation,[],[f63,f95])).
fof(f63,plain,(
  ( ! [X21,X22] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X22))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1309,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl13 | $spl14)),
  inference(forward_demodulation,[],[f138,f140])).
fof(f1296,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl68),
  inference(cnf_transformation,[],[f1296_D])).
fof(f1296_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f1305,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(forward_demodulation,[],[f1304,f1203])).
fof(f1304,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(forward_demodulation,[],[f1303,f1203])).
fof(f1303,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f1285,f129])).
fof(f1285,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(superposition,[],[f71,f1203])).
fof(f1302,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f1301,f129])).
fof(f1301,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl66),
  inference(forward_demodulation,[],[f1300,f1203])).
fof(f1300,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(forward_demodulation,[],[f1284,f1203])).
fof(f1284,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(superposition,[],[f71,f1203])).
fof(f1299,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(forward_demodulation,[],[f1298,f1203])).
fof(f1298,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(forward_demodulation,[],[f1297,f1203])).
fof(f1297,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f1276,f129])).
fof(f1276,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(superposition,[],[f1203,f71])).
fof(f1294,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl66)),
  inference(subsumption_resolution,[],[f1293,f129])).
fof(f1293,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl66),
  inference(forward_demodulation,[],[f1292,f1203])).
fof(f1292,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(forward_demodulation,[],[f1275,f1203])).
fof(f1275,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(superposition,[],[f1203,f71])).
fof(f1203,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl66),
  inference(cnf_transformation,[],[f1203_D])).
fof(f1203_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f1212,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(forward_demodulation,[],[f1211,f1151])).
fof(f1211,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(forward_demodulation,[],[f1210,f1151])).
fof(f1210,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(subsumption_resolution,[],[f1192,f129])).
fof(f1192,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(superposition,[],[f71,f1151])).
fof(f1209,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl64)),
  inference(subsumption_resolution,[],[f1208,f129])).
fof(f1208,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl64),
  inference(forward_demodulation,[],[f1207,f1151])).
fof(f1207,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(forward_demodulation,[],[f1191,f1151])).
fof(f1191,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(superposition,[],[f71,f1151])).
fof(f1206,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(forward_demodulation,[],[f1205,f1151])).
fof(f1205,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(forward_demodulation,[],[f1204,f1151])).
fof(f1204,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl64)),
  inference(subsumption_resolution,[],[f1184,f129])).
fof(f1184,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(superposition,[],[f1151,f71])).
fof(f1201,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl64)),
  inference(subsumption_resolution,[],[f1200,f129])).
fof(f1200,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl64),
  inference(forward_demodulation,[],[f1199,f1151])).
fof(f1199,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(forward_demodulation,[],[f1183,f1151])).
fof(f1183,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(superposition,[],[f1151,f71])).
fof(f1151,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl64),
  inference(cnf_transformation,[],[f1151_D])).
fof(f1151_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1160,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(forward_demodulation,[],[f1159,f1071])).
fof(f1159,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(forward_demodulation,[],[f1158,f1071])).
fof(f1158,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(subsumption_resolution,[],[f1140,f129])).
fof(f1140,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(superposition,[],[f71,f1071])).
fof(f1157,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl62)),
  inference(subsumption_resolution,[],[f1156,f129])).
fof(f1156,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl62),
  inference(forward_demodulation,[],[f1155,f1071])).
fof(f1155,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(forward_demodulation,[],[f1139,f1071])).
fof(f1139,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(superposition,[],[f71,f1071])).
fof(f1154,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(forward_demodulation,[],[f1153,f1071])).
fof(f1153,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(forward_demodulation,[],[f1152,f1071])).
fof(f1152,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl62)),
  inference(subsumption_resolution,[],[f1132,f129])).
fof(f1132,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(superposition,[],[f1071,f71])).
fof(f1149,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl62)),
  inference(subsumption_resolution,[],[f1148,f129])).
fof(f1148,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl62),
  inference(forward_demodulation,[],[f1147,f1071])).
fof(f1147,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(forward_demodulation,[],[f1131,f1071])).
fof(f1131,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(superposition,[],[f1071,f71])).
fof(f1071,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl62),
  inference(cnf_transformation,[],[f1071_D])).
fof(f1071_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f1080,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1079,f997])).
fof(f1079,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1078,f997])).
fof(f1078,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1060,f129])).
fof(f1060,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(superposition,[],[f71,f997])).
fof(f1077,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1076,f129])).
fof(f1076,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl60),
  inference(forward_demodulation,[],[f1075,f997])).
fof(f1075,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(forward_demodulation,[],[f1059,f997])).
fof(f1059,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(superposition,[],[f71,f997])).
fof(f1074,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1073,f997])).
fof(f1073,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1072,f997])).
fof(f1072,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1052,f129])).
fof(f1052,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(superposition,[],[f997,f71])).
fof(f1069,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1068,f129])).
fof(f1068,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl60),
  inference(forward_demodulation,[],[f1067,f997])).
fof(f1067,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(forward_demodulation,[],[f1051,f997])).
fof(f1051,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(superposition,[],[f997,f71])).
fof(f1029,plain,(
  $false | ($spl14 | $spl36 | $spl41 | $spl52 | $spl56)),
  inference(subsumption_resolution,[],[f1028,f501])).
fof(f1028,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl36 | $spl52 | $spl56)),
  inference(forward_demodulation,[],[f1027,f872])).
fof(f1027,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl36 | $spl56)),
  inference(forward_demodulation,[],[f935,f879])).
fof(f879,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl36)),
  inference(backward_demodulation,[],[f140,f411])).
fof(f997,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl60),
  inference(cnf_transformation,[],[f997_D])).
fof(f997_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f1006,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f1005,f367])).
fof(f1005,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f1004,f367])).
fof(f1004,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f986,f129])).
fof(f986,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f71,f367])).
fof(f1003,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f1002,f129])).
fof(f1002,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl34),
  inference(forward_demodulation,[],[f1001,f367])).
fof(f1001,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(forward_demodulation,[],[f985,f367])).
fof(f985,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f71,f367])).
fof(f1000,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f999,f367])).
fof(f999,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f998,f367])).
fof(f998,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f978,f129])).
fof(f978,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f367,f71])).
fof(f995,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f994,f129])).
fof(f994,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl34),
  inference(forward_demodulation,[],[f993,f367])).
fof(f993,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(forward_demodulation,[],[f977,f367])).
fof(f977,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(superposition,[],[f367,f71])).
fof(f974,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl58),
  inference(cnf_transformation,[],[f974_D])).
fof(f974_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f956,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl14),
  inference(resolution,[],[f899,f82])).
fof(f936,plain,(
  $false | ($spl14 | $spl17 | $spl54)),
  inference(subsumption_resolution,[],[f874,f929])).
fof(f929,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl17)),
  inference(forward_demodulation,[],[f141,f140])).
fof(f933,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl17)),
  inference(trivial_inequality_removal,[],[f932])).
fof(f932,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl14 | $spl17)),
  inference(superposition,[],[f929,f71])).
fof(f367,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl34),
  inference(cnf_transformation,[],[f367_D])).
fof(f367_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f926,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f925,f132])).
fof(f925,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f924,f132])).
fof(f924,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f908,f129])).
fof(f908,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f71,f132])).
fof(f923,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f922,f129])).
fof(f922,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f921,f132])).
fof(f921,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f907,f132])).
fof(f907,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f71,f132])).
fof(f920,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f919,f132])).
fof(f919,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f918,f132])).
fof(f918,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f901,f129])).
fof(f901,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f132,f71])).
fof(f917,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f916,f129])).
fof(f916,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f915,f132])).
fof(f915,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f900,f132])).
fof(f900,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f132,f71])).
fof(f877,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(trivial_inequality_removal,[],[f876])).
fof(f876,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f878,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f875,f129])).
fof(f875,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f438,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f444,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f529,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f535,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f870,plain,(
  $false | ($spl13 | $spl16)),
  inference(subsumption_resolution,[],[f138,f830])).
fof(f830,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))))) ) | $spl16),
  inference(superposition,[],[f103,f142])).
fof(f103,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))))))) )),
  inference(forward_demodulation,[],[f67,f95])).
fof(f67,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f847,plain,(
  $false | ($spl4 | $spl16)),
  inference(resolution,[],[f830,f394])).
fof(f394,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | $spl4),
  inference(forward_demodulation,[],[f100,f130])).
fof(f810,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl48)),
  inference(subsumption_resolution,[],[f809,f145])).
fof(f807,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(forward_demodulation,[],[f806,f689])).
fof(f806,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(forward_demodulation,[],[f805,f689])).
fof(f805,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(subsumption_resolution,[],[f789,f145])).
fof(f804,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl48)),
  inference(subsumption_resolution,[],[f803,f145])).
fof(f799,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(forward_demodulation,[],[f798,f689])).
fof(f798,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(forward_demodulation,[],[f797,f689])).
fof(f797,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl48)),
  inference(subsumption_resolution,[],[f783,f145])).
fof(f752,plain,(
  $false | ($spl4 | $spl30)),
  inference(resolution,[],[f339,f394])).
fof(f749,plain,(
  $false | ($spl4 | $spl23)),
  inference(subsumption_resolution,[],[f748,f107])).
fof(f748,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl4 | $spl23)),
  inference(forward_demodulation,[],[f148,f130])).
fof(f720,plain,(
  $false | ($spl4 | $spl19)),
  inference(subsumption_resolution,[],[f719,f104])).
fof(f719,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl4 | $spl19)),
  inference(forward_demodulation,[],[f144,f130])).
fof(f701,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl9),
  inference(resolution,[],[f134,f82])).
fof(f698,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl46)),
  inference(subsumption_resolution,[],[f697,f145])).
fof(f695,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(forward_demodulation,[],[f694,f658])).
fof(f694,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(forward_demodulation,[],[f693,f658])).
fof(f693,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(subsumption_resolution,[],[f677,f145])).
fof(f692,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl46)),
  inference(subsumption_resolution,[],[f691,f145])).
fof(f687,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(forward_demodulation,[],[f686,f658])).
fof(f686,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(forward_demodulation,[],[f685,f658])).
fof(f685,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl46)),
  inference(subsumption_resolution,[],[f671,f145])).
fof(f667,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f666,f145])).
fof(f664,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f663,f608])).
fof(f663,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f662,f608])).
fof(f662,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f646,f145])).
fof(f661,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f660,f145])).
fof(f656,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f655,f608])).
fof(f655,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f654,f608])).
fof(f654,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f640,f145])).
fof(f338,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl28),
  inference(cnf_transformation,[],[f338_D])).
fof(f338_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f339,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) | $spl30),
  inference(cnf_transformation,[],[f339_D])).
fof(f339_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f620,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl4),
  inference(resolution,[],[f394,f82])).
fof(f617,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f616,f145])).
fof(f614,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f613,f577])).
fof(f613,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f612,f577])).
fof(f612,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f596,f145])).
fof(f611,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f610,f145])).
fof(f606,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f605,f577])).
fof(f605,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f604,f577])).
fof(f604,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f590,f145])).
fof(f586,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f585,f145])).
fof(f583,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f582,f456])).
fof(f582,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f581,f456])).
fof(f581,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f565,f145])).
fof(f580,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f579,f145])).
fof(f575,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f574,f456])).
fof(f574,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f573,f456])).
fof(f573,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f559,f145])).
fof(f555,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f554,f145])).
fof(f552,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f551,f411])).
fof(f551,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f550,f411])).
fof(f550,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f536,f145])).
fof(f549,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f548,f145])).
fof(f546,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f545,f411])).
fof(f545,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f544,f411])).
fof(f544,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f530,f145])).
fof(f411,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f526,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f525,f145])).
fof(f525,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f524,f142])).
fof(f524,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f508,f142])).
fof(f508,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f142])).
fof(f523,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f522,f142])).
fof(f522,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f521,f142])).
fof(f521,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f507,f145])).
fof(f507,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f142])).
fof(f520,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f519,f145])).
fof(f519,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f518,f142])).
fof(f518,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f503,f142])).
fof(f503,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f142,f71])).
fof(f517,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f516,f142])).
fof(f516,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f515,f142])).
fof(f515,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f502,f145])).
fof(f502,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f142,f71])).
fof(f501,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | $spl41),
  inference(cnf_transformation,[],[f501_D])).
fof(f501_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f499,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl21),
  inference(subsumption_resolution,[],[f497,f145])).
fof(f497,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(superposition,[],[f145,f71])).
fof(f498,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(trivial_inequality_removal,[],[f496])).
fof(f496,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl21),
  inference(superposition,[],[f145,f71])).
fof(f495,plain,(
  $false | ($spl4 | $spl20)),
  inference(subsumption_resolution,[],[f494,f104])).
fof(f494,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl4 | $spl20)),
  inference(forward_demodulation,[],[f394,f146])).
fof(f462,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f461,f411])).
fof(f461,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f446,f411])).
fof(f446,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f460,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f459,f411])).
fof(f459,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f445,f411])).
fof(f445,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f411])).
fof(f458,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f457,f411])).
fof(f457,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f440,f411])).
fof(f440,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f454,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl36),
  inference(forward_demodulation,[],[f453,f411])).
fof(f453,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f439,f411])).
fof(f439,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl36),
  inference(superposition,[],[f411,f71])).
fof(f417,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f416,f142])).
fof(f416,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f401,f142])).
fof(f401,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f142])).
fof(f415,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f414,f142])).
fof(f414,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f400,f142])).
fof(f400,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f142])).
fof(f413,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f412,f142])).
fof(f412,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f396,f142])).
fof(f396,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f142,f71])).
fof(f409,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl16),
  inference(forward_demodulation,[],[f408,f142])).
fof(f408,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f395,f142])).
fof(f395,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl16),
  inference(superposition,[],[f142,f71])).
fof(f364,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f363,f132])).
fof(f363,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f349,f132])).
fof(f349,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f132,f71])).
fof(f382,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f381,f132])).
fof(f381,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f350,f132])).
fof(f350,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f132,f71])).
fof(f372,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f371,f132])).
fof(f371,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f355,f132])).
fof(f355,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f71,f132])).
fof(f380,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl6),
  inference(forward_demodulation,[],[f379,f132])).
fof(f379,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(forward_demodulation,[],[f356,f132])).
fof(f356,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl6),
  inference(superposition,[],[f71,f132])).
fof(f376,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f375,f132])).
fof(f375,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f374,f132])).
fof(f374,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f356,f129])).
fof(f373,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f372,f129])).
fof(f370,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f369,f132])).
fof(f369,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f368,f132])).
fof(f368,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f350,f129])).
fof(f365,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f364,f129])).
fof(f345,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(trivial_inequality_removal,[],[f344])).
fof(f344,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f346,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f343,f129])).
fof(f343,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) | $spl5),
  inference(superposition,[],[f129,f71])).
fof(f341,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl4),
  inference(subsumption_resolution,[],[f331,f107])).
fof(f331,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl4),
  inference(superposition,[],[f309,f71])).
fof(f309,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | $spl4),
  inference(backward_demodulation,[],[f130,f100])).
fof(f340,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl4),
  inference(subsumption_resolution,[],[f330,f104])).
fof(f330,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) | $spl4),
  inference(superposition,[],[f309,f71])).
fof(f320,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl4),
  inference(resolution,[],[f309,f82])).
fof(f261,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0')))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) ) | $spl9),
  inference(resolution,[],[f134,f82])).
fof(f239,plain,(
  $false | $spl2),
  inference(resolution,[],[f128,f100])).
fof(f148,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl23),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f120,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)),
  inference(superposition,[],[f100,f71])).
fof(f144,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | $spl19),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f119,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK6(sK5,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)),
  inference(superposition,[],[f100,f71])).
fof(f138,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | $spl13),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f118,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)),
  inference(superposition,[],[f100,f71])).
fof(f134,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | $spl9),
  inference(cnf_transformation,[],[f134_D])).
fof(f134_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f117,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.No_match_0'))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK6(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)),
  inference(superposition,[],[f100,f71])).
fof(f110,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),'const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK31('const.pair.UNCURRY_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)))),sK1),s('type.list.list'('type.option.option'('type.modSem.v')),sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK3),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),sK4)))),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),bool)),X1))))) )),
  inference(resolution,[],[f100,f82])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 173
% Passive clauses: 715
% Generated clauses: 3914
% Final active clauses: 79
% Final passive clauses: 201
% Input formulas: 18
% Initial clauses: 39
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Duplicate literals: 57
% Trivial inequalities: 57
% Fw subsumption resolutions: 397
% Fw demodulations: 669
% Bw demodulations: 39
% 
% Simple tautologies: 24
% Forward subsumptions: 1903
% 
% Binary resolution: 167
% Forward superposition: 951
% Backward superposition: 1230
% 
% Split clauses: 152
% Split components: 354
% SAT solver clauses: 190
% SAT solver unit clauses: 1
% SAT solver binary clauses: 19
% 
% Sat splits: 152
% Sat splitting refutations: 37
% 
% Memory used [KB]: 4221
% Time elapsed: 0.188 s
% ------------------------------
% ------------------------------
% Success in time 11.966 s
